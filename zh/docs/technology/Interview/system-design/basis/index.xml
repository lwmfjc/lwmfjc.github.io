<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/index.xml" rel="self" type="application/rss+xml"/><item><title>RestFul API 简明教程</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/RESTfulAPI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/RESTfulAPI/</guid><description>&lt;p>&lt;img src="https://oss.javaguide.cn/system-design/basis/2021050713553862.png" alt="" />&lt;/p>
&lt;p>这篇文章简单聊聊后端程序员必备的 RESTful API 相关的知识。&lt;/p>
&lt;p>开始正式介绍 RESTful API 之前，我们需要首先搞清：&lt;mark>API 到底是什么？&lt;/mark>&lt;/p>
&lt;h2 id="何为-api">
 何为 API？
 &lt;a class="anchor" href="#%e4%bd%95%e4%b8%ba-api">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://oss.javaguide.cn/system-design/basis/20210507153833945.png" alt="" />&lt;/p>
&lt;p>&lt;mark>API（Application Programming Interface）&lt;/mark> 翻译过来是应用程序编程接口的意思。&lt;/p>
&lt;p>我们在进行后端开发的时候，主要的工作就是为前端或者其他后端服务提供 API 比如查询用户数据的 API 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/system-design/basis/20210507130629538.png" alt="" />&lt;/p>
&lt;p>但是， API 不仅仅代表后端系统暴露的接口，像框架中提供的方法也属于 API 的范畴。&lt;/p>
&lt;p>为了方便大家理解，我再列举几个例子 🌰：&lt;/p>
&lt;ol>
&lt;li>你通过某电商网站搜索某某商品，电商网站的前端就调用了后端提供了搜索商品相关的 API。&lt;/li>
&lt;li>你使用 JDK 开发 Java 程序，想要读取用户的输入的话，你就需要使用 JDK 提供的 IO 相关的 API。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;p>你可以把 API 理解为程序与程序之间通信的桥梁，其本质就是一个函数而已。另外，API 的使用也不是没有章法的，它的规则由（比如数据输入和输出的格式）API 提供方制定。&lt;/p>
&lt;h2 id="何为-restful-api">
 何为 RESTful API？
 &lt;a class="anchor" href="#%e4%bd%95%e4%b8%ba-restful-api">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>RESTful API&lt;/mark> 经常也被叫做 &lt;mark>REST API&lt;/mark>，它是基于 REST 构建的 API。这个 REST 到底是什么，我们后文在讲，涉及到的概念比较多。&lt;/p>
&lt;p>如果你看 RESTful API 相关的文章的话一般都比较晦涩难懂，主要是因为 REST 涉及到的一些概念比较难以理解。但是，实际上，我们平时开发用到的 RESTful API 的知识非常简单也很容易概括！&lt;/p></description></item><item><title>代码命名指南</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/naming/</guid><description>&lt;p>我还记得我刚工作那一段时间， 项目 Code Review 的时候，我经常因为变量命名不规范而被 “diss”!&lt;/p>
&lt;p>究其原因还是自己那会经验不足，而且，大学那会写项目的时候不太注意这些问题，想着只要把功能实现出来就行了。&lt;/p>
&lt;p>但是，工作中就不一样，为了代码的可读性、可维护性，项目组对于代码质量的要求还是很高的！&lt;/p>
&lt;p>前段时间，项目组新来的一个实习生也经常在 Code Review 因为变量命名不规范而被 “diss”，这让我想到自己刚到公司写代码那会的日子。&lt;/p>
&lt;p>于是，我就简单写了这篇关于变量命名规范的文章，希望能对同样有此困扰的小伙伴提供一些帮助。&lt;/p>
&lt;p>确实，编程过程中，有太多太多让我们头疼的事情了，比如命名、维护其他人的代码、写测试、与其他人沟通交流等等。&lt;/p>
&lt;p>据说之前在 Quora 网站，由接近 5000 名程序员票选出来的最难的事情就是“命名”。&lt;/p>
&lt;p>大名鼎鼎的《重构》的作者老马（Martin Fowler）曾经在
&lt;a target="_blank" href="https://martinfowler.com/bliki/TwoHardThings.html">TwoHardThings&lt;/a>这篇文章中提到过 CS 领域有两大最难的事情：一是 &lt;mark>缓存失效&lt;/mark> ，一是 &lt;mark>程序命名&lt;/mark> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/java-guide-blog/marting-naming.png" alt="" />&lt;/p>
&lt;p>这个句话实际上也是老马引用别人的，类似的表达还有很多。比如分布式系统领域有两大最难的事情：一是 &lt;mark>保证消息顺序&lt;/mark> ，一是 &lt;mark>严格一次传递&lt;/mark> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/java-guide-blog/20210629104844645.png" alt="" />&lt;/p>
&lt;p>今天咱们就单独拎出 “&lt;mark>命名&lt;/mark>” 来聊聊！&lt;/p>
&lt;p>这篇文章配合我之前发的 
&lt;a target="_blank" href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247486449&amp;amp;idx=1&amp;amp;sn=c3b502529ff991c7180281bcc22877af&amp;amp;chksm=cea2443af9d5cd2c1c87049ed15ccf6f88275419c7dbe542406166a703b27d0f3ecf2af901f8&amp;amp;token=999884676&amp;amp;lang=zh_CN#rd">《编码 5 分钟，命名 2 小时？史上最全的 Java 命名规范参考！》&lt;/a> 这篇文章阅读效果更佳哦！&lt;/p>
&lt;h2 id="为什么需要重视命名">
 为什么需要重视命名？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e9%87%8d%e8%a7%86%e5%91%bd%e5%90%8d">#&lt;/a>
&lt;/h2>
&lt;p>咱们需要先搞懂为什么要重视编程中的命名这一行为，它对于我们的编码工作有着什么意义。&lt;/p>
&lt;p>&lt;mark>为什么命名很重要呢？&lt;/mark> 这是因为 &lt;mark>好的命名即是注释，别人一看到你的命名就知道你的变量、方法或者类是做什么的！&lt;/mark>&lt;/p>
&lt;p>简单来说就是 &lt;mark>别人根据你的命名就能知道你的代码要表达的意思&lt;/mark> （不过，前提这个人也要有基本的英语知识，对于一些编程中常见的单词比较熟悉）。&lt;/p>
&lt;p>简单举个例子说明一下命名的重要性。&lt;/p>
&lt;p>《Clean Code》这本书明确指出：&lt;/p>
&lt;blockquote>
&lt;p>&lt;mark>好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。&lt;/mark>&lt;/p>
&lt;p>&lt;mark>若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。&lt;/mark>&lt;/p>
&lt;p>举个例子：&lt;/p>
&lt;p>去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// check to see if the employee is eligible for full benefits&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ((employee.&lt;span style="color:#a6e22e">flags&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span> HOURLY_FLAG) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (employee.&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> 65))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应替换为&lt;/p></description></item><item><title>代码重构指南</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/refactoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/refactoring/</guid><description>&lt;p>前段时间重读了
&lt;a target="_blank" href="https://book.douban.com/subject/30468597/">《重构：改善代码既有设计》&lt;/a>，收货颇多。于是，简单写了一篇文章来聊聊我对重构的看法。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/image-20220311155746549.png" alt="" />&lt;/p>
&lt;h2 id="何谓重构">
 何谓重构？
 &lt;a class="anchor" href="#%e4%bd%95%e8%b0%93%e9%87%8d%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>学习重构必看的一本神书《重构：改善代码既有设计》从两个角度给出了重构的定义：&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。&lt;/li>
&lt;li>重构（动词）：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>用更贴近工程师的语言来说：&lt;mark>重构就是利用设计模式(如组合模式、策略模式、责任链模式)、软件设计原则（如 SOLID 原则、YAGNI 原则、KISS 原则）和重构手段（如封装、继承、构建测试体系）来让代码更容易理解，更易于修改。&lt;/mark>&lt;/p>
&lt;p>软件设计原则指导着我们组织和规范代码，同时，重构也是为了能够尽量设计出尽量满足软件设计原则的软件。&lt;/p>
&lt;p>正确重构的核心在于 &lt;mark>步子一定要小，每一步的重构都不会影响软件的正常运行，可以随时停止重构。&lt;/mark>&lt;/p>
&lt;p>&lt;mark>常见的设计模式如下&lt;/mark>：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/basis/common-design-patterns.png" alt="常见的设计模式" />&lt;/p>
&lt;p>更全面的设计模式总结，可以看 &lt;mark>
&lt;a target="_blank" href="https://github.com/iluwatar/java-design-patterns">java-design-patterns&lt;/a>&lt;/mark> 这个开源项目。&lt;/p>
&lt;p>&lt;mark>常见的软件设计原则如下&lt;/mark>：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/basis/programming-principles.png" alt="常见的软件设计原则" />&lt;/p>
&lt;p>更全面的设计原则总结，可以看 &lt;mark>
&lt;a target="_blank" href="https://github.com/iluwatar/java-design-patterns">java-design-patterns&lt;/a>&lt;/mark> 和 &lt;mark>
&lt;a target="_blank" href="https://github.com/nusr/hacker-laws-zh">hacker-laws-zh&lt;/a>&lt;/mark> 这两个开源项目。&lt;/p>
&lt;h2 id="为什么要重构">
 为什么要重构？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e9%87%8d%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>在上面介绍重构定义的时候，我从比较抽象的角度介绍了重构的好处：重构的主要目的主要是提升代码&amp;amp;架构的灵活性/可扩展性以及复用性。&lt;/p>
&lt;p>如果对应到一个真实的项目，重构具体能为我们带来什么好处呢？&lt;/p>
&lt;ol>
&lt;li>&lt;mark>让代码更容易理解&lt;/mark>：通过添加注释、命名规范、逻辑优化等手段可以让我们的代码更容易被理解；&lt;/li>
&lt;li>&lt;mark>避免代码腐化&lt;/mark>：通过重构干掉坏味道代码；&lt;/li>
&lt;li>&lt;mark>加深对代码的理解&lt;/mark>：重构代码的过程会加深你对某部分代码的理解；&lt;/li>
&lt;li>&lt;mark>发现潜在 bug&lt;/mark>：是这样的，很多潜在的 bug ，都是我们在重构的过程中发现的；&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;p>看了上面介绍的关于重构带来的好处之后，你会发现重构的最终目标是 &lt;mark>提高软件开发速度和质量&lt;/mark> 。&lt;/p>
&lt;p>重构并不会减慢软件开发速度，相反，如果代码质量和软件设计较差，当我们想要添加新功能的话，开发速度会越来越慢。到了最后，甚至都有想要重写整个系统的冲动。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/bad&amp;amp;good-design.png" alt="" />&lt;/p>
&lt;p>《重构：改善代码既有设计》这本书中这样说：&lt;/p>
&lt;blockquote>
&lt;p>重构的唯一目的就是让我们开发更快，用更少的工作量创造更大的价值。&lt;/p>
&lt;/blockquote>
&lt;h2 id="性能优化就是重构吗">
 性能优化就是重构吗？
 &lt;a class="anchor" href="#%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96%e5%b0%b1%e6%98%af%e9%87%8d%e6%9e%84%e5%90%97">#&lt;/a>
&lt;/h2>
&lt;p>重构的目的是提高代码的可读性、可维护性和灵活性，它关注的是代码的内部结构——如何让开发者更容易理解代码，如何让后续的功能开发和维护更加高效。而性能优化则是为了让代码运行得更快、占用更少的资源，它关注的是程序的外部表现——如何减少响应时间、降低资源消耗、提升系统吞吐量。这两者看似对立，但实际上它们的目标是统一的，都是为了提高软件的整体质量。&lt;/p>
&lt;p>在实际开发中，理想的做法是首先&lt;mark>确保代码的可读性和可维护性&lt;/mark>，然后根据实际需求选择合适的性能优化手段。优秀的软件设计不是一味追求性能最大化，而是要在可维护性和性能之间找到平衡。通过这种方式，我们可以打造既&lt;mark>易于管理&lt;/mark>又具有&lt;mark>良好性能&lt;/mark>的软件系统。&lt;/p>
&lt;h2 id="何时进行重构">
 何时进行重构？
 &lt;a class="anchor" href="#%e4%bd%95%e6%97%b6%e8%bf%9b%e8%a1%8c%e9%87%8d%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>重构在是开发过程中随时可以进行的，见机行事即可，并不需要单独分配一两天的时间专门用来重构。&lt;/p>
&lt;h3 id="提交代码之前">
 提交代码之前
 &lt;a class="anchor" href="#%e6%8f%90%e4%ba%a4%e4%bb%a3%e7%a0%81%e4%b9%8b%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;p>《重构：改善代码既有设计》这本书介绍了一个 &lt;mark>营地法则&lt;/mark> 的概念:&lt;/p>
&lt;blockquote>
&lt;p>编程时，需要遵循营地法则：保证你离开时的代码库一定比来时更健康。&lt;/p>
&lt;/blockquote>
&lt;p>这个概念表达的核心思想其实很简单：在你提交代码的之前，花一会时间想一想，我这次的提交是让项目代码变得更健康了，还是更腐化了，或者说没什么变化？&lt;/p>
&lt;p>项目团队的每一个人只有保证自己的提交没有让项目代码变得更腐化，项目代码才会朝着健康的方向发展。&lt;/p>
&lt;p>&lt;mark>当我们离开营地（项目代码）的时候，请不要留下垃圾（代码坏味道）！尽量确保营地变得更干净了！&lt;/mark>&lt;/p>
&lt;h3 id="开发一个新功能之后之前">
 开发一个新功能之后&amp;amp;之前
 &lt;a class="anchor" href="#%e5%bc%80%e5%8f%91%e4%b8%80%e4%b8%aa%e6%96%b0%e5%8a%9f%e8%83%bd%e4%b9%8b%e5%90%8e%e4%b9%8b%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;p>在开发一个新功能之后，我们应该回过头看看是不是有可以改进的地方。在添加一个新功能之前，我们可以思考一下自己是否可以重构代码以让新功能的开发更容易。&lt;/p></description></item><item><title>单元测试到底是什么？应该怎么做？</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/unit-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/unit-test/</guid><description>&lt;blockquote>
&lt;p>本文重构完善自
&lt;a target="_blank" href="https://www.jianshu.com/p/fa41fb80d2b8">谈谈为什么写单元测试 - 键盘男 - 2016&lt;/a>这篇文章。&lt;/p>
&lt;/blockquote>
&lt;h2 id="何谓单元测试">
 何谓单元测试？
 &lt;a class="anchor" href="#%e4%bd%95%e8%b0%93%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;p>维基百科是这样介绍单元测试的：&lt;/p>
&lt;blockquote>
&lt;p>在计算机编程中，单元测试（Unit Testing）是针对程序模块（软件设计的最小单位）进行的正确性检验测试工作。&lt;/p>
&lt;p>程序单元是应用的 &lt;mark>最小可测试部件&lt;/mark> 。在过程化编程中，一个单元就是单个程序、函数、过程等；对于面向对象编程，最小单元就是方法，包括基类（超类）、抽象类、或者派生类（子类）中的方法。&lt;/p>
&lt;/blockquote>
&lt;p>由于每个单元有独立的逻辑，在做单元测试时，为了隔离外部依赖，确保这些依赖不影响验证逻辑，我们经常会用到 Fake、Stub 与 Mock 。&lt;/p>
&lt;p>关于 Fake、Mock 与 Stub 这几个概念的解读，可以看看这篇文章：
&lt;a target="_blank" href="https://zhuanlan.zhihu.com/p/26942686">测试中 Fakes、Mocks 以及 Stubs 概念明晰 - 王下邀月熊 - 2018&lt;/a> 。&lt;/p>
&lt;h2 id="为什么需要单元测试">
 为什么需要单元测试？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="为重构保驾护航">
 为重构保驾护航
 &lt;a class="anchor" href="#%e4%b8%ba%e9%87%8d%e6%9e%84%e4%bf%9d%e9%a9%be%e6%8a%a4%e8%88%aa">#&lt;/a>
&lt;/h3>
&lt;p>我在
&lt;a target="_blank" href="./refactoring.md">重构&lt;/a>这篇文章中这样写到：&lt;/p>
&lt;blockquote>
&lt;p>单元测试可以为重构提供信心，降低重构的成本。我们要像重视生产代码那样，重视单元测试。&lt;/p>
&lt;/blockquote>
&lt;p>每个开发者都会经历重构，重构后把代码改坏了的情况并不少见，很可能你只是修改了一个很简单的方法就导致系统出现了一个比较严重的错误。&lt;/p>
&lt;p>如果有了单元测试的话，就不会存在这个隐患了。写完一个类，把单元测试写了，确保这个类逻辑正确；写第二个类，单元测试……写 100 个类，道理一样，每个类做到第一点“保证逻辑正确性”，100 个类拼在一起肯定不出问题。你大可以放心一边重构，一边运行 APP；而不是整体重构完，提心吊胆地 run。&lt;/p>
&lt;h3 id="提高代码质量">
 提高代码质量
 &lt;a class="anchor" href="#%e6%8f%90%e9%ab%98%e4%bb%a3%e7%a0%81%e8%b4%a8%e9%87%8f">#&lt;/a>
&lt;/h3>
&lt;p>由于每个单元有独立的逻辑，做单元测试时需要隔离外部依赖，确保这些依赖不影响验证逻辑。因为要把各种依赖分离，单元测试会促进工程进行组件拆分，整理工程依赖关系，更大程度减少代码耦合。这样写出来的代码，更好维护，更好扩展，从而提高代码质量。&lt;/p>
&lt;h3 id="减少-bug">
 减少 bug
 &lt;a class="anchor" href="#%e5%87%8f%e5%b0%91-bug">#&lt;/a>
&lt;/h3>
&lt;p>一个机器，由各种细小的零件组成，如果其中某件零件坏了，机器运行故障。必须保证每个零件都按设计图要求的规格，机器才能正常运行。&lt;/p>
&lt;p>一个可单元测试的工程，会把业务、功能分割成规模更小、有独立的逻辑部件，称为单元。单元测试的目标，就是保证各个单元的逻辑正确性。单元测试保障工程各个“零件”按“规格”（需求）执行，从而保证整个“机器”（项目）运行正确，最大限度减少 bug。&lt;/p>
&lt;h3 id="快速定位-bug">
 快速定位 bug
 &lt;a class="anchor" href="#%e5%bf%ab%e9%80%9f%e5%ae%9a%e4%bd%8d-bug">#&lt;/a>
&lt;/h3>
&lt;p>如果程序有 bug，我们运行一次全部单元测试，找到不通过的测试，可以很快地定位对应的执行代码。修复代码后，运行对应的单元测试；如还不通过，继续修改，运行测试……直到&lt;mark>测试通过&lt;/mark>。&lt;/p>
&lt;h3 id="持续集成依赖单元测试">
 持续集成依赖单元测试
 &lt;a class="anchor" href="#%e6%8c%81%e7%bb%ad%e9%9b%86%e6%88%90%e4%be%9d%e8%b5%96%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">#&lt;/a>
&lt;/h3>
&lt;p>持续集成需要依赖单元测试，当持续集成服务自动构建新代码之后，会自动运行单元测试来发现代码错误。&lt;/p>
&lt;h2 id="谁逼你写单元测试">
 谁逼你写单元测试？
 &lt;a class="anchor" href="#%e8%b0%81%e9%80%bc%e4%bd%a0%e5%86%99%e5%8d%95%e5%85%83%e6%b5%8b%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="领导要求">
 领导要求
 &lt;a class="anchor" href="#%e9%a2%86%e5%af%bc%e8%a6%81%e6%b1%82">#&lt;/a>
&lt;/h3>
&lt;p>有些经验丰富的领导，或多或少都会要求团队写单元测试。对于有一定工作经验的队友，这要求挺合理；对于经验尚浅的、毕业生，恐怕要死要活了，连代码都写不好，还要写单元测试，are you kidding me？&lt;/p></description></item><item><title>软件工程简明教程</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/software-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/system-design/basis/software-engineering/</guid><description>&lt;p>大部分软件开发从业者，都会忽略软件开发中的一些最基础、最底层的一些概念。但是，这些软件开发的概念对于软件开发来说非常重要，就像是软件开发的基石一样。这也是我写这篇文章的原因。&lt;/p>
&lt;h2 id="何为软件工程">
 何为软件工程？
 &lt;a class="anchor" href="#%e4%bd%95%e4%b8%ba%e8%bd%af%e4%bb%b6%e5%b7%a5%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;p>1968 年 NATO（北大西洋公约组织）提出了&lt;mark>软件危机&lt;/mark>（&lt;mark>Software crisis&lt;/mark>）一词。同年，为了解决软件危机问题，“&lt;mark>软件工程&lt;/mark>”的概念诞生了。一门叫做软件工程的学科也就应运而生。&lt;/p>
&lt;p>随着时间的推移，软件工程这门学科也经历了一轮又一轮的完善，其中的一些核心内容比如软件开发模型越来越丰富实用！&lt;/p>
&lt;p>&lt;mark>什么是软件危机呢？&lt;/mark>&lt;/p>
&lt;p>简单来说，软件危机描述了当时软件开发的一个痛点：我们很难高效地开发出质量高的软件。&lt;/p>
&lt;p>Dijkstra（Dijkstra 算法的作者） 在 1972 年图灵奖获奖感言中也提高过软件危机，他是这样说的：“导致软件危机的主要原因是机器变得功能强大了几个数量级！坦率地说：只要没有机器，编程就完全没有问题。当我们有一些弱小的计算机时，编程成为一个温和的问题，而现在我们有了庞大的计算机，编程也同样成为一个巨大的问题”。&lt;/p>
&lt;p>&lt;mark>说了这么多，到底什么是软件工程呢？&lt;/mark>&lt;/p>
&lt;p>工程是为了解决实际的问题将理论应用于实践。软件工程指的就是将工程思想应用于软件开发。&lt;/p>
&lt;p>上面是我对软件工程的定义，我们再来看看比较权威的定义。IEEE 软件工程汇刊给出的定义是这样的：　(1)将系统化的、规范的、可量化的方法应用到软件的开发、运行及维护中，即将工程化方法应用于软件。　(2)在(1)中所述方法的研究。&lt;/p>
&lt;p>总之，软件工程的终极目标就是：&lt;mark>在更少资源消耗的情况下，创造出更好、更容易维护的软件。&lt;/mark>&lt;/p>
&lt;h2 id="软件开发过程">
 软件开发过程
 &lt;a class="anchor" href="#%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;p>
&lt;a target="_blank" href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B">维基百科是这样定义软件开发过程&lt;/a>的：&lt;/p>
&lt;blockquote>
&lt;p>软件开发过程（英语：software development process），或软件过程（英语：software process），是软件开发的开发生命周期（software development life cycle），其各个阶段实现了软件的需求定义与分析、设计、实现、测试、交付和维护。软件过程是在开发与构建系统时应遵循的步骤，是软件开发的路线图。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>需求分析：分析用户的需求，建立逻辑模型。&lt;/li>
&lt;li>软件设计：根据需求分析的结果对软件架构进行设计。&lt;/li>
&lt;li>编码：编写程序运行的源代码。&lt;/li>
&lt;li>测试 : 确定测试用例，编写测试报告。&lt;/li>
&lt;li>交付：将做好的软件交付给客户。&lt;/li>
&lt;li>维护：对软件进行维护比如解决 bug，完善功能。&lt;/li>
&lt;/ul>
&lt;p>软件开发过程只是比较笼统的层面上，一定义了一个软件开发可能涉及到的一些流程。&lt;/p>
&lt;p>软件开发模型更具体地定义了软件开发过程，对开发过程提供了强有力的理论支持。&lt;/p>
&lt;h2 id="软件开发模型">
 软件开发模型
 &lt;a class="anchor" href="#%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>软件开发模型有很多种，比如瀑布模型（Waterfall Model）、快速原型模型（Rapid Prototype Model）、V 模型（V-model）、W 模型（W-model）、敏捷开发模型。其中最具有代表性的还是 &lt;mark>瀑布模型&lt;/mark> 和 &lt;mark>敏捷开发&lt;/mark> 。&lt;/p>
&lt;p>&lt;mark>瀑布模型&lt;/mark> 定义了一套完成的软件开发周期，完整地展示了一个软件的的生命周期。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/schedule-task/up-264f2750a3d30366e36c375ec3a30ec2775.png" alt="" />&lt;/p>
&lt;p>&lt;mark>敏捷开发模型&lt;/mark> 是目前使用的最多的一种软件开发模型。
&lt;a target="_blank" href="https://wiki.mbalib.com/wiki/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">MBA 智库百科对敏捷开发的描述&lt;/a>是这样的:&lt;/p>
&lt;blockquote>
&lt;p>&lt;mark>敏捷开发&lt;/mark> 是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。&lt;/p>
&lt;/blockquote>
&lt;p>像现在比较常见的一些概念比如 &lt;mark>持续集成&lt;/mark>、&lt;mark>重构&lt;/mark>、&lt;mark>小版本发布&lt;/mark>、&lt;mark>低文档&lt;/mark>、&lt;mark>站会&lt;/mark>、&lt;mark>结对编程&lt;/mark>、&lt;mark>测试驱动开发&lt;/mark> 都是敏捷开发的核心。&lt;/p>
&lt;h2 id="软件开发的基本策略">
 软件开发的基本策略
 &lt;a class="anchor" href="#%e8%bd%af%e4%bb%b6%e5%bc%80%e5%8f%91%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%ad%96%e7%95%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="软件复用">
 软件复用
 &lt;a class="anchor" href="#%e8%bd%af%e4%bb%b6%e5%a4%8d%e7%94%a8">#&lt;/a>
&lt;/h3>
&lt;p>我们在构建一个新的软件的时候，不需要从零开始，通过复用已有的一些轮子（框架、第三方库等）、设计模式、设计原则等等现成的物料，我们可以更快地构建出一个满足要求的软件。&lt;/p></description></item></channel></rss>