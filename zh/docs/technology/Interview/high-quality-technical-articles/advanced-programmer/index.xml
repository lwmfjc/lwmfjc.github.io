<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/index.xml" rel="self" type="application/rss+xml"/><item><title>程序员的技术成长战略</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/the-growth-strategy-of-the-technological-giant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/the-growth-strategy-of-the-technological-giant/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：波波老师的一篇文章，写的非常好，不光是对技术成长有帮助，其他领域也是同样适用的！建议反复阅读，形成一套自己的技术成长策略。&lt;/p>
&lt;p>&lt;strong>原文地址：&lt;/strong> 
&lt;a href="https://mp.weixin.qq.com/s/YrN8T67s801-MRo01lCHXA">https://mp.weixin.qq.com/s/YrN8T67s801-MRo01lCHXA&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-前言">
 1. 前言
 &lt;a class="anchor" href="#1-%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>在波波的微信技术交流群里头，经常有学员问关于技术人该如何学习成长的问题，虽然是微信交流，但我依然可以感受到小伙伴们焦虑的心情。&lt;/p>
&lt;p>&lt;strong>技术人为啥焦虑？&lt;/strong> 恕我直言，说白了是胆识不足格局太小。胆就是胆量，焦虑的人一般对未来的不确定性怀有恐惧。识就是见识，焦虑的人一般看不清楚周围世界，也看不清自己和适合自己的道路。格局也称志向，容易焦虑的人通常视野窄志向小。如果从战略和管理的视角来看，就是对自己和周围世界的认知不足，没有一个清晰和长期的学习成长战略，也没有可执行的阶段性目标计划+严格的执行。&lt;/p>
&lt;p>因为问此类问题的学员很多，让我感觉有点烦了，为了避免重复回答，所以我专门总结梳理了这篇长文，试图统一来回答这类问题。如果后面还有学员问类似问题，我会引导他们来读这篇文章，然后让他们用三个月、一年甚至更长的时间，去思考和回答这样一个问题：&lt;strong>你的技术成长战略究竟是什么？&lt;/strong> 如果你想清楚了这个问题，有清晰和可落地的答案，那么恭喜你，你只需按部就班执行就好，根本无需焦虑，你实现自己的战略目标并做出成就只是一个时间问题；否则，你仍然需要通过不断磨炼+思考，务必去搞清楚这个人生的大问题！！！&lt;/p>
&lt;p>下面我们来看一些行业技术大牛是怎么做的。&lt;/p>
&lt;h2 id="二-跟技术大牛学成长战略">
 二. 跟技术大牛学成长战略
 &lt;a class="anchor" href="#%e4%ba%8c-%e8%b7%9f%e6%8a%80%e6%9c%af%e5%a4%a7%e7%89%9b%e5%ad%a6%e6%88%90%e9%95%bf%e6%88%98%e7%95%a5">#&lt;/a>
&lt;/h2>
&lt;p>我们知道软件设计是有设计模式(Design Pattern)的，其实技术人的成长也是有成长模式(Growth Pattern)的。波波经常在 Linkedin 上看一些技术大牛的成长履历，探究其中的成长模式，从而启发制定自己的技术成长战略。&lt;/p>
&lt;p>当然，很少有技术大牛会清晰地告诉你他们的技术成长战略，以及每一年的细分落地计划。但是，这并不妨碍我们通过他们的过往履历和产出成果，去溯源他们的技术成长战略。实际上， &lt;strong>越是牛逼的技术人，他们的技术成长战略和路径越是清晰，我们越容易从中探究出一些成功的模式。&lt;/strong>&lt;/p>
&lt;h3 id="21-系统性能专家案例">
 2.1 系统性能专家案例
 &lt;a class="anchor" href="#21-%e7%b3%bb%e7%bb%9f%e6%80%a7%e8%83%bd%e4%b8%93%e5%ae%b6%e6%a1%88%e4%be%8b">#&lt;/a>
&lt;/h3>
&lt;p>国内的开发者大都热衷于系统性能优化，有些人甚至三句话离不开高性能/高并发，但真正能深入这个领域，做到专家级水平的却寥寥无几。&lt;/p>
&lt;p>我这边要特别介绍的这个技术大牛叫 &lt;strong>Brendan Gregg&lt;/strong> ，他是系统性能领域经典书《System Performance: Enterprise and the Cloud》(中文版
&lt;a href="https://www.amazon.cn/dp/B08GC261P9">《性能之巅：洞悉系统、企业和云计算》&lt;/a>)的作者，也是著名的
&lt;a href="https://github.com/brendangregg/FlameGraph">性能分析利器火焰图(Flame Graph)&lt;/a>的作者。&lt;/p>
&lt;p>Brendan Gregg 之前是 Netflix 公司的高级性能架构师，在 Netflix 工作近 7 年。2022 年 4 月，他离开了 Netflix 去了 Intel，担任院士职位。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-quality-technical-articles/cdb11ce2f1c3a69fd19e922a7f5f59bf.png" alt="" />&lt;/p>
&lt;p>总体上，他已经在系统性能领域深耕超过 10 年，
&lt;a href="https://www.linkedin.com/in/brendangregg/">Brendan Gregg 的过往履历&lt;/a>可以在 linkedin 上看到。在这 10 年间，除了书籍以外，Brendan Gregg 还产出了超过上百份和系统性能相关的技术文档，演讲视频/ppt，还有各种工具软件，相关内容都整整齐齐地分享在
&lt;a href="http://www.brendangregg.com/">他的技术博客&lt;/a>上，可以说他是一个非常高产的技术大牛。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-quality-technical-articles/format,png-20230309231802218.png" alt="性能工具" />&lt;/p>
&lt;p>上图来自 Brendan Gregg 的新书《BPF Performance Tools: Linux System and Application Observability》。从这个图可以看出，Brendan Gregg 对系统性能领域的掌握程度，已经深挖到了硬件、操作系统和应用的每一个角落，可以说是 360 度无死角，整个计算机系统对他来说几乎都是透明的。波波认为，Brendan Gregg 是名副其实的，世界级的，系统性能领域的大神级人物。&lt;/p></description></item><item><title>程序员如何快速学习新技术</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/programmer-quickly-learn-new-technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/programmer-quickly-learn-new-technology/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：这是
&lt;a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html">《Java 面试指北》&lt;/a>练级攻略篇中的一篇文章，分享了我对于如何快速学习一门新技术的看法。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javamianshizhibei/training-strategy-articles.png" alt="《Java 面试指北》练级攻略篇" />&lt;/p>
&lt;/blockquote>
&lt;p>很多时候，我们因为工作原因需要快速学习某项技术，进而在项目中应用。或者说，我们想要去面试的公司要求的某项技术我们之前没有接触过，为了应对面试需要，我们需要快速掌握这项技术。&lt;/p>
&lt;p>作为一个人纯自学出生的程序员，这篇文章简单聊聊自己对于如何快速学习某项技术的看法。&lt;/p>
&lt;p>学习任何一门技术的时候，一定要先搞清楚这个技术是为了解决什么问题的。深入学习这个技术的之前，一定先从全局的角度来了解这个技术，思考一下它是由哪些模块构成的，提供了哪些功能，和同类的技术想必它有什么优势。&lt;/p>
&lt;p>比如说我们在学习 Spring 的时候，通过 Spring 官方文档你就可以知道 Spring 最新的技术动态，Spring 包含哪些模块 以及 Spring 可以帮你解决什么问题。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/web-real-time-message-push/20210506110341207.png" alt="" />&lt;/p>
&lt;p>再比如说我在学习消息队列的时候，我会先去了解这个消息队列一般在系统中有什么作用，帮助我们解决了什么问题。消息队列的种类很多，具体学习研究某个消息队列的时候，我会将其和自己已经学习过的消息队列作比较。像我自己在学习 RocketMQ 的时候，就会先将其和自己曾经学习过的第 1 个消息队列 ActiveMQ 进行比较，思考 RocketMQ 相对于 ActiveMQ 有了哪些提升，解决了 ActiveMQ 的哪些痛点，两者有哪些相似的地方，又有哪些不同的地方。&lt;/p>
&lt;p>&lt;strong>学习一个技术最有效最快的办法就是将这个技术和自己之前学到的技术建立连接，形成一个网络。&lt;/strong>&lt;/p>
&lt;p>然后，我建议你先去看看官方文档的教程，运行一下相关的 Demo ，做一些小项目。&lt;/p>
&lt;p>不过，官方文档通常是英文的，通常只有国产项目以及少部分国外的项目提供了中文文档。并且，官方文档介绍的往往也比较粗糙，不太适合初学者作为学习资料。&lt;/p>
&lt;p>如果你看不太懂官网的文档，你也可以搜索相关的关键词找一些高质量的博客或者视频来看。 &lt;strong>一定不要一上来就想着要搞懂这个技术的原理。&lt;/strong>&lt;/p>
&lt;p>就比如说我们在学习 Spring 框架的时候，我建议你在搞懂 Spring 框架所解决的问题之后，不是直接去开始研究 Spring 框架的原理或者源码，而是先实际去体验一下 Spring 框架提供的核心功能 IoC（Inverse of Control:控制反转） 和 AOP(Aspect-Oriented Programming:面向切面编程)，使用 Spring 框架写一些 Demo，甚至是使用 Spring 框架做一些小项目。&lt;/p>
&lt;p>一言以蔽之， &lt;strong>在研究这个技术的原理之前，先要搞懂这个技术是怎么使用的。&lt;/strong>&lt;/p>
&lt;p>这样的循序渐进的学习过程，可以逐渐帮你建立学习的快感，获得即时的成就感，避免直接研究原理性的知识而被劝退。&lt;/p>
&lt;p>&lt;strong>研究某个技术原理的时候，为了避免内容过于抽象，我们同样可以动手实践。&lt;/strong>&lt;/p>
&lt;p>比如说我们学习 Tomcat 原理的时候，我们发现 Tomcat 的自定义线程池挺有意思，那我们自己也可以手写一个定制版的线程池。再比如我们学习 Dubbo 原理的时候，可以自己动手造一个简易版的 RPC 框架。&lt;/p></description></item><item><title>给想成长为高级别开发同学的七条建议</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：普通程序员要想成长为高级程序员甚至是专家等更高级别，应该注意在哪些方面注意加强？开发内功修炼号主飞哥在这篇文章中就给出了七条实用的建议。&lt;/p>
&lt;p>&lt;strong>内容概览&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>刻意加强需求评审能力&lt;/li>
&lt;li>主动思考效率&lt;/li>
&lt;li>加强内功能力&lt;/li>
&lt;li>思考性能&lt;/li>
&lt;li>重视线上&lt;/li>
&lt;li>关注全局&lt;/li>
&lt;li>归纳总结能力&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>原文地址&lt;/strong>：
&lt;a href="https://mp.weixin.qq.com/s/8lMGzBzXine-NAsqEaIE4g">https://mp.weixin.qq.com/s/8lMGzBzXine-NAsqEaIE4g&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="建议-1刻意加强需求评审能力">
 建议 1：刻意加强需求评审能力
 &lt;a class="anchor" href="#%e5%bb%ba%e8%ae%ae-1%e5%88%bb%e6%84%8f%e5%8a%a0%e5%bc%ba%e9%9c%80%e6%b1%82%e8%af%84%e5%ae%a1%e8%83%bd%e5%8a%9b">#&lt;/a>
&lt;/h3>
&lt;p>先从需求评审开始说。在互联网公司，需求评审是开发工作的主要入口。&lt;/p>
&lt;p>对于普通程序员来说，一般就是根据产品经理提的需求细节，开始设想这个功能要怎么实现，开发成本大概需要多长时间。把自己当成了需求到代码之间的翻译官。很少去思考需求的合理性，对于自己做的事情有多大价值，不管也不问。&lt;/p>
&lt;p>而对于高级别的程序员来说，并不会一开始就陷入细节，而是会更多地会从产品本身出发，询问产品经理为啥要做这个细节，目的是啥。换个说法，就是会先考虑这个需求是不是合理。&lt;/p>
&lt;p>如果需求高级不合理就进行 PK ，要么对需求进行调整，要么就砍掉。不过要注意的是 PK 和调整需求不仅仅砍需求，还有另外一个方向，那就是对需求进行加强。&lt;/p>
&lt;p>产品同学由于缺乏技术背景，很可能想的并不够充分，这个时候如果你有更好的想法，也完全可以提出来，加到需求里，让这个需求变得更有价值。&lt;/p>
&lt;p>总之，高级程序员并不会一五一十地按产品经理的需求文档来进行后面的开发，而是&lt;strong>一切从有利于业务的角度出发思考，对产品经理的需求进行删、改、增。&lt;/strong>&lt;/p>
&lt;p>这样的工作表面看似和开发无关，但是只有这样才能保证后续所有开发同学都是有价值的，而不是做一堆无用功。无用功做的多了会极大的挫伤开发的成就感。&lt;/p>
&lt;p>所以，&lt;strong>普通程序员要想成长为更高级别的开发，一定要加强需求评审能力的培养&lt;/strong>。&lt;/p>
&lt;h3 id="建议-2主动思考效率">
 建议 2：主动思考效率
 &lt;a class="anchor" href="#%e5%bb%ba%e8%ae%ae-2%e4%b8%bb%e5%8a%a8%e6%80%9d%e8%80%83%e6%95%88%e7%8e%87">#&lt;/a>
&lt;/h3>
&lt;p>普通的程序员，按部就班的去写代码，有活儿来我就干，没活儿的时候我就呆着。很少去深度思考现有的这些代码为什么要这么写，这么写的好处是啥，有哪些地方存在瓶颈，我是否可以把它优化一些。&lt;/p>
&lt;p>而高级一点程序员，并不会局限于把手头的活儿开发就算完事。他们会主动去琢磨，现在这种开发模式是不是不够的好。那么我是否能做一个什么东西能把这个效率给提升起来。&lt;/p>
&lt;p>举一个小例子，我 6 年前接手一个项目的时候，我发现运营一个月会找我四次，就是找我给她发送一个推送。她说以前的开发都是这么帮他弄的。虽然这个需求处理起来很简单，改两行发布一下就完事。但是烦啊，你想象一下你正专心写代码呢，她又双叒来找你了，思路全被她中断了。而且频繁地操作线上本来就会引入不确定的风险，万一那天手一抽抽搞错了，线上就完蛋了。&lt;/p>
&lt;p>我的做法就是，我专门抽了一周的时间，给她做了一套运营后台。这样以后所有的运营推送她就直接在后台上操作就完事了。我倒出精力去做其它更有价值的事情去了。&lt;/p>
&lt;p>所以，&lt;strong>第二个建议就是要主动思考一下现有工作中哪些地方效率有改进的空间，想到了就主动去改进它！&lt;/strong>&lt;/p>
&lt;h3 id="建议-3加强内功能力">
 建议 3：加强内功能力
 &lt;a class="anchor" href="#%e5%bb%ba%e8%ae%ae-3%e5%8a%a0%e5%bc%ba%e5%86%85%e5%8a%9f%e8%83%bd%e5%8a%9b">#&lt;/a>
&lt;/h3>
&lt;p>哪些算是内功呢，我想内功修炼的读者们肯定也都很熟悉的了，指的就是大家学校里都学过的操作系统、网络等这些基础。&lt;/p>
&lt;p>普通的程序员会觉得，这些基础知识我都会好么，我大学可是足足学了四年的。工作了以后并不会刻意来回头再来加强自己在这些基础上的深层次的提升。&lt;/p>
&lt;p>高级的程序员，非常清楚自己当年学的那点知识太皮毛了。工作之余也会深入地去研究 Linux、研究网络等方向的底层实现。&lt;/p>
&lt;p>事实上，互联网业界的技术大牛们很大程度是因为对这些基础的理解相当是深厚，具备了深厚的内功以后才促使他们成长为了技术大牛。&lt;/p>
&lt;p>我很难相信一个不理解底层，只会 CURD，只会用别人框架的开发将来能在技术方向成长为大牛。&lt;/p>
&lt;p>所以，&lt;strong>还建议多多锻炼底层技术内功能力&lt;/strong>。如果你不知道怎么练，那就坚持看「开发内功修炼」公众号。&lt;/p>
&lt;h3 id="建议-4思考性能">
 建议 4：思考性能
 &lt;a class="anchor" href="#%e5%bb%ba%e8%ae%ae-4%e6%80%9d%e8%80%83%e6%80%a7%e8%83%bd">#&lt;/a>
&lt;/h3>
&lt;p>普通程序员往往就是把需求开发完了就不管了，只要需求实现了，测试通过了就可以交付了。将来流量会有多大，没想过。自己的服务 QPS 能支撑多少，不清楚。&lt;/p>
&lt;p>而高级的程序员往往会关注自己写出来的代码的性能。&lt;/p>
&lt;p>在需求评审的时候，他们一般就会估算大概的请求流量有多大。进而设计阶段就会根据这个量设计符合性能要求的方案。&lt;/p>
&lt;p>在上线之前也会进行性能压测，检验一下在性能上是否符合预期。如果性能存在问题，瓶颈在哪儿，怎么样能进行优化一下。&lt;/p>
&lt;p>所以，&lt;strong>第四个建议就是一定要多多主动你所负责业务的性能，并多多进行优化和改进&lt;/strong>。我想这个建议的重要程度非常之高。但这是需要你具备深厚的内功才可以办的到的，否则如果你连网络是怎么工作的都不清楚，谈何优化！&lt;/p>
&lt;h3 id="建议-5重视线上">
 建议 5：重视线上
 &lt;a class="anchor" href="#%e5%bb%ba%e8%ae%ae-5%e9%87%8d%e8%a7%86%e7%ba%bf%e4%b8%8a">#&lt;/a>
&lt;/h3>
&lt;p>普通程序员往往对线上的事情很少去关注，手里记录的服务器就是自己的开发机和发布机，线上机器有几台，流量多大，最近有没有波动这些可能都不清楚。&lt;/p>
&lt;p>而高级的程序员深深的明白，有条件的话，会尽量多多观察自己的线上服务，观察一下代码跑的咋样，有没有啥 error log。请求峰值的时候 CPU、内存的消耗咋样。网络端口消耗的情况咋样，是否需要调节一些参数配置。&lt;/p>
&lt;p>当性能不尽如人意的时候，可能会回头再来思考出性能的改进方案，重新开发和上线。&lt;/p></description></item><item><title>工作五年之后，对技术和业务的思考</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/thinking-about-technology-and-business-after-five-years-of-work/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/thinking-about-technology-and-business-after-five-years-of-work/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：这是我在两年前看到的一篇对我触动比较深的文章。确实要学会适应变化，并积累能力。积累解决问题的能力，优化思考方式，拓宽自己的认知。&lt;/p>
&lt;p>&lt;strong>原文地址：&lt;/strong> 
&lt;a href="https://mp.weixin.qq.com/s/CTbEdi0F4-qFoJT05kNlXA">https://mp.weixin.qq.com/s/CTbEdi0F4-qFoJT05kNlXA&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>苦海无边，回头无岸。&lt;/p>
&lt;h2 id="01-前言">
 01 前言
 &lt;a class="anchor" href="#01-%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>晃晃悠悠的，在互联网行业工作了五年，默然回首，你看哪里像灯火阑珊处？&lt;/p>
&lt;p>初入职场，大部分程序员会觉得苦学技术，以后会顺风顺水升职加薪，这样的想法没有错，但是不算全面，五年后你会不会继续做技术写代码这是核心问题。&lt;/p>
&lt;p>初入职场，会觉得努力加班可以不断提升能力，可以学到技术的公司就算薪水低点也可以接受，但是五年之后会认为加班都是在不断挤压自己的上升空间，薪水低是人生的天花板。&lt;/p>
&lt;p>这里想说的关键问题就是：初入职场的认知和想法大部分不会再适用于五年后的认知。&lt;/p>
&lt;p>工作五年之后面临的最大压力就是选择：职场天花板，技术能力天花板，薪水天花板，三十岁天花板。&lt;/p>
&lt;p>如何面对这些问题，是大部分程序员都在思考和纠结的。做选择的唯一参考点就是：利益最大化，这里可以理解为职场更好的升职加薪，顺风顺水。&lt;/p>
&lt;p>五年，变化最大不是工作经验，能力积累，而是心态，清楚的知道现实和理想之间是存在巨大的差距。&lt;/p>
&lt;h2 id="02-学会适应变化并积累能力">
 02 学会适应变化，并积累能力
 &lt;a class="anchor" href="#02-%e5%ad%a6%e4%bc%9a%e9%80%82%e5%ba%94%e5%8f%98%e5%8c%96%e5%b9%b6%e7%a7%af%e7%b4%af%e8%83%bd%e5%8a%9b">#&lt;/a>
&lt;/h2>
&lt;p>回首自己的职场五年，最认可的一句话就是：学会适应变化，并积累能力。&lt;/p>
&lt;p>变化的就是，五年的时间技术框架更新迭代，开发工具的变迁，公司环境队友的更换，甚至是不同城市的流浪，想着能把肉体和灵魂安放在一处，有句很经典的话就是：唯一不变的就是变化本身。&lt;/p>
&lt;p>要积累的是：解决问题的能力，思考方式，拓宽认知。&lt;/p>
&lt;p>这种很难直白的描述，属于个人认知的范畴，不同的人有不一样的看法，所以只能站在大众化的角度去思考。&lt;/p>
&lt;p>首先聊聊技术，大部分小白级别的，都希望自己的技术能力不断提高，争取做到架构师级别，但是站在当前的互联网环境中，这种想法实现难度还是偏高，这里既不是打击也不是为了抬杠。&lt;/p>
&lt;p>可以观察一下现状，技术团队大的 20-30 人，小的 10-15 人，能有一个架构师去专门管理底层框架都是少有现象。&lt;/p>
&lt;p>这个问题的原因很多，首先架构师的成本过高，环境架构也不是需要经常升级，说的难听点可能框架比项目生命周期更高。&lt;/p>
&lt;p>所以大部分公司的大部分业务，基于现有大部分成熟的开源框架都可以解决，这也就导致架构师这个角色通常由项目主管代替或者级别较高的开发直接负责，这就是现实情况。&lt;/p>
&lt;p>这就导致技术框架的选择思路就是：只选对的。即这方面的人才多，开源解决方案多，以此降低技术方面对公司业务发展的影响。&lt;/p>
&lt;p>那为什么还要不断学习和积累技术能力？如果没有这个能力，程序员岗位可能根本走不了五年之久，需要用技术深度积累不断解决工作中的各种问题，用技术的广度提升自己实现业务需求的认知边界，这是安放肉体的根本保障。&lt;/p>
&lt;p>这就是导致很多五年以后的程序员压力陡然升高的原因，走向管理岗的另一个壁垒就是业务思维和认知。&lt;/p>
&lt;h2 id="03-提高业务能力的积累">
 03 提高业务能力的积累
 &lt;a class="anchor" href="#03-%e6%8f%90%e9%ab%98%e4%b8%9a%e5%8a%a1%e8%83%bd%e5%8a%9b%e7%9a%84%e7%a7%af%e7%b4%af">#&lt;/a>
&lt;/h2>
&lt;p>程序员该不该用心研究业务，这个问题真的没有纠结的必要，只要不是纯技术型的公司，都需要面对业务。&lt;/p>
&lt;p>不管技术、运营、产品、管理层，都是在面向业务工作。&lt;/p>
&lt;p>从自己职场轨迹来看，五年变化最大就是解决业务问题的能力，职场之初面对很多业务场景都不知道如何下手，到几年之后设计业务的解决方案。&lt;/p>
&lt;p>这是大部分程序员在职场前五年跳槽就能涨薪的根本原因，面对业务场景，基于积累的经验和现有的开源工具，能快速给出合理的解决思路和实现过程。&lt;/p>
&lt;p>工作五年可能对技术底层的清晰程度都没有初入职场的小白清楚，但是写的程序却可以避开很多坑坑洼洼，对于业务的审视也是很细节全面。&lt;/p>
&lt;p>解决业务能力的积累，对于技术视野的宽度需求更甚，比如职场初期对于海量数据的处理束手无策，但是在工作几年之后见识数据行业的技术栈，真的就是技术选型的视野问题。&lt;/p>
&lt;p>什么是衡量技术能力的标准？站在一个共识的角度上看：系统的架构与代码设计能适应业务的不断变化和各种需求。&lt;/p>
&lt;p>相对比与技术，业务的变化更加快速频繁，高级工程师或者架构师之所以薪资高，这些角色一方面能适应业务的迭代，并且在工作中具有一定前瞻性，会考虑业务变化的情况下代码复用逻辑，这样的能力是需要一定的技术视野和业务思维的沉淀。&lt;/p>
&lt;p>所以职场中：业务能说的井井有条，代码能写的明明白白，得到机会的可能性更大。&lt;/p>
&lt;h2 id="04-不同的阶段技术和业务的平衡和选择">
 04 不同的阶段技术和业务的平衡和选择
 &lt;a class="anchor" href="#04-%e4%b8%8d%e5%90%8c%e7%9a%84%e9%98%b6%e6%ae%b5%e6%8a%80%e6%9c%af%e5%92%8c%e4%b8%9a%e5%8a%a1%e7%9a%84%e5%b9%b3%e8%a1%a1%e5%92%8c%e9%80%89%e6%8b%a9">#&lt;/a>
&lt;/h2>
&lt;p>从理性的角度看技术和业务两个方面，能让大部分人职场走的平稳顺利，但是不同的阶段对两者的平衡和选择是不一样的。&lt;/p>
&lt;p>在思考如何选择的时候，可以参考二八原则的逻辑，即在任何一组东西中，最重要的只占其中一小部分，约 20%，其余 80%尽管是多数，却是次要的，因此又称二八定律。&lt;/p>
&lt;p>个人真的非常喜欢这个原则，大部分人都不是天才，所以很难三心二意同时做好几件事情，在同一时间段内应该集中精力做好一件事件。&lt;/p>
&lt;p>但是单纯的二八原则模式可能不适应大部分职场初期的人，因为初期要学习很多内容，如何在职场生存：专业能力，职场关系，为人处世，产品设计等等。&lt;/p>
&lt;p>当然这些东西不是都要用心刻意学习，但是合理安排二二六原则或其他组合是更明智的，首先是专业能力要重点练习，其次可以根据自己的兴趣合理选择一到两个方面去慢慢了解，例如产品，运营，运维，数据等，毕竟三五年以后会不会继续写代码很难说，多给自己留个机会总是有备无患。&lt;/p>
&lt;p>在职场初期，基本都是从技术角度去思考问题，如何快速提升自己的编码能力，在公司能稳定是首要目标，因此大部分时间都是在做基础编码和学习规范，这时可能 90%的心思都是放在基础编码上，另外 10%会学习环境架构。&lt;/p>
&lt;p>最多一到两年，就会开始独立负责模块需求开发，需要自己设计整个代码思路，这里业务就会进入视野，要懂得业务上下游关联关系，学会思考如何设计代码结构，才能在需求变动的情况下代码改动较少，这个时候可能就会放 20%的心思在业务方面，30%学习架构方式。&lt;/p>
&lt;p>三到五年这个时间段，是解决问题能力提升最快的时候，因为这个阶段的程序员基本都是在开发核心业务链路，例如交易、支付、结算、智能商业等模块，需要对业务整体有较清晰的把握能力，不然就是给自己挖坑，这个阶段要对业务流付出大量心血思考。&lt;/p>
&lt;p>越是核心的业务线，越是容易爆发各种问题，如果在日常工作中不花心思处理各种细节问题，半夜异常自动的消息和邮件总是容易让人憔悴。&lt;/p>
&lt;p>所以努力学习技术是提升自己，培养自己的业务认知也同样重要，个人认为这二者的分量平分秋色，只是需要在合适的阶段做出合理的权重划分。&lt;/p>
&lt;h2 id="05-学会在职场做选择和生存">
 05 学会在职场做选择和生存
 &lt;a class="anchor" href="#05-%e5%ad%a6%e4%bc%9a%e5%9c%a8%e8%81%8c%e5%9c%ba%e5%81%9a%e9%80%89%e6%8b%a9%e5%92%8c%e7%94%9f%e5%ad%98">#&lt;/a>
&lt;/h2>
&lt;p>基于技术能力和业务思维，学会在职场做选择和生存，这些是职场前五年一路走来的最大体会。&lt;/p></description></item><item><title>美团三年，总结的10条血泪教训</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/meituan-three-year-summary-lesson-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/meituan-three-year-summary-lesson-10/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：作者用了很多生动的例子和故事展示了自己在美团的成长和感悟，看了之后受益颇多！&lt;/p>
&lt;p>&lt;strong>内容概览&lt;/strong>：&lt;/p>
&lt;p>本文的作者提出了以下十条建议，希望能对其他职场人有所启发和帮助：&lt;/p>
&lt;ol>
&lt;li>结构化思考与表达，提高个人影响力&lt;/li>
&lt;li>忘掉职级，该怼就怼，推动事情往前走&lt;/li>
&lt;li>用好平台资源，结识优秀的人，学习通识课&lt;/li>
&lt;li>一切都是争取来的，不要等待机会，要主动寻求&lt;/li>
&lt;li>关注商业，升维到老板思维，看清趋势，及时止损&lt;/li>
&lt;li>培养数据思维，利用数据了解世界，指导决策&lt;/li>
&lt;li>做一个好&amp;quot;销售&amp;quot;，无论是自己还是产品，都要学会展示和说服&lt;/li>
&lt;li>少加班多运动，保持身心健康，提高工作效率&lt;/li>
&lt;li>有随时可以离开的底气，不要被职场所困，借假修真，提升自己&lt;/li>
&lt;li>只是一份工作，不要过分纠结，相信自己，走出去看看&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>原文地址&lt;/strong>：
&lt;a href="https://mp.weixin.qq.com/s/XidSVIwd4oKkDKEICaY1mQ">https://mp.weixin.qq.com/s/XidSVIwd4oKkDKEICaY1mQ&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在美团的三年多时光，如同一部悠长的交响曲，高高低低，而今离开已有一段时间。闲暇之余，梳理了三年多的收获与感慨，总结成 10 条，既是对过去一段时光的的一个深情回眸，也是对未来之路的一份期许。&lt;/p>
&lt;p>倘若一些感悟能为刚步入职场的年轻人，或是刚在职业生涯中崭露头角的后起之秀，带来一点点启示与帮助，也是莫大的荣幸。&lt;/p>
&lt;h2 id="01-结构化思考与表达">
 01 结构化思考与表达
 &lt;a class="anchor" href="#01-%e7%bb%93%e6%9e%84%e5%8c%96%e6%80%9d%e8%80%83%e4%b8%8e%e8%a1%a8%e8%be%be">#&lt;/a>
&lt;/h2>
&lt;p>美团是一家特别讲究方法论的公司，人人都要熟读四大名著《高效能人士的七个习惯》、《金字塔原理》、《用图表说话》和《学会提问》。&lt;/p>
&lt;p>与结构化思考和表达相关的，是《金字塔原理》，作者是麦肯锡公司第一位女性咨询顾问。这本书告诉我们，思考和表达的过程，就像构建金字塔（或者构建一棵树），先有整体结论，再寻找证据，证据之间要讲究相互独立、而且能穷尽（MECE 原则），论证的过程也要按特定的顺序进行，比如时间顺序、空间顺序、重要性顺序……&lt;/p>
&lt;p>作为大厂社畜，日常很大一部分工作就是写文档、看别人文档。大家做的事，但最后呈现的结果却有很大差异。一篇逻辑清晰、详略得当的文档，给人一种如沐春风的感受，能提炼出重要信息，是好的参考指南。&lt;/p>
&lt;p>结构化思考与表达算是职场最通用的能力，也是打造个人影响力最重要的途径之一。&lt;/p>
&lt;h2 id="02-忘掉职级该怼就怼">
 02 忘掉职级，该怼就怼
 &lt;a class="anchor" href="#02-%e5%bf%98%e6%8e%89%e8%81%8c%e7%ba%a7%e8%af%a5%e6%80%bc%e5%b0%b1%e6%80%bc">#&lt;/a>
&lt;/h2>
&lt;p>在阿里工作时，能看到每个人的 Title，看到江湖地位高（职级高+入职时间早）的同学，即便跟自己没有汇报关系，不自然的会多一层敬畏。推进工作时，会多一层压力，对方未读或已读未回时，不知如何应对。&lt;/p>
&lt;p>美团只能看到每个人的坑位信息，还有 Ta 的上级。工作相关的问题，可以向任何人提问，如果协同方没有及时响应，隔段时间@一次，甚至&amp;quot;怼一怼&amp;quot;，都没啥问题，事情一直往前推进才最重要。除了大象消息直接提问外，还有个大杀器&amp;ndash;TT（公司级问题流转系统），在上面提问时，加上对方主管，如果对方未及时回应，问题会自动升级，每天定时 Push，直到解决为止。&lt;/p>
&lt;p>我见到一些很年轻的同事，他们在推动 OKR、要资源的事上，很有一套，只要能达到自己的目标，不会考虑别人的感受，最终，他们还真能把事办成。&lt;/p>
&lt;p>当然了，段位越高的人，越能用自己的人格魅力、影响力、资源等，去影响和推动事情的进程，而不是靠对他人的 Push。只是在拿结果的事上，不要把自己太当回事，把别人太当回事，大家在一起，也只是为了完成各自的任务，忘掉职级，该怼时还得怼。&lt;/p>
&lt;h2 id="03-用好平台资源">
 03 用好平台资源
 &lt;a class="anchor" href="#03-%e7%94%a8%e5%a5%bd%e5%b9%b3%e5%8f%b0%e8%b5%84%e6%ba%90">#&lt;/a>
&lt;/h2>
&lt;p>没有人能在一家公司待一辈子，公司再牛，跟自己关系不大，重要的是，在有限的时间内，最大化用好平台资源。&lt;/p>
&lt;p>在美团除了认识自己节点的同事外，有幸认识一群特别棒的协作方，还有其他 BU 的同学。&lt;/p>
&lt;p>这些优秀的人身上，有很多共同的特质：谦虚、利他、乐于分享、双赢思维。&lt;/p>
&lt;p>有两位做运营的同学。&lt;/p>
&lt;p>一位是无意中关注他公众号结识上的。他公众号记录了很多职场成长、家庭建造上的思考和收获，还有定期个人复盘。他和太太都是大厂中层管理者，从文章中看到的不是他多厉害，而是非常接地气的故事。我们约饭了两次，有很多共同话题，现在还时不时有一些互动。&lt;/p>
&lt;p>一位职级更高的同学，他在内网发起了一个&amp;quot;请我喝一杯咖啡，和我一起聊聊个人困惑&amp;quot;的活动，我报名参与了一期。和他聊天的过程，特别像是一场教练对话（最近学习教练课程时才感受到的），帮我排除干扰、聚焦目标的同时，也从他分享个人成长蜕变的过程，收获很多动力。（刚好自己最近也学习了教练技术，后面也准备采用类似的方式，去帮助曾经像我一样迷茫的人）&lt;/p>
&lt;p>还有一些协作方同学。他们工作做得超级到位，能感受到，他们在乎他人时间；稍微有点出彩的事儿，不忘记拉上更多人。利他和双赢思维，在他们身上是最好的阐释。&lt;/p>
&lt;p>除了结识优秀的人，向他们学习外，还可以关注各个通道/工种的课程资源。&lt;/p>
&lt;p>在大厂，多数人的角色都是螺丝钉，但千万不要局限于做一颗螺丝钉。多去学习一些通识课，了解商业交付的各个环节，看清商业世界，明白自己的定位，超越自己的定位。&lt;/p>
&lt;h2 id="04-一切都是争取来的">
 04 一切都是争取来的
 &lt;a class="anchor" href="#04-%e4%b8%80%e5%88%87%e9%83%bd%e6%98%af%e4%ba%89%e5%8f%96%e6%9d%a5%e7%9a%84">#&lt;/a>
&lt;/h2>
&lt;p>工作很多年了，很晚才明白这个道理。&lt;/p>
&lt;p>之前一直认为，只要做好自己该做的，一定会被看见，被赏识，也会得到更多机会。但很多时候，这只是个人的一厢情愿。除了自己，不会有人关心你的权益。&lt;/p>
&lt;p>社会主义初级阶段，我国国内的主要矛盾是人民日益增长的物质文化需要同落后的社会生产之间的矛盾。无论在哪里，资源都是稀缺的，自己在乎的，就得去争取。&lt;/p>
&lt;p>想成长某个技能、想参与哪个模块、想做哪个项目，升职加薪……自己不提，不去争取，不会有人主动给你。&lt;/p>
&lt;p>争不争取是一回事，能不能得到是一回事，只有争取，才有可能得到。争取了，即便没有得到，最终也没失去什么。&lt;/p>
&lt;h2 id="05-关注商业">
 05 关注商业
 &lt;a class="anchor" href="#05-%e5%85%b3%e6%b3%a8%e5%95%86%e4%b8%9a">#&lt;/a>
&lt;/h2>
&lt;p>大公司，极度关注效率，大部分岗位，拆解的粒度越细，效率会越高，这些对组织是有利的。但对个人来说，则很容易螺丝钉化。&lt;/p></description></item><item><title>十年大厂成长之路</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/ten-years-of-dachang-growth-road/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/ten-years-of-dachang-growth-road/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：这篇文章的作者有着丰富的工作经验，曾在大厂工作了 12 年。结合自己走过的弯路和接触过的优秀技术人，他总结出了一些对于个人成长具有普遍指导意义的经验和特质。&lt;/p>
&lt;p>&lt;strong>原文地址：&lt;/strong> 
&lt;a href="https://mp.weixin.qq.com/s/vIIRxznpRr5yd6IVyNUW2w">https://mp.weixin.qq.com/s/vIIRxznpRr5yd6IVyNUW2w&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>最近这段时间，有好几个年轻的同学和我聊到自己的迷茫。其中有关于技术成长的、有关于晋升的、有关于择业的。我很高兴他们愿意听我这个“过来人”分享自己的经验。&lt;/p>
&lt;p>我自己毕业后进入大厂，在大厂工作 12 年，我说的内容都来自于我自己或者身边人的真实情况。尤其，我会把 &lt;strong>【我自己走过的弯路】&lt;/strong> 和 &lt;strong>【我看到过的优秀技术人的特质】&lt;/strong> 相结合来给出建议。&lt;/p>
&lt;p>这些内容我觉得具有普遍的指导意义，所以决定做个整理分享出来。我相信，无论你在大厂还是小厂，如果你相信这些建议，或早或晚他们会帮助到你。&lt;/p>
&lt;p>我自己工作 12 年，走了些弯路，所以我就来讲讲，“在一个技术人 10 年的发展过程中，应该注意些什么”。我们把内容分为两块：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>十年技术路怎么走&lt;/strong>&lt;/li>
&lt;li>&lt;strong>一些重要选择&lt;/strong>&lt;/li>
&lt;/ol>
&lt;h2 id="01-十年技术路怎么走">
 01 十年技术路怎么走
 &lt;a class="anchor" href="#01-%e5%8d%81%e5%b9%b4%e6%8a%80%e6%9c%af%e8%b7%af%e6%80%8e%e4%b9%88%e8%b5%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-2-年-从菜鸟到职业">
 【1-2 年】=&amp;gt; 从“菜鸟”到“职业”
 &lt;a class="anchor" href="#1-2-%e5%b9%b4-%e4%bb%8e%e8%8f%9c%e9%b8%9f%e5%88%b0%e8%81%8c%e4%b8%9a">#&lt;/a>
&lt;/h3>
&lt;p>应届生刚进入到工作时，会有各种不适应。比如写好的代码会被反复打回、和团队老司机讨论技术问题会有一堆问号、不敢提问和质疑、碰到问题一个人使劲死磕等等。&lt;/p>
&lt;p>&lt;strong>简单来说就是，即使日以继夜地埋头苦干，最后也无法顺利的开展工作。&lt;/strong>&lt;/p>
&lt;p>这个阶段最重要的几个点：&lt;/p>
&lt;p>&lt;strong>【多看多模仿】&lt;/strong>：比如写代码的时候，不要就像在学校完成书本作业那样只关心功能是否正确，还要关心模块的设计、异常的处理、代码的可读性等等。在你还没有了解这些内容的精髓之前，也要照猫画虎地模仿起来，慢慢地你就会越来越明白真实世界的代码是怎么写的，以及为什么要这么写。&lt;/p>
&lt;p>做技术方案的时候也是同理，技术文档的要求你也许并不理解，但你可以先参考已有文档写起来。&lt;/p>
&lt;p>&lt;strong>【脸皮厚一点】&lt;/strong>：不懂就问，你是新人大家都是理解的。你做的各种方案也可以多找老司机们 review，不要怕被看笑话。&lt;/p>
&lt;p>&lt;strong>【关注工作方式】&lt;/strong>：比如发现需求在计划时间完不成就要尽快报风险、及时做好工作内容的汇报（例如周报）、开会后确定会议结论和 todo 项、承诺时间就要尽力完成、严格遵循公司的要求（例如发布规范、权限规范等）&lt;/p>
&lt;p>一般来说，工作 2 年后，你就应该成为一个职业人。老板可以相信任何工作交到你的手里，不会出现“意外”（例如一个重要需求明天要上线了，突然被告知上不了）。&lt;/p>
&lt;h3 id="3-4-年-从职业到尖兵">
 【3-4 年】=&amp;gt; 从“职业”到“尖兵”
 &lt;a class="anchor" href="#3-4-%e5%b9%b4-%e4%bb%8e%e8%81%8c%e4%b8%9a%e5%88%b0%e5%b0%96%e5%85%b5">#&lt;/a>
&lt;/h3>
&lt;p>工作两年后，对业务以及现有系统的了解已经到达了一定的程度，技术同学会开始承担更有难度的技术挑战。&lt;/p>
&lt;p>例如需要将性能提升到某一个水位、例如需要对某一个重要模块进行重构、例如有个重要的项目需要协同 N 个团队一起完成。&lt;/p>
&lt;p>可见，上述的这些技术问题，难度都已经远远超过一个普通的需求。解决这些问题需要有一定的技术能力，同时也需要具备更高的协同能力。&lt;/p>
&lt;p>这个阶段最重要的几个点：&lt;/p>
&lt;p>&lt;strong>【技术能力提升】&lt;/strong>：无论是公司内还是公司外的技术内容，都要多做主动的学习。基本上这个阶段的技术难题都集中在【性能】【稳定性】和【扩展性】上，而这些内容在业界都是有成型的方法论的。&lt;/p>
&lt;p>&lt;strong>【主人翁精神】&lt;/strong>：技术难题除了技术方案设计及落地外，背后还有一系列的其他工作。例如上线后对效果的观测、重点项目对于上下游改造和风险的了解程度、对于整个技改后续的计划（二期、三期的优化思路）等。&lt;/p>
&lt;p>在工作四年后，基本上你成为了团队的一、二号技术位。很多技术难题即使不是你来落地，也是由你来决定方案。你会做调研、会做方案对比、会考虑整个技改的生命周期。&lt;/p>
&lt;h3 id="5-7-年-从尖兵到专家">
 【5-7 年】=&amp;gt; 从“尖兵”到“专家”
 &lt;a class="anchor" href="#5-7-%e5%b9%b4-%e4%bb%8e%e5%b0%96%e5%85%b5%e5%88%b0%e4%b8%93%e5%ae%b6">#&lt;/a>
&lt;/h3>
&lt;p>技术尖兵重点在于解决某一个具体的技术难题或者重点项目。而下一步的发展方向，就是能够承担起来一整个“业务板块”，也就是“领域技术专家”。&lt;/p>
&lt;p>想要承担一整个“业务板块”需要 &lt;strong>【对业务领域有深刻的理解，同时基于这些理解来规划技术的发展方向】&lt;/strong> 。&lt;/p>
&lt;p>拿支付做个例子。简单的支付功能其实很容易完成，只要处理好和双联（网联和银联）的接口调用（成功、失败、异常）即可。但在很多背景下，支付没有那么简单。&lt;/p>
&lt;p>例如，支付是一个用户敏感型操作，非常强调用户体验，如何能兼顾体验和接口的不稳定？支付接口还需要承担费用，同步和异步的接口费用不同，如何能够降本？支付接口往往还有限额等。这一系列问题的背后涉及到很多技术的设计，包括异步化、补偿设计、资金流设计、最终一致性设计等等。&lt;/p>
&lt;p>这个阶段最重要的几个点：&lt;/p>
&lt;p>&lt;strong>【深入理解行业及趋势】&lt;/strong>：密切关注行业的各种变化（新鲜的玩法、政策的变动、竞对的策略、科技等外在因素的影响等等），和业务同学加强沟通。&lt;/p>
&lt;p>&lt;strong>【深入了解行业解决方案】&lt;/strong>：充分对标已有的国内外技术方案，做深入学习和尝试，评估建设及运维成本，结合业务趋势制定计划。&lt;/p>
&lt;h3 id="8-10-年-从专家到tl">
 【8-10 年】=&amp;gt; 从“专家”到“TL”
 &lt;a class="anchor" href="#8-10-%e5%b9%b4-%e4%bb%8e%e4%b8%93%e5%ae%b6%e5%88%b0tl">#&lt;/a>
&lt;/h3>
&lt;p>其实很多时候，如果能做到专家，基本也是一个 TL 的角色了，但这并不代表正在执行 TL 的职责。&lt;/p></description></item><item><title>糟糕程序员的 20 个坏习惯</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/advanced-programmer/20-bad-habits-of-bad-programmers/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>推荐语&lt;/strong>：Kaito 大佬的一篇文章，很实用的建议！&lt;/p>
&lt;p>&lt;strong>原文地址：&lt;/strong> 
&lt;a href="https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw">https://mp.weixin.qq.com/s/6hUU6SZsxGPWAIIByq93Rw&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>我想你肯定遇到过这样一类程序员：&lt;strong>他们无论是写代码，还是写文档，又或是和别人沟通，都显得特别专业&lt;/strong>。每次遇到这类人，我都在想，他们到底是怎么做到的？&lt;/p>
&lt;p>随着工作时间的增长，渐渐地我也总结出一些经验，他们身上都保持着一些看似很微小的优秀习惯，但正是因为这些习惯，体现出了一个优秀程序员的基本素养。&lt;/p>
&lt;p>但今天我们来换个角度，来看看一个糟糕程序员有哪些坏习惯？只要我们都能避开这些问题，就可以逐渐向一个优秀程序员靠近。&lt;/p>
&lt;h2 id="1技术名词拼写不规范">
 1、技术名词拼写不规范
 &lt;a class="anchor" href="#1%e6%8a%80%e6%9c%af%e5%90%8d%e8%af%8d%e6%8b%bc%e5%86%99%e4%b8%8d%e8%a7%84%e8%8c%83">#&lt;/a>
&lt;/h2>
&lt;p>无论是个人简历，还是技术文档，我经常看到拼写不规范的技术名词，例如 JAVA、javascript、python、MySql、Hbase、restful。&lt;/p>
&lt;p>正确的拼写应该是 Java、JavaScript、Python、MySQL、HBase、RESTful，不要小看这个问题，很多面试官很有可能因为这一点刷掉你的简历。&lt;/p>
&lt;h2 id="2写文档中英文混排不规范">
 2、写文档，中英文混排不规范
 &lt;a class="anchor" href="#2%e5%86%99%e6%96%87%e6%a1%a3%e4%b8%ad%e8%8b%b1%e6%96%87%e6%b7%b7%e6%8e%92%e4%b8%8d%e8%a7%84%e8%8c%83">#&lt;/a>
&lt;/h2>
&lt;p>中文描述使用英文标点符号，英文和数字使用了全角字符，中文与英文、数字之间没有空格等等。&lt;/p>
&lt;p>其中很多人会忽视中文和英文、数字之间加一个「空格」，这样排版阅读起来会更舒服。之前我的文章排版，都是遵循了这些细节。&lt;/p>
&lt;h2 id="3重要逻辑不写注释或写得很拖沓">
 3、重要逻辑不写注释，或写得很拖沓
 &lt;a class="anchor" href="#3%e9%87%8d%e8%a6%81%e9%80%bb%e8%be%91%e4%b8%8d%e5%86%99%e6%b3%a8%e9%87%8a%e6%88%96%e5%86%99%e5%be%97%e5%be%88%e6%8b%96%e6%b2%93">#&lt;/a>
&lt;/h2>
&lt;p>复杂且重要的逻辑代码，很多程序员不写注释，除了自己能看懂代码逻辑，其他人根本看不懂。或者是注释虽然写了，但写得很拖沓，没有逻辑可言。&lt;/p>
&lt;p>重要的逻辑不止要写注释，还要写得简洁、清晰。如果是一眼就能读懂的简单代码，可以不加注释。&lt;/p>
&lt;h2 id="4写复杂冗长的函数">
 4、写复杂冗长的函数
 &lt;a class="anchor" href="#4%e5%86%99%e5%a4%8d%e6%9d%82%e5%86%97%e9%95%bf%e7%9a%84%e5%87%bd%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;p>一个函数几百行，一个文件上千行代码，复杂函数不做拆分，导致代码变得越来越难维护，最后谁也不敢动。&lt;/p>
&lt;p>基本的设计模式还是要遵守的，例如单一职责，一个函数只做一件事，开闭原则，对扩展开放，对修改关闭。&lt;/p>
&lt;p>如果函数逻辑确实复杂，也至少要保证主干逻辑足够清晰。&lt;/p>
&lt;h2 id="5不看官方文档只看垃圾博客">
 5、不看官方文档，只看垃圾博客
 &lt;a class="anchor" href="#5%e4%b8%8d%e7%9c%8b%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3%e5%8f%aa%e7%9c%8b%e5%9e%83%e5%9c%be%e5%8d%9a%e5%ae%a2">#&lt;/a>
&lt;/h2>
&lt;p>很多人遇到问题不先去看官方文档，而是热衷于去看垃圾博客，这些博客的内容都是互相抄袭，错误百出。&lt;/p>
&lt;p>其实很多软件官方文档写得已经非常好了，常见问题都能找到答案，认真读一读官方文档，比看垃圾博客强一百倍，要养成看官方文档的好习惯。&lt;/p>
&lt;h2 id="6宣扬内功无用论">
 6、宣扬内功无用论
 &lt;a class="anchor" href="#6%e5%ae%a3%e6%89%ac%e5%86%85%e5%8a%9f%e6%97%a0%e7%94%a8%e8%ae%ba">#&lt;/a>
&lt;/h2>
&lt;p>有些人天天追求日新月异的开源项目和框架，却不肯花时间去啃一啃底层原理，常见问题虽然可以解决，但遇到稍微深一点的问题就束手无策。&lt;/p>
&lt;p>很多高大上的架构设计，思路其实都源于底层。想一想，像计算机体系结构、操作系统、网络协议这些东西，经过多少年演进才变为现在的样子，演进过程中遇到的复杂问题比比皆是，理解了解决这些问题的思路，再看上层技术会变得很简单。&lt;/p>
&lt;h2 id="7乐于炫技">
 7、乐于炫技
 &lt;a class="anchor" href="#7%e4%b9%90%e4%ba%8e%e7%82%ab%e6%8a%80">#&lt;/a>
&lt;/h2>
&lt;p>有些人天天把「高大上」的技术名词挂在嘴边，生怕别人不知道自己学了什么高深技术，嘴上乐于炫技，但别人一问他细节就会哑口无言。&lt;/p>
&lt;h2 id="8不接受质疑">
 8、不接受质疑
 &lt;a class="anchor" href="#8%e4%b8%8d%e6%8e%a5%e5%8f%97%e8%b4%a8%e7%96%91">#&lt;/a>
&lt;/h2>
&lt;p>自己设计的方案，别人提出疑问时只会回怼，而不是理性分析利弊，抱着学习的心态交流。&lt;/p>
&lt;p>这些人学了点东西就觉得自己很有本事，殊不知只是自己见识太少。&lt;/p>
&lt;h2 id="9接口协议不规范">
 9、接口协议不规范
 &lt;a class="anchor" href="#9%e6%8e%a5%e5%8f%a3%e5%8d%8f%e8%ae%ae%e4%b8%8d%e8%a7%84%e8%8c%83">#&lt;/a>
&lt;/h2>
&lt;p>和别人定 API 协议全靠口头沟通，不给规范的文档说明，甚至到了测试联调时会发现，竟然和协商的还不一样，或者改协议了却不通知对接方，合作体验极差。&lt;/p>
&lt;h2 id="10遇到问题自己死磕">
 10、遇到问题自己死磕
 &lt;a class="anchor" href="#10%e9%81%87%e5%88%b0%e9%97%ae%e9%a2%98%e8%87%aa%e5%b7%b1%e6%ad%bb%e7%a3%95">#&lt;/a>
&lt;/h2>
&lt;p>很初级程序员容易犯的问题，遇到问题只会自己死磕，拖到 deadline 也没有产出，领导来问才知道有问题解决不了。&lt;/p>
&lt;p>有问题及时反馈才是对自己负责，对团队负责。&lt;/p>
&lt;h2 id="11一说就会一写就废">
 11、一说就会，一写就废
 &lt;a class="anchor" href="#11%e4%b8%80%e8%af%b4%e5%b0%b1%e4%bc%9a%e4%b8%80%e5%86%99%e5%b0%b1%e5%ba%9f">#&lt;/a>
&lt;/h2>
&lt;p>平时技术方案吹得天花乱坠，一让他写代码就废，典型的眼高手低选手。&lt;/p>
&lt;h2 id="12表达没有逻辑不站在对方角度看问题">
 12、表达没有逻辑，不站在对方角度看问题
 &lt;a class="anchor" href="#12%e8%a1%a8%e8%be%be%e6%b2%a1%e6%9c%89%e9%80%bb%e8%be%91%e4%b8%8d%e7%ab%99%e5%9c%a8%e5%af%b9%e6%96%b9%e8%a7%92%e5%ba%a6%e7%9c%8b%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;p>讨论问题不交代背景，上来就说自己的方案，别人听得云里雾里，让你从头描述你又讲不明白。&lt;/p>
&lt;p>学会沟通和表达，是合作的基础。&lt;/p></description></item></channel></rss>