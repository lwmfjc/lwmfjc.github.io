<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/index.xml" rel="self" type="application/rss+xml"/><item><title>32条总结教你提升职场经验</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/32-tips-improving-career/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/32-tips-improving-career/</guid><description>&lt;blockquote>
&lt;p>&lt;mark>推荐语&lt;/mark>：阿里开发者的一篇职场经验的分享。&lt;/p>
&lt;p>&lt;mark>原文地址：&lt;/mark> 
&lt;a target="_blank" href="https://mp.weixin.qq.com/s/6BkbGekSRTadm9j7XUL13g">https://mp.weixin.qq.com/s/6BkbGekSRTadm9j7XUL13g&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="成长的捷径">
 成长的捷径
 &lt;a class="anchor" href="#%e6%88%90%e9%95%bf%e7%9a%84%e6%8d%b7%e5%be%84">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>入职伊始谦逊的态度是好的，但不要把“我是新人”作为心理安全线；&lt;/li>
&lt;li>写一篇技术博客大概需要两周左右，但可能是最快的成长方式；&lt;/li>
&lt;li>一定要读两本书：金字塔原理、高效能人士的七个习惯（这本书名字像成功学，实际讲的是如何塑造性格）；&lt;/li>
&lt;li>多问是什么、为什么，追本溯源把问题解决掉，试图绕过的问题永远会在下个路口等着你；&lt;/li>
&lt;li>不要沉迷于忙碌带来的虚假安全感中，目标的确定和追逐才是最真实的安全；&lt;/li>
&lt;li>不用过于计较一时的得失，在公平的环境中，吃亏是福不是鸡汤；&lt;/li>
&lt;li>思维和技能不要受限于前端、后端、测试等角色，把自己定位成业务域问题的终结者；&lt;/li>
&lt;li>好奇和热爱是成长最大的捷径，长期主义者会认同自己的工作价值，甚至要高于组织当下给的认同（KPI）。&lt;/li>
&lt;/ul>
&lt;h2 id="功夫在日常">
 功夫在日常
 &lt;a class="anchor" href="#%e5%8a%9f%e5%a4%ab%e5%9c%a8%e6%97%a5%e5%b8%b8">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>每行代码要代表自己当下的最高水平，你觉得无所谓的小细节，有可能就是在晋升场上伤害你的暗箭；&lt;/li>
&lt;li>双周报不是工作日志流水账，不要被时间推着走，最起码要知道下次双周报里会有什么（小目标驱动）；&lt;/li>
&lt;li>觉得日常都是琐碎工作、不技术、给师兄打杂等，可以尝试对手头事情做一下分类，想象成每个分类都是个小格子，这些格子连起来的终点就是自己的目标，这样每天不再是机械的做需求，而是有规划的填格子、为目标努力，甚至会给自己加需求，因为自己看清楚了要去哪里；&lt;/li>
&lt;li>日常的言行举止是能力的显微镜，大部分人可能意识不到，自己的强大和虚弱是那么的明显，不要无谓的试图掩盖，更不存在蒙混过关。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>最后一条大概意思就是有时候我们会在意自己在聚光灯下（述职、晋升、周报、汇报等）的表现，以为大家会根据这个评价自己。实际上日常是怎么完成业务需求、帮助身边同学、创造价值的，才是大家评价自己的依据，而且每个人是什么样的特质，合作过三次的伙伴就可以精准评价，在聚光灯下的表演只能骗自己。&lt;/p>
&lt;/blockquote>
&lt;h2 id="学会被管理">
 学会被管理
 &lt;a class="anchor" href="#%e5%ad%a6%e4%bc%9a%e8%a2%ab%e7%ae%a1%e7%90%86">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>上级、主管是泛指，开发对口的 PD 主管等也在范围内。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>不要传播负面情绪，不要总是抱怨；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对上级不卑不亢更容易获得尊重，但不要当众反驳对方观点，分歧私下沟通；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>好好做向上管理，尤其是对齐预期，沟通绩效出现 Surprise 双方其实都有责任，但倒霉的是自己；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽量站在主管角度想问题：&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>这样能理解很多过去感觉匪夷所思的决策；&lt;/li>
&lt;li>不要在意谁执行、功劳是谁的等，为团队分忧赢得主管信任的重要性远远高于这些；&lt;/li>
&lt;li>不要把这个原则理解为唯上，这种最让人不齿。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="思维转换">
 思维转换
 &lt;a class="anchor" href="#%e6%80%9d%e7%bb%b4%e8%bd%ac%e6%8d%a2">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>定义问题是个高阶能力，尽早形成 发现问题-&amp;gt;定义问题-&amp;gt;解决问题-&amp;gt;消灭问题 的思维闭环；&lt;/li>
&lt;li>定事情价值导向，做事情结果导向，讲事情问题导向；&lt;/li>
&lt;li>讲不清楚，大概率不是因为自己是实干型，而是没想清楚，在晋升场更加明显；&lt;/li>
&lt;li>当一个人擅长解决某一场景的问题的时候，时间越久也许越离不开这个场景（被人贴上一个标签很难，撕掉一个标签更难）。&lt;/li>
&lt;/ul>
&lt;h2 id="要栓住情绪">
 要栓住情绪
 &lt;a class="anchor" href="#%e8%a6%81%e6%a0%93%e4%bd%8f%e6%83%85%e7%bb%aa">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>学会控制情绪，没人会认真听一个愤怒的人在说什么；&lt;/li>
&lt;li>再委屈、再愤怒也要保持理智，不要让自己成为需要被哄着的那种人；&lt;/li>
&lt;li>足够自信的人才会坦率的承认自己的问题，很多时候我们被激怒了，只是因为对方指出了自己藏在深处的自卑；&lt;/li>
&lt;li>伤害我们最深的既不是别人的所作所为，也不是自己犯的错误，而是我们对错误的回应。&lt;/li>
&lt;/ul>
&lt;h2 id="成为-leader">
 成为 Leader
 &lt;a class="anchor" href="#%e6%88%90%e4%b8%ba-leader">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Manager 有下属，Leader 有追随者，管理者不需要很多，但人人都可以是 Leader。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>让你信服、愿意追随的人不是职务上的 Manager，而是在帮助自己的那个人，自己想服众的话道理一样；&lt;/li>
&lt;li>不要轻易对人做负面评价，片面认知下的评价可能不准确，不经意的传播更是会给对方带来极大的困扰；&lt;/li>
&lt;li>Leader 如果不认同公司的使命、愿景、价值观，会过的特别痛苦；&lt;/li>
&lt;li>困难时候不要否定自己的队友，多给及时、正向的反馈；&lt;/li>
&lt;li>船长最重要的事情不是造船，而是激发水手对大海的向往；&lt;/li>
&lt;li>Leader 的天然职责是让团队活下去，唯一的途径是实现上级、老板、公司经营者的目标，越是艰难的时候越明显；&lt;/li>
&lt;li>Leader 的重要职责是识别团队需要被做的事情，并坚定信念，使众人行，越是艰难的时候越要坚定；&lt;/li>
&lt;li>Leader 应该让自己遇到的每个人都感觉自己很重要、被需要。&lt;/li>
&lt;/ul></description></item><item><title>聊聊大厂的绩效考核</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/employee-performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/employee-performance/</guid><description>&lt;blockquote>
&lt;p>&lt;mark>内容概览&lt;/mark>：&lt;/p>
&lt;ul>
&lt;li>在大部分公司，绩效跟你的年终奖、职级晋升、薪水涨幅等等福利是直接相关的。&lt;/li>
&lt;li>你的上级、上上级对你的绩效拥有绝对的话语权，这是潜规则，放到任何公司都是。成年人的世界，没有绝对的公平，绩效考核尤为明显。&lt;/li>
&lt;li>提升绩效的打法：
&lt;ul>
&lt;li>短期打法：找出 1-2 件事，体现出你的独特价值（抓关键事件）。&lt;/li>
&lt;li>长期打法：通过一步步信任的建立，成为团队的核心人员或者是老板的心腹，具备不可替代性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;mark>原文地址&lt;/mark>：
&lt;a target="_blank" href="https://mp.weixin.qq.com/s/D1s8p7z8Sp60c-ndGyh2yQ">https://mp.weixin.qq.com/s/D1s8p7z8Sp60c-ndGyh2yQ&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>在新公司度过了一个完整的 Q3 季度，被打了绩效，也给下属打了绩效，感慨颇深。&lt;/p>
&lt;p>今天就好好聊聊&lt;mark>大厂打工人最最关心的「绩效考核」&lt;/mark>，谈谈它背后的逻辑以及潜规则，摸清楚了它，你在大厂这片丛林里才能更好的生存下去。&lt;/p>
&lt;h2 id="大厂的绩效到底有多重要">
 大厂的绩效到底有多重要？
 &lt;a class="anchor" href="#%e5%a4%a7%e5%8e%82%e7%9a%84%e7%bb%a9%e6%95%88%e5%88%b0%e5%ba%95%e6%9c%89%e5%a4%9a%e9%87%8d%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;p>先从公司角度，谈谈为什么需要绩效考核？&lt;/p>
&lt;p>有一个著名的管理者言论，即：企业战略的上三路和下三路。&lt;/p>
&lt;blockquote>
&lt;p>上三路是使命、愿景、价值观，下三路是组织、人才、KPI。下三路需要确保上三路能执行下去，否则便是空谈。那怎么才能达成呢？&lt;/p>
&lt;/blockquote>
&lt;p>马老板在湖畔大学的课堂上，对底下众多 CEO 学员说，“只能靠 KPI。没有 KPI，一切都是空话，组织和公司是不会进步的”。&lt;/p>
&lt;p>所以，KPI 一般是用来承接企业战略的。身处大厂的打工者们，也能深深感受到：每个季度的 KPI 是如何从大 Boss、到 Boss、再到基层，一层层拆解下来的，最终让所有人朝着一个方向行动，这便是 KPI 对于公司的意义。&lt;/p>
&lt;p>然鹅，并非每个员工都会站在 CEO 的高度去理解 KPI 的价值，大家更关注的是 KPI 对于我个人来说到底有什么意义？&lt;/p>
&lt;p>在互联网大厂，每家公司都会设定一套绩效考核体系，字节用的是 OKR，阿里用的是 KPI，通常都是「271」 制度，即：&lt;/p>
&lt;blockquote>
&lt;p>20% 的比例是 A+ 和 A，对应明星员工。&lt;/p>
&lt;p>70% 的比例是 B，对应普通员工。&lt;/p>
&lt;p>10% 的比例是 C 和 C-，对应需要绩效改进或者淘汰的员工。&lt;/p>
&lt;/blockquote>
&lt;p>有了三六九等，然后才有了利益分配。&lt;/p>
&lt;p>&lt;mark>在大厂，绩效结果跟奖金、晋升、薪水涨幅、股票授予是直接相关的。在内卷的今天，甚至可以直接划上等号。&lt;/mark>&lt;/p>
&lt;p>绩效好的员工，奖金必然多，一年可能调薪两次，晋升答辩时能 PK 掉绩效一般的人，职级低的人甚至可以晋升免试。&lt;/p>
&lt;p>而绩效差的人，有可能一年白干，甚至走人（大厂的末尾淘汰是不成文的规定）。&lt;/p>
&lt;p>总之，你能想到的直接利益都和「绩效」息息相关。所以，在大厂这片高手众多的丛林里，多琢磨下绩效背后的逻辑，既是生存之道，更是一技之长。&lt;/p>
&lt;h2 id="你是怎么看待绩效的">
 你是怎么看待绩效的？
 &lt;a class="anchor" href="#%e4%bd%a0%e6%98%af%e6%80%8e%e4%b9%88%e7%9c%8b%e5%be%85%e7%bb%a9%e6%95%88%e7%9a%84">#&lt;/a>
&lt;/h2>
&lt;p>凡是用来考核人的规则，大部分人在潜意识里都想去突破它，而不是被束缚。&lt;/p>
&lt;p>至少在我刚工作的前几年，看着身边有些同事因为背个 C 黯然离开的时候，觉得绩效考核就是一个冷血的管理工具。&lt;/p></description></item><item><title>新入职一家公司如何快速进入工作状态</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company/</guid><description>&lt;blockquote>
&lt;p>&lt;mark>推荐语&lt;/mark>：强烈建议每一位即将入职/在职的小伙伴看看这篇文章，看完之后可以帮助你少踩很多坑。整篇文章逻辑清晰，内容全面！&lt;/p>
&lt;p>&lt;mark>原文地址&lt;/mark>：
&lt;a target="_blank" href="https://www.cnblogs.com/hunternet/p/14675348.html">https://www.cnblogs.com/hunternet/p/14675348.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="img/8c5137aa02606e58c030d46a55537852_MD5.jpg" alt="新入职一家公司如何快速进入状态" />&lt;/p>
&lt;p>一年一度的金三银四跳槽大戏即将落幕，相信很多跳槽的小伙伴们已经找到了心仪的工作，即将或已经有了新的开始。&lt;/p>
&lt;p>相信有过跳槽经验的小伙伴们都知道，每到一个新的公司面临的可能都是新的业务、新的技术、新的团队……这些可能会打破你原来工作思维、编码习惯、合作方式……&lt;/p>
&lt;p>而于公司而言，又不能给你几个月的时间去慢慢的熟悉。这个时候，如何快速进入工作状态，尽快发挥自己的价值是非常重要的。&lt;/p>
&lt;p>有些人可能会很幸运，入职的公司会有完善的流程与机制，通过一带一、各种培训等方式可以在短时间内快速的让新人进入工作状态。有些人可能就没有那么幸运了，就比如我在几年前跳槽进入某厂的时候，当时还没有像我们现在这么完善的带新人融入的机制，又赶上团队最忙的一段时间，刚一入职的当天下午就让给了我几个线上问题去排查，也没有任何的文档和培训。遇到情况，很多人可能会因为难以快速适应，最终承受不起压力而萌生退意。&lt;/p>
&lt;p>&lt;img src="img/16c35504979d5cf0b51a9874e1f66ebf_MD5.gif" alt="bad175e3a380bea." />&lt;/p>
&lt;p>那么，&lt;mark>我们应该如何去快速的让自己进入工作状态，适应新的工作节奏呢？&lt;/mark>&lt;/p>
&lt;p>新的工作面对着一堆的代码仓库，很多人常常感觉无从下手。但回顾一下自己过往的工作与项目的经验，我们可以发现它们有着异曲同工之处。当开始一个新的项目，一般会经历几个步骤：需求-&amp;gt;设计-&amp;gt;开发-&amp;gt;测试-&amp;gt;发布，就这么循环往复，我们完成了一个又一个的项目。&lt;/p>
&lt;p>&lt;img src="img/eaa49d9ef769a232dc08791033c2fcf5_MD5.jpg" alt="项目流程" />&lt;/p>
&lt;p>而在这个过程中主要有四个方面的知识那就是业务、技术、项目与团队贯穿始终。新入职一家公司，我们第一阶段的目标就是要具备能够跟着团队做项目的能力，因此我们所应尽快掌握的知识点也要从这四个方面入手。&lt;/p>
&lt;h2 id="业务">
 业务
 &lt;a class="anchor" href="#%e4%b8%9a%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;p>很多人可能会认为作为一个技术人，最应该了解的不应该是技术吗？于是他们在进入一家公司后，就迫不及待的研究起来了一些技术文档，系统架构，甚至抱起来源代码就开始“啃”，如果你也是这么做的，那就大错特错了！在几乎所有的公司里，技术都是作为一个工具存在的，虽然它很重要，但是它也是为了承载业务所存在的，技术解决了如何做的问题，而业务却告诉我们，做什么，为什么做。一旦脱离了业务，那么技术的存在将毫无意义。&lt;/p>
&lt;p>想要了解业务，有两个非常重要的方式&lt;/p>
&lt;p>&lt;mark>一是靠问&lt;/mark>&lt;/p>
&lt;p>如果你加入的团队，有着完善的业务培训机制，详尽的需求文档，也许你不需要过多的询问就可以了解业务，但这只是理想中的情况，大多数公司是没有这个条件的。因此我们只能靠问。&lt;/p>
&lt;p>这里不得不提的是，作为一个新人一定要有一定的脸皮厚度，不懂就要问。我见过很多新人会因为内向、腼腆，遇到疑问总是不好意思去问，这导致他们很长一段时间都难以融入团队、承担更重要的责任。不怕要怕挨训、怕被怼，而且我相信绝对多数的程序员还是很好沟通的！&lt;/p>
&lt;p>&lt;mark>二是靠测试&lt;/mark>&lt;/p>
&lt;p>我认为测试绝对是一个人快速了解团队业务的方式。通过测试我们可以走一走自己团队所负责项目的整体流程，如果遇到自己走不下去或想不通的地方及时去问，在这个过程中我们自然而然的就可以快速的了解到核心的业务流程。&lt;/p>
&lt;p>在了解业务的过程中，我们应该注意的是不要让自己过多的去追求细节，我们的目的是先能够整体了解业务流程，我们面向哪些用户，提供了哪些服务……&lt;/p>
&lt;h2 id="技术">
 技术
 &lt;a class="anchor" href="#%e6%8a%80%e6%9c%af">#&lt;/a>
&lt;/h2>
&lt;p>在我们初步了解完业务之后，就该到技术了，也许你已经按捺不住翻开源代码的准备了，但还是要先提醒你一句先不要着急。&lt;/p>
&lt;p>这个时候我们应该先按照自己了解到的业务，结合自己过往的工作经验去思考一下如果是自己去实现这个系统，应该如何去做？这一步很重要，它可以在后面我们具体去了解系统的技术实现的时候去对比一下与自己的实现思路有哪些差异，为什么会有这些差异，哪些更好，哪些不好，对于不好我们可以提出自己的意见，对于更好的我们可以吸收学习为己用！&lt;/p>
&lt;p>接下来，我们就是要了解技术了，但也不是一上来就去翻源代码。 &lt;mark>应该按照从宏观到细节，由外而内逐步地对系统进行分析。&lt;/mark>&lt;/p>
&lt;p>首先，我们应该简单的了解一下 &lt;mark>自己团队/项目的所用到的技术栈&lt;/mark> ，Java 还是.NET、亦或是多种语言并存，项目是前后端分离还是服务端全包，使用的数据库是 MySQL 还是 PostgreSQL……，这样我们可能会对所用到的技术和框架，以及自己所负责的内容有一定的预期，这一点有的人可能在面试的时候就会简单了解过。&lt;/p>
&lt;p>下一步，我们应该了解的是 &lt;mark>系统的宏观业务架构&lt;/mark> 。自己的团队主要负责哪些系统，每个系统又主要包含哪些模块，又与哪些外部系统进行交互……对于这些，最好可以通过流程图或者思维导图等方式整理出来。&lt;/p>
&lt;p>然后，我们要做的是看一下 &lt;mark>自己的团队提供了哪些对外的接口或者服务&lt;/mark> 。每个接口和服务所提供功能是什么。这一点我们可以继续去测试自己的系统，这个时候我们要看一看主要流程中主要包含了哪些页面，每个页面又调用了后端的哪些接口，每个后端接口又对应着哪个代码仓库。(如果是单纯做后端服务的，可以看一下我们提供了哪些服务，又有哪些上游服务，每个上游服务调用自己团队的哪些服务……)，同样我们应该用画图的形式整理出来。&lt;/p>
&lt;p>接着，我们要了解一下 &lt;mark>自己的系统或服务又依赖了哪些外部服务&lt;/mark> ，也就是说需要哪些外部系统的支持，这些服务也许是团队之外、公司之外，也可能是其他公司提供的。这个时候我们可以简单的进入代码看一下与外部系统的交互是怎么做的，包括通讯框架(REST、RPC)、通讯协议……&lt;/p>
&lt;p>到了代码层面，我们首先应该了解每个模块代码的层次结构，一个模块分了多少层，每个层次的职责是什么，了解了这个就对系统的整个设计有了初步的概念，紧接着就是代码的目录结构、配置文件的位置。&lt;/p>
&lt;p>最后，我们可以寻找一个示例，可以是一个接口，一个页面，让我们的思路跟随者代码的运行的路线，从入参到出参，完整的走一遍来验证一下我们之前的了解。&lt;/p>
&lt;p>到了这里我们对于技术层面的了解就可以先告一段落了，我们的目的知识对系统有一个初步的认知，更细节的东西，后面我们会有大把的时间去了解&lt;/p>
&lt;h2 id="项目与团队">
 项目与团队
 &lt;a class="anchor" href="#%e9%a1%b9%e7%9b%ae%e4%b8%8e%e5%9b%a2%e9%98%9f">#&lt;/a>
&lt;/h2>
&lt;p>上面我们提到，新入职一家公司，第一阶段的目标是有跟着团队做项目的能力，接下来我们要了解的就是项目是如何运作的。&lt;/p>
&lt;p>我们应该把握从需求设计到代码编写入库最终到发布上线的整个过程中的一些关键点。例如项目采用敏捷还是瀑布的模式，一个迭代周期是多长，需求的来源以及展现形式，有没有需求评审，代码的编写规范是什么，编写完成后如何构建，如何入库，有没有提交规范，如何交付测试，发布前的准备是什么，发布工具如何使用……&lt;/p>
&lt;p>关于项目我们只需要观察同事，或者自己亲身经历一个迭代的开发，就能够大概了解清楚。&lt;/p>
&lt;p>在了解项目运作的同时，我们还应该去了解团队，同样我们应该先从外部开始，我们对接了哪些外部团队，比如需求从哪里来，是否对接公司外部的团队，提供服务的上游团队有哪些，依赖的下游团队有哪些，团队之间如何沟通，常用的沟通方式是什么……&lt;/p>
&lt;p>接下来则是团队内部，团队中有哪些角色，每个人的职责是什么，这样遇到问题我们也可以清楚的找到对应的同事寻求帮助。是否有一些定期的活动与会议，例如每日站会、周例会，是否有一些约定俗成的规矩，是否有一些内部评审，分享机制……&lt;/p>
&lt;h2 id="总结">
 总结
 &lt;a class="anchor" href="#%e6%80%bb%e7%bb%93">#&lt;/a>
&lt;/h2>
&lt;p>新入职一家公司，面临新的工作挑战，能够尽快进入工作状态，实现自己的价值，将会给你带来一个好的开始。&lt;/p>
&lt;p>作为一个程序员，能够尽快进入工作状态，意味着我们首先应该具备跟着团队做项目的能力，这里我站在了一个后端开发的角度上从业务、技术、项目与团队四个方面总结了一些方法和经验。&lt;/p>
&lt;p>关于如何快速进入工作状态，如果你有好的方法与建议，欢迎在评论区留言。&lt;/p>
&lt;p>最后我们用一张思维导图来回顾一下这篇文章的内容。如果你觉得这篇文章对你有所帮助，可以关注文末公众号，我会经常分享一些自己成长过程中的经验与心得，与大家一起学习与进步。&lt;/p></description></item></channel></rss>