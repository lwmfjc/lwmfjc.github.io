<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Maven核心概念总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/maven-core-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/maven-core-concepts/</guid><description>&lt;blockquote>
&lt;p>这部分内容主要根据 Maven 官方文档整理，做了对应的删减，主要保留比较重要的部分，不涉及实战，主要是一些重要概念的介绍。&lt;/p>
&lt;/blockquote>
&lt;h2 id="maven-介绍">
 Maven 介绍
 &lt;a class="anchor" href="#maven-%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/apache/maven">Maven&lt;/a> 官方文档是这样介绍的 Maven 的：&lt;/p>
&lt;blockquote>
&lt;p>Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project&amp;rsquo;s build, reporting and documentation from a central piece of information.&lt;/p>
&lt;p>Apache Maven 的本质是一个软件项目管理和理解工具。基于项目对象模型 (Project Object Model，POM) 的概念，Maven 可以从一条中心信息管理项目的构建、报告和文档。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>什么是 POM？&lt;/strong> 每一个 Maven 工程都有一个 &lt;code>pom.xml&lt;/code> 文件，位于根目录中，包含项目构建生命周期的详细信息。通过 &lt;code>pom.xml&lt;/code> 文件，我们可以定义项目的坐标、项目依赖、项目信息、插件信息等等配置。&lt;/p>
&lt;p>对于开发者来说，Maven 的主要作用主要有 3 个：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>项目构建&lt;/strong>：提供标准的、跨平台的自动化项目构建方式。&lt;/li>
&lt;li>&lt;strong>依赖管理&lt;/strong>：方便快捷的管理项目依赖的资源（jar 包），避免资源间的版本冲突问题。&lt;/li>
&lt;li>&lt;strong>统一开发结构&lt;/strong>：提供标准的、统一的项目结构。&lt;/li>
&lt;/ol>
&lt;p>关于 Maven 的基本使用这里就不介绍了，建议看看官网的 5 分钟上手 Maven 的教程：&lt;a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven in 5 Minutes&lt;/a> 。&lt;/p></description></item><item><title>Maven最佳实践</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/maven-best-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/maven/maven-best-practices/</guid><description>&lt;blockquote>
&lt;p>本文由 JavaGuide 翻译并完善，原文地址：&lt;a href="https://medium.com/@AlexanderObregon/maven-best-practices-tips-and-tricks-for-java-developers-438eca03f72b">https://medium.com/@AlexanderObregon/maven-best-practices-tips-and-tricks-for-java-developers-438eca03f72b&lt;/a> 。&lt;/p>
&lt;/blockquote>
&lt;p>Maven 是一种广泛使用的 Java 项目构建自动化工具。它简化了构建过程并帮助管理依赖关系，使开发人员的工作更轻松。Maven 详细介绍可以参考我写的这篇 &lt;a href="./maven-core-concepts.md">Maven 核心概念总结&lt;/a> 。&lt;/p>
&lt;p>这篇文章不会涉及到 Maven 概念的介绍，主要讨论一些最佳实践、建议和技巧，以优化我们在项目中对 Maven 的使用并改善我们的开发体验。&lt;/p>
&lt;h2 id="maven-标准目录结构">
 Maven 标准目录结构
 &lt;a class="anchor" href="#maven-%e6%a0%87%e5%87%86%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>Maven 遵循标准目录结构来保持项目之间的一致性。遵循这种结构可以让其他开发人员更轻松地理解我们的项目。&lt;/p>
&lt;p>Maven 项目的标准目录结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>src&lt;span style="color:#e6db74">/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> main/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> java&lt;span style="color:#e6db74">/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> resources/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test&lt;span style="color:#e6db74">/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> java/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pom&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">xml&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>src/main/java&lt;/code>：源代码目录&lt;/li>
&lt;li>&lt;code>src/main/resources&lt;/code>：资源文件目录&lt;/li>
&lt;li>&lt;code>src/test/java&lt;/code>：测试代码目录&lt;/li>
&lt;li>&lt;code>src/test/resources&lt;/code>：测试资源文件目录&lt;/li>
&lt;/ul>
&lt;p>这只是一个最简单的 Maven 项目目录示例。实际项目中，我们还会根据项目规范去做进一步的细分。&lt;/p>
&lt;h2 id="指定-maven-编译器插件">
 指定 Maven 编译器插件
 &lt;a class="anchor" href="#%e6%8c%87%e5%ae%9a-maven-%e7%bc%96%e8%af%91%e5%99%a8%e6%8f%92%e4%bb%b6">#&lt;/a>
&lt;/h2>
&lt;p>默认情况下，Maven 使用 Java5 编译我们的项目。要使用不同的 JDK 版本，请在 &lt;code>pom.xml&lt;/code> 文件中配置 Maven 编译器插件。&lt;/p>
&lt;p>例如，如果你想要使用 Java8 来编译你的项目，你可以在&lt;code>&amp;lt;build&amp;gt;&lt;/code>标签下添加以下的代码片段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.apache.maven.plugins&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>maven-compiler-plugin&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>3.8.1&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;source&amp;gt;&lt;/span>1.8&lt;span style="color:#f92672">&amp;lt;/source&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;target&amp;gt;&lt;/span>1.8&lt;span style="color:#f92672">&amp;lt;/target&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，Maven 就会使用 Java8 的编译器来编译你的项目。如果你想要使用其他版本的 JDK，你只需要修改&lt;code>&amp;lt;source&amp;gt;&lt;/code>和&lt;code>&amp;lt;target&amp;gt;&lt;/code>标签的值即可。例如，如果你想要使用 Java11，你可以将它们的值改为 11。&lt;/p></description></item></channel></rss>