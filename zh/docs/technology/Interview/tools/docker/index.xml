<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Docker核心概念总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/docker-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/docker-intro/</guid><description>&lt;p>本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。&lt;/p>
&lt;h2 id="容器介绍">
 容器介绍
 &lt;a class="anchor" href="#%e5%ae%b9%e5%99%a8%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Docker 是世界领先的软件容器平台&lt;/strong>，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。&lt;/p>
&lt;h3 id="什么是容器">
 什么是容器?
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%ae%b9%e5%99%a8">#&lt;/a>
&lt;/h3>
&lt;h4 id="先来看看容器较为官方的解释">
 先来看看容器较为官方的解释
 &lt;a class="anchor" href="#%e5%85%88%e6%9d%a5%e7%9c%8b%e7%9c%8b%e5%ae%b9%e5%99%a8%e8%be%83%e4%b8%ba%e5%ae%98%e6%96%b9%e7%9a%84%e8%a7%a3%e9%87%8a">#&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>容器镜像是轻量的、可执行的独立软件包&lt;/strong> ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。&lt;/li>
&lt;li>&lt;strong>容器化软件适用于基于 Linux 和 Windows 的应用，在任何环境中都能够始终如一地运行。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>容器赋予了软件独立性&lt;/strong>，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。&lt;/li>
&lt;/ul>
&lt;h4 id="再来看看容器较为通俗的解释">
 再来看看容器较为通俗的解释
 &lt;a class="anchor" href="#%e5%86%8d%e6%9d%a5%e7%9c%8b%e7%9c%8b%e5%ae%b9%e5%99%a8%e8%be%83%e4%b8%ba%e9%80%9a%e4%bf%97%e7%9a%84%e8%a7%a3%e9%87%8a">#&lt;/a>
&lt;/h4>
&lt;p>如果需要通俗地描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/docker/container.png" alt="认识容器" />&lt;/p>
&lt;h3 id="图解物理机虚拟机与容器">
 图解物理机,虚拟机与容器
 &lt;a class="anchor" href="#%e5%9b%be%e8%a7%a3%e7%89%a9%e7%90%86%e6%9c%ba%e8%99%9a%e6%8b%9f%e6%9c%ba%e4%b8%8e%e5%ae%b9%e5%99%a8">#&lt;/a>
&lt;/h3>
&lt;p>关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解(下面的图片来源于网络)。&lt;/p>
&lt;p>&lt;strong>物理机：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/docker/%E7%89%A9%E7%90%86%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg" alt="物理机" />&lt;/p>
&lt;p>&lt;strong>虚拟机：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/docker/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%BE%E8%A7%A3.jpeg" alt="虚拟机" />&lt;/p>
&lt;p>&lt;strong>容器：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javaguide/image-20211110104003678.png" alt="" />&lt;/p>
&lt;p>通过上面这三张抽象图，我们可以大概通过类比概括出：&lt;strong>容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。&lt;/strong>&lt;/p>
&lt;h3 id="容器-vs-虚拟机">
 容器 VS 虚拟机
 &lt;a class="anchor" href="#%e5%ae%b9%e5%99%a8-vs-%e8%99%9a%e6%8b%9f%e6%9c%ba">#&lt;/a>
&lt;/h3>
&lt;p>每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。&lt;/p>
&lt;p>简单来说：&lt;strong>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。&lt;/strong>&lt;/p>
&lt;p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javaguide/2e2b95eebf60b6d03f6c1476f4d7c697.png" alt="" />&lt;/p>
&lt;p>&lt;strong>容器和虚拟机的对比&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javaguide/4ef8691d67eb1eb53217099d0a691eb5.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， &lt;strong>容器占用的空间较少&lt;/strong>（容器镜像大小通常只有几十兆），&lt;strong>瞬间就能完成启动&lt;/strong> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 &lt;strong>占用大量空间&lt;/strong> 。而且 VM &lt;strong>启动也十分缓慢&lt;/strong> 。&lt;/p></description></item><item><title>Docker实战</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/docker-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/docker/docker-in-action/</guid><description>&lt;h2 id="docker-介绍">
 Docker 介绍
 &lt;a class="anchor" href="#docker-%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>开始之前，还是简单介绍一下 Docker，更多 Docker 概念介绍可以看前一篇文章
&lt;a href="./docker-intro.md">Docker 核心概念总结&lt;/a>。&lt;/p>
&lt;h3 id="什么是-docker">
 什么是 Docker？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-docker">#&lt;/a>
&lt;/h3>
&lt;p>说实话关于 Docker 是什么并不太好说，下面我通过四点向你说明 Docker 到底是个什么东西。&lt;/p>
&lt;ul>
&lt;li>Docker 是世界领先的软件容器平台，基于 &lt;strong>Go 语言&lt;/strong> 进行开发实现。&lt;/li>
&lt;li>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放开发人员。&lt;/li>
&lt;li>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。&lt;/li>
&lt;li>Docker 可以&lt;strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。&lt;/strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。&lt;/li>
&lt;/ul>
&lt;p>官网地址：
&lt;a href="https://www.docker.com/">https://www.docker.com/&lt;/a> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/docker/container.png" alt="认识容器" />&lt;/p>
&lt;h3 id="为什么要用-docker">
 为什么要用 Docker?
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%94%a8-docker">#&lt;/a>
&lt;/h3>
&lt;p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p>
&lt;p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app），更重要的是容器性能开销极低。&lt;/p>
&lt;p>传统的开发流程中，我们的项目通常需要使用 MySQL、Redis、FastDFS 等等环境，这些环境都是需要我们手动去进行下载并配置的，安装配置流程极其复杂，而且不同系统下的操作也不一样。&lt;/p>
&lt;p>Docker 的出现完美地解决了这一问题，我们可以在容器中安装 MySQL、Redis 等软件环境，使得应用和环境架构分开，它的优势在于：&lt;/p>
&lt;ol>
&lt;li>一致的运行环境，能够更轻松地迁移&lt;/li>
&lt;li>对进程进行封装隔离，容器与容器之间互不影响，更高效地利用系统资源&lt;/li>
&lt;li>可以通过镜像复制多个一致的容器&lt;/li>
&lt;/ol>
&lt;p>另外，
&lt;a href="https://yeasy.gitbook.io/docker_practice/introduction/why">《Docker 从入门到实践》&lt;/a> 这本开源书籍中也已经给出了使用 Docker 的原因。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/docker/20210412220015698.png" alt="" />&lt;/p>
&lt;h2 id="docker-的安装">
 Docker 的安装
 &lt;a class="anchor" href="#docker-%e7%9a%84%e5%ae%89%e8%a3%85">#&lt;/a>
&lt;/h2>
&lt;h3 id="windows">
 Windows
 &lt;a class="anchor" href="#windows">#&lt;/a>
&lt;/h3>
&lt;p>接下来对 Docker 进行安装，以 Windows 系统为例，访问 Docker 的官网：&lt;/p></description></item></channel></rss>