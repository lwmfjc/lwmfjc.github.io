<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Github实用小技巧总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/github-tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/github-tips/</guid><description>&lt;p>我使用 Github 已经有 6 年多了，今天毫无保留地把自己觉得比较有用的 Github 小技巧送给关注 JavaGuide 的各位小伙伴。&lt;/p>
&lt;h2 id="一键生成-github-简历--github-年报">
 一键生成 Github 简历 &amp;amp; Github 年报
 &lt;a class="anchor" href="#%e4%b8%80%e9%94%ae%e7%94%9f%e6%88%90-github-%e7%ae%80%e5%8e%86--github-%e5%b9%b4%e6%8a%a5">#&lt;/a>
&lt;/h2>
&lt;p>通过 &lt;a href="https://resume.github.io/">https://resume.github.io/&lt;/a> 这个网站你可以一键生成一个在线的 Github 简历。&lt;/p>
&lt;p>当时我参加的校招的时候，个人信息那里就放了一个在线的 Github 简历。我觉得这样会让面试官感觉你是一个内行，会提高一些印象分。&lt;/p>
&lt;p>但是，如果你的 Github 没有什么项目的话还是不要放在简历里面了。生成后的效果如下图所示。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/2020-11/image-20201108192205620.png" alt="Github简历" />&lt;/p>
&lt;p>通过 &lt;a href="https://www.githubtrends.io/wrapped">https://www.githubtrends.io/wrapped&lt;/a> 这个网站，你可以生成一份 Github 个人年报，这个年报会列举出你在这一年的项目贡献情况、最常使用的编程语言、详细的贡献信息。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/dootask/image-20211226144607457.png" alt="" />&lt;/p>
&lt;h2 id="个性化-github-首页">
 个性化 Github 首页
 &lt;a class="anchor" href="#%e4%b8%aa%e6%80%a7%e5%8c%96-github-%e9%a6%96%e9%a1%b5">#&lt;/a>
&lt;/h2>
&lt;p>Github 目前支持在个人主页自定义展示一些内容。展示效果如下图所示。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/java-guide-blog/image-20210616221212259.png" alt="个性化首页展示效果" />&lt;/p>
&lt;p>想要做到这样非常简单，你只需要创建一个和你的 Github 账户同名的仓库，然后自定义&lt;code>README.md&lt;/code>的内容即可。&lt;/p>
&lt;p>展示在你主页的自定义内容就是&lt;code>README.md&lt;/code>的内容（&lt;em>不会 Markdown 语法的小伙伴自行面壁 5 分钟&lt;/em>）。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/java-guide-blog/image-20201107110309341.png" alt="创建一个和你的Github账户同名的仓库" />&lt;/p>
&lt;p>这个也是可以玩出花来的！比如说：通过 &lt;a href="https://hellogithub.com/periodical/statistics/click/?target=https://github.com/anuraghazra/github-readme-stats">github-readme-stats&lt;/a> 这个开源项目，你可以 README 中展示动态生成的 GitHub 统计信息。展示效果如下图所示。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/java-guide-blog/image-20210616221312426.png" alt="通过github-readme-stats动态生成GitHub统计信息 " />&lt;/p>
&lt;p>关于个性化首页这个就不多提了，感兴趣的小伙伴自行研究一下。&lt;/p>
&lt;h2 id="自定义项目徽章">
 自定义项目徽章
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e9%a1%b9%e7%9b%ae%e5%be%bd%e7%ab%a0">#&lt;/a>
&lt;/h2>
&lt;p>你在 Github 上看到的项目徽章都是通过 &lt;a href="https://shields.io/">https://shields.io/&lt;/a> 这个网站生成的。我的 JavaGuide 这个项目的徽章如下图所示。&lt;/p></description></item><item><title>Git核心概念总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/git-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/tools/git/git-intro/</guid><description>&lt;h2 id="版本控制">
 版本控制
 &lt;a class="anchor" href="#%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是版本控制">
 什么是版本控制
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h3>
&lt;p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。&lt;/p>
&lt;h3 id="为什么要版本控制">
 为什么要版本控制
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h3>
&lt;p>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。&lt;/p>
&lt;h3 id="本地版本控制系统">
 本地版本控制系统
 &lt;a class="anchor" href="#%e6%9c%ac%e5%9c%b0%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。&lt;/p>
&lt;p>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/git/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png" alt="本地版本控制系统" />&lt;/p>
&lt;h3 id="集中化的版本控制系统">
 集中化的版本控制系统
 &lt;a class="anchor" href="#%e9%9b%86%e4%b8%ad%e5%8c%96%e7%9a%84%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生。&lt;/p>
&lt;p>集中化的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/git/%E9%9B%86%E4%B8%AD%E5%8C%96%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png" alt="集中化的版本控制系统" />&lt;/p>
&lt;p>这么做虽然解决了本地版本控制系统无法让在不同系统上的开发者协同工作的诟病，但也还是存在下面的问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>单点故障：&lt;/strong> 中央服务器宕机，则其他人无法使用；如果中心数据库磁盘损坏又没有进行备份，你将丢失所有数据。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。&lt;/li>
&lt;li>&lt;strong>必须联网才能工作：&lt;/strong> 受网络状况、带宽影响。&lt;/li>
&lt;/ul>
&lt;h3 id="分布式版本控制系统">
 分布式版本控制系统
 &lt;a class="anchor" href="#%e5%88%86%e5%b8%83%e5%bc%8f%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）面世了。 Git 就是一个典型的分布式版本控制系统。&lt;/p>
&lt;p>这类系统，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/tools/git/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png" alt="分布式版本控制系统" />&lt;/p>
&lt;p>分布式版本控制系统可以不用联网就可以工作，因为每个人的电脑上都是完整的版本库，当你修改了某个文件后，你只需要将自己的修改推送给别人就可以了。但是，在实际使用分布式版本控制系统的时候，很少会直接进行推送修改，而是使用一台充当“中央服务器”的东西。这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。&lt;/p>
&lt;p>分布式版本控制系统的优势不单是不必联网这么简单，后面我们还会看到 Git 极其强大的分支管理等功能。&lt;/p>
&lt;h2 id="认识-git">
 认识 Git
 &lt;a class="anchor" href="#%e8%ae%a4%e8%af%86-git">#&lt;/a>
&lt;/h2>
&lt;h3 id="git-简史">
 Git 简史
 &lt;a class="anchor" href="#git-%e7%ae%80%e5%8f%b2">#&lt;/a>
&lt;/h3>
&lt;p>Linux 内核项目组当时使用分布式版本控制系统 BitKeeper 来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。&lt;/p></description></item></channel></rss>