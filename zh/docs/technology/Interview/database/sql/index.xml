<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL常见面试题总结（1）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-01/</guid><description>&lt;blockquote>
&lt;p>题目来源于：
&lt;a target="_blank" href="https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=SQL%E7%AF%87&amp;amp;topicId=298">牛客题霸 - SQL 必知必会&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="检索数据">
 检索数据
 &lt;a class="anchor" href="#%e6%a3%80%e7%b4%a2%e6%95%b0%e6%8d%ae">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>SELECT&lt;/code> 用于从数据库中查询数据。&lt;/p>
&lt;h3 id="从-customers-表中检索所有的-id">
 从 Customers 表中检索所有的 ID
 &lt;a class="anchor" href="#%e4%bb%8e-customers-%e8%a1%a8%e4%b8%ad%e6%a3%80%e7%b4%a2%e6%89%80%e6%9c%89%e7%9a%84-id">#&lt;/a>
&lt;/h3>
&lt;p>现有表 &lt;code>Customers&lt;/code> 如下：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>cust_id&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>A&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>B&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>C&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>编写 SQL 语句，从 &lt;code>Customers&lt;/code> 表中检索所有的 &lt;code>cust_id&lt;/code>。&lt;/p>
&lt;p>答案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> cust_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> Customers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="检索并列出已订购产品的清单">
 检索并列出已订购产品的清单
 &lt;a class="anchor" href="#%e6%a3%80%e7%b4%a2%e5%b9%b6%e5%88%97%e5%87%ba%e5%b7%b2%e8%ae%a2%e8%b4%ad%e4%ba%a7%e5%93%81%e7%9a%84%e6%b8%85%e5%8d%95">#&lt;/a>
&lt;/h3>
&lt;p>表 &lt;code>OrderItems&lt;/code> 含有非空的列 &lt;code>prod_id&lt;/code> 代表商品 id，包含了所有已订购的商品（有些已被订购多次）。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>prod_id&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>a1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a2&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a3&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a5&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a6&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>a7&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>编写 SQL 语句，检索并列出所有已订购商品（&lt;code>prod_id&lt;/code>）的去重后的清单。&lt;/p>
&lt;p>答案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">DISTINCT&lt;/span> prod_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> OrderItems
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>知识点：&lt;code>DISTINCT&lt;/code> 用于返回列中的唯一不同值。&lt;/p>
&lt;h3 id="检索所有列">
 检索所有列
 &lt;a class="anchor" href="#%e6%a3%80%e7%b4%a2%e6%89%80%e6%9c%89%e5%88%97">#&lt;/a>
&lt;/h3>
&lt;p>现在有 &lt;code>Customers&lt;/code> 表（表中含有列 &lt;code>cust_id&lt;/code> 代表客户 id，&lt;code>cust_name&lt;/code> 代表客户姓名）&lt;/p></description></item><item><title>SQL常见面试题总结（2）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-02/</guid><description>&lt;blockquote>
&lt;p>题目来源于：
&lt;a target="_blank" href="https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=SQL%E7%AF%87&amp;amp;topicId=240">牛客题霸 - SQL 进阶挑战&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="增删改操作">
 增删改操作
 &lt;a class="anchor" href="#%e5%a2%9e%e5%88%a0%e6%94%b9%e6%93%8d%e4%bd%9c">#&lt;/a>
&lt;/h2>
&lt;p>SQL 插入记录的方式汇总：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>普通插入（全字段）&lt;/mark> ：&lt;code>INSERT INTO table_name VALUES (value1, value2, ...)&lt;/code>&lt;/li>
&lt;li>&lt;mark>普通插入（限定字段）&lt;/mark> ：&lt;code>INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...)&lt;/code>&lt;/li>
&lt;li>&lt;mark>多条一次性插入&lt;/mark> ：&lt;code>INSERT INTO table_name (column1, column2, ...) VALUES (value1_1, value1_2, ...), (value2_1, value2_2, ...), ...&lt;/code>&lt;/li>
&lt;li>&lt;mark>从另一个表导入&lt;/mark> ：&lt;code>INSERT INTO table_name SELECT * FROM table_name2 [WHERE key=value]&lt;/code>&lt;/li>
&lt;li>&lt;mark>带更新的插入&lt;/mark> ：&lt;code>REPLACE INTO table_name VALUES (value1, value2, ...)&lt;/code>（注意这种原理是检测到主键或唯一性索引键重复就删除原记录后重新插入）&lt;/li>
&lt;/ul>
&lt;h3 id="插入记录一">
 插入记录（一）
 &lt;a class="anchor" href="#%e6%8f%92%e5%85%a5%e8%ae%b0%e5%bd%95%e4%b8%80">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>描述&lt;/mark>：牛客后台会记录每个用户的试卷作答记录到 &lt;code>exam_record&lt;/code> 表，现在有两个用户的作答记录详情如下：&lt;/p>
&lt;ul>
&lt;li>用户 1001 在 2021 年 9 月 1 日晚上 10 点 11 分 12 秒开始作答试卷 9001，并在 50 分钟后提交，得了 90 分；&lt;/li>
&lt;li>用户 1002 在 2021 年 9 月 4 日上午 7 点 1 分 2 秒开始作答试卷 9002，并在 10 分钟后退出了平台。&lt;/li>
&lt;/ul>
&lt;p>试卷作答记录表&lt;code>exam_record&lt;/code>中，表已建好，其结构如下，请用一条语句将这两条记录插入表中。&lt;/p></description></item><item><title>SQL常见面试题总结（3）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-03/</guid><description>&lt;blockquote>
&lt;p>题目来源于：
&lt;a target="_blank" href="https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=SQL%E7%AF%87&amp;amp;topicId=240">牛客题霸 - SQL 进阶挑战&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>较难或者困难的题目可以根据自身实际情况和面试需要来决定是否要跳过。&lt;/p>
&lt;h2 id="聚合函数">
 聚合函数
 &lt;a class="anchor" href="#%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="sql-类别高难度试卷得分的截断平均值较难">
 SQL 类别高难度试卷得分的截断平均值（较难）
 &lt;a class="anchor" href="#sql-%e7%b1%bb%e5%88%ab%e9%ab%98%e9%9a%be%e5%ba%a6%e8%af%95%e5%8d%b7%e5%be%97%e5%88%86%e7%9a%84%e6%88%aa%e6%96%ad%e5%b9%b3%e5%9d%87%e5%80%bc%e8%be%83%e9%9a%be">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>描述&lt;/mark>： 牛客的运营同学想要查看大家在 SQL 类别中高难度试卷的得分情况。&lt;/p>
&lt;p>请你帮她从&lt;code>exam_record&lt;/code>数据表中计算所有用户完成 SQL 类别高难度试卷得分的截断平均值（去掉一个最大值和一个最小值后的平均值）。&lt;/p>
&lt;p>示例数据：&lt;code>examination_info&lt;/code>（&lt;code>exam_id&lt;/code> 试卷 ID, tag 试卷类别, &lt;code>difficulty&lt;/code> 试卷难度, &lt;code>duration&lt;/code> 考试时长, &lt;code>release_time&lt;/code> 发布时间）&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>id&lt;/th>
 &lt;th>exam_id&lt;/th>
 &lt;th>tag&lt;/th>
 &lt;th>difficulty&lt;/th>
 &lt;th>duration&lt;/th>
 &lt;th>release_time&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>SQL&lt;/td>
 &lt;td>hard&lt;/td>
 &lt;td>60&lt;/td>
 &lt;td>2020-01-01 10:00:00&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>9002&lt;/td>
 &lt;td>算法&lt;/td>
 &lt;td>medium&lt;/td>
 &lt;td>80&lt;/td>
 &lt;td>2020-08-02 10:00:00&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>示例数据：&lt;code>exam_record&lt;/code>（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>id&lt;/th>
 &lt;th>uid&lt;/th>
 &lt;th>exam_id&lt;/th>
 &lt;th>start_time&lt;/th>
 &lt;th>submit_time&lt;/th>
 &lt;th>score&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2020-01-02 09:01:01&lt;/td>
 &lt;td>2020-01-02 09:21:01&lt;/td>
 &lt;td>80&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-05-02 10:01:01&lt;/td>
 &lt;td>2021-05-02 10:30:01&lt;/td>
 &lt;td>81&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-06-02 19:01:01&lt;/td>
 &lt;td>2021-06-02 19:31:01&lt;/td>
 &lt;td>84&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9002&lt;/td>
 &lt;td>2021-09-05 19:01:01&lt;/td>
 &lt;td>2021-09-05 19:40:01&lt;/td>
 &lt;td>89&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-09-02 12:01:01&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9002&lt;/td>
 &lt;td>2021-09-01 12:01:01&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>7&lt;/td>
 &lt;td>1002&lt;/td>
 &lt;td>9002&lt;/td>
 &lt;td>2021-02-02 19:01:01&lt;/td>
 &lt;td>2021-02-02 19:30:01&lt;/td>
 &lt;td>87&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>8&lt;/td>
 &lt;td>1002&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-05-05 18:01:01&lt;/td>
 &lt;td>2021-05-05 18:59:02&lt;/td>
 &lt;td>90&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>9&lt;/td>
 &lt;td>1003&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-09-07 12:01:01&lt;/td>
 &lt;td>2021-09-07 10:31:01&lt;/td>
 &lt;td>50&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>10&lt;/td>
 &lt;td>1004&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-09-06 10:01:01&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>根据输入你的查询结果如下：&lt;/p></description></item><item><title>SQL常见面试题总结（4）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-04/</guid><description>&lt;blockquote>
&lt;p>题目来源于：
&lt;a target="_blank" href="https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=SQL%E7%AF%87&amp;amp;topicId=240">牛客题霸 - SQL 进阶挑战&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>较难或者困难的题目可以根据自身实际情况和面试需要来决定是否要跳过。&lt;/p>
&lt;h2 id="专用窗口函数">
 专用窗口函数
 &lt;a class="anchor" href="#%e4%b8%93%e7%94%a8%e7%aa%97%e5%8f%a3%e5%87%bd%e6%95%b0">#&lt;/a>
&lt;/h2>
&lt;p>MySQL 8.0 版本引入了窗口函数的支持，下面是 MySQL 中常见的窗口函数及其用法：&lt;/p>
&lt;ol>
&lt;li>&lt;code>ROW_NUMBER()&lt;/code>: 为查询结果集中的每一行分配一个唯一的整数值。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, ROW_NUMBER() OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1) &lt;span style="color:#66d9ef">AS&lt;/span> row_num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>RANK()&lt;/code>: 计算每一行在排序结果中的排名。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, RANK() OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1 &lt;span style="color:#66d9ef">DESC&lt;/span>) &lt;span style="color:#66d9ef">AS&lt;/span> ranking
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>DENSE_RANK()&lt;/code>: 计算每一行在排序结果中的排名，保留相同的排名。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, DENSE_RANK() OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1 &lt;span style="color:#66d9ef">DESC&lt;/span>) &lt;span style="color:#66d9ef">AS&lt;/span> ranking
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>NTILE(n)&lt;/code>: 将结果分成 n 个基本均匀的桶，并为每个桶分配一个标识号。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, NTILE(&lt;span style="color:#ae81ff">4&lt;/span>) OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1) &lt;span style="color:#66d9ef">AS&lt;/span> bucket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>&lt;code>SUM()&lt;/code>, &lt;code>AVG()&lt;/code>,&lt;code>COUNT()&lt;/code>, &lt;code>MIN()&lt;/code>, &lt;code>MAX()&lt;/code>: 这些聚合函数也可以与窗口函数结合使用，计算窗口内指定列的汇总、平均值、计数、最小值和最大值。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, &lt;span style="color:#66d9ef">SUM&lt;/span>(col1) OVER () &lt;span style="color:#66d9ef">AS&lt;/span> sum_col
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>&lt;code>LEAD()&lt;/code> 和 &lt;code>LAG()&lt;/code>: LEAD 函数用于获取当前行之后的某个偏移量的行的值，而 LAG 函数用于获取当前行之前的某个偏移量的行的值。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, LEAD(col1, &lt;span style="color:#ae81ff">1&lt;/span>) OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1) &lt;span style="color:#66d9ef">AS&lt;/span> next_col1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LAG(col1, &lt;span style="color:#ae81ff">1&lt;/span>) OVER (&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col1) &lt;span style="color:#66d9ef">AS&lt;/span> prev_col1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>&lt;code>FIRST_VALUE()&lt;/code> 和 &lt;code>LAST_VALUE()&lt;/code>: FIRST_VALUE 函数用于获取窗口内指定列的第一个值，LAST_VALUE 函数用于获取窗口内指定列的最后一个值。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> col1, col2, FIRST_VALUE(col2) OVER (PARTITION &lt;span style="color:#66d9ef">BY&lt;/span> col1 &lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col2) &lt;span style="color:#66d9ef">AS&lt;/span> first_val,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LAST_VALUE(col2) OVER (PARTITION &lt;span style="color:#66d9ef">BY&lt;/span> col1 &lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> col2) &lt;span style="color:#66d9ef">AS&lt;/span> last_val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>窗口函数通常需要配合 OVER 子句一起使用，用于定义窗口的大小、排序规则和分组方式。&lt;/p></description></item><item><title>SQL常见面试题总结（5）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-questions-05/</guid><description>&lt;blockquote>
&lt;p>题目来源于：
&lt;a target="_blank" href="https://www.nowcoder.com/exam/oj?page=1&amp;amp;tab=SQL%E7%AF%87&amp;amp;topicId=240">牛客题霸 - SQL 进阶挑战&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>较难或者困难的题目可以根据自身实际情况和面试需要来决定是否要跳过。&lt;/p>
&lt;h2 id="空值处理">
 空值处理
 &lt;a class="anchor" href="#%e7%a9%ba%e5%80%bc%e5%a4%84%e7%90%86">#&lt;/a>
&lt;/h2>
&lt;h3 id="统计有未完成状态的试卷的未完成数和未完成率">
 统计有未完成状态的试卷的未完成数和未完成率
 &lt;a class="anchor" href="#%e7%bb%9f%e8%ae%a1%e6%9c%89%e6%9c%aa%e5%ae%8c%e6%88%90%e7%8a%b6%e6%80%81%e7%9a%84%e8%af%95%e5%8d%b7%e7%9a%84%e6%9c%aa%e5%ae%8c%e6%88%90%e6%95%b0%e5%92%8c%e6%9c%aa%e5%ae%8c%e6%88%90%e7%8e%87">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>描述&lt;/mark>：&lt;/p>
&lt;p>现有试卷作答记录表 &lt;code>exam_record&lt;/code>（&lt;code>uid&lt;/code> 用户 ID, &lt;code>exam_id&lt;/code> 试卷 ID, &lt;code>start_time&lt;/code> 开始作答时间, &lt;code>submit_time&lt;/code> 交卷时间, &lt;code>score&lt;/code> 得分），数据如下：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>id&lt;/th>
 &lt;th>uid&lt;/th>
 &lt;th>exam_id&lt;/th>
 &lt;th>start_time&lt;/th>
 &lt;th>submit_time&lt;/th>
 &lt;th>score&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2020-01-02 09:01:01&lt;/td>
 &lt;td>2020-01-02 09:21:01&lt;/td>
 &lt;td>80&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-05-02 10:01:01&lt;/td>
 &lt;td>2021-05-02 10:30:01&lt;/td>
 &lt;td>81&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>1001&lt;/td>
 &lt;td>9001&lt;/td>
 &lt;td>2021-09-02 12:01:01&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;td>(NULL)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>请统计有未完成状态的试卷的未完成数 incomplete_cnt 和未完成率 incomplete_rate。由示例数据结果输出如下：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>exam_id&lt;/th>
 &lt;th>incomplete_cnt&lt;/th>
 &lt;th>complete_rate&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>9001&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>0.333&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>解释：试卷 9001 有 3 次被作答的记录，其中两次完成，1 次未完成，因此未完成数为 1，未完成率为 0.333（保留 3 位小数）&lt;/p></description></item><item><title>SQL语法基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-syntax-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/sql/sql-syntax-summary/</guid><description>&lt;blockquote>
&lt;p>本文整理完善自下面这两份资料：&lt;/p>
&lt;ul>
&lt;li>
&lt;a target="_blank" href="https://juejin.cn/post/6844903790571700231">SQL 语法速成手册&lt;/a>&lt;/li>
&lt;li>
&lt;a target="_blank" href="https://www.begtut.com/mysql/mysql-tutorial.html">MySQL 超全教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="基本概念">
 基本概念
 &lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>
&lt;/h2>
&lt;h3 id="数据库术语">
 数据库术语
 &lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e6%9c%af%e8%af%ad">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>数据库（database）&lt;/code> - 保存有组织的数据的容器（通常是一个文件或一组文件）。&lt;/li>
&lt;li>&lt;code>数据表（table）&lt;/code> - 某种特定类型数据的结构化清单。&lt;/li>
&lt;li>&lt;code>模式（schema）&lt;/code> - 关于数据库和表的布局及特性的信息。模式定义了数据在表中如何存储，包含存储什么样的数据，数据如何分解，各部分信息如何命名等信息。数据库和表都有模式。&lt;/li>
&lt;li>&lt;code>列（column）&lt;/code> - 表中的一个字段。所有表都是由一个或多个列组成的。&lt;/li>
&lt;li>&lt;code>行（row）&lt;/code> - 表中的一个记录。&lt;/li>
&lt;li>&lt;code>主键（primary key）&lt;/code> - 一列（或一组列），其值能够唯一标识表中每一行。&lt;/li>
&lt;/ul>
&lt;h3 id="sql-语法">
 SQL 语法
 &lt;a class="anchor" href="#sql-%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h3>
&lt;p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。&lt;/p>
&lt;h4 id="sql-语法结构">
 SQL 语法结构
 &lt;a class="anchor" href="#sql-%e8%af%ad%e6%b3%95%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h4>
&lt;p>&lt;img src="https://oss.javaguide.cn/p3-juejin/cb684d4c75fc430e92aaee226069c7da~tplv-k3u1fbpfcp-zoom-1.png" alt="" />&lt;/p>
&lt;p>SQL 语法结构包括：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>&lt;code>子句&lt;/code>&lt;/mark> - 是语句和查询的组成成分。（在某些情况下，这些都是可选的。）&lt;/li>
&lt;li>&lt;mark>&lt;code>表达式&lt;/code>&lt;/mark> - 可以产生任何标量值，或由列和行的数据库表&lt;/li>
&lt;li>&lt;mark>&lt;code>谓词&lt;/code>&lt;/mark> - 给需要评估的 SQL 三值逻辑（3VL）（true/false/unknown）或布尔真值指定条件，并限制语句和查询的效果，或改变程序流程。&lt;/li>
&lt;li>&lt;mark>&lt;code>查询&lt;/code>&lt;/mark> - 基于特定条件检索数据。这是 SQL 的一个重要组成部分。&lt;/li>
&lt;li>&lt;mark>&lt;code>语句&lt;/code>&lt;/mark> - 可以持久地影响纲要和数据，也可以控制数据库事务、程序流程、连接、会话或诊断。&lt;/li>
&lt;/ul>
&lt;h4 id="sql-语法要点">
 SQL 语法要点
 &lt;a class="anchor" href="#sql-%e8%af%ad%e6%b3%95%e8%a6%81%e7%82%b9">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;mark>SQL 语句不区分大小写&lt;/mark>，但是数据库表名、列名和值是否区分，依赖于具体的 DBMS 以及配置。例如：&lt;code>SELECT&lt;/code> 与 &lt;code>select&lt;/code>、&lt;code>Select&lt;/code> 是相同的。&lt;/li>
&lt;li>&lt;mark>多条 SQL 语句必须以分号（&lt;code>;&lt;/code>）分隔&lt;/mark>。&lt;/li>
&lt;li>处理 SQL 语句时，&lt;mark>所有空格都被忽略&lt;/mark>。&lt;/li>
&lt;/ul>
&lt;p>SQL 语句可以写成一行，也可以分写为多行。&lt;/p></description></item></channel></rss>