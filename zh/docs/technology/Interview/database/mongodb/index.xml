<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB常见面试题总结（上）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/mongodb-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/mongodb-questions-01/</guid><description>&lt;blockquote>
&lt;p>少部分内容参考了 MongoDB 官方文档的描述，在此说明一下。&lt;/p>
&lt;/blockquote>
&lt;h2 id="mongodb-基础">
 MongoDB 基础
 &lt;a class="anchor" href="#mongodb-%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="mongodb-是什么">
 MongoDB 是什么？
 &lt;a class="anchor" href="#mongodb-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>MongoDB 是一个基于 &lt;mark>分布式文件存储&lt;/mark> 的开源 NoSQL 数据库系统，由 &lt;mark>C++&lt;/mark> 编写的。MongoDB 提供了 &lt;mark>面向文档&lt;/mark> 的存储方式，操作起来比较简单和容易，支持“&lt;mark>无模式&lt;/mark>”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 &lt;mark>文档类型数据库&lt;/mark> 。&lt;/p>
&lt;p>在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。&lt;/p>
&lt;h3 id="mongodb-的存储结构是什么">
 MongoDB 的存储结构是什么？
 &lt;a class="anchor" href="#mongodb-%e7%9a%84%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>MongoDB 的存储结构区别于传统的关系型数据库，主要由如下三个单元组成：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>文档（Document）&lt;/mark>：MongoDB 中最基本的单元，由 BSON 键值对（key-value）组成，类似于关系型数据库中的行（Row）。&lt;/li>
&lt;li>&lt;mark>集合（Collection）&lt;/mark>：一个集合可以包含多个文档，类似于关系型数据库中的表（Table）。&lt;/li>
&lt;li>&lt;mark>数据库（Database）&lt;/mark>：一个数据库中可以包含多个集合，可以在 MongoDB 中创建多个数据库，类似于关系型数据库中的数据库（Database）。&lt;/li>
&lt;/ul>
&lt;p>也就是说，MongoDB 将数据记录存储为文档 （更具体来说是
&lt;a target="_blank" href="https://www.mongodb.com/docs/manual/core/document/#std-label-bson-document-format">BSON 文档&lt;/a>），这些文档在集合中聚集在一起，数据库中存储一个或多个文档集合。&lt;/p>
&lt;p>&lt;mark>SQL 与 MongoDB 常见术语对比&lt;/mark>：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>SQL&lt;/th>
 &lt;th>MongoDB&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>表（Table）&lt;/td>
 &lt;td>集合（Collection）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>行（Row）&lt;/td>
 &lt;td>文档（Document）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>列（Col）&lt;/td>
 &lt;td>字段（Field）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>主键（Primary Key）&lt;/td>
 &lt;td>对象 ID（Objectid）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>索引（Index）&lt;/td>
 &lt;td>索引（Index）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>嵌套表（Embedded Table）&lt;/td>
 &lt;td>嵌入式文档（Embedded Document）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>数组（Array）&lt;/td>
 &lt;td>数组（Array）&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="文档">
 文档
 &lt;a class="anchor" href="#%e6%96%87%e6%a1%a3">#&lt;/a>
&lt;/h4>
&lt;p>MongoDB 中的记录就是一个 BSON 文档，它是由键值对组成的数据结构，类似于 JSON 对象，是 MongoDB 中的基本数据单元。字段的值可能包括其他文档、数组和文档数组。&lt;/p></description></item><item><title>MongoDB常见面试题总结（下）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/mongodb-questions-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/mongodb/mongodb-questions-02/</guid><description>&lt;h2 id="mongodb-索引">
 MongoDB 索引
 &lt;a class="anchor" href="#mongodb-%e7%b4%a2%e5%bc%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="mongodb-索引有什么用">
 MongoDB 索引有什么用?
 &lt;a class="anchor" href="#mongodb-%e7%b4%a2%e5%bc%95%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8">#&lt;/a>
&lt;/h3>
&lt;p>和关系型数据库类似，MongoDB 中也有索引。索引的目的主要是用来提高查询效率，如果没有索引的话，MongoDB 必须执行 &lt;mark>集合扫描&lt;/mark> ，即扫描集合中的每个文档，以选择与查询语句匹配的文档。如果查询存在合适的索引，MongoDB 可以使用该索引来限制它必须检查的文档数量。并且，MongoDB 可以使用索引中的排序返回排序后的结果。&lt;/p>
&lt;p>虽然索引可以显著缩短查询时间，但是使用索引、维护索引是有代价的。在执行写入操作时，除了要更新文档之外，还必须更新索引，这必然会影响写入的性能。因此，当有大量写操作而读操作少时，或者不考虑读操作的性能时，都不推荐建立索引。&lt;/p>
&lt;h3 id="mongodb-支持哪些类型的索引">
 MongoDB 支持哪些类型的索引？
 &lt;a class="anchor" href="#mongodb-%e6%94%af%e6%8c%81%e5%93%aa%e4%ba%9b%e7%b1%bb%e5%9e%8b%e7%9a%84%e7%b4%a2%e5%bc%95">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>MongoDB 支持多种类型的索引，包括单字段索引、复合索引、多键索引、哈希索引、文本索引、 地理位置索引等，每种类型的索引有不同的使用场合。&lt;/mark>&lt;/p>
&lt;ul>
&lt;li>&lt;mark>单字段索引：&lt;/mark> 建立在单个字段上的索引，索引创建的排序顺序无所谓，MongoDB 可以头/尾开始遍历。&lt;/li>
&lt;li>&lt;mark>复合索引：&lt;/mark> 建立在多个字段上的索引，也可以称之为组合索引、联合索引。&lt;/li>
&lt;li>&lt;mark>多键索引&lt;/mark>：MongoDB 的一个字段可能是数组，在对这种字段创建索引时，就是多键索引。MongoDB 会为数组的每个值创建索引。就是说你可以按照数组里面的值做条件来查询，这个时候依然会走索引。&lt;/li>
&lt;li>&lt;mark>哈希索引&lt;/mark>：按数据的哈希值索引，用在哈希分片集群上。&lt;/li>
&lt;li>&lt;mark>文本索引：&lt;/mark> 支持对字符串内容的文本搜索查询。文本索引可以包含任何值为字符串或字符串元素数组的字段。一个集合只能有一个文本搜索索引，但该索引可以覆盖多个字段。MongoDB 虽然支持全文索引，但是性能低下，暂时不建议使用。&lt;/li>
&lt;li>&lt;mark>地理位置索引：&lt;/mark> 基于经纬度的索引，适合 2D 和 3D 的位置查询。&lt;/li>
&lt;li>&lt;mark>唯一索引&lt;/mark>：确保索引字段不会存储重复值。如果集合已经存在了违反索引的唯一约束的文档，则后台创建唯一索引会失败。&lt;/li>
&lt;li>&lt;mark>TTL 索引&lt;/mark>：TTL 索引提供了一个过期机制，允许为每一个文档设置一个过期时间，当一个文档达到预设的过期时间之后就会被删除。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h3 id="复合索引中字段的顺序有影响吗">
 复合索引中字段的顺序有影响吗？
 &lt;a class="anchor" href="#%e5%a4%8d%e5%90%88%e7%b4%a2%e5%bc%95%e4%b8%ad%e5%ad%97%e6%ae%b5%e7%9a%84%e9%a1%ba%e5%ba%8f%e6%9c%89%e5%bd%b1%e5%93%8d%e5%90%97">#&lt;/a>
&lt;/h3>
&lt;p>复合索引中字段的顺序非常重要，例如下图中的复合索引由&lt;code>{userid:1, score:-1}&lt;/code>组成，则该复合索引首先按照&lt;code>userid&lt;/code>升序排序；然后再每个&lt;code>userid&lt;/code>的值内，再按照&lt;code>score&lt;/code>降序排序。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/mongodb/mongodb-composite-index.png" alt="复合索引" />&lt;/p>
&lt;p>在复合索引中，按照何种方式排序，决定了该索引在查询中是否能被应用到。&lt;/p>
&lt;p>走复合索引的排序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不走复合索引的排序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以通过 explain 进行分析：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>db.s2.find().sort(&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;score&amp;#34;&lt;/span>: &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;userid&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>).&lt;span style="color:#66d9ef">explain&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="复合索引遵循左前缀原则吗">
 复合索引遵循左前缀原则吗？
 &lt;a class="anchor" href="#%e5%a4%8d%e5%90%88%e7%b4%a2%e5%bc%95%e9%81%b5%e5%be%aa%e5%b7%a6%e5%89%8d%e7%bc%80%e5%8e%9f%e5%88%99%e5%90%97">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>MongoDB 的复合索引遵循左前缀原则&lt;/mark>：拥有多个键的索引，可以同时得到所有这些键的前缀组成的索引，但不包括除左前缀之外的其他子集。比如说，有一个类似 &lt;code>{a: 1, b: 1, c: 1, ..., z: 1}&lt;/code> 这样的索引，那么实际上也等于有了 &lt;code>{a: 1}&lt;/code>、&lt;code>{a: 1, b: 1}&lt;/code>、&lt;code>{a: 1, b: 1, c: 1}&lt;/code> 等一系列索引，但是不会有 &lt;code>{b: 1}&lt;/code> 这样的非左前缀的索引。&lt;/p></description></item></channel></rss>