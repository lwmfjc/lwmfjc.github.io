<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/database/index.xml" rel="self" type="application/rss+xml"/><item><title>NoSQL基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/nosql/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/nosql/</guid><description>&lt;h2 id="nosql-是什么">
 NoSQL 是什么？
 &lt;a class="anchor" href="#nosql-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>NoSQL（Not Only SQL 的缩写）泛指非关系型的数据库，主要针对的是键值、文档以及图形类型数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，旨在提供可扩展的高可用高性能数据存储解决方案。&lt;/p>
&lt;p>一个常见的误解是 NoSQL 数据库或非关系型数据库不能很好地存储关系型数据。NoSQL 数据库可以存储关系型数据—它们与关系型数据库的存储方式不同。&lt;/p>
&lt;p>NoSQL 数据库代表：HBase、Cassandra、MongoDB、Redis。&lt;/p>
&lt;p>&lt;img src="img/c3ee492472a02fd8e60c0a807b37b479_MD5.jpg" alt="" />&lt;/p>
&lt;h2 id="sql-和-nosql-有什么区别">
 SQL 和 NoSQL 有什么区别？
 &lt;a class="anchor" href="#sql-%e5%92%8c-nosql-%e6%9c%89%e4%bb%80%e4%b9%88%e5%8c%ba%e5%88%ab">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">&lt;/th>
 &lt;th>SQL 数据库&lt;/th>
 &lt;th>NoSQL 数据库&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">数据存储模型&lt;/td>
 &lt;td>结构化存储，具有固定行和列的表格&lt;/td>
 &lt;td>非结构化存储。文档：JSON 文档，键值：键值对，宽列：包含行和动态列的表，图：节点和边&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">发展历程&lt;/td>
 &lt;td>开发于 1970 年代，重点是减少数据重复&lt;/td>
 &lt;td>开发于 2000 年代后期，重点是提升可扩展性，减少大规模数据的存储成本&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">例子&lt;/td>
 &lt;td>Oracle、MySQL、Microsoft SQL Server、PostgreSQL&lt;/td>
 &lt;td>文档：MongoDB、CouchDB，键值：Redis、DynamoDB，宽列：Cassandra、 HBase，图表：Neo4j、 Amazon Neptune、Giraph&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">ACID 属性&lt;/td>
 &lt;td>提供原子性、一致性、隔离性和持久性 (ACID) 属性&lt;/td>
 &lt;td>通常不支持 ACID 事务，为了可扩展、高性能进行了权衡，少部分支持比如 MongoDB 。不过，MongoDB 对 ACID 事务 的支持和 MySQL 还是有所区别的。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">性能&lt;/td>
 &lt;td>性能通常取决于磁盘子系统。要获得最佳性能，通常需要优化查询、索引和表结构。&lt;/td>
 &lt;td>性能通常由底层硬件集群大小、网络延迟以及调用应用程序来决定。&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">扩展&lt;/td>
 &lt;td>垂直（使用性能更强大的服务器进行扩展）、读写分离、分库分表&lt;/td>
 &lt;td>横向（增加服务器的方式横向扩展，通常是基于分片机制）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">用途&lt;/td>
 &lt;td>普通企业级的项目的数据存储&lt;/td>
 &lt;td>用途广泛比如图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">查询语法&lt;/td>
 &lt;td>结构化查询语言 (SQL)&lt;/td>
 &lt;td>数据访问语法可能因数据库而异&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="nosql-数据库有什么优势">
 NoSQL 数据库有什么优势？
 &lt;a class="anchor" href="#nosql-%e6%95%b0%e6%8d%ae%e5%ba%93%e6%9c%89%e4%bb%80%e4%b9%88%e4%bc%98%e5%8a%bf">#&lt;/a>
&lt;/h2>
&lt;p>NoSQL 数据库非常适合许多现代应用程序，例如移动、Web 和游戏等应用程序，它们需要灵活、可扩展、高性能和功能强大的数据库以提供卓越的用户体验。&lt;/p></description></item><item><title>数据库基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/basis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/basis/</guid><description>&lt;p>数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQL 数据库的基础。PS: 这部分内容由于涉及太多概念性内容，所以参考了维基百科和百度百科相应的介绍。&lt;/p>
&lt;h2 id="什么是数据库-数据库管理系统-数据库系统-数据库管理员">
 什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员?
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%95%b0%e6%8d%ae%e5%ba%93-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ae%a1%e7%90%86%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%b3%bb%e7%bb%9f-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%ae%a1%e7%90%86%e5%91%98">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;mark>数据库&lt;/mark> : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管理系统管理的数据的集合。&lt;/li>
&lt;li>&lt;mark>数据库管理系统&lt;/mark> : 数据库管理系统(Database Management System 简称 DBMS)是一种操纵和管理数据库的大型软件，通常用于建立、使用和维护数据库。&lt;/li>
&lt;li>&lt;mark>数据库系统&lt;/mark> : 数据库系统(Data Base System，简称 DBS)通常由软件、数据库和数据管理员(DBA)组成。&lt;/li>
&lt;li>&lt;mark>数据库管理员&lt;/mark> : 数据库管理员(Database Administrator, 简称 DBA)负责全面管理和控制数据库系统。&lt;/li>
&lt;/ul>
&lt;h2 id="什么是元组-码-候选码-主码-外码-主属性-非主属性">
 什么是元组, 码, 候选码, 主码, 外码, 主属性, 非主属性？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%85%83%e7%bb%84-%e7%a0%81-%e5%80%99%e9%80%89%e7%a0%81-%e4%b8%bb%e7%a0%81-%e5%a4%96%e7%a0%81-%e4%b8%bb%e5%b1%9e%e6%80%a7-%e9%9d%9e%e4%b8%bb%e5%b1%9e%e6%80%a7">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;mark>元组&lt;/mark>：元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。&lt;/li>
&lt;li>&lt;mark>码&lt;/mark>：码就是能唯一标识实体的属性，对应表中的列。&lt;/li>
&lt;li>&lt;mark>候选码&lt;/mark>：若关系中的某一属性或属性组的值能唯一的标识一个元组，而其任何、子集都不能再标识，则称该属性组为候选码。例如：在学生实体中，“学号”是能唯一的区分学生实体的，同时又假设“姓名”、“班级”的属性组合足以区分学生实体，那么{学号}和{姓名，班级}都是候选码。&lt;/li>
&lt;li>&lt;mark>主码&lt;/mark> : 主码也叫主键。主码是从候选码中选出来的。 一个实体集中只能有一个主码，但可以有多个候选码。&lt;/li>
&lt;li>&lt;mark>外码&lt;/mark> : 外码也叫外键。如果一个关系中的一个属性是另外一个关系中的主码则这个属性为外码。&lt;/li>
&lt;li>&lt;mark>主属性&lt;/mark>：候选码中出现过的属性称为主属性。比如关系 工人（工号，身份证号，姓名，性别，部门）. 显然工号和身份证号都能够唯一标示这个关系，所以都是候选码。工号、身份证号这两个属性就是主属性。如果主码是一个属性组，那么属性组中的属性都是主属性。&lt;/li>
&lt;li>&lt;mark>非主属性：&lt;/mark> 不包含在任何一个候选码中的属性称为非主属性。比如在关系——学生（学号，姓名，年龄，性别，班级）中，主码是“学号”，那么其他的“姓名”、“年龄”、“性别”、“班级”就都可以称为非主属性。&lt;/li>
&lt;/ul>
&lt;h2 id="什么是-er-图">
 什么是 ER 图？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-er-%e5%9b%be">#&lt;/a>
&lt;/h2>
&lt;p>我们做一个项目的时候一定要试着画 ER 图来捋清数据库设计，这个也是面试官问你项目的时候经常会被问到的。&lt;/p>
&lt;p>&lt;mark>ER 图&lt;/mark> 全称是 Entity Relationship Diagram（实体联系图），提供了表示实体类型、属性和联系的方法。&lt;/p></description></item><item><title>字符集详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/character-set/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/character-set/</guid><description>&lt;p>MySQL 字符编码集中有两套 UTF-8 编码实现：&lt;mark>&lt;code>utf8&lt;/code>&lt;/mark> 和 &lt;mark>&lt;code>utf8mb4&lt;/code>&lt;/mark>。&lt;/p>
&lt;p>如果使用 &lt;mark>&lt;code>utf8&lt;/code>&lt;/mark> 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。&lt;/p>
&lt;p>为什么会这样呢？这篇文章可以从源头给你解答。&lt;/p>
&lt;h2 id="字符集是什么">
 字符集是什么？
 &lt;a class="anchor" href="#%e5%ad%97%e7%ac%a6%e9%9b%86%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 &lt;mark>字符集&lt;/mark> 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。&lt;/p>
&lt;p>&lt;mark>计算机只能存储二进制的数据，那英文、汉字、表情等字符应该如何存储呢？&lt;/mark>&lt;/p>
&lt;p>我们要将这些字符和二进制的数据一一对应起来，比如说字符“a”对应“01100001”，反之，“01100001”对应 “a”。我们将字符对应二进制数据的过程称为&amp;quot;&lt;mark>字符编码&lt;/mark>&amp;quot;，反之，二进制数据解析成字符的过程称为“&lt;mark>字符解码&lt;/mark>”。&lt;/p>
&lt;h2 id="字符编码是什么">
 字符编码是什么？
 &lt;a class="anchor" href="#%e5%ad%97%e7%ac%a6%e7%bc%96%e7%a0%81%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>字符编码是一种将字符集中的字符与计算机中的二进制数据相互转换的方法，可以看作是一种映射规则。也就是说，字符编码的目的是为了让计算机能够存储和传输各种文字信息。&lt;/p>
&lt;p>每种字符集都有自己的字符编码规则，常用的字符集编码规则有 ASCII 编码、 GB2312 编码、GBK 编码、GB18030 编码、Big5 编码、UTF-8 编码、UTF-16 编码等。&lt;/p>
&lt;h2 id="有哪些常见的字符集">
 有哪些常见的字符集？
 &lt;a class="anchor" href="#%e6%9c%89%e5%93%aa%e4%ba%9b%e5%b8%b8%e8%a7%81%e7%9a%84%e5%ad%97%e7%ac%a6%e9%9b%86">#&lt;/a>
&lt;/h2>
&lt;p>常见的字符集有：ASCII、GB2312、GB18030、GBK、Unicode……。&lt;/p>
&lt;p>不同的字符集的主要区别在于：&lt;/p>
&lt;ul>
&lt;li>可以表示的字符范围&lt;/li>
&lt;li>编码方式&lt;/li>
&lt;/ul>
&lt;h3 id="ascii">
 ASCII
 &lt;a class="anchor" href="#ascii">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>ASCII&lt;/mark> (&lt;mark>A&lt;/mark>merican &lt;mark>S&lt;/mark>tandard &lt;mark>C&lt;/mark>ode for &lt;mark>I&lt;/mark>nformation &lt;mark>I&lt;/mark>nterchange，美国信息交换标准代码) 是一套主要用于现代美国英语的字符集（这也是 ASCII 字符集的局限性所在）。&lt;/p>
&lt;p>&lt;mark>为什么 ASCII 字符集没有考虑到中文等其他字符呢？&lt;/mark> 因为计算机是美国人发明的，当时，计算机的发展还处于比较雏形的时代，还未在其他国家大规模使用。因此，美国发布 ASCII 字符集的时候没有考虑兼容其他国家的语言。&lt;/p>
&lt;p>ASCII 字符集至今为止共定义了 128 个字符，其中有 33 个控制字符（比如回车、删除）无法显示。&lt;/p>
&lt;p>一个 ASCII 码长度是一个字节也就是 8 个 bit，比如“a”对应的 ASCII 码是“01100001”。不过，最高位是 0 仅仅作为校验位，其余 7 位使用 0 和 1 进行组合，所以，ASCII 字符集可以定义 128（2^7）个字符。&lt;/p></description></item></channel></rss>