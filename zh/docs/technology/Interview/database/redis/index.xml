<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>3种常用的缓存读写策略详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/3-commonly-used-cache-read-and-write-strategies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/3-commonly-used-cache-read-and-write-strategies/</guid><description>&lt;p>看到很多小伙伴简历上写了“&lt;strong>熟练使用缓存&lt;/strong>”，但是被我问到“&lt;strong>缓存常用的 3 种读写策略&lt;/strong>”的时候却一脸懵逼。&lt;/p>
&lt;p>在我看来，造成这个问题的原因是我们在学习 Redis 的时候，可能只是简单写了一些 Demo，并没有去关注缓存的读写策略，或者说压根不知道这回事。&lt;/p>
&lt;p>但是，搞懂 3 种常见的缓存读写策略对于实际工作中使用缓存以及面试中被问到缓存都是非常有帮助的！&lt;/p>
&lt;p>&lt;strong>下面介绍到的三种模式各有优劣，不存在最佳模式，根据具体的业务场景选择适合自己的缓存读写模式。&lt;/strong>&lt;/p>
&lt;h3 id="cache-aside-pattern旁路缓存模式">
 Cache Aside Pattern（旁路缓存模式）
 &lt;a class="anchor" href="#cache-aside-pattern%e6%97%81%e8%b7%af%e7%bc%93%e5%ad%98%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Cache Aside Pattern 是我们平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景。&lt;/strong>&lt;/p>
&lt;p>Cache Aside Pattern 中服务端需要同时维系 db 和 cache，并且是以 db 的结果为准。&lt;/p>
&lt;p>下面我们来看一下这个策略模式下的缓存读写步骤。&lt;/p>
&lt;p>&lt;strong>写&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>先更新 db&lt;/li>
&lt;li>然后直接删除 cache 。&lt;/li>
&lt;/ul>
&lt;p>简单画了一张图帮助大家理解写的步骤。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/cache-aside-write.png" alt="" />&lt;/p>
&lt;p>&lt;strong>读&lt;/strong> :&lt;/p>
&lt;ul>
&lt;li>从 cache 中读取数据，读取到就直接返回&lt;/li>
&lt;li>cache 中读取不到的话，就从 db 中读取数据返回&lt;/li>
&lt;li>再把数据放到 cache 中。&lt;/li>
&lt;/ul>
&lt;p>简单画了一张图帮助大家理解读的步骤。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/cache-aside-read.png" alt="" />&lt;/p>
&lt;p>你仅仅了解了上面这些内容的话是远远不够的，我们还要搞懂其中的原理。&lt;/p>
&lt;p>比如说面试官很可能会追问：“&lt;strong>在写数据的过程中，可以先删除 cache ，后更新 db 么？&lt;/strong>”&lt;/p>
&lt;p>&lt;strong>答案：&lt;/strong> 那肯定是不行的！因为这样可能会造成 &lt;strong>数据库（db）和缓存（Cache）数据不一致&lt;/strong>的问题。&lt;/p>
&lt;p>举例：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。&lt;/p></description></item><item><title>Redis 3 种特殊数据类型详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-data-structures-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-data-structures-02/</guid><description>&lt;p>除了 5 种基本的数据类型之外，Redis 还支持 3 种特殊的数据类型：Bitmap、HyperLogLog、GEO。&lt;/p>
&lt;h2 id="bitmap-位图">
 Bitmap （位图）
 &lt;a class="anchor" href="#bitmap-%e4%bd%8d%e5%9b%be">#&lt;/a>
&lt;/h2>
&lt;h3 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h3>
&lt;p>根据官网介绍：&lt;/p>
&lt;blockquote>
&lt;p>Bitmaps are not an actual data type, but a set of bit-oriented operations defined on the String type which is treated like a bit vector. Since strings are binary safe blobs and their maximum length is 512 MB, they are suitable to set up to 2^32 different bits.&lt;/p>
&lt;p>Bitmap 不是 Redis 中的实际数据类型，而是在 String 类型上定义的一组面向位的操作，将其视为位向量。由于字符串是二进制安全的块，且最大长度为 512 MB，它们适合用于设置最多 2^32 个不同的位。&lt;/p></description></item><item><title>Redis 5 种基本数据类型详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-data-structures-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-data-structures-01/</guid><description>&lt;p>Redis 共有 5 种基本数据类型：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。&lt;/p>
&lt;p>这 5 种数据类型是直接提供给用户使用的，是数据的保存形式，其底层实现主要依赖这 8 种数据结构：简单动态字符串（SDS）、LinkedList（双向链表）、Dict（哈希表/字典）、SkipList（跳跃表）、Intset（整数集合）、ZipList（压缩列表）、QuickList（快速列表）。&lt;/p>
&lt;p>Redis 5 种基本数据类型对应的底层数据结构实现如下表所示：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">String&lt;/th>
 &lt;th style="text-align: left">List&lt;/th>
 &lt;th style="text-align: left">Hash&lt;/th>
 &lt;th style="text-align: left">Set&lt;/th>
 &lt;th style="text-align: left">Zset&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">SDS&lt;/td>
 &lt;td style="text-align: left">LinkedList/ZipList/QuickList&lt;/td>
 &lt;td style="text-align: left">Dict、ZipList&lt;/td>
 &lt;td style="text-align: left">Dict、Intset&lt;/td>
 &lt;td style="text-align: left">ZipList、SkipList&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Redis 3.2 之前，List 底层实现是 LinkedList 或者 ZipList。 Redis 3.2 之后，引入了 LinkedList 和 ZipList 的结合 QuickList，List 的底层实现变为 QuickList。从 Redis 7.0 开始， ZipList 被 ListPack 取代。&lt;/p>
&lt;p>你可以在 Redis 官网上找到 Redis 数据类型/结构非常详细的介绍：&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://redis.com/redis-enterprise/data-structures/">Redis Data Structures&lt;/a>&lt;/li>
&lt;li>
&lt;a href="https://redis.io/docs/manual/data-types/data-types-tutorial/">Redis Data types tutorial&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>未来随着 Redis 新版本的发布，可能会有新的数据结构出现，通过查阅 Redis 官网对应的介绍，你总能获取到最靠谱的信息。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220720181630203.png" alt="" />&lt;/p>
&lt;h2 id="string字符串">
 String（字符串）
 &lt;a class="anchor" href="#string%e5%ad%97%e7%ac%a6%e4%b8%b2">#&lt;/a>
&lt;/h2>
&lt;h3 id="介绍">
 介绍
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h3>
&lt;p>String 是 Redis 中最简单同时也是最常用的一个数据类型。&lt;/p></description></item><item><title>Redis常见面试题总结(上)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-questions-01/</guid><description>&lt;h2 id="redis-基础">
 Redis 基础
 &lt;a class="anchor" href="#redis-%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是-redis">
 什么是 Redis？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-redis">#&lt;/a>
&lt;/h3>
&lt;p>
&lt;a href="https://redis.io/">Redis&lt;/a> （&lt;strong>RE&lt;/strong>mote &lt;strong>DI&lt;/strong>ctionary &lt;strong>S&lt;/strong>erver）是一个基于 C 语言开发的开源 NoSQL 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据。&lt;/p>
&lt;p>为了满足不同的业务场景，Redis 内置了多种数据类型实现（比如 String、Hash、Sorted Set、Bitmap、HyperLogLog、GEO）。并且，Redis 还支持事务、持久化、Lua 脚本、发布订阅模型、多种开箱即用的集群方案（Redis Sentinel、Redis Cluster）。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-overview-of-data-types-2023-09-28.jpg" alt="Redis 数据类型概览" />&lt;/p>
&lt;p>Redis 没有外部依赖，Linux 和 OS X 是 Redis 开发和测试最多的两个操作系统，官方推荐生产环境使用 Linux 部署 Redis。&lt;/p>
&lt;p>个人学习的话，你可以自己本机安装 Redis 或者通过 Redis 官网提供的
&lt;a href="https://try.redis.io/">在线 Redis 环境&lt;/a>（少部分命令无法使用）来实际体验 Redis。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/try.redis.io.png" alt="try-redis" />&lt;/p>
&lt;p>全世界有非常多的网站使用到了 Redis ，
&lt;a href="https://techstacks.io/">techstacks.io&lt;/a> 专门维护了一个
&lt;a href="https://techstacks.io/tech/redis">使用 Redis 的热门站点列表&lt;/a> ，感兴趣的话可以看看。&lt;/p>
&lt;h3 id="redis-为什么这么快">
 Redis 为什么这么快？
 &lt;a class="anchor" href="#redis-%e4%b8%ba%e4%bb%80%e4%b9%88%e8%bf%99%e4%b9%88%e5%bf%ab">#&lt;/a>
&lt;/h3>
&lt;p>Redis 内部做了非常多的性能优化，比较重要的有下面 3 点：&lt;/p>
&lt;ol>
&lt;li>Redis 基于内存，内存的访问速度比磁盘快很多；&lt;/li>
&lt;li>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；&lt;/li>
&lt;li>Redis 内置了多种优化过后的数据类型/结构实现，性能非常高。&lt;/li>
&lt;li>Redis 通信协议实现简单且解析高效。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>下面这张图片总结的挺不错的，分享一下，出自 
&lt;a href="https://twitter.com/alexxubyte/status/1498703822528544770">Why is Redis so fast?&lt;/a> 。&lt;/p></description></item><item><title>Redis常见面试题总结(下)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-questions-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-questions-02/</guid><description>&lt;h2 id="redis-事务">
 Redis 事务
 &lt;a class="anchor" href="#redis-%e4%ba%8b%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是-redis-事务">
 什么是 Redis 事务？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-redis-%e4%ba%8b%e5%8a%a1">#&lt;/a>
&lt;/h3>
&lt;p>你可以将 Redis 中的事务理解为：&lt;strong>Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。&lt;/strong>&lt;/p>
&lt;p>Redis 事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。&lt;/p>
&lt;p>除了不满足原子性和持久性之外，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。&lt;/p>
&lt;p>因此，Redis 事务是不建议在日常开发中使用的。&lt;/p>
&lt;h3 id="如何使用-redis-事务">
 如何使用 Redis 事务？
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8-redis-%e4%ba%8b%e5%8a%a1">#&lt;/a>
&lt;/h3>
&lt;p>Redis 可以通过 &lt;strong>&lt;code>MULTI&lt;/code>，&lt;code>EXEC&lt;/code>，&lt;code>DISCARD&lt;/code> 和 &lt;code>WATCH&lt;/code>&lt;/strong> 等命令来实现事务(Transaction)功能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; MULTI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; SET PROJECT &lt;span style="color:#e6db74">&amp;#34;JavaGuide&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QUEUED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; GET PROJECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QUEUED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; EXEC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1&lt;span style="color:#f92672">)&lt;/span> OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;JavaGuide&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;a href="https://redis.io/commands/multi">&lt;code>MULTI&lt;/code>&lt;/a> 命令后可以输入多个命令，Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 
&lt;a href="https://redis.io/commands/exec">&lt;code>EXEC&lt;/code>&lt;/a> 命令后，再执行所有的命令。&lt;/p>
&lt;p>这个过程是这样的：&lt;/p>
&lt;ol>
&lt;li>开始事务（&lt;code>MULTI&lt;/code>）；&lt;/li>
&lt;li>命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)；&lt;/li>
&lt;li>执行事务(&lt;code>EXEC&lt;/code>)。&lt;/li>
&lt;/ol>
&lt;p>你也可以通过 
&lt;a href="https://redis.io/commands/discard">&lt;code>DISCARD&lt;/code>&lt;/a> 命令取消一个事务，它会清空事务队列中保存的所有命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; MULTI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; SET PROJECT &lt;span style="color:#e6db74">&amp;#34;JavaGuide&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QUEUED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; GET PROJECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>QUEUED
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; DISCARD
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OK
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以通过
&lt;a href="https://redis.io/commands/watch">&lt;code>WATCH&lt;/code>&lt;/a> 命令监听指定的 Key，当调用 &lt;code>EXEC&lt;/code> 命令执行事务时，如果一个被 &lt;code>WATCH&lt;/code> 命令监视的 Key 被 &lt;strong>其他客户端/Session&lt;/strong> 修改的话，整个事务都不会被执行。&lt;/p></description></item><item><title>Redis常见阻塞原因总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-common-blocking-problems-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-common-blocking-problems-summary/</guid><description>&lt;blockquote>
&lt;p>本文整理完善自：
&lt;a href="https://mp.weixin.qq.com/s/0Nqfq_eQrUb12QH6eBbHXA">https://mp.weixin.qq.com/s/0Nqfq_eQrUb12QH6eBbHXA&lt;/a> ，作者：阿 Q 说代码&lt;/p>
&lt;/blockquote>
&lt;p>这篇文章会详细总结一下可能导致 Redis 阻塞的情况，这些情况也是影响 Redis 性能的关键因素，使用 Redis 的时候应该格外注意！&lt;/p>
&lt;h2 id="on-命令">
 O(n) 命令
 &lt;a class="anchor" href="#on-%e5%91%bd%e4%bb%a4">#&lt;/a>
&lt;/h2>
&lt;p>Redis 中的大部分命令都是 O(1)时间复杂度，但也有少部分 O(n) 时间复杂度的命令，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>KEYS *&lt;/code>：会返回所有符合规则的 key。&lt;/li>
&lt;li>&lt;code>HGETALL&lt;/code>：会返回一个 Hash 中所有的键值对。&lt;/li>
&lt;li>&lt;code>LRANGE&lt;/code>：会返回 List 中指定范围内的元素。&lt;/li>
&lt;li>&lt;code>SMEMBERS&lt;/code>：返回 Set 中的所有元素。&lt;/li>
&lt;li>&lt;code>SINTER&lt;/code>/&lt;code>SUNION&lt;/code>/&lt;code>SDIFF&lt;/code>：计算多个 Set 的交集/并集/差集。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;p>由于这些命令时间复杂度是 O(n)，有时候也会全表扫描，随着 n 的增大，执行耗时也会越长，从而导致客户端阻塞。不过， 这些命令并不是一定不能使用，但是需要明确 N 的值。另外，有遍历的需求可以使用 &lt;code>HSCAN&lt;/code>、&lt;code>SSCAN&lt;/code>、&lt;code>ZSCAN&lt;/code> 代替。&lt;/p>
&lt;p>除了这些 O(n)时间复杂度的命令可能会导致阻塞之外， 还有一些时间复杂度可能在 O(N) 以上的命令，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ZRANGE&lt;/code>/&lt;code>ZREVRANGE&lt;/code>：返回指定 Sorted Set 中指定排名范围内的所有元素。时间复杂度为 O(log(n)+m)，n 为所有元素的数量， m 为返回的元素数量，当 m 和 n 相当大时，O(n) 的时间复杂度更小。&lt;/li>
&lt;li>&lt;code>ZREMRANGEBYRANK&lt;/code>/&lt;code>ZREMRANGEBYSCORE&lt;/code>：移除 Sorted Set 中指定排名范围/指定 score 范围内的所有元素。时间复杂度为 O(log(n)+m)，n 为所有元素的数量， m 被删除元素的数量，当 m 和 n 相当大时，O(n) 的时间复杂度更小。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h2 id="save-创建-rdb-快照">
 SAVE 创建 RDB 快照
 &lt;a class="anchor" href="#save-%e5%88%9b%e5%bb%ba-rdb-%e5%bf%ab%e7%85%a7">#&lt;/a>
&lt;/h2>
&lt;p>Redis 提供了两个命令来生成 RDB 快照文件：&lt;/p></description></item><item><title>Redis持久化机制详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-persistence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-persistence/</guid><description>&lt;p>使用缓存的时候，我们经常需要对内存中的数据进行持久化也就是将内存中的数据写入到硬盘中。大部分原因是为了之后重用数据（比如重启机器、机器故障之后恢复数据），或者是为了做数据同步（比如 Redis 集群的主从节点通过 RDB 文件同步数据）。&lt;/p>
&lt;p>Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:&lt;/p>
&lt;ul>
&lt;li>快照（snapshotting，RDB）&lt;/li>
&lt;li>只追加文件（append-only file, AOF）&lt;/li>
&lt;li>RDB 和 AOF 的混合持久化(Redis 4.0 新增)&lt;/li>
&lt;/ul>
&lt;p>官方文档地址：
&lt;a href="https://redis.io/topics/persistence">https://redis.io/topics/persistence&lt;/a> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis4.0-persitence.png" alt="" />&lt;/p>
&lt;h2 id="rdb-持久化">
 RDB 持久化
 &lt;a class="anchor" href="#rdb-%e6%8c%81%e4%b9%85%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是-rdb-持久化">
 什么是 RDB 持久化？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-rdb-%e6%8c%81%e4%b9%85%e5%8c%96">#&lt;/a>
&lt;/h3>
&lt;p>Redis 可以通过创建快照来获得存储在内存里面的数据在 &lt;strong>某个时间点&lt;/strong> 上的副本。Redis 创建快照之后，可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis 主从结构，主要用来提高 Redis 性能），还可以将快照留在原地以便重启服务器的时候使用。&lt;/p>
&lt;p>快照持久化是 Redis 默认采用的持久化方式，在 &lt;code>redis.conf&lt;/code> 配置文件中默认有此下配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="display:flex;">&lt;span>save &lt;span style="color:#ae81ff">900&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">#&lt;/span>在900秒(&lt;span style="color:#ae81ff">15&lt;/span>分钟)之后&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>如果至少有1个key发生变化&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>Redis就会自动触发bgsave命令创建快照&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>save &lt;span style="color:#ae81ff">300&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">#&lt;/span>在300秒(&lt;span style="color:#ae81ff">5&lt;/span>分钟)之后&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>如果至少有10个key发生变化&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>Redis就会自动触发bgsave命令创建快照&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>save &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span> &lt;span style="color:#f92672">#&lt;/span>在60秒(&lt;span style="color:#ae81ff">1&lt;/span>分钟)之后&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>如果至少有10000个key发生变化&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>Redis就会自动触发bgsave命令创建快照&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rdb-创建快照时会阻塞主线程吗">
 RDB 创建快照时会阻塞主线程吗？
 &lt;a class="anchor" href="#rdb-%e5%88%9b%e5%bb%ba%e5%bf%ab%e7%85%a7%e6%97%b6%e4%bc%9a%e9%98%bb%e5%a1%9e%e4%b8%bb%e7%ba%bf%e7%a8%8b%e5%90%97">#&lt;/a>
&lt;/h3>
&lt;p>Redis 提供了两个命令来生成 RDB 快照文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>save&lt;/code> : 同步保存操作，会阻塞 Redis 主线程；&lt;/li>
&lt;li>&lt;code>bgsave&lt;/code> : fork 出一个子进程，子进程执行，不会阻塞 Redis 主线程，默认选项。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>这里说 Redis 主线程而不是主进程的主要是因为 Redis 启动之后主要是通过单线程的方式完成主要的工作。如果你想将其描述为 Redis 主进程，也没毛病。&lt;/p></description></item><item><title>Redis集群详解(付费)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-cluster/</guid><description>&lt;p>&lt;strong>Redis 集群&lt;/strong> 相关的面试题为我的 
&lt;a href="../../about-the-author/zhishixingqiu-two-years.md">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了
&lt;a href="../../zhuanlan/java-mian-shi-zhi-bei.md">《Java 面试指北》&lt;/a>中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-cluster-javamianshizhibei.png" alt="" />&lt;/p></description></item><item><title>Redis内存碎片详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-memory-fragmentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-memory-fragmentation/</guid><description>&lt;h2 id="什么是内存碎片">
 什么是内存碎片?
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%86%85%e5%ad%98%e7%a2%8e%e7%89%87">#&lt;/a>
&lt;/h2>
&lt;p>你可以将内存碎片简单地理解为那些不可用的空闲内存。&lt;/p>
&lt;p>举个例子：操作系统为你分配了 32 字节的连续内存空间，而你存储数据实际只需要使用 24 字节内存空间，那这多余出来的 8 字节内存空间如果后续没办法再被分配存储其他数据的话，就可以被称为内存碎片。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/memory-fragmentation.png" alt="内存碎片" />&lt;/p>
&lt;p>Redis 内存碎片虽然不会影响 Redis 性能，但是会增加内存消耗。&lt;/p>
&lt;h2 id="为什么会有-redis-内存碎片">
 为什么会有 Redis 内存碎片?
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e6%9c%89-redis-%e5%86%85%e5%ad%98%e7%a2%8e%e7%89%87">#&lt;/a>
&lt;/h2>
&lt;p>Redis 内存碎片产生比较常见的 2 个原因：&lt;/p>
&lt;p>&lt;strong>1、Redis 存储数据的时候向操作系统申请的内存空间可能会大于数据实际需要的存储空间。&lt;/strong>&lt;/p>
&lt;p>以下是这段 Redis 官方的原话：&lt;/p>
&lt;blockquote>
&lt;p>To store user keys, Redis allocates at most as much memory as the &lt;code>maxmemory&lt;/code> setting enables (however there are small extra allocations possible).&lt;/p>
&lt;/blockquote>
&lt;p>Redis 使用 &lt;code>zmalloc&lt;/code> 方法(Redis 自己实现的内存分配方法)进行内存分配的时候，除了要分配 &lt;code>size&lt;/code> 大小的内存之外，还会多分配 &lt;code>PREFIX_SIZE&lt;/code> 大小的内存。&lt;/p>
&lt;p>&lt;code>zmalloc&lt;/code> 方法源码如下（源码地址：
&lt;a href="https://github.com/antirez/redis-tools/blob/master/zmalloc.c%EF%BC%89%EF%BC%9A">https://github.com/antirez/redis-tools/blob/master/zmalloc.c）：&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>zmalloc(size_t size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 分配指定大小的内存&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> malloc(size&lt;span style="color:#f92672">+&lt;/span>PREFIX_SIZE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>ptr) zmalloc_oom_handler(size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>ifdef HAVE_MALLOC_SIZE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">update_zmalloc_stat_alloc&lt;/span>(zmalloc_size(ptr));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>((size_t&lt;span style="color:#f92672">*&lt;/span>)ptr) &lt;span style="color:#f92672">=&lt;/span> size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> update_zmalloc_stat_alloc(size&lt;span style="color:#f92672">+&lt;/span>PREFIX_SIZE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)ptr&lt;span style="color:#f92672">+&lt;/span>PREFIX_SIZE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>endif
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，Redis 可以使用多种内存分配器来分配内存（ libc、jemalloc、tcmalloc），默认使用 
&lt;a href="https://github.com/jemalloc/jemalloc">jemalloc&lt;/a>，而 jemalloc 按照一系列固定的大小（8 字节、16 字节、32 字节……）来分配内存的。jemalloc 划分的内存单元如下图所示：&lt;/p></description></item><item><title>Redis为什么用跳表实现有序集合</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-skiplist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-skiplist/</guid><description>&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>近几年针对 Redis 面试时会涉及常见数据结构的底层设计，其中就有这么一道比较有意思的面试题：“Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？”。&lt;/p>
&lt;p>本文就以这道大厂常问的面试题为切入点，带大家详细了解一下跳表这个数据结构。&lt;/p>
&lt;p>本文整体脉络如下图所示，笔者会从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redis 的有序集合底层实现的跳表有着更深刻的理解和掌握。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javaguide/database/redis/skiplist/202401222005468.png" alt="" />&lt;/p>
&lt;h2 id="跳表在-redis-中的运用">
 跳表在 Redis 中的运用
 &lt;a class="anchor" href="#%e8%b7%b3%e8%a1%a8%e5%9c%a8-redis-%e4%b8%ad%e7%9a%84%e8%bf%90%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>这里我们需要先了解一下 Redis 用到跳表的数据结构有序集合的使用，Redis 有个比较常用的数据结构叫&lt;strong>有序集合(sorted set，简称 zset)&lt;/strong>，正如其名它是一个可以保证有序且元素唯一的集合，所以它经常用于排行榜等需要进行统计排列的场景。&lt;/p>
&lt;p>这里我们通过命令行的形式演示一下排行榜的实现，可以看到笔者分别输入 3 名用户：&lt;strong>xiaoming&lt;/strong>、&lt;strong>xiaohong&lt;/strong>、&lt;strong>xiaowang&lt;/strong>，它们的&lt;strong>score&lt;/strong>分别是 60、80、60，最终按照成绩升级降序排列。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1:6379&amp;gt; zadd rankList &lt;span style="color:#ae81ff">60&lt;/span> xiaoming
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1:6379&amp;gt; zadd rankList &lt;span style="color:#ae81ff">80&lt;/span> xiaohong
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1:6379&amp;gt; zadd rankList &lt;span style="color:#ae81ff">60&lt;/span> xiaowang
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 返回有序集中指定区间内的成员，通过索引，分数从高到低&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>127.0.0.1:6379&amp;gt; ZREVRANGE rankList &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> WITHSCORES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xiaohong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;80&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xiaowang&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;60&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;xiaoming&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#e6db74">&amp;#34;60&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们通过 &lt;code>object&lt;/code> 指令查看 zset 的数据结构，可以看到当前有序集合存储的还是&lt;strong>ziplist(压缩列表)&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>127.0.0.1:6379&amp;gt; object encoding rankList
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;ziplist&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为设计者考虑到 Redis 数据存放于内存，为了节约宝贵的内存空间，在有序集合元素小于 64 字节且个数小于 128 的时候，会使用 ziplist，而这个阈值的默认值的设置就来自下面这两个配置项。&lt;/p></description></item><item><title>缓存基础常见面试题总结(付费)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/cache-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/cache-basics/</guid><description>&lt;p>&lt;strong>缓存基础&lt;/strong> 相关的面试题为我的 
&lt;a href="../../about-the-author/zhishixingqiu-two-years.md">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了
&lt;a href="../../zhuanlan/java-mian-shi-zhi-bei.md">《Java 面试指北》&lt;/a>中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javamianshizhibei/database-questions.png" alt="" />&lt;/p></description></item><item><title>如何基于Redis实现延时任务</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-delayed-task/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/database/redis/redis-delayed-task/</guid><description>&lt;p>基于 Redis 实现延时任务的功能无非就下面两种方案：&lt;/p>
&lt;ol>
&lt;li>Redis 过期事件监听&lt;/li>
&lt;li>Redisson 内置的延时队列&lt;/li>
&lt;/ol>
&lt;p>面试的时候，你可以先说自己考虑了这两种方案，但最后发现 Redis 过期事件监听这种方案存在很多问题，因此你最终选择了 Redisson 内置的 DelayedQueue 这种方案。&lt;/p>
&lt;p>这个时候面试官可能会追问你一些相关的问题，我们后面会提到，提前准备就好了。&lt;/p>
&lt;p>另外，除了下面介绍到的这些问题之外，Redis 相关的常见问题建议你都复习一遍，不排除面试官会顺带问你一些 Redis 的其他问题。&lt;/p>
&lt;h3 id="redis-过期事件监听实现延时任务功能的原理">
 Redis 过期事件监听实现延时任务功能的原理？
 &lt;a class="anchor" href="#redis-%e8%bf%87%e6%9c%9f%e4%ba%8b%e4%bb%b6%e7%9b%91%e5%90%ac%e5%ae%9e%e7%8e%b0%e5%bb%b6%e6%97%b6%e4%bb%bb%e5%8a%a1%e5%8a%9f%e8%83%bd%e7%9a%84%e5%8e%9f%e7%90%86">#&lt;/a>
&lt;/h3>
&lt;p>Redis 2.0 引入了发布订阅 (pub/sub) 功能。在 pub/sub 中，引入了一个叫做 &lt;strong>channel（频道）&lt;/strong> 的概念，有点类似于消息队列中的 &lt;strong>topic（主题）&lt;/strong>。&lt;/p>
&lt;p>pub/sub 涉及发布者（publisher）和订阅者（subscriber，也叫消费者）两个角色：&lt;/p>
&lt;ul>
&lt;li>发布者通过 &lt;code>PUBLISH&lt;/code> 投递消息给指定 channel。&lt;/li>
&lt;li>订阅者通过&lt;code>SUBSCRIBE&lt;/code>订阅它关心的 channel。并且，订阅者可以订阅一个或者多个 channel。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png" alt="Redis 发布订阅 (pub/sub) 功能" />&lt;/p>
&lt;p>在 pub/sub 模式下，生产者需要指定消息发送到哪个 channel 中，而消费者则订阅对应的 channel 以获取消息。&lt;/p>
&lt;p>Redis 中有很多默认的 channel，这些 channel 是由 Redis 本身向它们发送消息的，而不是我们自己编写的代码。其中，&lt;code>__keyevent@0__:expired&lt;/code> 就是一个默认的 channel，负责监听 key 的过期事件。也就是说，当一个 key 过期之后，Redis 会发布一个 key 过期的事件到&lt;code>__keyevent@&amp;lt;db&amp;gt;__:expired&lt;/code>这个 channel 中。&lt;/p></description></item></channel></rss>