<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/heap/</guid><description>&lt;h1 id="堆">
 堆
 &lt;a class="anchor" href="#%e5%a0%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="什么是堆">
 什么是堆
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%a0%86">#&lt;/a>
&lt;/h2>
&lt;p>堆是一种满足以下条件的树：&lt;/p>
&lt;p>堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。&lt;/p>
&lt;blockquote>
&lt;p>大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;mark>!!!特别提示：&lt;/mark>&lt;/p>
&lt;ul>
&lt;li>很多博客说堆是完全二叉树，其实并非如此，&lt;mark>堆不一定是完全二叉树&lt;/mark>，只是为了方便存储和索引，我们通常用完全二叉树的形式来表示堆，事实上，广为人知的斐波那契堆和二项堆就不是完全二叉树,它们甚至都不是二叉树。&lt;/li>
&lt;li>（&lt;mark>二叉&lt;/mark>）堆是一个数组，它可以被看成是一个 &lt;mark>近似的完全二叉树&lt;/mark>。——《算法导论》第三版&lt;/li>
&lt;/ul>
&lt;p>大家可以尝试判断下面给出的图是否是堆？&lt;/p>
&lt;p>&lt;img src="./pictures/%e5%a0%86/%e5%a0%861.png" alt="" />&lt;/p>
&lt;p>第 1 个和第 2 个是堆。第 1 个是最大堆，每个节点都比子树中所有节点大。第 2 个是最小堆，每个节点都比子树中所有节点小。&lt;/p>
&lt;p>第 3 个不是，第三个中，根结点 1 比 2 和 15 小，而 15 却比 3 大，19 比 5 大，不满足堆的性质。&lt;/p>
&lt;h2 id="堆的用途">
 堆的用途
 &lt;a class="anchor" href="#%e5%a0%86%e7%9a%84%e7%94%a8%e9%80%94">#&lt;/a>
&lt;/h2>
&lt;p>当我们只关心所有数据中的最大值或者最小值，存在多次获取最大值或者最小值，多次插入或删除数据时，就可以使用堆。&lt;/p>
&lt;p>有小伙伴可能会想到用有序数组，初始化一个有序数组时间复杂度是 &lt;code>O(nlog(n))&lt;/code>，查找最大值或者最小值时间复杂度都是 &lt;code>O(1)&lt;/code>，但是，涉及到更新（插入或删除）数据时，时间复杂度为 &lt;code>O(n)&lt;/code>，即使是使用复杂度为 &lt;code>O(log(n))&lt;/code> 的二分法找到要插入或者删除的数据，在移动数据时也需要 &lt;code>O(n)&lt;/code> 的时间复杂度。&lt;/p>
&lt;p>&lt;mark>相对于有序数组而言，堆的主要优势在于插入和删除数据效率较高。&lt;/mark> 因为堆是基于完全二叉树实现的，所以在插入和删除数据时，只需要在二叉树中上下移动节点，时间复杂度为 &lt;code>O(log(n))&lt;/code>，相比有序数组的 &lt;code>O(n)&lt;/code>，效率更高。&lt;/p>
&lt;p>不过，需要注意的是：Heap 初始化的时间复杂度为 &lt;code>O(n)&lt;/code>，而非&lt;code>O(nlogn)&lt;/code>。&lt;/p>
&lt;h2 id="堆的分类">
 堆的分类
 &lt;a class="anchor" href="#%e5%a0%86%e7%9a%84%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h2>
&lt;p>堆分为 &lt;mark>最大堆&lt;/mark> 和 &lt;mark>最小堆&lt;/mark>。二者的区别在于节点的排序方式。&lt;/p>
&lt;ul>
&lt;li>&lt;mark>最大堆&lt;/mark>：堆中的每一个节点的值都大于等于子树中所有节点的值&lt;/li>
&lt;li>&lt;mark>最小堆&lt;/mark>：堆中的每一个节点的值都小于等于子树中所有节点的值&lt;/li>
&lt;/ul>
&lt;p>如下图所示，图 1 是最大堆，图 2 是最小堆&lt;/p></description></item><item><title>布隆过滤器</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/bloom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/bloom-filter/</guid><description>&lt;p>布隆过滤器相信大家没用过的话，也已经听过了。&lt;/p>
&lt;p>布隆过滤器主要是为了解决海量数据的存在性问题。对于海量数据中判定某个数据是否存在且容忍轻微误差这一场景（比如缓存穿透、海量数据去重）来说，非常适合。&lt;/p>
&lt;p>文章内容概览：&lt;/p>
&lt;ol>
&lt;li>什么是布隆过滤器？&lt;/li>
&lt;li>布隆过滤器的原理介绍。&lt;/li>
&lt;li>布隆过滤器使用场景。&lt;/li>
&lt;li>通过 Java 编程手动实现布隆过滤器。&lt;/li>
&lt;li>利用 Google 开源的 Guava 中自带的布隆过滤器。&lt;/li>
&lt;li>Redis 中的布隆过滤器。&lt;/li>
&lt;/ol>
&lt;h2 id="什么是布隆过滤器">
 什么是布隆过滤器？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8">#&lt;/a>
&lt;/h2>
&lt;p>首先，我们需要了解布隆过滤器的概念。&lt;/p>
&lt;p>布隆过滤器（Bloom Filter，BF）是一个叫做 Bloom 的老哥于 1970 年提出的。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。&lt;/p>
&lt;p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png" alt="位数组" />&lt;/p>
&lt;p>总结：&lt;mark>一个名叫 Bloom 的人提出了一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，但缺点是具有一定的错误识别率和删除难度。并且，理论情况下，添加到集合中的元素越多，误报的可能性就越大。&lt;/mark>&lt;/p>
&lt;h2 id="布隆过滤器的原理介绍">
 布隆过滤器的原理介绍
 &lt;a class="anchor" href="#%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8%e7%9a%84%e5%8e%9f%e7%90%86%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>当一个元素加入布隆过滤器中的时候，会进行如下操作：&lt;/mark>&lt;/p>
&lt;ol>
&lt;li>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值（有几个哈希函数得到几个哈希值）。&lt;/li>
&lt;li>根据得到的哈希值，在位数组中把对应下标的值置为 1。&lt;/li>
&lt;/ol>
&lt;p>&lt;mark>当我们需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：&lt;/mark>&lt;/p></description></item><item><title>红黑树</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/red-black-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/red-black-tree/</guid><description>&lt;h2 id="红黑树介绍">
 红黑树介绍
 &lt;a class="anchor" href="#%e7%ba%a2%e9%bb%91%e6%a0%91%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>红黑树（Red Black Tree）是一种自平衡二叉查找树。它是在 1972 年由 Rudolf Bayer 发明的，当时被称为平衡二叉 B 树（symmetric binary B-trees）。后来，在 1978 年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的“红黑树”。&lt;/p>
&lt;p>由于其自平衡的特性，保证了最坏情形下在 O(logn) 时间复杂度内完成查找、增加、删除等操作，性能表现稳定。&lt;/p>
&lt;p>在 JDK 中，&lt;code>TreeMap&lt;/code>、&lt;code>TreeSet&lt;/code> 以及 JDK1.8 的 &lt;code>HashMap&lt;/code> 底层都用到了红黑树。&lt;/p>
&lt;h2 id="为什么需要红黑树">
 为什么需要红黑树？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e7%ba%a2%e9%bb%91%e6%a0%91">#&lt;/a>
&lt;/h2>
&lt;p>红黑树的诞生就是为了解决二叉查找树的缺陷。&lt;/p>
&lt;p>二叉查找树是一种基于比较的数据结构，它的每个节点都有一个键值，而且左子节点的键值小于父节点的键值，右子节点的键值大于父节点的键值。这样的结构可以方便地进行查找、插入和删除操作，因为只需要比较节点的键值就可以确定目标节点的位置。但是，二叉查找树有一个很大的问题，就是它的形状取决于节点插入的顺序。如果节点是按照升序或降序的方式插入的，那么二叉查找树就会退化成一个线性结构，也就是一个链表。这样的情况下，二叉查找树的性能就会大大降低，时间复杂度就会从 O(logn) 变为 O(n)。&lt;/p>
&lt;p>红黑树的诞生就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。&lt;/p>
&lt;h2 id="红黑树特点">
 &lt;mark>红黑树特点&lt;/mark>
 &lt;a class="anchor" href="#%e7%ba%a2%e9%bb%91%e6%a0%91%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>每个节点非红即黑。黑色决定平衡，红色不决定平衡。这对应了 2-3 树中一个节点内可以存放 1~2 个节点。&lt;/li>
&lt;li>根节点总是黑色的。&lt;/li>
&lt;li>每个叶子节点都是黑色的空节点（NIL 节点）。这里指的是红黑树都会有一个空的叶子节点，是红黑树自己的规则。&lt;/li>
&lt;li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定）。通常这条规则也叫不会有连续的红色节点。一个节点最多临时会有 3 个子节点，中间是黑色节点，左右是红色节点。&lt;/li>
&lt;li>从任意节点到它的叶子节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。每一层都只是有一个节点贡献了树高决定平衡性，也就是对应红黑树中的黑色节点。&lt;/li>
&lt;/ol>
&lt;p>正是这些特点才保证了红黑树的平衡，让红黑树的高度不会超过 2log(n+1)。&lt;/p>
&lt;h2 id="红黑树数据结构">
 红黑树数据结构
 &lt;a class="anchor" href="#%e7%ba%a2%e9%bb%91%e6%a0%91%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>建立在 BST 二叉搜索树的基础上，AVL、2-3 树、红黑树都是自平衡二叉树（统称 B-树）。但相比于 AVL 树，高度平衡所带来的时间复杂度，红黑树对平衡的控制要宽松一些，红黑树只需要保证黑色节点平衡即可。&lt;/p></description></item><item><title>树</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/tree/</guid><description>&lt;p>树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。&lt;/p>
&lt;p>一棵树具有以下特点：&lt;/p>
&lt;ol>
&lt;li>一棵树中的任意两个结点有且仅有唯一的一条路径连通。&lt;/li>
&lt;li>一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。&lt;/li>
&lt;li>一棵树不包含回路。&lt;/li>
&lt;/ol>
&lt;p>下图就是一颗树，并且是一颗二叉树。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/%E4%BA%8C%E5%8F%89%E6%A0%91-2.png" alt="二叉树" />&lt;/p>
&lt;p>如上图所示，通过上面这张图说明一下树中的常用概念：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>节点&lt;/mark>：树中的每个元素都可以统称为节点。&lt;/li>
&lt;li>&lt;mark>根节点&lt;/mark>：顶层节点或者说没有父节点的节点。上图中 A 节点就是根节点。&lt;/li>
&lt;li>&lt;mark>父节点&lt;/mark>：若一个节点含有子节点，则这个节点称为其子节点的父节点。上图中的 B 节点是 D 节点、E 节点的父节点。&lt;/li>
&lt;li>&lt;mark>子节点&lt;/mark>：一个节点含有的子树的根节点称为该节点的子节点。上图中 D 节点、E 节点是 B 节点的子节点。&lt;/li>
&lt;li>&lt;mark>兄弟节点&lt;/mark>：具有相同父节点的节点互称为兄弟节点。上图中 D 节点、E 节点的共同父节点是 B 节点，故 D 和 E 为兄弟节点。&lt;/li>
&lt;li>&lt;mark>叶子节点&lt;/mark>：没有子节点的节点。上图中的 D、F、H、I 都是叶子节点。&lt;/li>
&lt;li>&lt;mark>节点的高度&lt;/mark>：该节点到叶子节点的最长路径所包含的边数。&lt;/li>
&lt;li>&lt;mark>节点的深度&lt;/mark>：根节点到该节点的路径所包含的边数&lt;/li>
&lt;li>&lt;mark>节点的层数&lt;/mark>：节点的深度+1。&lt;/li>
&lt;li>&lt;mark>树的高度&lt;/mark>：根节点的高度。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>关于树的深度和高度的定义可以看 stackoverflow 上的这个问题：
&lt;a target="_blank" href="https://stackoverflow.com/questions/2603692/what-is-the-difference-between-tree-depth-and-height">What is the difference between tree depth and height?&lt;/a> 。&lt;/p>
&lt;/blockquote>
&lt;h2 id="二叉树的分类">
 二叉树的分类
 &lt;a class="anchor" href="#%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>二叉树&lt;/mark>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。&lt;/p>
&lt;p>&lt;mark>二叉树&lt;/mark> 的分支通常被称作“&lt;mark>左子树&lt;/mark>”或“&lt;mark>右子树&lt;/mark>”。并且，&lt;mark>二叉树&lt;/mark> 的分支具有左右次序，不能随意颠倒。&lt;/p>
&lt;p>&lt;mark>二叉树&lt;/mark> 的第 i 层至多拥有 &lt;code>2^(i-1)&lt;/code> 个节点，深度为 k 的二叉树至多总共有 &lt;code>2^(k+1)-1&lt;/code> 个节点（满二叉树的情况），至少有 2^(k) 个节点（关于节点的深度的定义国内争议比较多，我个人比较认可维基百科对
&lt;a target="_blank" href="https://zh.wikipedia.org/wiki/%E6%A0%91_%28%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%29#/%E6%9C%AF%E8%AF%AD">节点深度的定义&lt;/a>）。&lt;/p></description></item><item><title>图</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/graph/</guid><description>&lt;p>图是一种较为复杂的非线性结构。 &lt;mark>为啥说其较为复杂呢？&lt;/mark>&lt;/p>
&lt;p>根据前面的内容，我们知道：&lt;/p>
&lt;ul>
&lt;li>线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。&lt;/li>
&lt;li>树形数据结构的元素之间有着明显的层次关系。&lt;/li>
&lt;/ul>
&lt;p>但是，图形结构的元素之间的关系是任意的。&lt;/p>
&lt;p>&lt;mark>何为图呢？&lt;/mark> 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为：&lt;mark>G(V,E)&lt;/mark>，其中，G 表示一个图，V 表示顶点的集合，E 表示边的集合。&lt;/p>
&lt;p>下图所展示的就是图这种数据结构，并且还是一张有向图。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/directed-graph.png" alt="有向图" />&lt;/p>
&lt;p>图在我们日常生活中的例子很多！比如我们在社交软件上好友关系就可以用图来表示。&lt;/p>
&lt;h2 id="图的基本概念">
 图的基本概念
 &lt;a class="anchor" href="#%e5%9b%be%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">#&lt;/a>
&lt;/h2>
&lt;h3 id="顶点">
 顶点
 &lt;a class="anchor" href="#%e9%a1%b6%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;p>图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）&lt;/p>
&lt;p>对应到好友关系图，每一个用户就代表一个顶点。&lt;/p>
&lt;h3 id="边">
 边
 &lt;a class="anchor" href="#%e8%be%b9">#&lt;/a>
&lt;/h3>
&lt;p>顶点之间的关系用边表示。&lt;/p>
&lt;p>对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。&lt;/p>
&lt;h3 id="度">
 度
 &lt;a class="anchor" href="#%e5%ba%a6">#&lt;/a>
&lt;/h3>
&lt;p>度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。&lt;/p>
&lt;p>对应到好友关系图，度就代表了某个人的好友数量。&lt;/p>
&lt;h3 id="无向图和有向图">
 无向图和有向图
 &lt;a class="anchor" href="#%e6%97%a0%e5%90%91%e5%9b%be%e5%92%8c%e6%9c%89%e5%90%91%e5%9b%be">#&lt;/a>
&lt;/h3>
&lt;p>边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A 是 B 的同学，那么 B 也肯定是 A 的同学，那么在表示 A 和 B 的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。&lt;/p>
&lt;p>有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A 是 B 的爸爸，但 B 肯定不是 A 的爸爸，A 关注 B，B 不一定关注 A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。&lt;/p>
&lt;h3 id="无权图和带权图">
 无权图和带权图
 &lt;a class="anchor" href="#%e6%97%a0%e6%9d%83%e5%9b%be%e5%92%8c%e5%b8%a6%e6%9d%83%e5%9b%be">#&lt;/a>
&lt;/h3>
&lt;p>对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。&lt;/p>
&lt;p>对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。&lt;/p>
&lt;p>下图就是一个带权有向图。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/weighted-directed-graph.png" alt="带权有向图" />&lt;/p>
&lt;h2 id="图的存储">
 图的存储
 &lt;a class="anchor" href="#%e5%9b%be%e7%9a%84%e5%ad%98%e5%82%a8">#&lt;/a>
&lt;/h2>
&lt;h3 id="邻接矩阵存储">
 邻接矩阵存储
 &lt;a class="anchor" href="#%e9%82%bb%e6%8e%a5%e7%9f%a9%e9%98%b5%e5%ad%98%e5%82%a8">#&lt;/a>
&lt;/h3>
&lt;p>邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。&lt;/p></description></item><item><title>线性数据结构</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/linear-data-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/data-structure/linear-data-structure/</guid><description>&lt;h2 id="1-数组">
 1. 数组
 &lt;a class="anchor" href="#1-%e6%95%b0%e7%bb%84">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>数组（Array）&lt;/mark> 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。&lt;/p>
&lt;p>我们直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。&lt;/p>
&lt;p>数组的特点是：&lt;mark>提供随机访问&lt;/mark> 并且容量有限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>假如数组的长度为 n&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>访问&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>O&lt;span style="color:#960050;background-color:#1e0010">（&lt;/span>1&lt;span style="color:#960050;background-color:#1e0010">）&lt;/span>&lt;span style="color:#75715e">//访问特定位置的元素&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>插入&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>O&lt;span style="color:#960050;background-color:#1e0010">（&lt;/span>n &lt;span style="color:#960050;background-color:#1e0010">）&lt;/span>&lt;span style="color:#75715e">//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>删除&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>O&lt;span style="color:#960050;background-color:#1e0010">（&lt;/span>n&lt;span style="color:#960050;background-color:#1e0010">）&lt;/span>&lt;span style="color:#75715e">//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/array.png" alt="数组" />&lt;/p>
&lt;h2 id="2-链表">
 2. 链表
 &lt;a class="anchor" href="#2-%e9%93%be%e8%a1%a8">#&lt;/a>
&lt;/h2>
&lt;h3 id="21-链表简介">
 2.1. 链表简介
 &lt;a class="anchor" href="#21-%e9%93%be%e8%a1%a8%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>链表（LinkedList）&lt;/mark> 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。&lt;/p>
&lt;p>链表的插入和删除操作的复杂度为 O(1) ，只需要知道目标位置元素的上一个元素即可。但是，在查找一个节点或者访问特定位置的节点的时候复杂度为 O(n) 。&lt;/p>
&lt;p>使用链表结构可以克服数组需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间,实现灵活的内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表中每个节点存放的还有指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。&lt;/p>
&lt;h3 id="22-链表分类">
 2.2. 链表分类
 &lt;a class="anchor" href="#22-%e9%93%be%e8%a1%a8%e5%88%86%e7%b1%bb">#&lt;/a>
&lt;/h3>
&lt;p>&lt;mark>常见链表分类：&lt;/mark>&lt;/p>
&lt;ol>
&lt;li>单链表&lt;/li>
&lt;li>双向链表&lt;/li>
&lt;li>循环链表&lt;/li>
&lt;li>双向循环链表&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>假如链表中有n个元素&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>访问&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>O&lt;span style="color:#960050;background-color:#1e0010">（&lt;/span>n&lt;span style="color:#960050;background-color:#1e0010">）&lt;/span>&lt;span style="color:#75715e">//访问特定位置的元素&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>插入删除&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>O&lt;span style="color:#960050;background-color:#1e0010">（&lt;/span>1&lt;span style="color:#960050;background-color:#1e0010">）&lt;/span>&lt;span style="color:#75715e">//必须要要知道插入元素的位置&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="221-单链表">
 2.2.1. 单链表
 &lt;a class="anchor" href="#221-%e5%8d%95%e9%93%be%e8%a1%a8">#&lt;/a>
&lt;/h4>
&lt;p>&lt;mark>单链表&lt;/mark> 单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/single-linkedlist.png" alt="单链表" />&lt;/p>
&lt;h4 id="222-循环链表">
 2.2.2. 循环链表
 &lt;a class="anchor" href="#222-%e5%be%aa%e7%8e%af%e9%93%be%e8%a1%a8">#&lt;/a>
&lt;/h4>
&lt;p>&lt;mark>循环链表&lt;/mark> 其实是一种特殊的单链表，和单链表不同的是循环链表的尾结点不是指向 null，而是指向链表的头结点。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/circular-linkedlist.png" alt="循环链表" />&lt;/p>
&lt;h4 id="223-双向链表">
 2.2.3. 双向链表
 &lt;a class="anchor" href="#223-%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8">#&lt;/a>
&lt;/h4>
&lt;p>&lt;mark>双向链表&lt;/mark> 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。&lt;/p></description></item></channel></rss>