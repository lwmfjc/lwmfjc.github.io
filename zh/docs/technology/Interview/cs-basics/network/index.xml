<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/index.xml" rel="self" type="application/rss+xml"/><item><title>《计算机网络》（谢希仁）内容总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/computer-network-xiexiren-summary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/computer-network-xiexiren-summary/</guid><description>&lt;p>本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的
&lt;a target="_blank" href="https://www.elias.ltd/usr/local/etc/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E7%AC%AC7%E7%89%88%EF%BC%89%E8%B0%A2%E5%B8%8C%E4%BB%81.pdf">《计算机网络》第七版&lt;/a>这本书。为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。&lt;/p>
&lt;p>&lt;img src="img/24a33229b9b0203e1523d483abbc70e9_MD5.jpg" alt="" />&lt;/p>
&lt;p>相关问题：
&lt;a target="_blank" href="https://www.zhihu.com/question/327872966">如何评价谢希仁的计算机网络（第七版）？ - 知乎&lt;/a> 。&lt;/p>
&lt;h2 id="1-计算机网络概述">
 1. 计算机网络概述
 &lt;a class="anchor" href="#1-%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e6%a6%82%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="11-基本术语">
 1.1. 基本术语
 &lt;a class="anchor" href="#11-%e5%9f%ba%e6%9c%ac%e6%9c%af%e8%af%ad">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;mark>结点 （node）&lt;/mark>：网络中的结点可以是计算机，集线器，交换机或路由器等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>链路（link ）&lt;/mark> : 从一个结点到另一个结点的一段物理线路。中间没有任何其他交点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>主机（host）&lt;/mark>：连接在因特网上的计算机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>ISP（Internet Service Provider）&lt;/mark>：因特网服务提供者（提供商）。&lt;/p>
&lt;p>&lt;img src="img/24944572d786498b491bbc5722b1cdaa_MD5.jpg" alt="ISP (Internet Service Provider) Definition" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>IXP（Internet eXchange Point）&lt;/mark>：互联网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。&lt;/p>
&lt;p>&lt;img src="img/aacdff6d339b1d1eea8444e3fbc555aa_MD5.jpg" alt="IXP Traffic Levels During the Stratos Skydive — RIPE Labs" />&lt;/p>
&lt;p style="text-align:center;font-size:13px;color:gray">https://labs.ripe.net/Members/fergalc/ixp-traffic-during-stratos-skydive&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>RFC(Request For Comments)&lt;/mark>：意思是“请求评议”，包含了关于 Internet 几乎所有的重要的文字资料。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>广域网 WAN（Wide Area Network）&lt;/mark>：任务是通过长距离运送主机发送的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>城域网 MAN（Metropolitan Area Network）&lt;/mark>：用来将多个局域网进行互连。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;mark>局域网 LAN（Local Area Network）&lt;/mark>：学校或企业大多拥有多个互连的局域网。&lt;/p>
&lt;p>&lt;img src="img/acb4b2a134620b5448ba895b6ac88174_MD5.jpg" alt="MAN &amp;amp; WMAN | Red de área metropolitana, Redes informaticas, Par trenzado" />&lt;/p></description></item><item><title>ARP 协议详解(网络层)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/arp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/arp/</guid><description>&lt;p>每当我们学习一个新的网络协议的时候，都要把他结合到 OSI 七层模型中，或者是 TCP/IP 协议栈中来学习，一是要学习该协议在整个网络协议栈中的位置，二是要学习该协议解决了什么问题，地位如何？三是要学习该协议的工作原理，以及一些更深入的细节。&lt;/p>
&lt;p>&lt;mark>ARP 协议&lt;/mark>，可以说是在协议栈中属于一个&lt;mark>偏底层的、非常重要的、又非常简单的&lt;/mark>通信协议。&lt;/p>
&lt;p>开始阅读这篇文章之前，你可以先看看下面几个问题：&lt;/p>
&lt;ol>
&lt;li>&lt;mark>ARP 协议在协议栈中的位置？&lt;/mark> ARP 协议在协议栈中的位置非常重要，在理解了它的工作原理之后，也很难说它到底是网络层协议，还是链路层协议，因为它恰恰串联起了网络层和链路层。国外的大部分教程通常将 ARP 协议放在网络层。&lt;/li>
&lt;li>&lt;mark>ARP 协议解决了什么问题，地位如何？&lt;/mark> ARP 协议，全称 &lt;mark>地址解析协议（Address Resolution Protocol）&lt;/mark>，它解决的是网络层地址和链路层地址之间的转换问题。因为一个 IP 数据报在物理上传输的过程中，总是需要知道下一跳（物理上的下一个目的地）该去往何处，但 IP 地址属于逻辑地址，而 MAC 地址才是物理地址，ARP 协议解决了 IP 地址转 MAC 地址的一些问题。&lt;/li>
&lt;li>&lt;mark>ARP 工作原理？&lt;/mark> 只希望大家记住几个关键词：&lt;mark>ARP 表、广播问询、单播响应&lt;/mark>。&lt;/li>
&lt;/ol>
&lt;h2 id="mac-地址">
 MAC 地址
 &lt;a class="anchor" href="#mac-%e5%9c%b0%e5%9d%80">#&lt;/a>
&lt;/h2>
&lt;p>在介绍 ARP 协议之前，有必要介绍一下 MAC 地址。&lt;/p>
&lt;p>MAC 地址的全称是 &lt;mark>媒体访问控制地址（Media Access Control Address）&lt;/mark>。如果说，互联网中每一个资源都由 IP 地址唯一标识（IP 协议内容），那么一切网络设备都由 MAC 地址唯一标识。&lt;/p>
&lt;p>&lt;img src="./images/arp/2008410143049281.png" alt="路由器的背面就会注明 MAC 位址" />&lt;/p>
&lt;p>可以理解为，MAC 地址是一个网络设备真正的身份证号，IP 地址只是一种不重复的定位方式（比如说住在某省某市某街道的张三，这种逻辑定位是 IP 地址，他的身份证号才是他的 MAC 地址），也可以理解为 MAC 地址是身份证号，IP 地址是邮政地址。MAC 地址也有一些别称，如 LAN 地址、物理地址、以太网地址等。&lt;/p></description></item><item><title>DNS 域名系统详解（应用层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/dns/</guid><description>&lt;p>DNS（Domain Name System）域名管理系统，是当用户使用浏览器访问网址之后，使用的第一个重要协议。DNS 要解决的是&lt;mark>域名和 IP 地址的映射问题&lt;/mark>。&lt;/p>
&lt;p>&lt;img src="img/505661288b24330a0eabbaf9dfcc577f_MD5.jpg" alt="DNS:域名系统" />&lt;/p>
&lt;p>在实际使用中，有一种情况下，浏览器是可以不必动用 DNS 就可以获知域名和 IP 地址的映射的。浏览器在本地会维护一个&lt;code>hosts&lt;/code>列表，一般来说浏览器要先查看要访问的域名是否在&lt;code>hosts&lt;/code>列表中，如果有的话，直接提取对应的 IP 地址记录，就好了。如果本地&lt;code>hosts&lt;/code>列表内没有域名-IP 对应记录的话，那么 DNS 就闪亮登场了。&lt;/p>
&lt;p>目前 DNS 的设计采用的是分布式、层次数据库结构，&lt;mark>DNS 是应用层协议，基于 UDP 协议之上，端口为 53&lt;/mark> 。&lt;/p>
&lt;p>&lt;img src="img/80f92cb707928faf892e1e01f4a86bb7_MD5.jpg" alt="TCP/IP 各层协议概览" />&lt;/p>
&lt;h2 id="dns-服务器">
 DNS 服务器
 &lt;a class="anchor" href="#dns-%e6%9c%8d%e5%8a%a1%e5%99%a8">#&lt;/a>
&lt;/h2>
&lt;p>DNS 服务器自底向上可以依次分为以下几个层级(所有 DNS 服务器都属于以下四个类别之一):&lt;/p>
&lt;ul>
&lt;li>根 DNS 服务器。根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。&lt;/li>
&lt;li>顶级域 DNS 服务器（TLD 服务器）。顶级域是指域名的后缀，如&lt;code>com&lt;/code>、&lt;code>org&lt;/code>、&lt;code>net&lt;/code>和&lt;code>edu&lt;/code>等。国家也有自己的顶级域，如&lt;code>uk&lt;/code>、&lt;code>fr&lt;/code>和&lt;code>ca&lt;/code>。TLD 服务器提供了权威 DNS 服务器的 IP 地址。&lt;/li>
&lt;li>权威 DNS 服务器。在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。&lt;/li>
&lt;li>本地 DNS 服务器。每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构。&lt;/li>
&lt;/ul>
&lt;p>世界上并不是只有 13 台根服务器，这是很多人普遍的误解，网上很多文章也是这么写的。实际上，现在根服务器数量远远超过这个数量。最初确实是为 DNS 根服务器分配了 13 个 IP 地址，每个 IP 地址对应一个不同的根 DNS 服务器。然而，由于互联网的快速发展和增长，这个原始的架构变得不太适应当前的需求。为了提高 DNS 的可靠性、安全性和性能，目前这 13 个 IP 地址中的每一个都有多个服务器，截止到 2023 年底，所有根服务器之和达到了 600 多台，未来还会继续增加。&lt;/p></description></item><item><title>HTTP 1.0 vs HTTP 1.1（应用层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http1.0-vs-http1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http1.0-vs-http1.1/</guid><description>&lt;p>这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1：&lt;/p>
&lt;ul>
&lt;li>响应状态码&lt;/li>
&lt;li>缓存处理&lt;/li>
&lt;li>连接方式&lt;/li>
&lt;li>Host 头处理&lt;/li>
&lt;li>带宽优化&lt;/li>
&lt;/ul>
&lt;h2 id="响应状态码">
 响应状态码
 &lt;a class="anchor" href="#%e5%93%8d%e5%ba%94%e7%8a%b6%e6%80%81%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>HTTP/1.0 仅定义了 16 种状态码。HTTP/1.1 中新加入了大量的状态码，光是错误响应状态码就新增了 24 种。比如说，&lt;code>100 (Continue)&lt;/code>——在请求大资源前的预热请求，&lt;code>206 (Partial Content)&lt;/code>——范围请求的标识码，&lt;code>409 (Conflict)&lt;/code>——请求与当前资源的规定冲突，&lt;code>410 (Gone)&lt;/code>——资源已被永久转移，而且没有任何已知的转发地址。&lt;/p>
&lt;h2 id="缓存处理">
 缓存处理
 &lt;a class="anchor" href="#%e7%bc%93%e5%ad%98%e5%a4%84%e7%90%86">#&lt;/a>
&lt;/h2>
&lt;p>缓存技术通过避免用户与源服务器的频繁交互，节约了大量的网络带宽，降低了用户接收信息的延迟。&lt;/p>
&lt;h3 id="http10">
 HTTP/1.0
 &lt;a class="anchor" href="#http10">#&lt;/a>
&lt;/h3>
&lt;p>HTTP/1.0 提供的缓存机制非常简单。服务器端使用&lt;code>Expires&lt;/code>标签来标志（时间）一个响应体，在&lt;code>Expires&lt;/code>标志时间内的请求，都会获得该响应体缓存。服务器端在初次返回给客户端的响应体中，有一个&lt;code>Last-Modified&lt;/code>标签，该标签标记了被请求资源在服务器端的最后一次修改。在请求头中，使用&lt;code>If-Modified-Since&lt;/code>标签，该标签标志一个时间，意为客户端向服务器进行问询：“该时间之后，我要请求的资源是否有被修改过？”通常情况下，请求头中的&lt;code>If-Modified-Since&lt;/code>的值即为上一次获得该资源时，响应体中的&lt;code>Last-Modified&lt;/code>的值。&lt;/p>
&lt;p>如果服务器接收到了请求头，并判断&lt;code>If-Modified-Since&lt;/code>时间后，资源确实没有修改过，则返回给客户端一个&lt;code>304 not modified&lt;/code>响应头，表示”缓冲可用，你从浏览器里拿吧！”。&lt;/p>
&lt;p>如果服务器判断&lt;code>If-Modified-Since&lt;/code>时间后，资源被修改过，则返回给客户端一个&lt;code>200 OK&lt;/code>的响应体，并附带全新的资源内容，表示”你要的我已经改过的，给你一份新的”。&lt;/p>
&lt;p>&lt;img src="./images/http-vs-https/HTTP1.0cache1.png" alt="HTTP1.0cache1" />&lt;/p>
&lt;p>&lt;img src="./images/http-vs-https/HTTP1.0cache2.png" alt="HTTP1.0cache2" />&lt;/p>
&lt;h3 id="http11">
 HTTP/1.1
 &lt;a class="anchor" href="#http11">#&lt;/a>
&lt;/h3>
&lt;p>HTTP/1.1 的缓存机制在 HTTP/1.0 的基础上，大大增加了灵活性和扩展性。基本工作原理和 HTTP/1.0 保持不变，而是增加了更多细致的特性。其中，请求头中最常见的特性就是&lt;code>Cache-Control&lt;/code>，详见 MDN Web 文档 
&lt;a target="_blank" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">Cache-Control&lt;/a>.&lt;/p>
&lt;h2 id="连接方式">
 连接方式
 &lt;a class="anchor" href="#%e8%bf%9e%e6%8e%a5%e6%96%b9%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>HTTP/1.0 默认使用短连接&lt;/mark> ，也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如 JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 TCP 连接，这样就会导致有大量的“握手报文”和“挥手报文”占用了带宽。&lt;/p></description></item><item><title>HTTP vs HTTPS（应用层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http-vs-https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http-vs-https/</guid><description>&lt;h2 id="http-协议">
 HTTP 协议
 &lt;a class="anchor" href="#http-%e5%8d%8f%e8%ae%ae">#&lt;/a>
&lt;/h2>
&lt;h3 id="http-协议介绍">
 HTTP 协议介绍
 &lt;a class="anchor" href="#http-%e5%8d%8f%e8%ae%ae%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h3>
&lt;p>HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消息，具体来说，主要是来规范浏览器和服务器端的行为的。&lt;/p>
&lt;p>并且，HTTP 是一个无状态（stateless）协议，也就是说服务器不维护任何有关客户端过去所发请求的消息。这其实是一种懒政，有状态协议会更加复杂，需要维护状态（历史信息），而且如果客户或服务器失效，会产生状态的不一致，解决这种不一致的代价更高。&lt;/p>
&lt;h3 id="http-协议通信过程">
 HTTP 协议通信过程
 &lt;a class="anchor" href="#http-%e5%8d%8f%e8%ae%ae%e9%80%9a%e4%bf%a1%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h3>
&lt;p>HTTP 是应用层协议，它以 TCP（传输层）作为底层协议，默认端口为 80. 通信过程主要如下：&lt;/p>
&lt;ol>
&lt;li>服务器在 80 端口等待客户的请求。&lt;/li>
&lt;li>浏览器发起到服务器的 TCP 连接（创建套接字 Socket）。&lt;/li>
&lt;li>服务器接收来自浏览器的 TCP 连接。&lt;/li>
&lt;li>浏览器（HTTP 客户端）与 Web 服务器（HTTP 服务器）交换 HTTP 消息。&lt;/li>
&lt;li>关闭 TCP 连接。&lt;/li>
&lt;/ol>
&lt;h3 id="http-协议优点">
 HTTP 协议优点
 &lt;a class="anchor" href="#http-%e5%8d%8f%e8%ae%ae%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;p>扩展性强、速度快、跨平台支持性好。&lt;/p>
&lt;h2 id="https-协议">
 HTTPS 协议
 &lt;a class="anchor" href="#https-%e5%8d%8f%e8%ae%ae">#&lt;/a>
&lt;/h2>
&lt;h3 id="https-协议介绍">
 HTTPS 协议介绍
 &lt;a class="anchor" href="#https-%e5%8d%8f%e8%ae%ae%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h3>
&lt;p>HTTPS 协议（Hyper Text Transfer Protocol Secure），是 HTTP 的加强安全版本。HTTPS 是基于 HTTP 的，也是用 TCP 作为底层协议，并额外使用 SSL/TLS 协议用作加密和安全认证。默认端口号是 443.&lt;/p></description></item><item><title>HTTP 常见状态码总结（应用层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http-status-codes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/http-status-codes/</guid><description>&lt;p>HTTP 状态码用于描述 HTTP 请求的结果，比如 2xx 就代表请求被成功处理。&lt;/p>
&lt;p>&lt;img src="img/4378448f26ba098a5b77de81a4852363_MD5.jpg" alt="常见 HTTP 状态码" />&lt;/p>
&lt;h3 id="1xx-informational信息性状态码">
 1xx Informational（信息性状态码）
 &lt;a class="anchor" href="#1xx-informational%e4%bf%a1%e6%81%af%e6%80%a7%e7%8a%b6%e6%80%81%e7%a0%81">#&lt;/a>
&lt;/h3>
&lt;p>相比于其他类别状态码来说，1xx 你平时你大概率不会碰到，所以这里直接跳过。&lt;/p>
&lt;h3 id="2xx-success成功状态码">
 2xx Success（成功状态码）
 &lt;a class="anchor" href="#2xx-success%e6%88%90%e5%8a%9f%e7%8a%b6%e6%80%81%e7%a0%81">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;mark>200 OK&lt;/mark>：请求被成功处理。例如，发送一个查询用户数据的 HTTP 请求到服务端，服务端正确返回了用户数据。这个是我们平时最常见的一个 HTTP 状态码。&lt;/li>
&lt;li>&lt;mark>201 Created&lt;/mark>：请求被成功处理并且在服务端创建了&lt;del>一个新的资源&lt;/del>。例如，通过 POST 请求创建一个新的用户。&lt;/li>
&lt;li>&lt;mark>202 Accepted&lt;/mark>：服务端已经接收到了请求，但是还未处理。例如，发送一个需要服务端花费较长时间处理的请求（如报告生成、Excel 导出），服务端接收了请求但尚未处理完毕。&lt;/li>
&lt;li>&lt;mark>204 No Content&lt;/mark>：服务端已经成功处理了请求，但是没有返回任何内容。例如，发送请求删除一个用户，服务器成功处理了删除操作但没有返回任何内容。&lt;/li>
&lt;/ul>
&lt;p>🐛 修正（参见：
&lt;a target="_blank" href="https://github.com/Snailclimb/JavaGuide/issues/2458">issue#2458&lt;/a>）：201 Created 状态码更准确点来说是创建一个或多个新的资源，可以参考：
&lt;a target="_blank" href="https://httpwg.org/specs/rfc9110.html#status.201">https://httpwg.org/specs/rfc9110.html#status.201&lt;/a>。&lt;/p>
&lt;p>&lt;img src="img/543f36341f94027dc7965dfaa461cfc7_MD5.jpg" alt="" />&lt;/p>
&lt;p>这里格外提一下 204 状态码，平时学习/工作中见到的次数并不多。&lt;/p>
&lt;p>
&lt;a target="_blank" href="https://tools.ietf.org/html/rfc2616#section-10.2.5">HTTP RFC 2616 对 204 状态码的描述&lt;/a>如下：&lt;/p>
&lt;blockquote>
&lt;p>The server has fulfilled the request but does not need to return an
entity-body, and might want to return updated metainformation. The
response MAY include new or updated metainformation in the form of
entity-headers, which if present SHOULD be associated with the
requested variant.&lt;/p></description></item><item><title>NAT 协议详解（网络层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/nat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/nat/</guid><description>&lt;h2 id="应用场景">
 应用场景
 &lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>NAT 协议（Network Address Translation）&lt;/mark> 的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，Local Area Network，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（Wide Area Network，WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。&lt;/p>
&lt;p>这个场景其实不难理解。随着一个个小型办公室、家庭办公室（Small Office, Home Office, SOHO）的出现，为了管理这些 SOHO，一个个子网被设计出来，从而在整个 Internet 中的主机数量将非常庞大。如果每个主机都有一个“绝对唯一”的 IP 地址，那么 IPv4 地址的表达能力可能很快达到上限（$2^{32}$）。因此，实际上，SOHO 子网中的 IP 地址是“相对的”，这在一定程度上也缓解了 IPv4 地址的分配压力。&lt;/p>
&lt;p>SOHO 子网的“代理人”，也就是和外界的窗口，通常由路由器扮演。路由器的 LAN 一侧管理着一个小子网，而它的 WAN 接口才是真正参与到 Internet 中的接口，也就有一个“绝对唯一的地址”。NAT 协议，正是在 LAN 中的主机在与 LAN 外界通信时，起到了地址转换的关键作用。&lt;/p>
&lt;h2 id="细节">
 细节
 &lt;a class="anchor" href="#%e7%bb%86%e8%8a%82">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="img/a6c9febce1d61d04fbed4629cc95b830_MD5.jpg" alt="NAT 协议" />&lt;/p>
&lt;p>假设当前场景如上图。中间是一个路由器，它的右侧组织了一个 LAN，网络号为&lt;code>10.0.0/24&lt;/code>。LAN 侧接口的 IP 地址为&lt;code>10.0.0.4&lt;/code>，并且该子网内有至少三台主机，分别是&lt;code>10.0.0.1&lt;/code>，&lt;code>10.0.0.2&lt;/code>和&lt;code>10.0.0.3&lt;/code>。路由器的左侧连接的是 WAN，WAN 侧接口的 IP 地址为&lt;code>138.76.29.7&lt;/code>。&lt;/p>
&lt;p>首先，针对以上信息，我们有如下事实需要说明：&lt;/p></description></item><item><title>OSI 和 TCP/IP 网络分层模型详解（基础）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/osi-and-tcp-ip-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/osi-and-tcp-ip-model/</guid><description>&lt;h2 id="osi-七层模型">
 OSI 七层模型
 &lt;a class="anchor" href="#osi-%e4%b8%83%e5%b1%82%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>OSI 七层模型&lt;/mark> 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：&lt;/p>
&lt;p>&lt;img src="img/3b5c8b835bdbf278e384c91c9bc66560_MD5.jpg" alt="OSI 七层模型" />&lt;/p>
&lt;p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。&lt;/p>
&lt;p>&lt;mark>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。&lt;/mark>&lt;/p>
&lt;p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！&lt;/p>
&lt;p>&lt;img src="img/74247e8c92c7098c131e918e224eda90_MD5.jpg" alt="osi七层模型2" />&lt;/p>
&lt;p>&lt;mark>既然 OSI 七层模型这么厉害，为什么干不过 TCP/IP 四 层模型呢？&lt;/mark>&lt;/p>
&lt;p>的确，OSI 七层模型当时一直被一些大公司甚至一些国家政府支持。这样的背景下，为什么会失败呢？我觉得主要有下面几方面原因：&lt;/p>
&lt;ol>
&lt;li>OSI 的专家缺乏实际经验，他们在完成 OSI 标准时缺乏商业驱动力&lt;/li>
&lt;li>OSI 的协议实现起来过分复杂，而且运行效率很低&lt;/li>
&lt;li>OSI 制定标准的周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场（20 世纪 90 年代初期，虽然整套的 OSI 国际标准都已经制定出来，但基于 TCP/IP 的互联网已经抢先在全球相当大的范围成功运行了）&lt;/li>
&lt;li>OSI 的层次划分不太合理，有些功能在多个层次中重复出现。&lt;/li>
&lt;/ol>
&lt;p>OSI 七层模型虽然失败了，但是却提供了很多不错的理论基础。为了更好地去了解网络分层，OSI 七层模型还是非常有必要学习的。&lt;/p>
&lt;p>最后再分享一个关于 OSI 七层模型非常不错的总结图片！&lt;/p>
&lt;p>&lt;img src="img/a2d09c88511ab1423090ce1058ab6e63_MD5.jpg" alt="" />&lt;/p>
&lt;h2 id="tcpip-四层模型">
 TCP/IP 四层模型
 &lt;a class="anchor" href="#tcpip-%e5%9b%9b%e5%b1%82%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>TCP/IP 四层模型&lt;/mark> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：&lt;/p>
&lt;ol>
&lt;li>应用层&lt;/li>
&lt;li>传输层&lt;/li>
&lt;li>网络层&lt;/li>
&lt;li>网络接口层&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：&lt;/p></description></item><item><title>TCP 传输可靠性保障（传输层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/tcp-reliability-guarantee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/tcp-reliability-guarantee/</guid><description>&lt;h2 id="tcp-如何保证传输的可靠性">
 TCP 如何保证传输的可靠性？
 &lt;a class="anchor" href="#tcp-%e5%a6%82%e4%bd%95%e4%bf%9d%e8%af%81%e4%bc%a0%e8%be%93%e7%9a%84%e5%8f%af%e9%9d%a0%e6%80%a7">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>&lt;mark>基于数据块传输&lt;/mark>：应用数据被分割成 TCP 认为最适合发送的数据块，再传输给网络层，数据块被称为报文段或段。&lt;/li>
&lt;li>&lt;mark>对失序数据包重新排序以及去重&lt;/mark>：TCP 为了保证不发生丢包，就给每个包一个序列号，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据就可以实现数据包去重。&lt;/li>
&lt;li>&lt;mark>校验和&lt;/mark> : TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。&lt;/li>
&lt;li>&lt;mark>重传机制&lt;/mark> : 在数据包丢失或延迟的情况下，重新发送数据包，直到收到对方的确认应答（ACK）。TCP 重传机制主要有：基于计时器的重传（也就是超时重传）、快速重传（基于接收端的反馈信息来引发重传）、SACK（在快速重传的基础上，返回最近收到的报文段的序列号范围，这样客户端就知道，哪些数据包已经到达服务器了）、D-SACK（重复 SACK，在 SACK 的基础上，额外携带信息，告知发送方有哪些数据包自己重复接收了）。关于重传机制的详细介绍，可以查看
&lt;a target="_blank" href="https://zhuanlan.zhihu.com/p/101702312">详解 TCP 超时与重传机制&lt;/a>这篇文章。&lt;/li>
&lt;li>&lt;mark>流量控制&lt;/mark> : TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议（TCP 利用滑动窗口实现流量控制）。&lt;/li>
&lt;li>&lt;mark>拥塞控制&lt;/mark> : 当网络拥塞时，减少数据的发送。TCP 在发送数据的时候，需要考虑两个因素：一是接收方的接收能力，二是网络的拥塞程度。接收方的接收能力由滑动窗口表示，表示接收方还有多少缓冲区可以用来接收数据。网络的拥塞程度由拥塞窗口表示，它是发送方根据网络状况自己维护的一个值，表示发送方认为可以在网络中传输的数据量。发送方发送数据的大小是滑动窗口和拥塞窗口的最小值，这样可以保证发送方既不会超过接收方的接收能力，也不会造成网络的过度拥塞。&lt;/li>
&lt;/ol>
&lt;h2 id="tcp-如何实现流量控制">
 TCP 如何实现流量控制？
 &lt;a class="anchor" href="#tcp-%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e6%b5%81%e9%87%8f%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。&lt;/mark> 接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。&lt;/p>
&lt;p>&lt;mark>为什么需要流量控制?&lt;/mark> 这是因为双方在通信的时候，发送方的速率与接收方的速率是不一定相等，如果发送方的发送速率太快，会导致接收方处理不过来。如果接收方处理不过来的话，就只能把处理不过来的数据存在 &lt;mark>接收缓冲区(Receiving Buffers)&lt;/mark> 里（失序的数据包也会被存放在缓存区里）。如果缓存区满了发送方还在狂发数据的话，接收方只能把收到的数据包丢掉。出现丢包问题的同时又疯狂浪费着珍贵的网络资源。因此，我们需要控制发送方的发送速率，让接收方与发送方处于一种动态平衡才好。&lt;/p>
&lt;p>这里需要注意的是（常见误区）：&lt;/p>
&lt;ul>
&lt;li>发送端不等同于客户端&lt;/li>
&lt;li>接收端不等同于服务端&lt;/li>
&lt;/ul>
&lt;p>TCP 为全双工(Full-Duplex, FDX)通信，双方可以进行双向通信，客户端和服务端既可能是发送端又可能是服务端。因此，两端各有一个发送缓冲区与接收缓冲区，两端都各自维护一个发送窗口和一个接收窗口。接收窗口大小取决于应用、系统、硬件的限制（TCP 传输速率不能大于应用的数据处理速率）。通信双方的发送窗口和接收窗口的要求相同&lt;/p>
&lt;p>&lt;mark>TCP 发送窗口可以划分成四个部分&lt;/mark>：&lt;/p>
&lt;ol>
&lt;li>已经发送并且确认的 TCP 段（已经发送并确认）；&lt;/li>
&lt;li>已经发送但是没有确认的 TCP 段（已经发送未确认）；&lt;/li>
&lt;li>未发送但是接收方准备接收的 TCP 段（可以发送）；&lt;/li>
&lt;li>未发送并且接收方也并未准备接受的 TCP 段（不可发送）。&lt;/li>
&lt;/ol>
&lt;p>&lt;mark>TCP 发送窗口结构图示&lt;/mark>：&lt;/p></description></item><item><title>TCP 三次握手和四次挥手（传输层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/tcp-connection-and-disconnection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/tcp-connection-and-disconnection/</guid><description>&lt;p>为了准确无误地把数据送达目标处，TCP 协议采用了三次握手策略。&lt;/p>
&lt;h2 id="建立连接-tcp-三次握手">
 建立连接-TCP 三次握手
 &lt;a class="anchor" href="#%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5-tcp-%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="img/7bae70b340693f239b102113bb4041bb_MD5.jpg" alt="TCP 三次握手图解" />&lt;/p>
&lt;p>建立一个 TCP 连接需要“三次握手”，缺一不可：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>一次握手&lt;/mark>:客户端发送带有 SYN（SEQ=x） 标志的数据包 -&amp;gt; 服务端，然后客户端进入 &lt;mark>SYN_SEND&lt;/mark> 状态，等待服务端的确认；&lt;/li>
&lt;li>&lt;mark>二次握手&lt;/mark>:服务端发送带有 SYN+ACK(SEQ=y,ACK=x+1) 标志的数据包 –&amp;gt; 客户端,然后服务端进入 &lt;mark>SYN_RECV&lt;/mark> 状态；&lt;/li>
&lt;li>&lt;mark>三次握手&lt;/mark>:客户端发送带有 ACK(ACK=y+1) 标志的数据包 –&amp;gt; 服务端，然后客户端和服务端都进入&lt;mark>ESTABLISHED&lt;/mark> 状态，完成 TCP 三次握手。&lt;/li>
&lt;/ul>
&lt;p>当建立了 3 次握手之后，客户端和服务端就可以传输数据啦！&lt;/p>
&lt;h3 id="什么是半连接队列和全连接队列">
 什么是半连接队列和全连接队列？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%8d%8a%e8%bf%9e%e6%8e%a5%e9%98%9f%e5%88%97%e5%92%8c%e5%85%a8%e8%bf%9e%e6%8e%a5%e9%98%9f%e5%88%97">#&lt;/a>
&lt;/h3>
&lt;p>在 TCP 三次握手过程中，Linux 内核会维护两个队列来管理连接请求：&lt;/p>
&lt;ol>
&lt;li>&lt;mark>半连接队列&lt;/mark>（也称 SYN Queue）：当服务端收到客户端的 SYN 请求时，此时双方还没有完全建立连接，它会把半连接状态的连接放在半连接队列。&lt;/li>
&lt;li>&lt;mark>全连接队列&lt;/mark>（也称 Accept Queue）：当服务端收到客户端对 ACK 响应时，意味着三次握手成功完成，服务端会将该连接从半连接队列移动到全连接队列。如果未收到客户端的 ACK 响应，会进行重传，重传的等待时间通常是指数增长的。如果重传次数超过系统规定的最大重传次数，系统将从半连接队列中删除该连接信息。&lt;/li>
&lt;/ol>
&lt;p>这两个队列的存在是为了处理并发连接请求，确保服务端能够有效地管理新的连接请求。另外，新的连接请求被拒绝或忽略除了和每个队列的大小限制有关系之外，还和很多其他因素有关系，这里就不详细介绍了，整体逻辑比较复杂。&lt;/p>
&lt;h3 id="为什么要三次握手">
 为什么要三次握手?
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b">#&lt;/a>
&lt;/h3>
&lt;p>三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。&lt;/p>
&lt;ol>
&lt;li>&lt;mark>第一次握手&lt;/mark>：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常&lt;/li>
&lt;li>&lt;mark>第二次握手&lt;/mark>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常&lt;/li>
&lt;li>&lt;mark>第三次握手&lt;/mark>：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常&lt;/li>
&lt;/ol>
&lt;p>三次握手就能确认双方收发功能都正常，缺一不可。&lt;/p></description></item><item><title>访问网页的全过程（知识串联）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/the-whole-process-of-accessing-web-pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/the-whole-process-of-accessing-web-pages/</guid><description>&lt;p>开发岗中总是会考很多计算机网络的知识点，但如果让面试官只考一道题，便涵盖最多的计网知识点，那可能就是 &lt;mark>网页浏览的全过程&lt;/mark> 了。本篇文章将带大家从头到尾过一遍这道被考烂的面试题，必会！！！&lt;/p>
&lt;p>总的来说，网络通信模型可以用下图来表示，也就是大家只要熟记网络结构五层模型，按照这个体系，很多知识点都能顺出来了。访问网页的过程也是如此。&lt;/p>
&lt;p>&lt;img src="img/c60c53c126858a348fa02abf9f5c4a2e_MD5.jpg" alt="" />&lt;/p>
&lt;p>开始之前，我们先简单过一遍完整流程：&lt;/p>
&lt;ol>
&lt;li>在浏览器中输入指定网页的 URL。&lt;/li>
&lt;li>浏览器通过 DNS 协议，获取域名对应的 IP 地址。&lt;/li>
&lt;li>浏览器根据 IP 地址和端口号，向目标服务器发起一个 TCP 连接请求。&lt;/li>
&lt;li>浏览器在 TCP 连接上，向服务器发送一个 HTTP 请求报文，请求获取网页的内容。&lt;/li>
&lt;li>服务器收到 HTTP 请求报文后，处理请求，并返回 HTTP 响应报文给浏览器。&lt;/li>
&lt;li>浏览器收到 HTTP 响应报文后，解析响应体中的 HTML 代码，渲染网页的结构和样式，同时根据 HTML 中的其他资源的 URL（如图片、CSS、JS 等），再次发起 HTTP 请求，获取这些资源的内容，直到网页完全加载显示。&lt;/li>
&lt;li>浏览器在不需要和服务器通信时，可以主动关闭 TCP 连接，或者等待服务器的关闭请求。&lt;/li>
&lt;/ol>
&lt;h2 id="应用层">
 应用层
 &lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e5%b1%82">#&lt;/a>
&lt;/h2>
&lt;p>一切的开始——打开浏览器，在地址栏输入 URL，回车确认。那么，什么是 URL？访问 URL 有什么用？&lt;/p>
&lt;h3 id="url">
 URL
 &lt;a class="anchor" href="#url">#&lt;/a>
&lt;/h3>
&lt;p>URL（Uniform Resource Locators），即统一资源定位器。网络上的所有资源都靠 URL 来定位，每一个文件就对应着一个 URL，就像是路径地址。理论上，文件资源和 URL 一一对应。实际上也有例外，比如某些 URL 指向的文件已经被重定位到另一个位置，这样就有多个 URL 指向同一个文件。&lt;/p>
&lt;h3 id="url-的组成结构">
 URL 的组成结构
 &lt;a class="anchor" href="#url-%e7%9a%84%e7%bb%84%e6%88%90%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="img/4b4f96d04b53e97940b432c7d90e87e2_MD5.jpg" alt="URL的组成结构" />&lt;/p></description></item><item><title>计算机网络常见面试题总结(上)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/other-network-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/other-network-questions/</guid><description>&lt;p>上篇主要是计算机网络基础和应用层相关的内容。&lt;/p>
&lt;h2 id="计算机网络基础">
 计算机网络基础
 &lt;a class="anchor" href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="网络分层模型">
 网络分层模型
 &lt;a class="anchor" href="#%e7%bd%91%e7%bb%9c%e5%88%86%e5%b1%82%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h3>
&lt;h4 id="osi-七层模型是什么每一层的作用是什么">
 OSI 七层模型是什么？每一层的作用是什么？
 &lt;a class="anchor" href="#osi-%e4%b8%83%e5%b1%82%e6%a8%a1%e5%9e%8b%e6%98%af%e4%bb%80%e4%b9%88%e6%af%8f%e4%b8%80%e5%b1%82%e7%9a%84%e4%bd%9c%e7%94%a8%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h4>
&lt;p>&lt;mark>OSI 七层模型&lt;/mark> 是国际标准化组织提出的一个网络分层模型，其大体结构以及每一层提供的功能如下图所示：&lt;/p>
&lt;p>&lt;img src="img/3b5c8b835bdbf278e384c91c9bc66560_MD5.jpg" alt="OSI 七层模型" />&lt;/p>
&lt;p>每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪里去。&lt;/p>
&lt;p>&lt;mark>OSI 的七层体系结构概念清楚，理论也很完整，但是它比较复杂而且不实用，而且有些功能在多个层中重复出现。&lt;/mark>&lt;/p>
&lt;p>上面这种图可能比较抽象，再来一个比较生动的图片。下面这个图片是我在国外的一个网站上看到的，非常赞！&lt;/p>
&lt;p>&lt;img src="img/74247e8c92c7098c131e918e224eda90_MD5.jpg" alt="osi七层模型2" />&lt;/p>
&lt;h4 id="tcpip-四层模型是什么每一层的作用是什么">
 TCP/IP 四层模型是什么？每一层的作用是什么？
 &lt;a class="anchor" href="#tcpip-%e5%9b%9b%e5%b1%82%e6%a8%a1%e5%9e%8b%e6%98%af%e4%bb%80%e4%b9%88%e6%af%8f%e4%b8%80%e5%b1%82%e7%9a%84%e4%bd%9c%e7%94%a8%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h4>
&lt;p>&lt;mark>TCP/IP 四层模型&lt;/mark> 是目前被广泛采用的一种模型,我们可以将 TCP / IP 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：&lt;/p>
&lt;ol>
&lt;li>应用层&lt;/li>
&lt;li>传输层&lt;/li>
&lt;li>网络层&lt;/li>
&lt;li>网络接口层&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，我们并不能将 TCP/IP 四层模型 和 OSI 七层模型完全精确地匹配起来，不过可以简单将两者对应起来，如下图所示：&lt;/p>
&lt;p>&lt;img src="img/b2c2ed9e75219083ed2290f6d2c1e65f_MD5.jpg" alt="TCP/IP 四层模型" />&lt;/p>
&lt;p>关于每一层作用的详细介绍，请看 
&lt;a target="_blank" href="./osi-and-tcp-ip-model.md">OSI 和 TCP/IP 网络分层模型详解（基础）&lt;/a> 这篇文章。&lt;/p>
&lt;h4 id="为什么网络要分层">
 为什么网络要分层？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e7%bd%91%e7%bb%9c%e8%a6%81%e5%88%86%e5%b1%82">#&lt;/a>
&lt;/h4>
&lt;p>说到分层，我们先从我们平时使用框架开发一个后台程序来说，我们往往会按照每一层做不同的事情的原则将系统分为三层（复杂的系统分层会更多）:&lt;/p>
&lt;ol>
&lt;li>Repository（数据库操作）&lt;/li>
&lt;li>Service（业务操作）&lt;/li>
&lt;li>Controller（前后端数据交互）&lt;/li>
&lt;/ol>
&lt;p>&lt;mark>复杂的系统需要分层，因为每一层都需要专注于一类事情。网络分层的原因也是一样，每一层只专注于做一类事情。&lt;/mark>&lt;/p>
&lt;p>好了，再来说回：“为什么网络要分层？”。我觉得主要有 3 方面的原因：&lt;/p>
&lt;ol>
&lt;li>&lt;mark>各层之间相互独立&lt;/mark>：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）&lt;mark>。这个和我们对开发时系统进行分层是一个道理。&lt;/mark>&lt;/li>
&lt;li>&lt;mark>提高了灵活性和可替换性&lt;/mark>：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。&lt;mark>这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。&lt;/mark>&lt;/li>
&lt;li>&lt;mark>大问题化小&lt;/mark>：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 &lt;mark>这个和我们平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义。&lt;/mark>&lt;/li>
&lt;/ol>
&lt;p>我想到了计算机世界非常非常有名的一句话，这里分享一下：&lt;/p></description></item><item><title>计算机网络常见面试题总结(下)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/other-network-questions2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/other-network-questions2/</guid><description>&lt;p>下篇主要是传输层和网络层相关的内容。&lt;/p>
&lt;h2 id="tcp-与-udp">
 TCP 与 UDP
 &lt;a class="anchor" href="#tcp-%e4%b8%8e-udp">#&lt;/a>
&lt;/h2>
&lt;h3 id="tcp-与-udp-的区别重要">
 TCP 与 UDP 的区别（重要）
 &lt;a class="anchor" href="#tcp-%e4%b8%8e-udp-%e7%9a%84%e5%8c%ba%e5%88%ab%e9%87%8d%e8%a6%81">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>&lt;mark>是否面向连接&lt;/mark>：UDP 在传送数据之前不需要先建立连接。而 TCP 提供面向连接的服务，在传送数据之前必须先建立连接，数据传送结束后要释放连接。&lt;/li>
&lt;li>&lt;mark>是否是可靠传输&lt;/mark>：远地主机在收到 UDP 报文后，不需要给出任何确认，并且不保证数据不丢失，不保证是否顺序到达。TCP 提供可靠的传输服务，TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制。通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。&lt;/li>
&lt;li>&lt;mark>是否有状态&lt;/mark>：这个和上面的“是否可靠传输”相对应。TCP 传输是有状态的，这个有状态说的是 TCP 会去记录自己发送消息的状态比如消息是否发送了、是否被接收了等等。为此 ，TCP 需要维持复杂的连接状态表。而 UDP 是无状态服务，简单来说就是不管发出去之后的事情了（&lt;mark>这很渣男！&lt;/mark>）。&lt;/li>
&lt;li>&lt;mark>传输效率&lt;/mark>：由于使用 TCP 进行传输的时候多了连接、确认、重传等机制，所以 TCP 的传输效率要比 UDP 低很多。&lt;/li>
&lt;li>&lt;mark>传输形式&lt;/mark>：TCP 是面向字节流的，UDP 是面向报文的。&lt;/li>
&lt;li>&lt;mark>首部开销&lt;/mark>：TCP 首部开销（20 ～ 60 字节）比 UDP 首部开销（8 字节）要大。&lt;/li>
&lt;li>&lt;mark>是否提供广播或多播服务&lt;/mark>：TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多；&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;p>我把上面总结的内容通过表格形式展示出来了！确定不点个赞嘛？&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>TCP&lt;/th>
 &lt;th>UDP&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>是否面向连接&lt;/td>
 &lt;td>是&lt;/td>
 &lt;td>否&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>是否可靠&lt;/td>
 &lt;td>是&lt;/td>
 &lt;td>否&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>是否有状态&lt;/td>
 &lt;td>是&lt;/td>
 &lt;td>否&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>传输效率&lt;/td>
 &lt;td>较慢&lt;/td>
 &lt;td>较快&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>传输形式&lt;/td>
 &lt;td>字节流&lt;/td>
 &lt;td>数据报文段&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>首部开销&lt;/td>
 &lt;td>20 ～ 60 bytes&lt;/td>
 &lt;td>8 bytes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>是否提供广播或多播服务&lt;/td>
 &lt;td>否&lt;/td>
 &lt;td>是&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="什么时候选择-tcp什么时候选-udp">
 什么时候选择 TCP，什么时候选 UDP?
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e9%80%89%e6%8b%a9-tcp%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e9%80%89-udp">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;mark>UDP 一般用于即时通信&lt;/mark>，比如：语音、 视频、直播等等。这些场景对传输数据的准确性要求不是特别高，比如你看视频即使少个一两帧，实际给人的感觉区别也不大。&lt;/li>
&lt;li>&lt;mark>TCP 用于对传输准确性要求特别高的场景&lt;/mark>，比如文件传输、发送和接收邮件、远程登录等等。&lt;/li>
&lt;/ul>
&lt;h3 id="http-基于-tcp-还是-udp">
 HTTP 基于 TCP 还是 UDP？
 &lt;a class="anchor" href="#http-%e5%9f%ba%e4%ba%8e-tcp-%e8%bf%98%e6%98%af-udp">#&lt;/a>
&lt;/h3>
&lt;p>&lt;del>&lt;mark>HTTP 协议是基于 TCP 协议的&lt;/mark>，所以发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。&lt;/del>&lt;/p></description></item><item><title>网络攻击常见手段总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/network-attack-means/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/network-attack-means/</guid><description>&lt;blockquote>
&lt;p>本文整理完善自
&lt;a target="_blank" href="https://mp.weixin.qq.com/s/AZwWrOlLxRSSi-ywBgZ0fA">TCP/IP 常见攻击手段 - 暖蓝笔记 - 2021&lt;/a>这篇文章。&lt;/p>
&lt;/blockquote>
&lt;p>这篇文章的内容主要是介绍 TCP/IP 常见攻击手段，尤其是 DDoS 攻击，也会补充一些其他的常见网络攻击手段。&lt;/p>
&lt;h2 id="ip-欺骗">
 IP 欺骗
 &lt;a class="anchor" href="#ip-%e6%ac%ba%e9%aa%97">#&lt;/a>
&lt;/h2>
&lt;h3 id="ip-是什么">
 IP 是什么?
 &lt;a class="anchor" href="#ip-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>在网络中，所有的设备都会分配一个地址。这个地址就仿佛小蓝的家地址「&lt;mark>多少号多少室&lt;/mark>」，这个号就是分配给整个子网的，「&lt;mark>室&lt;/mark>」对应的号码即分配给子网中计算机的，这就是网络中的地址。「号」对应的号码为网络号，「&lt;mark>室&lt;/mark>」对应的号码为主机号，这个地址的整体就是 &lt;mark>IP 地址&lt;/mark>。&lt;/p>
&lt;h3 id="通过-ip-地址我们能知道什么">
 通过 IP 地址我们能知道什么？
 &lt;a class="anchor" href="#%e9%80%9a%e8%bf%87-ip-%e5%9c%b0%e5%9d%80%e6%88%91%e4%bb%ac%e8%83%bd%e7%9f%a5%e9%81%93%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>通过 IP 地址，我们就可以知道判断访问对象服务器的位置，从而将消息发送到服务器。一般发送者发出的消息首先经过子网的集线器，转发到最近的路由器，然后根据路由位置访问下一个路由器的位置，直到终点&lt;/p>
&lt;p>&lt;mark>IP 头部格式&lt;/mark> :&lt;/p>
&lt;p>&lt;img src="img/6dacfd272c656acf3d5c5b7e85561990_MD5.jpg" alt="" />&lt;/p>
&lt;h3 id="ip-欺骗技术是什么">
 IP 欺骗技术是什么？
 &lt;a class="anchor" href="#ip-%e6%ac%ba%e9%aa%97%e6%8a%80%e6%9c%af%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>骗呗，拐骗，诱骗！&lt;/p>
&lt;p>IP 欺骗技术就是&lt;mark>伪造&lt;/mark>某台主机的 IP 地址的技术。通过 IP 地址的伪装使得某台主机能够&lt;mark>伪装&lt;/mark>另外的一台主机，而这台主机往往具有某种特权或者被另外的主机所信任。&lt;/p>
&lt;p>假设现在有一个合法用户 &lt;mark>(1.1.1.1)&lt;/mark> 已经同服务器建立正常的连接，攻击者构造攻击的 TCP 数据，伪装自己的 IP 为 &lt;mark>1.1.1.1&lt;/mark>，并向服务器发送一个带有 RST 位的 TCP 数据段。服务器接收到这样的数据后，认为从 &lt;mark>1.1.1.1&lt;/mark> 发送的连接有错误，就会清空缓冲区中建立好的连接。&lt;/p>
&lt;p>这时，如果合法用户 &lt;mark>1.1.1.1&lt;/mark> 再发送合法数据，服务器就已经没有这样的连接了，该用户就必须从新开始建立连接。攻击时，伪造大量的 IP 地址，向目标发送 RST 数据，使服务器不对合法用户服务。虽然 IP 地址欺骗攻击有着相当难度，但我们应该清醒地意识到，这种攻击非常广泛，入侵往往从这种攻击开始。&lt;/p>
&lt;p>&lt;img src="img/5dc42c808a78c61ea2585a25bd95901a_MD5.jpg" alt="IP 欺骗 DDoS 攻击" />&lt;/p></description></item><item><title>应用层常见协议总结（应用层）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/application-layer-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/cs-basics/network/application-layer-protocol/</guid><description>&lt;h2 id="http超文本传输协议">
 HTTP:超文本传输协议
 &lt;a class="anchor" href="#http%e8%b6%85%e6%96%87%e6%9c%ac%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>超文本传输协议（HTTP，HyperText Transfer Protocol)&lt;/mark> 是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的。&lt;/p>
&lt;p>HTTP 使用客户端-服务器模型，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应），整个过程如下图所示。&lt;/p>
&lt;p>&lt;img src="img/6ff755979629b5f098fb8323a903667f_MD5.jpg" alt="" />&lt;/p>
&lt;p>HTTP 协议基于 TCP 协议，发送 HTTP 请求之前首先要建立 TCP 连接也就是要经历 3 次握手。目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样的话建立的连接就可以在多次请求中被复用了。&lt;/p>
&lt;p>另外， HTTP 协议是”无状态”的协议，它无法记录客户端用户的状态，一般我们都是通过 Session 来记录客户端用户的状态。&lt;/p>
&lt;h2 id="websocket全双工通信协议">
 Websocket：全双工通信协议
 &lt;a class="anchor" href="#websocket%e5%85%a8%e5%8f%8c%e5%b7%a5%e9%80%9a%e4%bf%a1%e5%8d%8f%e8%ae%ae">#&lt;/a>
&lt;/h2>
&lt;p>WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。&lt;/p>
&lt;p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准，几乎所有主流较新版本的浏览器都支持该协议。不过，WebSocket 不只能在基于浏览器的应用程序中使用，很多编程语言、框架和服务器都提供了 WebSocket 支持。&lt;/p>
&lt;p>WebSocket 协议本质上是应用层的协议，用于弥补 HTTP 协议在持久通信能力上的不足。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;/p>
&lt;p>&lt;img src="img/7a697d653cb38602ca1b25c2eca17c2b_MD5.jpg" alt="Websocket 示意图" />&lt;/p>
&lt;p>下面是 WebSocket 的常见应用场景：&lt;/p>
&lt;ul>
&lt;li>视频弹幕&lt;/li>
&lt;li>实时消息推送，详见
&lt;a target="_blank" href="https://javaguide.cn/system-design/web-real-time-message-push.html">Web 实时消息推送详解&lt;/a>这篇文章&lt;/li>
&lt;li>实时游戏对战&lt;/li>
&lt;li>多用户协同编辑&lt;/li>
&lt;li>社交聊天&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;p>WebSocket 的工作过程可以分为以下几个步骤：&lt;/p></description></item></channel></rss>