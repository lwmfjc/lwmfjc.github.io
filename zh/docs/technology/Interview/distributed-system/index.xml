<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/index.xml" rel="self" type="application/rss+xml"/><item><title>API网关基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/api-gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/api-gateway/</guid><description>&lt;h2 id="什么是网关">
 什么是网关？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e7%bd%91%e5%85%b3">#&lt;/a>
&lt;/h2>
&lt;p>微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway-overview.png" alt="网关示意图" />&lt;/p>
&lt;p>一般情况下，网关可以为我们提供请求转发、安全认证（身份/权限认证）、流量控制、负载均衡、降级熔断、日志、监控、参数校验、协议转换等功能。&lt;/p>
&lt;p>上面介绍了这么多功能，实际上，网关主要做了两件事情：&lt;strong>请求转发&lt;/strong> + &lt;strong>请求过滤&lt;/strong>。&lt;/p>
&lt;p>由于引入网关之后，会多一步网络转发，因此性能会有一点影响（几乎可以忽略不计，尤其是内网访问的情况下）。 另外，我们需要保障网关服务的高可用，避免单点风险。&lt;/p>
&lt;p>如下图所示，网关服务外层通过 Nginx（其他负载均衡设备/软件也行） 进⾏负载转发以达到⾼可⽤。Nginx 在部署的时候，尽量也要考虑高可用，避免单点风险。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png" alt="基于 Nginx 的服务端负载均衡" />&lt;/p>
&lt;h2 id="网关能提供哪些功能">
 网关能提供哪些功能？
 &lt;a class="anchor" href="#%e7%bd%91%e5%85%b3%e8%83%bd%e6%8f%90%e4%be%9b%e5%93%aa%e4%ba%9b%e5%8a%9f%e8%83%bd">#&lt;/a>
&lt;/h2>
&lt;p>绝大部分网关可以提供下面这些功能（有一些功能需要借助其他框架或者中间件）：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>请求转发&lt;/strong>：将请求转发到目标微服务。&lt;/li>
&lt;li>&lt;strong>负载均衡&lt;/strong>：根据各个微服务实例的负载情况或者具体的负载均衡策略配置对请求实现动态的负载均衡。&lt;/li>
&lt;li>&lt;strong>安全认证&lt;/strong>：对用户请求进行身份验证并仅允许可信客户端访问 API，并且还能够使用类似 RBAC 等方式来授权。&lt;/li>
&lt;li>&lt;strong>参数校验&lt;/strong>：支持参数映射与校验逻辑。&lt;/li>
&lt;li>&lt;strong>日志记录&lt;/strong>：记录所有请求的行为日志供后续使用。&lt;/li>
&lt;li>&lt;strong>监控告警&lt;/strong>：从业务指标、机器指标、JVM 指标等方面进行监控并提供配套的告警机制。&lt;/li>
&lt;li>&lt;strong>流量控制&lt;/strong>：对请求的流量进行控制，也就是限制某一时刻内的请求数。&lt;/li>
&lt;li>&lt;strong>熔断降级&lt;/strong>：实时监控请求的统计信息，达到配置的失败阈值后，自动熔断，返回默认值。&lt;/li>
&lt;li>&lt;strong>响应缓存&lt;/strong>：当用户请求获取的是一些静态的或更新不频繁的数据时，一段时间内多次请求获取到的数据很可能是一样的。对于这种情况可以将响应缓存起来。这样用户请求可以直接在网关层得到响应数据，无需再去访问业务服务，减轻业务服务的负担。&lt;/li>
&lt;li>&lt;strong>响应聚合&lt;/strong>：某些情况下用户请求要获取的响应内容可能会来自于多个业务服务。网关作为业务服务的调用方，可以把多个服务的响应整合起来，再一并返回给用户。&lt;/li>
&lt;li>&lt;strong>灰度发布&lt;/strong>：将请求动态分流到不同的服务版本（最基本的一种灰度发布）。&lt;/li>
&lt;li>&lt;strong>异常处理&lt;/strong>：对于业务服务返回的异常响应，可以在网关层在返回给用户之前做转换处理。这样可以把一些业务侧返回的异常细节隐藏，转换成用户友好的错误提示返回。&lt;/li>
&lt;li>&lt;strong>API 文档：&lt;/strong> 如果计划将 API 暴露给组织以外的开发人员，那么必须考虑使用 API 文档，例如 Swagger 或 OpenAPI。&lt;/li>
&lt;li>&lt;strong>协议转换&lt;/strong>：通过协议转换整合后台基于 REST、AMQP、Dubbo 等不同风格和实现技术的微服务，面向 Web Mobile、开放平台等特定客户端提供统一服务。&lt;/li>
&lt;li>&lt;strong>证书管理&lt;/strong>：将 SSL 证书部署到 API 网关，由一个统一的入口管理接口，降低了证书更换时的复杂度。&lt;/li>
&lt;/ul>
&lt;p>下图来源于
&lt;a href="https://mp.weixin.qq.com/s/iITqdIiHi3XGKq6u6FRVdg">百亿规模 API 网关服务 Shepherd 的设计与实现 - 美团技术团队 - 2021&lt;/a>这篇文章。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/distributed-system/api-gateway/up-35e102c633bbe8e0dea1e075ea3fee5dcfb.png" alt="" />&lt;/p></description></item><item><title>Spring Cloud Gateway常见问题总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/spring-cloud-gateway-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/spring-cloud-gateway-questions/</guid><description>&lt;blockquote>
&lt;p>本文重构完善自
&lt;a href="https://mp.weixin.qq.com/s/XjFYsP1IUqNzWqXZdJn-Aw">6000 字 | 16 图 | 深入理解 Spring Cloud Gateway 的原理 - 悟空聊架构&lt;/a>这篇文章。&lt;/p>
&lt;/blockquote>
&lt;h2 id="什么是-spring-cloud-gateway">
 什么是 Spring Cloud Gateway？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-spring-cloud-gateway">#&lt;/a>
&lt;/h2>
&lt;p>Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 &lt;strong>Zuul&lt;/strong>。准确点来说，应该是 Zuul 1.x。Spring Cloud Gateway 起步要比 Zuul 2.x 更早。&lt;/p>
&lt;p>为了提升网关的性能，Spring Cloud Gateway 基于 Spring WebFlux 。Spring WebFlux 使用 Reactor 库来实现响应式编程模型，底层基于 Netty 实现同步非阻塞的 I/O。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/api-gateway/springcloud-gateway-%20demo.png" alt="" />&lt;/p>
&lt;p>Spring Cloud Gateway 不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，限流。&lt;/p>
&lt;p>Spring Cloud Gateway 和 Zuul 2.x 的差别不大，也是通过过滤器来处理请求。不过，目前更加推荐使用 Spring Cloud Gateway 而非 Zuul，Spring Cloud 生态对其支持更加友好。&lt;/p></description></item><item><title>分布式ID介绍&amp;实现方案总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-id/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-id/</guid><description>&lt;h2 id="分布式-id-介绍">
 分布式 ID 介绍
 &lt;a class="anchor" href="#%e5%88%86%e5%b8%83%e5%bc%8f-id-%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是-id">
 什么是 ID？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-id">#&lt;/a>
&lt;/h3>
&lt;p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。&lt;/p>
&lt;p>我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应一个地址。&lt;/p>
&lt;p>简单来说，&lt;strong>ID 就是数据的唯一标识&lt;/strong>。&lt;/p>
&lt;h3 id="什么是分布式-id">
 什么是分布式 ID？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%88%86%e5%b8%83%e5%bc%8f-id">#&lt;/a>
&lt;/h3>
&lt;p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。&lt;/p>
&lt;p>我简单举一个分库分表的例子。&lt;/p>
&lt;p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。&lt;/p>
&lt;p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。&lt;strong>我们如何为不同的数据节点生成全局唯一主键呢？&lt;/strong>&lt;/p>
&lt;p>这个时候就需要生成&lt;strong>分布式 ID&lt;/strong>了。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/id-after-the-sub-table-not-conflict.png" alt="" />&lt;/p>
&lt;h3 id="分布式-id-需要满足哪些要求">
 分布式 ID 需要满足哪些要求?
 &lt;a class="anchor" href="#%e5%88%86%e5%b8%83%e5%bc%8f-id-%e9%9c%80%e8%a6%81%e6%bb%a1%e8%b6%b3%e5%93%aa%e4%ba%9b%e8%a6%81%e6%b1%82">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-requirements.png" alt="" />&lt;/p>
&lt;p>分布式 ID 作为分布式系统中必不可少的一环，很多地方都要用到分布式 ID。&lt;/p>
&lt;p>一个最基本的分布式 ID 需要满足下面这些要求：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>全局唯一&lt;/strong>：ID 的全局唯一性肯定是首先要满足的！&lt;/li>
&lt;li>&lt;strong>高性能&lt;/strong>：分布式 ID 的生成速度要快，对本地资源消耗要小。&lt;/li>
&lt;li>&lt;strong>高可用&lt;/strong>：生成分布式 ID 的服务要保证可用性无限接近于 100%。&lt;/li>
&lt;li>&lt;strong>方便易用&lt;/strong>：拿来即用，使用方便，快速接入！&lt;/li>
&lt;/ul>
&lt;p>除了这些之外，一个比较好的分布式 ID 还应保证：&lt;/p></description></item><item><title>分布式ID设计指南</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-id-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-id-design/</guid><description>&lt;p>::: tip&lt;/p>
&lt;p>看到百度 Geek 说的一篇结合具体场景聊分布式 ID 设计的文章，感觉挺不错的。于是，我将这篇文章的部分内容整理到了这里。原文传送门：
&lt;a href="https://mp.weixin.qq.com/s/bFDLb6U6EgI-DvCdLTq_QA">分布式 ID 生成服务的技术原理和项目实战&lt;/a> 。&lt;/p>
&lt;p>:::&lt;/p>
&lt;p>网上绝大多数的分布式 ID 生成服务，一般着重于技术原理剖析，很少见到根据具体的业务场景去选型 ID 生成服务的文章。&lt;/p>
&lt;p>本文结合一些使用场景，进一步探讨业务场景中对 ID 有哪些具体的要求。&lt;/p>
&lt;h2 id="场景一订单系统">
 场景一：订单系统
 &lt;a class="anchor" href="#%e5%9c%ba%e6%99%af%e4%b8%80%e8%ae%a2%e5%8d%95%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h2>
&lt;p>我们在商场买东西一码付二维码，下单生成的订单号，使用到的优惠券码，联合商品兑换券码，这些是在网上购物经常使用到的单号，那么为什么有些单号那么长，有些只有几位数？有些单号一看就知道年月日的信息，有些却看不出任何意义？下面展开分析下订单系统中不同场景的 id 服务的具体实现。&lt;/p>
&lt;h3 id="1一码付">
 1、一码付
 &lt;a class="anchor" href="#1%e4%b8%80%e7%a0%81%e4%bb%98">#&lt;/a>
&lt;/h3>
&lt;p>我们常见的一码付，指的是一个二维码可以使用支付宝或者微信进行扫码支付。&lt;/p>
&lt;p>二维码的本质是一个字符串。聚合码的本质就是一个链接地址。用户使用支付宝微信直接扫一个码付钱，不用担心拿支付宝扫了微信的收款码或者用微信扫了支付宝的收款码，这极大减少了用户扫码支付的时间。&lt;/p>
&lt;p>实现原理是当客户用 APP 扫码后，网站后台就会判断客户的扫码环境。（微信、支付宝、QQ 钱包、京东支付、云闪付等）。&lt;/p>
&lt;p>判断扫码环境的原理就是根据打开链接浏览器的 HTTP header。任何浏览器打开 http 链接时，请求的 header 都会有 User-Agent(UA、用户代理)信息。&lt;/p>
&lt;p>UA 是一个特殊字符串头，服务器依次可以识别出客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等很多信息。&lt;/p>
&lt;p>各渠道对应支付产品的名称不一样，一定要仔细看各支付产品的 API 介绍。&lt;/p>
&lt;ol>
&lt;li>微信支付：JSAPI 支付支付&lt;/li>
&lt;li>支付宝：手机网站支付&lt;/li>
&lt;li>QQ 钱包：公众号支付&lt;/li>
&lt;/ol>
&lt;p>其本质均为在 APP 内置浏览器中实现 HTML5 支付。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/system-design/distributed-system/distributed-id-design-pay-one-card.png" alt="文库会员支付示例" />&lt;/p>
&lt;p>文库的研发同学在这个思路上，做了优化迭代。动态生成一码付的二维码预先绑定用户所选的商品信息和价格，根据用户所选的商品动态更新。这样不仅支持一码多平台调起支付，而且不用用户选择商品输入金额，即可完成订单支付的功能，很丝滑。用户在真正扫码后，服务端才通过前端获取用户 UID，结合二维码绑定的商品信息，真正的生成订单，发送支付信息到第三方（qq、微信、支付宝），第三方生成支付订单推给用户设备，从而调起支付。&lt;/p>
&lt;p>区别于固定的一码付，在文库的应用中，使用到了动态二维码，二维码本质是一个短网址，ID 服务提供短网址的唯一标志参数。唯一的短网址映射的 ID 绑定了商品的订单信息，技术和业务的深度结合，缩短了支付流程，提升用户的支付体验。&lt;/p>
&lt;h3 id="2订单号">
 2、订单号
 &lt;a class="anchor" href="#2%e8%ae%a2%e5%8d%95%e5%8f%b7">#&lt;/a>
&lt;/h3>
&lt;p>订单号在实际的业务过程中作为一个订单的唯一标识码存在，一般实现以下业务场景：&lt;/p>
&lt;ol>
&lt;li>用户订单遇到问题，需要找客服进行协助；&lt;/li>
&lt;li>对订单进行操作，如线下收款，订单核销；&lt;/li>
&lt;li>下单，改单，成单，退单，售后等系统内部的订单流程处理和跟进。&lt;/li>
&lt;/ol>
&lt;p>很多时候搜索订单相关信息的时候都是以订单 ID 作为唯一标识符，这是由于订单号的生成规则的唯一性决定的。从技术角度看，除了 ID 服务必要的特性之外，在订单号的设计上需要体现几个特性：&lt;/p></description></item><item><title>分布式配置中心常见问题总结(付费)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-configuration-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-configuration-center/</guid><description>&lt;p>&lt;strong>分布式配置中心&lt;/strong> 相关的面试题为我的
&lt;a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" alt="" />&lt;/p></description></item><item><title>分布式事务常见解决方案总结(付费)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-transaction/</guid><description>&lt;p>&lt;strong>分布式事务&lt;/strong> 相关的面试题为我的
&lt;a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了《Java 面试指北》中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javamianshizhibei/distributed-system.png" alt="" />&lt;/p></description></item><item><title>分布式锁常见实现方案总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-lock-implementations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-lock-implementations/</guid><description>&lt;p>通常情况下，我们一般会选择基于 Redis 或者 ZooKeeper 实现分布式锁，Redis 用的要更多一点，我这里也先以 Redis 为例介绍分布式锁的实现。&lt;/p>
&lt;h2 id="基于-redis-实现分布式锁">
 基于 Redis 实现分布式锁
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8e-redis-%e5%ae%9e%e7%8e%b0%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81">#&lt;/a>
&lt;/h2>
&lt;h3 id="如何基于-redis-实现一个最简易的分布式锁">
 如何基于 Redis 实现一个最简易的分布式锁？
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%9f%ba%e4%ba%8e-redis-%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e6%9c%80%e7%ae%80%e6%98%93%e7%9a%84%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81">#&lt;/a>
&lt;/h3>
&lt;p>不论是本地锁还是分布式锁，核心都在于“互斥”。&lt;/p>
&lt;p>在 Redis 中， &lt;code>SETNX&lt;/code> 命令是可以帮助我们实现互斥。&lt;code>SETNX&lt;/code> 即 &lt;strong>SET&lt;/strong> if &lt;strong>N&lt;/strong>ot e&lt;strong>X&lt;/strong>ists (对应 Java 中的 &lt;code>setIfAbsent&lt;/code> 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， &lt;code>SETNX&lt;/code> 啥也不做。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; SETNX lockKey uniqueValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; SETNX lockKey uniqueValue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>释放锁的话，直接通过 &lt;code>DEL&lt;/code> 命令删除对应的 key 即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; DEL lockKey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>integer&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了防止误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。&lt;/p>
&lt;p>选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。&lt;/p></description></item><item><title>分布式锁介绍</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-lock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/distributed-system/distributed-lock/</guid><description>&lt;p>网上有很多分布式锁相关的文章，写了一个相对简洁易懂的版本，针对面试和工作应该够用了。&lt;/p>
&lt;p>这篇文章我们先介绍一下分布式锁的基本概念。&lt;/p>
&lt;h2 id="为什么需要分布式锁">
 为什么需要分布式锁？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81">#&lt;/a>
&lt;/h2>
&lt;p>在多线程环境中，如果多个线程同时访问共享资源（例如商品库存、外卖订单），会发生数据竞争，可能会导致出现脏数据或者系统问题，威胁到程序的正常运行。&lt;/p>
&lt;p>举个例子，假设现在有 100 个用户参与某个限时秒杀活动，每位用户限购 1 件商品，且商品的数量只有 3 个。如果不对共享资源进行互斥访问，就可能出现以下情况：&lt;/p>
&lt;ul>
&lt;li>线程 1、2、3 等多个线程同时进入抢购方法，每一个线程对应一个用户。&lt;/li>
&lt;li>线程 1 查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。&lt;/li>
&lt;li>线程 2 也执行查询用户已经抢购的数量，发现当前用户尚未抢购且商品库存还有 1 个，因此认为可以继续执行抢购流程。&lt;/li>
&lt;li>线程 1 继续执行，将库存数量减少 1 个，然后返回成功。&lt;/li>
&lt;li>线程 2 继续执行，将库存数量减少 1 个，然后返回成功。&lt;/li>
&lt;li>此时就发生了超卖问题，导致商品被多卖了一份。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/oversold-without-locking.png" alt="共享资源未互斥访问导致出现问题" />&lt;/p>
&lt;p>为了保证共享资源被安全地访问，我们需要使用互斥操作对共享资源进行保护，即同一时刻只允许一个线程访问共享资源，其他线程需要等待当前线程释放后才能访问。这样可以避免数据竞争和脏数据问题，保证程序的正确性和稳定性。&lt;/p>
&lt;p>&lt;strong>如何才能实现共享资源的互斥访问呢？&lt;/strong> 锁是一个比较通用的解决方案，更准确点来说是悲观锁。&lt;/p>
&lt;p>悲观锁总是假设最坏的情况，认为共享资源每次被访问的时候就会出现问题(比如共享数据被修改)，所以每次在获取资源操作的时候都会上锁，这样其他线程想拿到这个资源就会阻塞直到锁被上一个持有者释放。也就是说，&lt;strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程&lt;/strong>。&lt;/p>
&lt;p>对于单机多线程来说，在 Java 中，我们通常使用 &lt;code>ReentrantLock&lt;/code> 类、&lt;code>synchronized&lt;/code> 关键字这类 JDK 自带的 &lt;strong>本地锁&lt;/strong> 来控制一个 JVM 进程内的多个线程对本地共享资源的访问。&lt;/p>
&lt;p>下面是我对本地锁画的一张示意图。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/distributed-system/distributed-lock/jvm-local-lock.png" alt="本地锁" />&lt;/p>
&lt;p>从图中可以看出，这些线程访问共享资源是互斥的，同一时刻只有一个线程可以获取到本地锁访问共享资源。&lt;/p>
&lt;p>分布式系统下，不同的服务/客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，&lt;strong>分布式锁&lt;/strong> 就诞生了。&lt;/p>
&lt;p>举个例子：系统的订单服务一共部署了 3 份，都对外提供服务。用户下订单之前需要检查库存，为了防止超卖，这里需要加锁以实现对检查库存操作的同步访问。由于订单服务位于不同的 JVM 进程中，本地锁在这种情况下就没办法正常工作了。我们需要用到分布式锁，这样的话，即使多个线程不在同一个 JVM 进程中也能获取到同一把锁，进而实现共享资源的互斥访问。&lt;/p></description></item></channel></rss>