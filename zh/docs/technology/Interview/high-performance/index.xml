<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/index.xml" rel="self" type="application/rss+xml"/><item><title>CDN工作原理详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/cdn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/cdn/</guid><description>&lt;h2 id="什么是-cdn-">
 什么是 CDN ？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-cdn-">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>CDN&lt;/strong> 全称是 Content Delivery Network/Content Distribution Network，翻译过的意思是 &lt;strong>内容分发网络&lt;/strong> 。&lt;/p>
&lt;p>我们可以将内容分发网络拆开来看：&lt;/p>
&lt;ul>
&lt;li>内容：指的是静态资源比如图片、视频、文档、JS、CSS、HTML。&lt;/li>
&lt;li>分发网络：指的是将这些静态资源分发到位于多个不同的地理位置机房中的服务器上，这样，就可以实现静态资源的就近访问比如北京的用户直接访问北京机房的数据。&lt;/li>
&lt;/ul>
&lt;p>所以，简单来说，&lt;strong>CDN 就是将静态资源分发到多个不同的地方以实现就近访问，进而加快静态资源的访问速度，减轻服务器以及带宽的负担。&lt;/strong>&lt;/p>
&lt;p>类似于京东建立的庞大的仓储运输体系，京东物流在全国拥有非常多的仓库，仓储网络几乎覆盖全国所有区县。这样的话，用户下单的第一时间，商品就从距离用户最近的仓库，直接发往对应的配送站，再由京东小哥送到你家。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/jingdong-wuliu-cangpei.png" alt="京东仓配系统" />&lt;/p>
&lt;p>你可以将 CDN 看作是服务上一层的特殊缓存服务，分布在全国各地，主要用来处理静态资源的请求。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-101.png" alt="CDN 简易示意图" />&lt;/p>
&lt;p>我们经常拿全站加速和内容分发网络做对比，不要把两者搞混了！全站加速（不同云服务商叫法不同，腾讯云叫 ECDN、阿里云叫 DCDN）既可以加速静态资源又可以加速动态资源，内容分发网络（CDN）主要针对的是 &lt;strong>静态资源&lt;/strong> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/cdn/cdn-aliyun-dcdn.png" alt="阿里云文档：https://help.aliyun.com/document_detail/64836.html" />&lt;/p>
&lt;p>绝大部分公司都会在项目开发中使用 CDN 服务，但很少会有自建 CDN 服务的公司。基于成本、稳定性和易用性考虑，建议直接选择专业的云厂商（比如阿里云、腾讯云、华为云、青云）或者 CDN 厂商（比如网宿、蓝汛）提供的开箱即用的 CDN 服务。&lt;/p>
&lt;p>很多朋友可能要问了：&lt;strong>既然是就近访问，为什么不直接将服务部署在多个不同的地方呢？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>成本太高，需要部署多份相同的服务。&lt;/li>
&lt;li>静态资源通常占用空间比较大且经常会被访问到，如果直接使用服务器或者缓存来处理静态资源请求的话，对系统资源消耗非常大，可能会影响到系统其他服务的正常运行。&lt;/li>
&lt;/ul>
&lt;p>同一个服务在在多个不同的地方部署多份（比如同城灾备、异地灾备、同城多活、异地多活）是为了实现系统的高可用而不是就近访问。&lt;/p>
&lt;h2 id="cdn-工作原理是什么">
 CDN 工作原理是什么？
 &lt;a class="anchor" href="#cdn-%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>搞懂下面 3 个问题也就搞懂了 CDN 的工作原理：&lt;/p>
&lt;ol>
&lt;li>静态资源是如何被缓存到 CDN 节点中的？&lt;/li>
&lt;li>如何找到最合适的 CDN 节点？&lt;/li>
&lt;li>如何防止静态资源被盗用？&lt;/li>
&lt;/ol>
&lt;h3 id="静态资源是如何被缓存到-cdn-节点中的">
 静态资源是如何被缓存到 CDN 节点中的？
 &lt;a class="anchor" href="#%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90%e6%98%af%e5%a6%82%e4%bd%95%e8%a2%ab%e7%bc%93%e5%ad%98%e5%88%b0-cdn-%e8%8a%82%e7%82%b9%e4%b8%ad%e7%9a%84">#&lt;/a>
&lt;/h3>
&lt;p>你可以通过 &lt;strong>预热&lt;/strong> 的方式将源站的资源同步到 CDN 的节点中。这样的话，用户首次请求资源可以直接从 CDN 节点中取，无需回源。这样可以降低源站压力，提升用户体验。&lt;/p></description></item><item><title>Disruptor常见问题总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/disruptor-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/disruptor-questions/</guid><description>&lt;p>Disruptor 是一个相对冷门一些的知识点，不过，如果你的项目经历中用到了 Disruptor 的话，那面试中就很可能会被问到。&lt;/p>
&lt;p>一位球友之前投稿的面经（社招）中就涉及一些 Disruptor 的问题，文章传送门：&lt;a href="https://mp.weixin.qq.com/s/C5QMjwEb6pzXACqZsyqC4A">圆梦！顺利拿到字节、淘宝、拼多多等大厂 offer！&lt;/a> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/disruptor-interview-questions.png" alt="" />&lt;/p>
&lt;p>这篇文章可以看作是对 Disruptor 做的一个简单总结，每个问题都不会扯太深入，主要针对面试或者速览 Disruptor。&lt;/p>
&lt;h2 id="disruptor-是什么">
 Disruptor 是什么？
 &lt;a class="anchor" href="#disruptor-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>Disruptor 是一个开源的高性能内存队列，诞生初衷是为了解决内存队列的性能和内存安全问题，由英国外汇交易公司 LMAX 开发。&lt;/p>
&lt;p>根据 Disruptor 官方介绍，基于 Disruptor 开发的系统 LMAX（新的零售金融交易平台），单线程就能支撑每秒 600 万订单。Martin Fowler 在 2011 年写的一篇文章 &lt;a href="https://martinfowler.com/articles/lmax.html">The LMAX Architecture&lt;/a> 中专门介绍过这个 LMAX 系统的架构，感兴趣的可以看看这篇文章。。&lt;/p>
&lt;p>LMAX 公司 2010 年在 QCon 演讲后，Disruptor 获得了业界关注，并获得了 2011 年的 Oracle 官方的 Duke&amp;rsquo;s Choice Awards(Duke 选择大奖)。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/640.png" alt="" />&lt;/p>
&lt;blockquote>
&lt;p>“Duke 选择大奖”旨在表彰过去一年里全球个人或公司开发的、最具影响力的 Java 技术应用，由甲骨文公司主办。含金量非常高！&lt;/p>
&lt;/blockquote>
&lt;p>我专门找到了 Oracle 官方当年颁布获得 Duke&amp;rsquo;s Choice Awards 项目的那篇文章（文章地址：&lt;a href="https://blogs.oracle.com/java/post/and-the-winners-arethe-dukes-choice-award%ef%bc%89">https://blogs.oracle.com/java/post/and-the-winners-arethe-dukes-choice-award）&lt;/a> 。从文中可以看出，同年获得此大奖荣誉的还有大名鼎鼎的 Netty、JRebel 等项目。&lt;/p></description></item><item><title>Kafka常见问题总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/kafka-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/kafka-questions-01/</guid><description>&lt;h2 id="kafka-基础">
 Kafka 基础
 &lt;a class="anchor" href="#kafka-%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="kafka-是什么主要应用场景有哪些">
 Kafka 是什么？主要应用场景有哪些？
 &lt;a class="anchor" href="#kafka-%e6%98%af%e4%bb%80%e4%b9%88%e4%b8%bb%e8%a6%81%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af%e6%9c%89%e5%93%aa%e4%ba%9b">#&lt;/a>
&lt;/h3>
&lt;p>Kafka 是一个分布式流式处理平台。这到底是什么意思呢？&lt;/p>
&lt;p>流平台具有三个关键功能：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>消息队列&lt;/strong>：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。&lt;/li>
&lt;li>&lt;strong>容错的持久方式存储记录消息流&lt;/strong>：Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险。&lt;/li>
&lt;li>&lt;strong>流式处理平台：&lt;/strong> 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。&lt;/li>
&lt;/ol>
&lt;p>Kafka 主要有两大应用场景：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>消息队列&lt;/strong>：建立实时流数据管道，以可靠地在系统或应用程序之间获取数据。&lt;/li>
&lt;li>&lt;strong>数据处理：&lt;/strong> 构建实时的流数据处理程序来转换或处理数据流。&lt;/li>
&lt;/ol>
&lt;h3 id="和其他消息队列相比kafka-的优势在哪里">
 和其他消息队列相比,Kafka 的优势在哪里？
 &lt;a class="anchor" href="#%e5%92%8c%e5%85%b6%e4%bb%96%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e7%9b%b8%e6%af%94kafka-%e7%9a%84%e4%bc%98%e5%8a%bf%e5%9c%a8%e5%93%aa%e9%87%8c">#&lt;/a>
&lt;/h3>
&lt;p>我们现在经常提到 Kafka 的时候就已经默认它是一个非常优秀的消息队列了，我们也会经常拿它跟 RocketMQ、RabbitMQ 对比。我觉得 Kafka 相比其他消息队列主要的优势如下：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>极致的性能&lt;/strong>：基于 Scala 和 Java 语言开发，设计中大量使用了批量处理和异步的思想，最高可以每秒处理千万级别的消息。&lt;/li>
&lt;li>&lt;strong>生态系统兼容性无可匹敌&lt;/strong>：Kafka 与周边生态系统的兼容性是最好的没有之一，尤其在大数据和流计算领域。&lt;/li>
&lt;/ol>
&lt;p>实际上在早期的时候 Kafka 并不是一个合格的消息队列，早期的 Kafka 在消息队列领域就像是一个衣衫褴褛的孩子一样，功能不完备并且有一些小问题比如丢失消息、不保证消息可靠性等等。当然，这也和 LinkedIn 最早开发 Kafka 用于处理海量的日志有很大关系，哈哈哈，人家本来最开始就不是为了作为消息队列滴，谁知道后面误打误撞在消息队列领域占据了一席之地。&lt;/p>
&lt;p>随着后续的发展，这些短板都被 Kafka 逐步修复完善。所以，&lt;strong>Kafka 作为消息队列不可靠这个说法已经过时！&lt;/strong>&lt;/p>
&lt;h3 id="队列模型了解吗kafka-的消息模型知道吗">
 队列模型了解吗？Kafka 的消息模型知道吗？
 &lt;a class="anchor" href="#%e9%98%9f%e5%88%97%e6%a8%a1%e5%9e%8b%e4%ba%86%e8%a7%a3%e5%90%97kafka-%e7%9a%84%e6%b6%88%e6%81%af%e6%a8%a1%e5%9e%8b%e7%9f%a5%e9%81%93%e5%90%97">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>题外话：早期的 JMS 和 AMQP 属于消息服务领域权威组织所做的相关的标准，我在 &lt;a href="https://github.com/Snailclimb/JavaGuide">JavaGuide&lt;/a>的 &lt;a href="https://github.com/Snailclimb/JavaGuide#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E4%B8%AD%E9%97%B4%E4%BB%B6">《消息队列其实很简单》&lt;/a>这篇文章中介绍过。但是，这些标准的进化跟不上消息队列的演进速度，这些标准实际上已经属于废弃状态。所以，可能存在的情况是：不同的消息队列都有自己的一套消息模型。&lt;/p>
&lt;/blockquote>
&lt;h4 id="队列模型早期的消息模型">
 队列模型：早期的消息模型
 &lt;a class="anchor" href="#%e9%98%9f%e5%88%97%e6%a8%a1%e5%9e%8b%e6%97%a9%e6%9c%9f%e7%9a%84%e6%b6%88%e6%81%af%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h4>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png" alt="队列模型" />&lt;/p>
&lt;p>&lt;strong>使用队列（Queue）作为消息通信载体，满足生产者与消费者模式，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。&lt;/strong> 比如：我们生产者发送 100 条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）&lt;/p></description></item><item><title>RabbitMQ常见问题总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/rabbitmq-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/rabbitmq-questions/</guid><description>&lt;blockquote>
&lt;p>本篇文章由 JavaGuide 收集自网络，原出处不明。&lt;/p>
&lt;/blockquote>
&lt;h2 id="rabbitmq-是什么">
 RabbitMQ 是什么？
 &lt;a class="anchor" href="#rabbitmq-%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>RabbitMQ 是一个在 AMQP（Advanced Message Queuing Protocol ）基础上实现的，可复用的企业消息系统。它可以用于大型软件系统各个模块之间的高效通信，支持高并发，支持可扩展。它支持多种客户端如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX，持久化，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。&lt;/p>
&lt;p>RabbitMQ 是使用 Erlang 编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正是如此，使的它变的非常重量级，更适合于企业级的开发。它同时实现了一个 Broker 构架，这意味着消息在发送给客户端时先在中心队列排队，对路由(Routing)、负载均衡(Load balance)或者数据持久化都有很好的支持。&lt;/p>
&lt;p>PS:也可能直接问什么是消息队列？消息队列就是一个使用队列来通信的组件。&lt;/p>
&lt;h2 id="rabbitmq-特点">
 RabbitMQ 特点?
 &lt;a class="anchor" href="#rabbitmq-%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>可靠性&lt;/strong>: RabbitMQ 使用一些机制来保证可靠性， 如持久化、传输确认及发布确认等。&lt;/li>
&lt;li>&lt;strong>灵活的路由&lt;/strong> : 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能， RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起， 也可以通过插件机制来实现自己的交换器。&lt;/li>
&lt;li>&lt;strong>扩展性&lt;/strong>: 多个 RabbitMQ 节点可以组成一个集群，也可以根据实际业务情况动态地扩展 集群中节点。&lt;/li>
&lt;li>&lt;strong>高可用性&lt;/strong> : 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队 列仍然可用。&lt;/li>
&lt;li>&lt;strong>多种协议&lt;/strong>: RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP， MQTT 等多种消息 中间件协议。&lt;/li>
&lt;li>&lt;strong>多语言客户端&lt;/strong> :RabbitMQ 几乎支持所有常用语言，比如 Java、 Python、 Ruby、 PHP、 C#、 JavaScript 等。&lt;/li>
&lt;li>&lt;strong>管理界面&lt;/strong> : RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息、集 群中的节点等。&lt;/li>
&lt;li>&lt;strong>插件机制&lt;/strong> : RabbitMQ 提供了许多插件 ， 以实现从多方面进行扩展，当然也可以编写自 己的插件。&lt;/li>
&lt;/ul>
&lt;h2 id="rabbitmq-核心概念">
 RabbitMQ 核心概念？
 &lt;a class="anchor" href="#rabbitmq-%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5">#&lt;/a>
&lt;/h2>
&lt;p>RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ 就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。&lt;/p></description></item><item><title>RocketMQ常见问题总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/rocketmq-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/rocketmq-questions/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485969&amp;amp;idx=1&amp;amp;sn=6bd53abde30d42a778d5a35ec104428c&amp;amp;chksm=cea245daf9d5cccce631f93115f0c2c4a7634e55f5bef9009fd03f5a0ffa55b745b5ef4f0530&amp;amp;token=294077121&amp;amp;lang=zh_CN#rd">本文由 FrancisQ 投稿！&lt;/a> 相比原文主要进行了下面这些完善：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Snailclimb/JavaGuide/pull/2133">分析了 RocketMQ 高性能读写的原因和顺序消费的具体实现&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Snailclimb/JavaGuide/pull/2134">增加了消息类型、消费者类型、消费者组和生产者组的介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="消息队列扫盲">
 消息队列扫盲
 &lt;a class="anchor" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%89%ab%e7%9b%b2">#&lt;/a>
&lt;/h2>
&lt;p>消息队列顾名思义就是存放消息的队列，队列我就不解释了，别告诉我你连队列都不知道是啥吧？&lt;/p>
&lt;p>所以问题并不是消息队列是什么，而是 &lt;strong>消息队列为什么会出现？消息队列能用来干什么？用它来干这些事会带来什么好处？消息队列会带来副作用吗？&lt;/strong>&lt;/p>
&lt;h3 id="消息队列为什么会出现">
 消息队列为什么会出现？
 &lt;a class="anchor" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e5%87%ba%e7%8e%b0">#&lt;/a>
&lt;/h3>
&lt;p>消息队``列算是作为后端程序员的一个必备技能吧，因为&lt;strong>分布式应用必定涉及到各个系统之间的通信问题&lt;/strong>，这个时候消息队列也应运而生了。可以说分布式的产生是消息队列的基础，而分布式怕是一个很古老的概念了吧，所以消息队列也是一个很古老的中间件了。&lt;/p>
&lt;h3 id="消息队列能用来干什么">
 消息队列能用来干什么？
 &lt;a class="anchor" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e8%83%bd%e7%94%a8%e6%9d%a5%e5%b9%b2%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;h4 id="异步">
 异步
 &lt;a class="anchor" href="#%e5%bc%82%e6%ad%a5">#&lt;/a>
&lt;/h4>
&lt;p>你可能会反驳我，应用之间的通信又不是只能由消息队列解决，好好的通信为什么中间非要插一个消息队列呢？我不能直接进行通信吗？&lt;/p>
&lt;p>很好 👍，你又提出了一个概念，&lt;strong>同步通信&lt;/strong>。就比如现在业界使用比较多的 &lt;code>Dubbo&lt;/code> 就是一个适用于各个系统之间同步通信的 &lt;code>RPC&lt;/code> 框架。&lt;/p>
&lt;p>我来举个 🌰 吧，比如我们有一个购票系统，需求是用户在购买完之后能接收到购买完成的短信。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef37fee7e09230.jpg" alt="" />&lt;/p>
&lt;p>我们省略中间的网络通信时间消耗，假如购票系统处理需要 150ms ，短信系统处理需要 200ms ，那么整个处理流程的时间消耗就是 150ms + 200ms = 350ms。&lt;/p>
&lt;p>当然，乍看没什么问题。可是仔细一想你就感觉有点问题，我用户购票在购票系统的时候其实就已经完成了购买，而我现在通过同步调用非要让整个请求拉长时间，而短信系统这玩意又不是很有必要，它仅仅是一个辅助功能增强用户体验感而已。我现在整个调用流程就有点 &lt;strong>头重脚轻&lt;/strong> 的感觉了，购票是一个不太耗时的流程，而我现在因为同步调用，非要等待发送短信这个比较耗时的操作才返回结果。那我如果再加一个发送邮件呢？&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/16ef380429cf373e.jpg" alt="" />&lt;/p>
&lt;p>这样整个系统的调用链又变长了，整个时间就变成了 550ms。&lt;/p>
&lt;p>当我们在学生时代需要在食堂排队的时候，我们和食堂大妈就是一个同步的模型。&lt;/p>
&lt;p>我们需要告诉食堂大妈：“姐姐，给我加个鸡腿，再加个酸辣土豆丝，帮我浇点汁上去，多打点饭哦 😋😋😋” 咦~~~ 为了多吃点，真恶心。&lt;/p>
&lt;p>然后大妈帮我们打饭配菜，我们看着大妈那颤抖的手和掉落的土豆丝不禁咽了咽口水。&lt;/p>
&lt;p>最终我们从大妈手中接过饭菜然后去寻找座位了&amp;hellip;&lt;/p>
&lt;p>回想一下，我们在给大妈发送需要的信息之后我们是 &lt;strong>同步等待大妈给我配好饭菜&lt;/strong> 的，上面我们只是加了鸡腿和土豆丝，万一我再加一个番茄牛腩，韭菜鸡蛋，这样是不是大妈打饭配菜的流程就会变长，我们等待的时间也会相应的变长。&lt;/p>
&lt;p>那后来，我们工作赚钱了有钱去饭店吃饭了，我们告诉服务员来一碗牛肉面加个荷包蛋 &lt;strong>(传达一个消息)&lt;/strong> ，然后我们就可以在饭桌上安心的玩手机了 &lt;strong>(干自己其他事情)&lt;/strong> ，等到我们的牛肉面上了我们就可以吃了。这其中我们也就传达了一个消息，然后我们又转过头干其他事情了。这其中虽然做面的时间没有变短，但是我们只需要传达一个消息就可以干其他事情了，这是一个 &lt;strong>异步&lt;/strong> 的概念。&lt;/p></description></item><item><title>常见SQL优化手段总结（付费）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/sql-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/sql-optimization/</guid><description>&lt;p>&lt;strong>常见 SQL 优化手段总结&lt;/strong> 相关的内容为我的&lt;a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了&lt;a href="https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html">《Java 面试指北》&lt;/a>中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/javamianshizhibei/sql-optimization.png" alt="" />&lt;/p></description></item><item><title>读写分离和分库分表详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/read-and-write-separation-and-library-subtable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/read-and-write-separation-and-library-subtable/</guid><description>&lt;h2 id="读写分离">
 读写分离
 &lt;a class="anchor" href="#%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是读写分离">
 什么是读写分离？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb">#&lt;/a>
&lt;/h3>
&lt;p>见名思意，根据读写分离的名字，我们就可以知道：&lt;strong>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上。&lt;/strong> 这样的话，就能够小幅提升写性能，大幅提升读性能。&lt;/p>
&lt;p>我简单画了一张图来帮助不太清楚读写分离的小伙伴理解。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation.png" alt="读写分离示意图" />&lt;/p>
&lt;p>一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。&lt;/p>
&lt;h3 id="如何实现读写分离">
 如何实现读写分离？
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e8%af%bb%e5%86%99%e5%88%86%e7%a6%bb">#&lt;/a>
&lt;/h3>
&lt;p>不论是使用哪一种读写分离具体的实现方案，想要实现读写分离一般包含如下几步：&lt;/p>
&lt;ol>
&lt;li>部署多台数据库，选择其中的一台作为主数据库，其他的一台或者多台作为从数据库。&lt;/li>
&lt;li>保证主数据库和从数据库之间的数据是实时同步的，这个过程也就是我们常说的&lt;strong>主从复制&lt;/strong>。&lt;/li>
&lt;li>系统将写请求交给主数据库处理，读请求交给从数据库处理。&lt;/li>
&lt;/ol>
&lt;p>落实到项目本身的话，常用的方式有两种：&lt;/p>
&lt;p>&lt;strong>1. 代理方式&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/read-and-write-separation-and-library-subtable/read-and-write-separation-proxy.png" alt="代理方式实现读写分离" />&lt;/p>
&lt;p>我们可以在应用和数据中间加了一个代理层。应用程序所有的数据请求都交给代理层处理，代理层负责分离读写请求，将它们路由到对应的数据库中。&lt;/p>
&lt;p>提供类似功能的中间件有 &lt;strong>MySQL Router&lt;/strong>（官方， MySQL Proxy 的替代方案）、&lt;strong>Atlas&lt;/strong>（基于 MySQL Proxy）、&lt;strong>MaxScale&lt;/strong>、&lt;strong>MyCat&lt;/strong>。&lt;/p>
&lt;p>关于 MySQL Router 多提一点：在 MySQL 8.2 的版本中，MySQL Router 能自动分辨对数据库读写/操作并把这些操作路由到正确的实例上。这是一项有价值的功能，可以优化数据库性能和可扩展性，而无需在应用程序中进行任何更改。具体介绍可以参考官方博客：&lt;a href="https://blogs.oracle.com/mysql/post/mysql-82-transparent-readwrite-splitting">MySQL 8.2 – transparent read/write splitting&lt;/a>。&lt;/p>
&lt;p>&lt;strong>2. 组件方式&lt;/strong>&lt;/p>
&lt;p>在这种方式中，我们可以通过引入第三方组件来帮助我们读写请求。&lt;/p>
&lt;p>这也是我比较推荐的一种方式。这种方式目前在各种互联网公司中用的最多的，相关的实际的案例也非常多。如果你要采用这种方式的话，推荐使用 &lt;code>sharding-jdbc&lt;/code> ，直接引入 jar 包即可使用，非常方便。同时，也节省了很多运维的成本。&lt;/p>
&lt;p>你可以在 shardingsphere 官方找到 &lt;a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/">sharding-jdbc 关于读写分离的操作&lt;/a>。&lt;/p>
&lt;h3 id="主从复制原理是什么">
 主从复制原理是什么？
 &lt;a class="anchor" href="#%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6%e5%8e%9f%e7%90%86%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>MySQL binlog(binary log 即二进制日志文件) 主要记录了 MySQL 数据库中数据的所有变化(数据库执行的所有 DDL 和 DML 语句)。因此，我们根据主库的 MySQL binlog 日志就能够将主库的数据同步到从库中。&lt;/p></description></item><item><title>负载均衡原理及算法详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/load-balancing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/load-balancing/</guid><description>&lt;h2 id="什么是负载均衡">
 什么是负载均衡？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>负载均衡&lt;/strong> 指的是将用户请求分摊到不同的服务器上处理，以提高系统整体的并发处理能力以及可靠性。负载均衡服务可以有由专门的软件或者硬件来完成，一般情况下，硬件的性能更好，软件的价格更便宜（后文会详细介绍到）。&lt;/p>
&lt;p>下图是&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247519384&amp;amp;idx=1&amp;amp;sn=bc7e71af75350b755f04ca4178395b1a&amp;amp;chksm=cea1c353f9d64a458f797696d4144b4d6e58639371a4612b8e4d106d83a66d2289e7b2cd7431&amp;amp;token=660789642&amp;amp;lang=zh_CN&amp;amp;scene=21#wechat_redirect">《Java 面试指北》&lt;/a> 「高并发篇」中的一篇文章的配图，从图中可以看出，系统的商品服务部署了多份在不同的服务器上，为了实现访问商品服务请求的分流，我们用到了负载均衡。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/multi-service-load-balancing.drawio.png" alt="多服务实例-负载均衡" />&lt;/p>
&lt;p>负载均衡是一种比较常用且实施起来较为简单的提高系统并发能力和可靠性的手段，不论是单体架构的系统还是微服务架构的系统几乎都会用到。&lt;/p>
&lt;h2 id="负载均衡分为哪几种">
 负载均衡分为哪几种？
 &lt;a class="anchor" href="#%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e5%88%86%e4%b8%ba%e5%93%aa%e5%87%a0%e7%a7%8d">#&lt;/a>
&lt;/h2>
&lt;p>负载均衡可以简单分为 &lt;strong>服务端负载均衡&lt;/strong> 和 &lt;strong>客户端负载均衡&lt;/strong> 这两种。&lt;/p>
&lt;p>服务端负载均衡涉及到的知识点更多，工作中遇到的也比较多，因此，我会花更多时间来介绍。&lt;/p>
&lt;h3 id="服务端负载均衡">
 服务端负载均衡
 &lt;a class="anchor" href="#%e6%9c%8d%e5%8a%a1%e7%ab%af%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>服务端负载均衡&lt;/strong> 主要应用在 &lt;strong>系统外部请求&lt;/strong> 和 &lt;strong>网关层&lt;/strong> 之间，可以使用 &lt;strong>软件&lt;/strong> 或者 &lt;strong>硬件&lt;/strong> 实现。&lt;/p>
&lt;p>下图是我画的一个简单的基于 Nginx 的服务端负载均衡示意图：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/load-balancing/server-load-balancing.png" alt="基于 Nginx 的服务端负载均衡" />&lt;/p>
&lt;p>&lt;strong>硬件负载均衡&lt;/strong> 通过专门的硬件设备（比如 &lt;strong>F5、A10、Array&lt;/strong> ）实现负载均衡功能。&lt;/p>
&lt;p>硬件负载均衡的优势是性能很强且稳定，缺点就是实在是太贵了。像基础款的 F5 最低也要 20 多万，绝大部分公司是根本负担不起的，业务量不大的话，真没必要非要去弄个硬件来做负载均衡，用软件负载均衡就足够了！&lt;/p>
&lt;p>在我们日常开发中，一般很难接触到硬件负载均衡，接触的比较多的还是 &lt;strong>软件负载均衡&lt;/strong> 。软件负载均衡通过软件（比如 &lt;strong>LVS、Nginx、HAproxy&lt;/strong> ）实现负载均衡功能，性能虽然差一些，但价格便宜啊！像基础款的 Linux 服务器也就几千，性能好一点的 2~3 万的就很不错了。&lt;/p>
&lt;p>根据 OSI 模型，服务端负载均衡还可以分为：&lt;/p>
&lt;ul>
&lt;li>二层负载均衡&lt;/li>
&lt;li>三层负载均衡&lt;/li>
&lt;li>四层负载均衡&lt;/li>
&lt;li>七层负载均衡&lt;/li>
&lt;/ul>
&lt;p>最常见的是四层和七层负载均衡，因此，本文也是重点介绍这两种负载均衡。&lt;/p>
&lt;blockquote>
&lt;p>Nginx 官网对四层负载和七层负载均衡均衡做了详细介绍，感兴趣的可以看看。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">What Is Layer 4 Load Balancing?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/">What Is Layer 7 Load Balancing?&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/network/osi-7-model.png" alt="OSI 七层模型" />&lt;/p></description></item><item><title>深度分页介绍及优化建议</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/deep-pagination-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/deep-pagination-optimization/</guid><description>&lt;h2 id="深度分页介绍">
 深度分页介绍
 &lt;a class="anchor" href="#%e6%b7%b1%e5%ba%a6%e5%88%86%e9%a1%b5%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>查询偏移量过大的场景我们称为深度分页，这会导致查询性能较低，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">#&lt;/span> MySQL &lt;span style="color:#960050;background-color:#1e0010">在无法利用索引的情况下跳过&lt;/span>&lt;span style="color:#ae81ff">1000000&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">条记录后，再获取&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">条记录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> t_order &lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> id &lt;span style="color:#66d9ef">LIMIT&lt;/span> &lt;span style="color:#ae81ff">1000000&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="深度分页问题的原因">
 深度分页问题的原因
 &lt;a class="anchor" href="#%e6%b7%b1%e5%ba%a6%e5%88%86%e9%a1%b5%e9%97%ae%e9%a2%98%e7%9a%84%e5%8e%9f%e5%9b%a0">#&lt;/a>
&lt;/h2>
&lt;p>当查询偏移量过大时，MySQL 的查询优化器可能会选择全表扫描而不是利用索引来优化查询。这是因为扫描索引和跳过大量记录可能比直接全表扫描更耗费资源。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/mysql/deep-pagination-phenomenon.png" alt="深度分页问题" />&lt;/p>
&lt;p>不同机器上这个查询偏移量过大的临界点可能不同，取决于多个因素，包括硬件配置（如 CPU 性能、磁盘速度）、表的大小、索引的类型和统计信息等。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/mysql/deep-pagination-phenomenon-critical-point.png" alt="转全表扫描的临界点" />&lt;/p>
&lt;p>MySQL 的查询优化器采用基于成本的策略来选择最优的查询执行计划。它会根据 CPU 和 I/O 的成本来决定是否使用索引扫描或全表扫描。如果优化器认为全表扫描的成本更低，它就会放弃使用索引。不过，即使偏移量很大，如果查询中使用了覆盖索引（covering index），MySQL 仍然可能会使用索引，避免回表操作。&lt;/p>
&lt;h2 id="深度分页优化建议">
 深度分页优化建议
 &lt;a class="anchor" href="#%e6%b7%b1%e5%ba%a6%e5%88%86%e9%a1%b5%e4%bc%98%e5%8c%96%e5%bb%ba%e8%ae%ae">#&lt;/a>
&lt;/h2>
&lt;p>这里以 MySQL 数据库为例介绍一下如何优化深度分页。&lt;/p>
&lt;h3 id="范围查询">
 范围查询
 &lt;a class="anchor" href="#%e8%8c%83%e5%9b%b4%e6%9f%a5%e8%af%a2">#&lt;/a>
&lt;/h3>
&lt;p>当可以保证 ID 的连续性时，根据 ID 范围进行分页是比较好的解决方案：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">查询指定&lt;/span> ID &lt;span style="color:#960050;background-color:#1e0010">范围的数据&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> t_order &lt;span style="color:#66d9ef">WHERE&lt;/span> id &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">100000&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> id &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">100010&lt;/span> &lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">#&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">也可以通过记录上次查询结果的最后一条记录的&lt;/span>ID进行下一页的查询&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> t_order &lt;span style="color:#66d9ef">WHERE&lt;/span> id &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">100000&lt;/span> &lt;span style="color:#66d9ef">LIMIT&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种基于 ID 范围的深度分页优化方式存在很大限制：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>ID 连续性要求高&lt;/strong>: 实际项目中，数据库自增 ID 往往因为各种原因（例如删除数据、事务回滚等）导致 ID 不连续，难以保证连续性。&lt;/li>
&lt;li>&lt;strong>排序问题&lt;/strong>: 如果查询需要按照其他字段（例如创建时间、更新时间等）排序，而不是按照 ID 排序，那么这种方法就不再适用。&lt;/li>
&lt;li>&lt;strong>并发场景&lt;/strong>: 在高并发场景下，单纯依赖记录上次查询的最后一条记录的 ID 进行分页，容易出现数据重复或遗漏的问题。&lt;/li>
&lt;/ol>
&lt;h3 id="子查询">
 子查询
 &lt;a class="anchor" href="#%e5%ad%90%e6%9f%a5%e8%af%a2">#&lt;/a>
&lt;/h3>
&lt;p>我们先查询出 limit 第一个参数对应的主键值，再根据这个主键值再去过滤并 limit，这样效率会更快一些。&lt;/p></description></item><item><title>数据冷热分离详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/data-cold-hot-separation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/data-cold-hot-separation/</guid><description>&lt;h2 id="什么是数据冷热分离">
 什么是数据冷热分离？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%95%b0%e6%8d%ae%e5%86%b7%e7%83%ad%e5%88%86%e7%a6%bb">#&lt;/a>
&lt;/h2>
&lt;p>数据冷热分离是指根据数据的访问频率和业务重要性，将数据分为冷数据和热数据，冷数据一般存储在存储在低成本、低性能的介质中，热数据高性能存储介质中。&lt;/p>
&lt;h3 id="冷数据和热数据">
 冷数据和热数据
 &lt;a class="anchor" href="#%e5%86%b7%e6%95%b0%e6%8d%ae%e5%92%8c%e7%83%ad%e6%95%b0%e6%8d%ae">#&lt;/a>
&lt;/h3>
&lt;p>热数据是指经常被访问和修改且需要快速访问的数据，冷数据是指不经常访问，对当前项目价值较低，但需要长期保存的数据。&lt;/p>
&lt;p>冷热数据到底如何区分呢？有两个常见的区分方法：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>时间维度区分&lt;/strong>：按照数据的创建时间、更新时间、过期时间等，将一定时间段内的数据视为热数据，超过该时间段的数据视为冷数据。例如，订单系统可以将 1 年前的订单数据作为冷数据，1 年内的订单数据作为热数据。这种方法适用于数据的访问频率和时间有较强的相关性的场景。&lt;/li>
&lt;li>&lt;strong>访问频率区分&lt;/strong>：将高频访问的数据视为热数据，低频访问的数据视为冷数据。例如，内容系统可以将浏览量非常低的文章作为冷数据，浏览量较高的文章作为热数据。这种方法需要记录数据的访问频率，成本较高，适合访问频率和数据本身有较强的相关性的场景。&lt;/li>
&lt;/ol>
&lt;p>几年前的数据并不一定都是冷数据，例如一些优质文章发表几年后依然有很多人访问，大部分普通用户新发表的文章却基本没什么人访问。&lt;/p>
&lt;p>这两种区分冷热数据的方法各有优劣，实际项目中，可以将两者结合使用。&lt;/p>
&lt;h3 id="冷热分离的思想">
 冷热分离的思想
 &lt;a class="anchor" href="#%e5%86%b7%e7%83%ad%e5%88%86%e7%a6%bb%e7%9a%84%e6%80%9d%e6%83%b3">#&lt;/a>
&lt;/h3>
&lt;p>冷热分离的思想非常简单，就是对数据进行分类，然后分开存储。冷热分离的思想可以应用到很多领域和场景中，而不仅仅是数据存储，例如：&lt;/p>
&lt;ul>
&lt;li>邮件系统中，可以将近期的比较重要的邮件放在收件箱，将比较久远的不太重要的邮件存入归档。&lt;/li>
&lt;li>日常生活中，可以将常用的物品放在显眼的位置，不常用的物品放入储藏室或者阁楼。&lt;/li>
&lt;li>图书馆中，可以将最受欢迎和最常借阅的图书单独放在一个显眼的区域，将较少借阅的书籍放在不起眼的位置。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;h3 id="数据冷热分离的优缺点">
 数据冷热分离的优缺点
 &lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e5%86%b7%e7%83%ad%e5%88%86%e7%a6%bb%e7%9a%84%e4%bc%98%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>优点：热数据的查询性能得到优化（用户的绝大部分操作体验会更好）、节约成本（可以冷热数据的不同存储需求，选择对应的数据库类型和硬件配置，比如将热数据放在 SSD 上，将冷数据放在 HDD 上）&lt;/li>
&lt;li>缺点：系统复杂性和风险增加（需要分离冷热数据，数据错误的风险增加）、统计效率低（统计的时候可能需要用到冷库的数据）。&lt;/li>
&lt;/ul>
&lt;h2 id="冷数据如何迁移">
 冷数据如何迁移？
 &lt;a class="anchor" href="#%e5%86%b7%e6%95%b0%e6%8d%ae%e5%a6%82%e4%bd%95%e8%bf%81%e7%a7%bb">#&lt;/a>
&lt;/h2>
&lt;p>冷数据迁移方案：&lt;/p>
&lt;ol>
&lt;li>业务层代码实现：当有对数据进行写操作时，触发冷热分离的逻辑，判断数据是冷数据还是热数据，冷数据就入冷库，热数据就入热库。这种方案会影响性能且冷热数据的判断逻辑不太好确定，还需要修改业务层代码，因此一般不会使用。&lt;/li>
&lt;li>任务调度：可以利用 xxl-job 或者其他分布式任务调度平台定时去扫描数据库，找出满足冷数据条件的数据，然后批量地将其复制到冷库中，并从热库中删除。这种方法修改的代码非常少，非常适合按照时间区分冷热数据的场景。&lt;/li>
&lt;li>监听数据库的变更日志 binlog ：将满足冷数据条件的数据从 binlog 中提取出来，然后复制到冷库中，并从热库中删除。这种方法可以不用修改代码，但不适合按照时间维度区分冷热数据的场景。&lt;/li>
&lt;/ol>
&lt;p>如果你的公司有 DBA 的话，也可以让 DBA 进行冷数据的人工迁移，一次迁移完成冷数据到冷库。然后，再搭配上面介绍的方案实现后续冷数据的迁移工作。&lt;/p>
&lt;h2 id="冷数据如何存储">
 冷数据如何存储？
 &lt;a class="anchor" href="#%e5%86%b7%e6%95%b0%e6%8d%ae%e5%a6%82%e4%bd%95%e5%ad%98%e5%82%a8">#&lt;/a>
&lt;/h2>
&lt;p>冷数据的存储要求主要是容量大，成本低，可靠性高，访问速度可以适当牺牲。&lt;/p>
&lt;p>冷数据存储方案：&lt;/p>
&lt;ul>
&lt;li>中小厂：直接使用 MySQL/PostgreSQL 即可（不改变数据库选型和项目当前使用的数据库保持一致），比如新增一张表来存储某个业务的冷数据或者使用单独的冷库来存放冷数据（涉及跨库查询，增加了系统复杂性和维护难度）&lt;/li>
&lt;li>大厂：Hbase（常用）、RocksDB、Doris、Cassandra&lt;/li>
&lt;/ul>
&lt;p>如果公司成本预算足的话，也可以直接上 TiDB 这种分布式关系型数据库，直接一步到位。TiDB 6.0 正式支持数据冷热存储分离，可以降低 SSD 使用成本。使用 TiDB 6.0 的数据放置功能，可以在同一个集群实现海量数据的冷热存储，将新的热数据存入 SSD，历史冷数据存入 HDD。&lt;/p></description></item><item><title>消息队列基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/message-queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/high-performance/message-queue/message-queue/</guid><description>&lt;p>::: tip&lt;/p>
&lt;p>这篇文章中的消息队列主要指的是分布式消息队列。&lt;/p>
&lt;p>:::&lt;/p>
&lt;p>“RabbitMQ？”“Kafka？”“RocketMQ？”&amp;hellip;在日常学习与开发过程中，我们常常听到消息队列这个关键词。我也在我的多篇文章中提到了这个概念。可能你是熟练使用消息队列的老手，又或者你是不懂消息队列的新手，不论你了不了解消息队列，本文都将带你搞懂消息队列的一些基本理论。&lt;/p>
&lt;p>如果你是老手，你可能从本文学到你之前不曾注意的一些关于消息队列的重要概念，如果你是新手，相信本文将是你打开消息队列大门的一板砖。&lt;/p>
&lt;h2 id="什么是消息队列">
 什么是消息队列？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97">#&lt;/a>
&lt;/h2>
&lt;p>我们可以把消息队列看作是一个存放消息的容器，当我们需要使用消息的时候，直接从容器中取出消息供自己使用即可。由于队列 Queue 是一种先进先出的数据结构，所以消费消息时也是按照顺序来消费的。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/message-queue-small.png" alt="" />&lt;/p>
&lt;p>参与消息传递的双方称为 &lt;strong>生产者&lt;/strong> 和 &lt;strong>消费者&lt;/strong> ，生产者负责发送消息，消费者负责处理消息。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/message-queue-pub-sub-model.png" alt="发布/订阅（Pub/Sub）模型" />&lt;/p>
&lt;p>操作系统中的进程通信的一种很重要的方式就是消息队列。我们这里提到的消息队列稍微有点区别，更多指的是各个服务以及系统内部各个组件/模块之前的通信，属于一种 &lt;strong>中间件&lt;/strong> 。&lt;/p>
&lt;p>维基百科是这样介绍中间件的：&lt;/p>
&lt;blockquote>
&lt;p>中间件（英语：Middleware），又译中间件、中介层，是一类提供系统软件和应用软件之间连接、便于软件各部件之间的沟通的软件，应用软件可以借助中间件在不同的技术架构之间共享信息与资源。中间件位于客户机服务器的操作系统之上，管理着计算资源和网络通信。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说：&lt;strong>中间件就是一类为应用软件服务的软件，应用软件是为用户服务的，用户不会接触或者使用到中间件。&lt;/strong>&lt;/p>
&lt;p>除了消息队列之外，常见的中间件还有 RPC 框架、分布式组件、HTTP 服务器、任务调度框架、配置中心、数据库层的分库分表工具和数据迁移工具等等。&lt;/p>
&lt;p>关于中间件比较详细的介绍可以参考阿里巴巴淘系技术的一篇回答：&lt;a href="https://www.zhihu.com/question/19730582/answer/1663627873">https://www.zhihu.com/question/19730582/answer/1663627873&lt;/a> 。&lt;/p>
&lt;p>随着分布式和微服务系统的发展，消息队列在系统设计中有了更大的发挥空间，使用消息队列可以降低系统耦合性、实现任务异步、有效地进行流量削峰，是分布式和微服务系统中重要的组件之一。&lt;/p>
&lt;h2 id="消息队列有什么用">
 消息队列有什么用？
 &lt;a class="anchor" href="#%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;p>通常来说，使用消息队列主要能为我们的系统带来下面三点好处：&lt;/p>
&lt;ol>
&lt;li>异步处理&lt;/li>
&lt;li>削峰/限流&lt;/li>
&lt;li>降低系统耦合性&lt;/li>
&lt;/ol>
&lt;p>除了这三点之外，消息队列还有其他的一些应用场景，例如实现分布式事务、顺序保证和数据流处理。&lt;/p>
&lt;p>如果在面试的时候你被面试官问到这个问题的话，一般情况是你在你的简历上涉及到消息队列这方面的内容，这个时候推荐你结合你自己的项目来回答。&lt;/p>
&lt;h3 id="异步处理">
 异步处理
 &lt;a class="anchor" href="#%e5%bc%82%e6%ad%a5%e5%a4%84%e7%90%86">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/Asynchronous-message-queue.png" alt="通过异步处理提高系统性能" />&lt;/p>
&lt;p>将用户请求中包含的耗时操作，通过消息队列实现异步处理，将对应的消息发送到消息队列之后就立即返回结果，减少响应时间，提高用户体验。随后，系统再对消息进行消费。&lt;/p>
&lt;p>因为用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败。因此，&lt;strong>使用消息队列进行异步处理之后，需要适当修改业务流程进行配合&lt;/strong>，比如用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功，以免交易纠纷。这就类似我们平时手机订火车票和电影票。&lt;/p>
&lt;h3 id="削峰限流">
 削峰/限流
 &lt;a class="anchor" href="#%e5%89%8a%e5%b3%b0%e9%99%90%e6%b5%81">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>先将短时间高并发产生的事务消息存储在消息队列中，然后后端服务再慢慢根据自己的能力去消费这些消息，这样就避免直接把后端服务打垮掉。&lt;/strong>&lt;/p>
&lt;p>举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/%E5%89%8A%E5%B3%B0-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png" alt="削峰" />&lt;/p>
&lt;h3 id="降低系统耦合性">
 降低系统耦合性
 &lt;a class="anchor" href="#%e9%99%8d%e4%bd%8e%e7%b3%bb%e7%bb%9f%e8%80%a6%e5%90%88%e6%80%a7">#&lt;/a>
&lt;/h3>
&lt;p>使用消息队列还可以降低系统耦合性。如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。&lt;/p>
&lt;p>生产者（客户端）发送消息到消息队列中去，消费者（服务端）处理消息，需要消费的系统直接去消息队列取消息进行消费即可而不需要和其他系统有耦合，这显然也提高了系统的扩展性。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/message-queue-pub-sub-model.png" alt="发布/订阅（Pub/Sub）模型" />&lt;/p>
&lt;p>&lt;strong>消息队列使用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。&lt;/strong> 从上图可以看到&lt;strong>消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合&lt;/strong>，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。&lt;strong>对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计&lt;/strong>。&lt;/p>
&lt;p>例如，我们商城系统分为用户、订单、财务、仓储、消息通知、物流、风控等多个服务。用户在完成下单后，需要调用财务（扣款）、仓储（库存管理）、物流（发货）、消息通知（通知用户发货）、风控（风险评估）等服务。使用消息队列后，下单操作和后续的扣款、发货、通知等操作就解耦了，下单完成发送一个消息到消息队列，需要用到的地方去订阅这个消息进行消息即可。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/high-performance/message-queue/message-queue-decouple-mall-example.png" alt="" />&lt;/p>
&lt;p>另外，为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。&lt;/p>
&lt;p>&lt;strong>备注：&lt;/strong> 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的。除了发布-订阅模式，还有点对点订阅模式（一个消息只有一个消费者），我们比较常用的是发布-订阅模式。另外，这两种消息模型是 JMS 提供的，AMQP 协议还提供了另外 5 种消息模型。&lt;/p></description></item></channel></rss>