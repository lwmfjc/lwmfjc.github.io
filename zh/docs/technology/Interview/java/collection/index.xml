<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/index.xml" rel="self" type="application/rss+xml"/><item><title>ArrayBlockingQueue 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/arrayblockingqueue-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/arrayblockingqueue-source-code/</guid><description>&lt;h2 id="阻塞队列简介">
 阻塞队列简介
 &lt;a class="anchor" href="#%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="阻塞队列的历史">
 阻塞队列的历史
 &lt;a class="anchor" href="#%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e7%9a%84%e5%8e%86%e5%8f%b2">#&lt;/a>
&lt;/h3>
&lt;p>Java 阻塞队列的历史可以追溯到 JDK1.5 版本，当时 Java 平台增加了 &lt;code>java.util.concurrent&lt;/code>，即我们常说的 JUC 包，其中包含了各种并发流程控制工具、并发容器、原子类等。这其中自然也包含了我们这篇文章所讨论的阻塞队列。&lt;/p>
&lt;p>为了解决高并发场景下多线程之间数据共享的问题，JDK1.5 版本中出现了 &lt;code>ArrayBlockingQueue&lt;/code> 和 &lt;code>LinkedBlockingQueue&lt;/code>，它们是带有生产者-消费者模式实现的并发容器。其中，&lt;code>ArrayBlockingQueue&lt;/code> 是有界队列，即添加的元素达到上限之后，再次添加就会被阻塞或者抛出异常。而 &lt;code>LinkedBlockingQueue&lt;/code> 则由链表构成的队列，正是因为链表的特性，所以 &lt;code>LinkedBlockingQueue&lt;/code> 在添加元素上并不会向 &lt;code>ArrayBlockingQueue&lt;/code> 那样有着较多的约束，所以 &lt;code>LinkedBlockingQueue&lt;/code> 设置队列是否有界是可选的(注意这里的无界并不是指可以添加任务数量的元素，而是说队列的大小默认为 &lt;code>Integer.MAX_VALUE&lt;/code>，近乎于无限大)。&lt;/p>
&lt;p>随着 Java 的不断发展，JDK 后续的几个版本又对阻塞队列进行了不少的更新和完善:&lt;/p>
&lt;ol>
&lt;li>JDK1.6 版本:增加 &lt;code>SynchronousQueue&lt;/code>，一个不存储元素的阻塞队列。&lt;/li>
&lt;li>JDK1.7 版本:增加 &lt;code>TransferQueue&lt;/code>，一个支持更多操作的阻塞队列。&lt;/li>
&lt;li>JDK1.8 版本:增加 &lt;code>DelayQueue&lt;/code>，一个支持延迟获取元素的阻塞队列。&lt;/li>
&lt;/ol>
&lt;h3 id="阻塞队列的思想">
 阻塞队列的思想
 &lt;a class="anchor" href="#%e9%98%bb%e5%a1%9e%e9%98%9f%e5%88%97%e7%9a%84%e6%80%9d%e6%83%b3">#&lt;/a>
&lt;/h3>
&lt;p>阻塞队列就是典型的生产者-消费者模型，它可以做到以下几点:&lt;/p>
&lt;ol>
&lt;li>当阻塞队列数据为空时，所有的消费者线程都会被阻塞，等待队列非空。&lt;/li>
&lt;li>当生产者往队列里填充数据后，队列就会通知消费者队列非空，消费者此时就可以进来消费。&lt;/li>
&lt;li>当阻塞队列因为消费者消费过慢或者生产者存放元素过快导致队列填满时无法容纳新元素时，生产者就会被阻塞，等待队列非满时继续存放元素。&lt;/li>
&lt;li>当消费者从队列中消费一个元素之后，队列就会通知生产者队列非满，生产者可以继续填充数据了。&lt;/li>
&lt;/ol>
&lt;p>总结一下：阻塞队列就说基于非空和非满两个条件实现生产者和消费者之间的交互，尽管这些交互流程和等待通知的机制实现非常复杂，好在 Doug Lea 的操刀之下已将阻塞队列的细节屏蔽，我们只需调用 &lt;code>put&lt;/code>、&lt;code>take&lt;/code>、&lt;code>offer&lt;/code>、&lt;code>poll&lt;/code> 等 API 即可实现多线程之间的生产和消费。&lt;/p>
&lt;p>这也使得阻塞队列在多线程开发中有着广泛的运用，最常见的例子无非是我们的线程池,从源码中我们就能看出当核心线程无法及时处理任务时，这些任务都会扔到 &lt;code>workQueue&lt;/code> 中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">ThreadPoolExecutor&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> corePoolSize,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> maximumPoolSize,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> keepAliveTime,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TimeUnit unit,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BlockingQueue&lt;span style="color:#f92672">&amp;lt;&lt;/span>Runnable&lt;span style="color:#f92672">&amp;gt;&lt;/span> workQueue,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ThreadFactory threadFactory,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RejectedExecutionHandler handler) {&lt;span style="color:#75715e">// ...}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="arrayblockingqueue-常见方法及测试">
 ArrayBlockingQueue 常见方法及测试
 &lt;a class="anchor" href="#arrayblockingqueue-%e5%b8%b8%e8%a7%81%e6%96%b9%e6%b3%95%e5%8f%8a%e6%b5%8b%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;p>简单了解了阻塞队列的历史之后，我们就开始重点讨论本篇文章所要介绍的并发容器——&lt;code>ArrayBlockingQueue&lt;/code>。为了后续更加深入的了解 &lt;code>ArrayBlockingQueue&lt;/code>，我们不妨基于下面几个实例了解以下 &lt;code>ArrayBlockingQueue&lt;/code> 的使用。&lt;/p></description></item><item><title>ArrayList 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/arraylist-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/arraylist-source-code/</guid><description>&lt;h2 id="arraylist-简介">
 ArrayList 简介
 &lt;a class="anchor" href="#arraylist-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>ArrayList&lt;/code> 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用&lt;code>ensureCapacity&lt;/code>操作来增加 &lt;code>ArrayList&lt;/code> 实例的容量。这可以减少递增式再分配的数量。&lt;/p>
&lt;p>&lt;code>ArrayList&lt;/code> 继承于 &lt;code>AbstractList&lt;/code> ，实现了 &lt;code>List&lt;/code>, &lt;code>RandomAccess&lt;/code>, &lt;code>Cloneable&lt;/code>, &lt;code>java.io.Serializable&lt;/code> 这些接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ArrayList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> AbstractList&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implements&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>, RandomAccess, Cloneable, java.&lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Serializable&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>List&lt;/code> : 表明它是一个列表，支持添加、删除、查找等操作，并且可以通过下标进行访问。&lt;/li>
&lt;li>&lt;code>RandomAccess&lt;/code> ：这是一个标志接口，表明实现这个接口的 &lt;code>List&lt;/code> 集合是支持 &lt;strong>快速随机访问&lt;/strong> 的。在 &lt;code>ArrayList&lt;/code> 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。&lt;/li>
&lt;li>&lt;code>Cloneable&lt;/code> ：表明它具有拷贝能力，可以进行深拷贝或浅拷贝操作。&lt;/li>
&lt;li>&lt;code>Serializable&lt;/code> : 表明它可以进行序列化操作，也就是可以将对象转换为字节流进行持久化存储或网络传输，非常方便。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/collection/arraylist-class-diagram.png" alt="ArrayList 类图" />&lt;/p>
&lt;h3 id="arraylist-和-vector-的区别了解即可">
 ArrayList 和 Vector 的区别?（了解即可）
 &lt;a class="anchor" href="#arraylist-%e5%92%8c-vector-%e7%9a%84%e5%8c%ba%e5%88%ab%e4%ba%86%e8%a7%a3%e5%8d%b3%e5%8f%af">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>ArrayList&lt;/code> 是 &lt;code>List&lt;/code> 的主要实现类，底层使用 &lt;code>Object[]&lt;/code>存储，适用于频繁的查找工作，线程不安全 。&lt;/li>
&lt;li>&lt;code>Vector&lt;/code> 是 &lt;code>List&lt;/code> 的古老实现类，底层使用&lt;code>Object[]&lt;/code> 存储，线程安全。&lt;/li>
&lt;/ul>
&lt;h3 id="arraylist-可以添加-null-值吗">
 ArrayList 可以添加 null 值吗？
 &lt;a class="anchor" href="#arraylist-%e5%8f%af%e4%bb%a5%e6%b7%bb%e5%8a%a0-null-%e5%80%bc%e5%90%97">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>ArrayList&lt;/code> 中可以存储任何类型的对象，包括 &lt;code>null&lt;/code> 值。不过，不建议向&lt;code>ArrayList&lt;/code> 中添加 &lt;code>null&lt;/code> 值， &lt;code>null&lt;/code> 值无意义，会让代码难以维护比如忘记做判空处理就会导致空指针异常。&lt;/p></description></item><item><title>ConcurrentHashMap 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/concurrent-hash-map-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/concurrent-hash-map-source-code/</guid><description>&lt;blockquote>
&lt;p>本文来自公众号：末读代码的投稿，原文地址：
&lt;a href="https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw">https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw&lt;/a> 。&lt;/p>
&lt;/blockquote>
&lt;p>上一篇文章介绍了 HashMap 源码，反响不错，也有很多同学发表了自己的观点，这次又来了，这次是 &lt;code>ConcurrentHashMap&lt;/code> 了，作为线程安全的 HashMap ，它的使用频率也是很高。那么它的存储结构和实现原理是怎么样的呢？&lt;/p>
&lt;h2 id="1-concurrenthashmap-17">
 1. ConcurrentHashMap 1.7
 &lt;a class="anchor" href="#1-concurrenthashmap-17">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-存储结构">
 1. 存储结构
 &lt;a class="anchor" href="#1-%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/collection/java7_concurrenthashmap.png" alt="Java 7 ConcurrentHashMap 存储结构" />&lt;/p>
&lt;p>Java 7 中 &lt;code>ConcurrentHashMap&lt;/code> 的存储结构如上图，&lt;code>ConcurrnetHashMap&lt;/code> 由很多个 &lt;code>Segment&lt;/code> 组合，而每一个 &lt;code>Segment&lt;/code> 是一个类似于 &lt;code>HashMap&lt;/code> 的结构，所以每一个 &lt;code>HashMap&lt;/code> 的内部可以进行扩容。但是 &lt;code>Segment&lt;/code> 的个数一旦&lt;strong>初始化就不能改变&lt;/strong>，默认 &lt;code>Segment&lt;/code> 的个数是 16 个，你也可以认为 &lt;code>ConcurrentHashMap&lt;/code> 默认支持最多 16 个线程并发。&lt;/p>
&lt;h3 id="2-初始化">
 2. 初始化
 &lt;a class="anchor" href="#2-%e5%88%9d%e5%a7%8b%e5%8c%96">#&lt;/a>
&lt;/h3>
&lt;p>通过 &lt;code>ConcurrentHashMap&lt;/code> 的无参构造探寻 &lt;code>ConcurrentHashMap&lt;/code> 的初始化流程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * Creates a new, empty map with a default initial capacity (16),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * load factor (0.75) and concurrencyLevel (16).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">ConcurrentHashMap&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>无参构造中调用了有参构造，传入了三个参数的默认值，他们的值是。&lt;/p></description></item><item><title>CopyOnWriteArrayList 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/copyonwritearraylist-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/copyonwritearraylist-source-code/</guid><description>&lt;h2 id="copyonwritearraylist-简介">
 CopyOnWriteArrayList 简介
 &lt;a class="anchor" href="#copyonwritearraylist-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>在 JDK1.5 之前，如果想要使用并发安全的 &lt;code>List&lt;/code> 只能选择 &lt;code>Vector&lt;/code>。而 &lt;code>Vector&lt;/code> 是一种老旧的集合，已经被淘汰。&lt;code>Vector&lt;/code> 对于增删改查等方法基本都加了 &lt;code>synchronized&lt;/code>，这种方式虽然能够保证同步，但这相当于对整个 &lt;code>Vector&lt;/code> 加上了一把大锁，使得每个方法执行的时候都要去获得锁，导致性能非常低下。&lt;/p>
&lt;p>JDK1.5 引入了 &lt;code>Java.util.concurrent&lt;/code>（JUC）包，其中提供了很多线程安全且并发性能良好的容器，其中唯一的线程安全 &lt;code>List&lt;/code> 实现就是 &lt;code>CopyOnWriteArrayList&lt;/code> 。关于&lt;code>java.util.concurrent&lt;/code> 包下常见并发容器的总结，可以看我写的这篇文章：
&lt;a href="https://javaguide.cn/java/concurrent/java-concurrent-collections.html">Java 常见并发容器总结&lt;/a> 。&lt;/p>
&lt;h3 id="copyonwritearraylist-到底有什么厉害之处">
 CopyOnWriteArrayList 到底有什么厉害之处？
 &lt;a class="anchor" href="#copyonwritearraylist-%e5%88%b0%e5%ba%95%e6%9c%89%e4%bb%80%e4%b9%88%e5%8e%89%e5%ae%b3%e4%b9%8b%e5%a4%84">#&lt;/a>
&lt;/h3>
&lt;p>对于大部分业务场景来说，读取操作往往是远大于写入操作的。由于读取操作不会对原有数据进行修改，因此，对于每次读取都进行加锁其实是一种资源浪费。相比之下，我们应该允许多个线程同时访问 &lt;code>List&lt;/code> 的内部数据，毕竟对于读取操作来说是安全的。&lt;/p>
&lt;p>这种思路与 &lt;code>ReentrantReadWriteLock&lt;/code> 读写锁的设计思想非常类似，即读读不互斥、读写互斥、写写互斥（只有读读不互斥）。&lt;code>CopyOnWriteArrayList&lt;/code> 更进一步地实现了这一思想。为了将读操作性能发挥到极致，&lt;code>CopyOnWriteArrayList&lt;/code> 中的读取操作是完全无需加锁的。更加厉害的是，写入操作也不会阻塞读取操作，只有写写才会互斥。这样一来，读操作的性能就可以大幅度提升。&lt;/p>
&lt;p>&lt;code>CopyOnWriteArrayList&lt;/code> 线程安全的核心在于其采用了 &lt;strong>写时复制（Copy-On-Write）&lt;/strong> 的策略，从 &lt;code>CopyOnWriteArrayList&lt;/code> 的名字就能看出了。&lt;/p>
&lt;h3 id="copy-on-write-的思想是什么">
 Copy-On-Write 的思想是什么？
 &lt;a class="anchor" href="#copy-on-write-%e7%9a%84%e6%80%9d%e6%83%b3%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>CopyOnWriteArrayList&lt;/code>名字中的“Copy-On-Write”即写时复制，简称 COW。&lt;/p>
&lt;p>下面是维基百科对 Copy-On-Write 的介绍，介绍的挺不错：&lt;/p>
&lt;blockquote>
&lt;p>写入时复制（英语：Copy-on-write，简称 COW）是一种计算机程序设计领域的优化策略。其核心思想是，如果有多个调用者（callers）同时请求相同资源（如内存或磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的。此作法主要的优点是如果调用者没有修改该资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。&lt;/p>
&lt;/blockquote>
&lt;p>这里再以 &lt;code>CopyOnWriteArrayList&lt;/code>为例介绍：当需要修改（ &lt;code>add&lt;/code>，&lt;code>set&lt;/code>、&lt;code>remove&lt;/code> 等操作） &lt;code>CopyOnWriteArrayList&lt;/code> 的内容时，不会直接修改原数组，而是会先创建底层数组的副本，对副本数组进行修改，修改完之后再将修改后的数组赋值回去，这样就可以保证写操作不会影响读操作了。&lt;/p>
&lt;p>可以看出，写时复制机制非常适合读多写少的并发场景，能够极大地提高系统的并发性能。&lt;/p>
&lt;p>不过，写时复制机制并不是银弹，其依然存在一些缺点，下面列举几点：&lt;/p>
&lt;ol>
&lt;li>内存占用：每次写操作都需要复制一份原始数据，会占用额外的内存空间，在数据量比较大的情况下，可能会导致内存资源不足。&lt;/li>
&lt;li>写操作开销：每一次写操作都需要复制一份原始数据，然后再进行修改和替换，所以写操作的开销相对较大，在写入比较频繁的场景下，性能可能会受到影响。&lt;/li>
&lt;li>数据一致性问题：修改操作不会立即反映到最终结果中，还需要等待复制完成，这可能会导致一定的数据一致性问题。&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;h2 id="copyonwritearraylist-源码分析">
 CopyOnWriteArrayList 源码分析
 &lt;a class="anchor" href="#copyonwritearraylist-%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;p>这里以 JDK1.8 为例，分析一下 &lt;code>CopyOnWriteArrayList&lt;/code> 的底层核心源码。&lt;/p></description></item><item><title>DelayQueue 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/delayqueue-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/delayqueue-source-code/</guid><description>&lt;h2 id="delayqueue-简介">
 DelayQueue 简介
 &lt;a class="anchor" href="#delayqueue-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>DelayQueue&lt;/code> 是 JUC 包(&lt;code>java.util.concurrent)&lt;/code>为我们提供的延迟队列，用于实现延时任务比如订单下单 15 分钟未支付直接取消。它是 &lt;code>BlockingQueue&lt;/code> 的一种，底层是一个基于 &lt;code>PriorityQueue&lt;/code> 实现的一个无界队列，是线程安全的。关于&lt;code>PriorityQueue&lt;/code>可以参考笔者编写的这篇文章：
&lt;a href="./priorityqueue-source-code.md">PriorityQueue 源码分析&lt;/a> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/collection/blocking-queue-hierarchy.png" alt="BlockingQueue 的实现类" />&lt;/p>
&lt;p>&lt;code>DelayQueue&lt;/code> 中存放的元素必须实现 &lt;code>Delayed&lt;/code> 接口，并且需要重写 &lt;code>getDelay()&lt;/code>方法（计算是否到期）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Delayed&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Comparable&lt;span style="color:#f92672">&amp;lt;&lt;/span>Delayed&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">getDelay&lt;/span>(TimeUnit unit);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下, &lt;code>DelayQueue&lt;/code> 会按照到期时间升序编排任务。只有当元素过期时（&lt;code>getDelay()&lt;/code>方法返回值小于等于 0），才能从队列中取出。&lt;/p>
&lt;h2 id="delayqueue-发展史">
 DelayQueue 发展史
 &lt;a class="anchor" href="#delayqueue-%e5%8f%91%e5%b1%95%e5%8f%b2">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>DelayQueue&lt;/code> 最早是在 Java 5 中引入的，作为 &lt;code>java.util.concurrent&lt;/code> 包中的一部分，用于支持基于时间的任务调度和缓存过期删除等场景，该版本仅仅支持延迟功能的实现，还未解决线程安全问题。&lt;/li>
&lt;li>在 Java 6 中，&lt;code>DelayQueue&lt;/code> 的实现进行了优化，通过使用 &lt;code>ReentrantLock&lt;/code> 和 &lt;code>Condition&lt;/code> 解决线程安全及线程间交互的效率，提高了其性能和可靠性。&lt;/li>
&lt;li>在 Java 7 中，&lt;code>DelayQueue&lt;/code> 的实现进行了进一步的优化，通过使用 CAS 操作实现元素的添加和移除操作，提高了其并发操作性能。&lt;/li>
&lt;li>在 Java 8 中，&lt;code>DelayQueue&lt;/code> 的实现没有进行重大变化，但是在 &lt;code>java.time&lt;/code> 包中引入了新的时间类，如 &lt;code>Duration&lt;/code> 和 &lt;code>Instant&lt;/code>，使得使用 &lt;code>DelayQueue&lt;/code> 进行基于时间的调度更加方便和灵活。&lt;/li>
&lt;li>在 Java 9 中，&lt;code>DelayQueue&lt;/code> 的实现进行了一些微小的改进，主要是对代码进行了一些优化和精简。&lt;/li>
&lt;/ul>
&lt;p>总的来说，&lt;code>DelayQueue&lt;/code> 的发展史主要是通过优化其实现方式和提高其性能和可靠性，使其更加适用于基于时间的调度和缓存过期删除等场景。&lt;/p></description></item><item><title>HashMap 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/hashmap-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/hashmap-source-code/</guid><description>&lt;blockquote>
&lt;p>感谢 
&lt;a href="https://github.com/changfubai">changfubai&lt;/a> 对本文的改进做出的贡献！&lt;/p>
&lt;/blockquote>
&lt;h2 id="hashmap-简介">
 HashMap 简介
 &lt;a class="anchor" href="#hashmap-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>HashMap 主要用来存放键值对，它基于哈希表的 Map 接口实现，是常用的 Java 集合之一，是非线程安全的。&lt;/p>
&lt;p>&lt;code>HashMap&lt;/code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个&lt;/p>
&lt;p>JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。 JDK1.8 以后的 &lt;code>HashMap&lt;/code> 在解决哈希冲突时有了较大的变化，当链表长度大于等于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。&lt;/p>
&lt;p>&lt;code>HashMap&lt;/code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。并且， &lt;code>HashMap&lt;/code> 总是使用 2 的幂作为哈希表的大小。&lt;/p>
&lt;h2 id="底层数据结构分析">
 底层数据结构分析
 &lt;a class="anchor" href="#%e5%ba%95%e5%b1%82%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;h3 id="jdk18-之前">
 JDK1.8 之前
 &lt;a class="anchor" href="#jdk18-%e4%b9%8b%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;p>JDK1.8 之前 HashMap 底层是 &lt;strong>数组和链表&lt;/strong> 结合在一起使用也就是 &lt;strong>链表散列&lt;/strong>。&lt;/p>
&lt;p>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 &lt;code>(n - 1) &amp;amp; hash&lt;/code> 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。&lt;/p></description></item><item><title>Java集合常见面试题总结(上)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-questions-01/</guid><description>&lt;h2 id="集合概述">
 集合概述
 &lt;a class="anchor" href="#%e9%9b%86%e5%90%88%e6%a6%82%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="java-集合概览">
 Java 集合概览
 &lt;a class="anchor" href="#java-%e9%9b%86%e5%90%88%e6%a6%82%e8%a7%88">#&lt;/a>
&lt;/h3>
&lt;p>Java 集合，也叫作容器，主要是由两大接口派生而来：一个是 &lt;code>Collection&lt;/code>接口，主要用于存放单一元素；另一个是 &lt;code>Map&lt;/code> 接口，主要用于存放键值对。对于&lt;code>Collection&lt;/code> 接口，下面又有三个主要的子接口：&lt;code>List&lt;/code>、&lt;code>Set&lt;/code> 、 &lt;code>Queue&lt;/code>。&lt;/p>
&lt;p>Java 集合框架如下图所示：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/collection/java-collection-hierarchy.png" alt="Java 集合框架概览" />&lt;/p>
&lt;p>注：图中只列举了主要的继承派生关系，并没有列举所有关系。比方省略了&lt;code>AbstractList&lt;/code>, &lt;code>NavigableSet&lt;/code>等抽象类以及其他的一些辅助类，如想深入了解，可自行查看源码。&lt;/p>
&lt;h3 id="说说-list-set-queue-map-四者的区别">
 说说 List, Set, Queue, Map 四者的区别？
 &lt;a class="anchor" href="#%e8%af%b4%e8%af%b4-list-set-queue-map-%e5%9b%9b%e8%80%85%e7%9a%84%e5%8c%ba%e5%88%ab">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>List&lt;/code>(对付顺序的好帮手): 存储的元素是有序的、可重复的。&lt;/li>
&lt;li>&lt;code>Set&lt;/code>(注重独一无二的性质): 存储的元素不可重复的。&lt;/li>
&lt;li>&lt;code>Queue&lt;/code>(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。&lt;/li>
&lt;li>&lt;code>Map&lt;/code>(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，&amp;ldquo;x&amp;rdquo; 代表 key，&amp;ldquo;y&amp;rdquo; 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。&lt;/li>
&lt;/ul>
&lt;h3 id="集合框架底层数据结构总结">
 集合框架底层数据结构总结
 &lt;a class="anchor" href="#%e9%9b%86%e5%90%88%e6%a1%86%e6%9e%b6%e5%ba%95%e5%b1%82%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e6%80%bb%e7%bb%93">#&lt;/a>
&lt;/h3>
&lt;p>先来看一下 &lt;code>Collection&lt;/code> 接口下面的集合。&lt;/p>
&lt;h4 id="list">
 List
 &lt;a class="anchor" href="#list">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;code>ArrayList&lt;/code>：&lt;code>Object[]&lt;/code> 数组。详细可以查看：
&lt;a href="./arraylist-source-code.md">ArrayList 源码分析&lt;/a>。&lt;/li>
&lt;li>&lt;code>Vector&lt;/code>：&lt;code>Object[]&lt;/code> 数组。&lt;/li>
&lt;li>&lt;code>LinkedList&lt;/code>：双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)。详细可以查看：
&lt;a href="./linkedlist-source-code.md">LinkedList 源码分析&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h4 id="set">
 Set
 &lt;a class="anchor" href="#set">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;code>HashSet&lt;/code>(无序，唯一): 基于 &lt;code>HashMap&lt;/code> 实现的，底层采用 &lt;code>HashMap&lt;/code> 来保存元素。&lt;/li>
&lt;li>&lt;code>LinkedHashSet&lt;/code>: &lt;code>LinkedHashSet&lt;/code> 是 &lt;code>HashSet&lt;/code> 的子类，并且其内部是通过 &lt;code>LinkedHashMap&lt;/code> 来实现的。&lt;/li>
&lt;li>&lt;code>TreeSet&lt;/code>(有序，唯一): 红黑树(自平衡的排序二叉树)。&lt;/li>
&lt;/ul>
&lt;h4 id="queue">
 Queue
 &lt;a class="anchor" href="#queue">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;code>PriorityQueue&lt;/code>: &lt;code>Object[]&lt;/code> 数组来实现小顶堆。详细可以查看：
&lt;a href="./priorityqueue-source-code.md">PriorityQueue 源码分析&lt;/a>。&lt;/li>
&lt;li>&lt;code>DelayQueue&lt;/code>:&lt;code>PriorityQueue&lt;/code>。详细可以查看：
&lt;a href="./delayqueue-source-code.md">DelayQueue 源码分析&lt;/a>。&lt;/li>
&lt;li>&lt;code>ArrayDeque&lt;/code>: 可扩容动态双向数组。&lt;/li>
&lt;/ul>
&lt;p>再来看看 &lt;code>Map&lt;/code> 接口下面的集合。&lt;/p></description></item><item><title>Java集合常见面试题总结(下)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-questions-02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-questions-02/</guid><description>&lt;h2 id="map重要">
 Map（重要）
 &lt;a class="anchor" href="#map%e9%87%8d%e8%a6%81">#&lt;/a>
&lt;/h2>
&lt;h3 id="hashmap-和-hashtable-的区别">
 HashMap 和 Hashtable 的区别
 &lt;a class="anchor" href="#hashmap-%e5%92%8c-hashtable-%e7%9a%84%e5%8c%ba%e5%88%ab">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>线程是否安全：&lt;/strong> &lt;code>HashMap&lt;/code> 是非线程安全的，&lt;code>Hashtable&lt;/code> 是线程安全的,因为 &lt;code>Hashtable&lt;/code> 内部的方法基本都经过&lt;code>synchronized&lt;/code> 修饰。（如果你要保证线程安全的话就使用 &lt;code>ConcurrentHashMap&lt;/code> 吧！）；&lt;/li>
&lt;li>&lt;strong>效率：&lt;/strong> 因为线程安全的问题，&lt;code>HashMap&lt;/code> 要比 &lt;code>Hashtable&lt;/code> 效率高一点。另外，&lt;code>Hashtable&lt;/code> 基本被淘汰，不要在代码中使用它；&lt;/li>
&lt;li>&lt;strong>对 Null key 和 Null value 的支持：&lt;/strong> &lt;code>HashMap&lt;/code> 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 &lt;code>NullPointerException&lt;/code>。&lt;/li>
&lt;li>&lt;strong>初始容量大小和每次扩充容量大小的不同：&lt;/strong> ① 创建时如果不指定容量初始值，&lt;code>Hashtable&lt;/code> 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。&lt;code>HashMap&lt;/code> 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 &lt;code>Hashtable&lt;/code> 会直接使用你给定的大小，而 &lt;code>HashMap&lt;/code> 会将其扩充为 2 的幂次方大小（&lt;code>HashMap&lt;/code> 中的&lt;code>tableSizeFor()&lt;/code>方法保证，下面给出了源代码）。也就是说 &lt;code>HashMap&lt;/code> 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。&lt;/li>
&lt;li>&lt;strong>底层数据结构：&lt;/strong> JDK1.8 以后的 &lt;code>HashMap&lt;/code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间（后文中我会结合源码对这一过程进行分析）。&lt;code>Hashtable&lt;/code> 没有这样的机制。&lt;/li>
&lt;li>&lt;strong>哈希函数的实现&lt;/strong>：&lt;code>HashMap&lt;/code> 对哈希值进行了高位和低位的混合扰动处理以减少冲突，而 &lt;code>Hashtable&lt;/code> 直接使用键的 &lt;code>hashCode()&lt;/code> 值。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;code>HashMap&lt;/code> 中带有初始容量的构造函数：&lt;/strong>&lt;/p></description></item><item><title>Java集合使用注意事项总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-precautions-for-use/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/java-collection-precautions-for-use/</guid><description>&lt;p>这篇文章我根据《阿里巴巴 Java 开发手册》总结了关于集合使用常见的注意事项以及其具体原理。&lt;/p>
&lt;p>强烈建议小伙伴们多多阅读几遍，避免自己写代码的时候出现这些低级的问题。&lt;/p>
&lt;h2 id="集合判空">
 集合判空
 &lt;a class="anchor" href="#%e9%9b%86%e5%90%88%e5%88%a4%e7%a9%ba">#&lt;/a>
&lt;/h2>
&lt;p>《阿里巴巴 Java 开发手册》的描述如下：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>判断所有集合内部的元素是否为空，使用 &lt;code>isEmpty()&lt;/code> 方法，而不是 &lt;code>size()==0&lt;/code> 的方式。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>这是因为 &lt;code>isEmpty()&lt;/code> 方法的可读性更好，并且时间复杂度为 &lt;code>O(1)&lt;/code>。&lt;/p>
&lt;p>绝大部分我们使用的集合的 &lt;code>size()&lt;/code> 方法的时间复杂度也是 &lt;code>O(1)&lt;/code>，不过，也有很多复杂度不是 &lt;code>O(1)&lt;/code> 的，比如 &lt;code>java.util.concurrent&lt;/code> 包下的 &lt;code>ConcurrentLinkedQueue&lt;/code>。&lt;code>ConcurrentLinkedQueue&lt;/code> 的 &lt;code>isEmpty()&lt;/code> 方法通过 &lt;code>first()&lt;/code> 方法进行判断，其中 &lt;code>first()&lt;/code> 方法返回的是队列中第一个值不为 &lt;code>null&lt;/code> 的节点（节点值为&lt;code>null&lt;/code>的原因是在迭代器中使用的逻辑删除）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isEmpty&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> first() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> restartFromHead:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> h &lt;span style="color:#f92672">=&lt;/span> head, p &lt;span style="color:#f92672">=&lt;/span> h, q;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> hasItem &lt;span style="color:#f92672">=&lt;/span> (p.&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (hasItem &lt;span style="color:#f92672">||&lt;/span> (q &lt;span style="color:#f92672">=&lt;/span> p.&lt;span style="color:#a6e22e">next&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) { &lt;span style="color:#75715e">// 当前节点值不为空 或 到达队尾&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updateHead(h, p); &lt;span style="color:#75715e">// 将head设置为p&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> hasItem &lt;span style="color:#f92672">?&lt;/span> p : &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (p &lt;span style="color:#f92672">==&lt;/span> q) &lt;span style="color:#66d9ef">continue&lt;/span> restartFromHead;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> q; &lt;span style="color:#75715e">// p = p.next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于在插入与删除元素时，都会执行&lt;code>updateHead(h, p)&lt;/code>方法，所以该方法的执行的时间复杂度可以近似为&lt;code>O(1)&lt;/code>。而 &lt;code>size()&lt;/code> 方法需要遍历整个链表，时间复杂度为&lt;code>O(n)&lt;/code>&lt;/p></description></item><item><title>LinkedHashMap 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/linkedhashmap-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/linkedhashmap-source-code/</guid><description>&lt;h2 id="linkedhashmap-简介">
 LinkedHashMap 简介
 &lt;a class="anchor" href="#linkedhashmap-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>LinkedHashMap&lt;/code> 是 Java 提供的一个集合类，它继承自 &lt;code>HashMap&lt;/code>，并在 &lt;code>HashMap&lt;/code> 基础上维护一条双向链表，使得具备如下特性:&lt;/p>
&lt;ol>
&lt;li>支持遍历时会按照插入顺序有序进行迭代。&lt;/li>
&lt;li>支持按照元素访问顺序排序,适用于封装 LRU 缓存工具。&lt;/li>
&lt;li>因为内部使用双向链表维护各个节点，所以遍历时的效率和元素个数成正比，相较于和容量成正比的 HashMap 来说，迭代效率会高很多。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>LinkedHashMap&lt;/code> 逻辑结构如下图所示，它是在 &lt;code>HashMap&lt;/code> 基础上在各个节点之间维护一条双向链表，使得原本散列在不同 bucket 上的节点、链表、红黑树有序关联起来。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/collection/linkhashmap-structure-overview.png" alt="LinkedHashMap 逻辑结构" />&lt;/p>
&lt;h2 id="linkedhashmap-使用示例">
 LinkedHashMap 使用示例
 &lt;a class="anchor" href="#linkedhashmap-%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="插入顺序遍历">
 插入顺序遍历
 &lt;a class="anchor" href="#%e6%8f%92%e5%85%a5%e9%a1%ba%e5%ba%8f%e9%81%8d%e5%8e%86">#&lt;/a>
&lt;/h3>
&lt;p>如下所示，我们按照顺序往 &lt;code>LinkedHashMap&lt;/code> 添加元素然后进行遍历。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>HashMap &lt;span style="color:#f92672">&amp;lt;&lt;/span> String, String &lt;span style="color:#f92672">&amp;gt;&lt;/span> map &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> LinkedHashMap &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> ();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;g&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;3&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>map.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;e&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;23&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (Map.&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> String, String &lt;span style="color:#f92672">&amp;gt;&lt;/span> entry: map.&lt;span style="color:#a6e22e">entrySet&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(entry.&lt;span style="color:#a6e22e">getKey&lt;/span>() &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> entry.&lt;span style="color:#a6e22e">getValue&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>a:2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g:3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r:1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e:23
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，&lt;code>LinkedHashMap&lt;/code> 的迭代顺序是和插入顺序一致的,这一点是 &lt;code>HashMap&lt;/code> 所不具备的。&lt;/p>
&lt;h3 id="访问顺序遍历">
 访问顺序遍历
 &lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e9%a1%ba%e5%ba%8f%e9%81%8d%e5%8e%86">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>LinkedHashMap&lt;/code> 定义了排序模式 &lt;code>accessOrder&lt;/code>(boolean 类型，默认为 false)，访问顺序则为 true，插入顺序则为 false。&lt;/p></description></item><item><title>LinkedList 源码分析</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/linkedlist-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/linkedlist-source-code/</guid><description>&lt;h2 id="linkedlist-简介">
 LinkedList 简介
 &lt;a class="anchor" href="#linkedlist-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>LinkedList&lt;/code> 是一个基于双向链表实现的集合类，经常被拿来和 &lt;code>ArrayList&lt;/code> 做比较。关于 &lt;code>LinkedList&lt;/code> 和&lt;code>ArrayList&lt;/code>的详细对比，我们 
&lt;a href="./java-collection-questions-01.md">Java 集合常见面试题总结(上)&lt;/a>有详细介绍到。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/cs-basics/data-structure/bidirectional-linkedlist.png" alt="双向链表" />&lt;/p>
&lt;p>不过，我们在项目中一般是不会使用到 &lt;code>LinkedList&lt;/code> 的，需要用到 &lt;code>LinkedList&lt;/code> 的场景几乎都可以使用 &lt;code>ArrayList&lt;/code> 来代替，并且，性能通常会更好！就连 &lt;code>LinkedList&lt;/code> 的作者约书亚 · 布洛克（Josh Bloch）自己都说从来不会使用 &lt;code>LinkedList&lt;/code> 。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/redisimage-20220412110853807.png" alt="" />&lt;/p>
&lt;p>另外，不要下意识地认为 &lt;code>LinkedList&lt;/code> 作为链表就最适合元素增删的场景。我在上面也说了，&lt;code>LinkedList&lt;/code> 仅仅在头尾插入或者删除元素的时候时间复杂度近似 O(1)，其他情况增删元素的平均时间复杂度都是 O(n) 。&lt;/p>
&lt;h3 id="linkedlist-插入和删除元素的时间复杂度">
 LinkedList 插入和删除元素的时间复杂度？
 &lt;a class="anchor" href="#linkedlist-%e6%8f%92%e5%85%a5%e5%92%8c%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0%e7%9a%84%e6%97%b6%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>头部插入/删除：只需要修改头结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。&lt;/li>
&lt;li>尾部插入/删除：只需要修改尾结点的指针即可完成插入/删除操作，因此时间复杂度为 O(1)。&lt;/li>
&lt;li>指定位置插入/删除：需要先移动到指定位置，再修改指定节点的指针完成插入/删除，不过由于有头尾指针，可以从较近的指针出发，因此需要遍历平均 n/4 个元素，时间复杂度为 O(n)。&lt;/li>
&lt;/ul>
&lt;h3 id="linkedlist-为什么不能实现-randomaccess-接口">
 LinkedList 为什么不能实现 RandomAccess 接口？
 &lt;a class="anchor" href="#linkedlist-%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e8%83%bd%e5%ae%9e%e7%8e%b0-randomaccess-%e6%8e%a5%e5%8f%a3">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>RandomAccess&lt;/code> 是一个标记接口，用来表明实现该接口的类支持随机访问（即可以通过索引快速访问元素）。由于 &lt;code>LinkedList&lt;/code> 底层数据结构是链表，内存地址不连续，只能通过指针来定位，不支持随机快速访问，所以不能实现 &lt;code>RandomAccess&lt;/code> 接口。&lt;/p>
&lt;h2 id="linkedlist-源码分析">
 LinkedList 源码分析
 &lt;a class="anchor" href="#linkedlist-%e6%ba%90%e7%a0%81%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;p>这里以 JDK1.8 为例，分析一下 &lt;code>LinkedList&lt;/code> 的底层核心源码。&lt;/p>
&lt;p>&lt;code>LinkedList&lt;/code> 的类定义如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LinkedList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">extends&lt;/span> AbstractSequentialList&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implements&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Deque&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Cloneable, java.&lt;span style="color:#a6e22e">io&lt;/span>.&lt;span style="color:#a6e22e">Serializable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>LinkedList&lt;/code> 继承了 &lt;code>AbstractSequentialList&lt;/code> ，而 &lt;code>AbstractSequentialList&lt;/code> 又继承于 &lt;code>AbstractList&lt;/code> 。&lt;/p></description></item><item><title>PriorityQueue 源码分析（付费）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/priorityqueue-source-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/collection/priorityqueue-source-code/</guid><description>&lt;p>&lt;strong>PriorityQueue 源码分析&lt;/strong> 为我的
&lt;a href="https://javaguide.cn/about-the-author/zhishixingqiu-two-years.html">知识星球&lt;/a>（点击链接即可查看详细介绍以及加入方法）专属内容，已经整理到了
&lt;a href="https://javaguide.cn/zhuanlan/source-code-reading.html">《Java 必读源码系列》&lt;/a>中。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/xingqiu/image-20230727084055593.png" alt="PriorityQueue 源码分析" />&lt;/p></description></item></channel></rss>