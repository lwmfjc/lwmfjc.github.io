<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/index.xml" rel="self" type="application/rss+xml"/><item><title>Java IO 基础知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-basis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-basis/</guid><description>&lt;h2 id="io-流简介">
 IO 流简介
 &lt;a class="anchor" href="#io-%e6%b5%81%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>IO 即 &lt;code>Input/Output&lt;/code>，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。&lt;/p>
&lt;p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。&lt;/p>
&lt;ul>
&lt;li>&lt;code>InputStream&lt;/code>/&lt;code>Reader&lt;/code>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。&lt;/li>
&lt;li>&lt;code>OutputStream&lt;/code>/&lt;code>Writer&lt;/code>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。&lt;/li>
&lt;/ul>
&lt;h2 id="字节流">
 字节流
 &lt;a class="anchor" href="#%e5%ad%97%e8%8a%82%e6%b5%81">#&lt;/a>
&lt;/h2>
&lt;h3 id="inputstream字节输入流">
 InputStream（字节输入流）
 &lt;a class="anchor" href="#inputstream%e5%ad%97%e8%8a%82%e8%be%93%e5%85%a5%e6%b5%81">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>InputStream&lt;/code>用于从源头（通常是文件）读取数据（字节信息）到内存中，&lt;code>java.io.InputStream&lt;/code>抽象类是所有字节输入流的父类。&lt;/p>
&lt;p>&lt;code>InputStream&lt;/code> 常用方法：&lt;/p>
&lt;ul>
&lt;li>&lt;code>read()&lt;/code>：返回输入流中下一个字节的数据。返回的值介于 0 到 255 之间。如果未读取任何字节，则代码返回 &lt;code>-1&lt;/code> ，表示文件结束。&lt;/li>
&lt;li>&lt;code>read(byte b[ ])&lt;/code> : 从输入流中读取一些字节存储到数组 &lt;code>b&lt;/code> 中。如果数组 &lt;code>b&lt;/code> 的长度为零，则不读取。如果没有可用字节读取，返回 &lt;code>-1&lt;/code>。如果有可用字节读取，则最多读取的字节数最多等于 &lt;code>b.length&lt;/code> ， 返回读取的字节数。这个方法等价于 &lt;code>read(b, 0, b.length)&lt;/code>。&lt;/li>
&lt;li>&lt;code>read(byte b[], int off, int len)&lt;/code>：在&lt;code>read(byte b[ ])&lt;/code> 方法的基础上增加了 &lt;code>off&lt;/code> 参数（偏移量）和 &lt;code>len&lt;/code> 参数（要读取的最大字节数）。&lt;/li>
&lt;li>&lt;code>skip(long n)&lt;/code>：忽略输入流中的 n 个字节 ,返回实际忽略的字节数。&lt;/li>
&lt;li>&lt;code>available()&lt;/code>：返回输入流中可以读取的字节数。&lt;/li>
&lt;li>&lt;code>close()&lt;/code>：关闭输入流释放相关的系统资源。&lt;/li>
&lt;/ul>
&lt;p>从 Java 9 开始，&lt;code>InputStream&lt;/code> 新增加了多个实用的方法：&lt;/p></description></item><item><title>Java IO 模型详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-model/</guid><description>&lt;p>IO 模型这块确实挺难理解的，需要太多计算机底层知识。写这篇文章用了挺久，就非常希望能把我所知道的讲出来吧!希望朋友们能有收获！为了写这篇文章，还翻看了一下《UNIX 网络编程》这本书，太难了，我滴乖乖！心痛~&lt;/p>
&lt;p>&lt;em>个人能力有限。如果文章有任何需要补充/完善/修改的地方，欢迎在评论区指出，共同进步！&lt;/em>&lt;/p>
&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>I/O 一直是很多小伙伴难以理解的一个知识点，这篇文章我会将我所理解的 I/O 讲给你听，希望可以对你有所帮助。&lt;/p>
&lt;h2 id="io">
 I/O
 &lt;a class="anchor" href="#io">#&lt;/a>
&lt;/h2>
&lt;h3 id="何为-io">
 何为 I/O?
 &lt;a class="anchor" href="#%e4%bd%95%e4%b8%ba-io">#&lt;/a>
&lt;/h3>
&lt;p>I/O（&lt;mark>I&lt;/mark>nput/&lt;mark>O&lt;/mark>utput） 即&lt;mark>输入／输出&lt;/mark> 。&lt;/p>
&lt;p>&lt;mark>我们先从计算机结构的角度来解读一下 I/O。&lt;/mark>&lt;/p>
&lt;p>根据冯.诺依曼结构，计算机结构分为 5 大部分：运算器、控制器、存储器、输入设备、输出设备。&lt;/p>
&lt;p>&lt;img src="img/add364629719e2a9cacff2641793cd48_MD5.jpg" alt="冯诺依曼体系结构" />&lt;/p>
&lt;p>输入设备（比如键盘）和输出设备（比如显示器）都属于外部设备。网卡、硬盘这种既可以属于输入设备，也可以属于输出设备。&lt;/p>
&lt;p>输入设备向计算机输入数据，输出设备接收计算机输出的数据。&lt;/p>
&lt;p>&lt;mark>从计算机结构的视角来看的话， I/O 描述了计算机系统与外部设备之间通信的过程。&lt;/mark>&lt;/p>
&lt;p>&lt;mark>我们再先从应用程序的角度来解读一下 I/O。&lt;/mark>&lt;/p>
&lt;p>根据大学里学到的操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 &lt;mark>用户空间（User space）&lt;/mark> 和 &lt;mark>内核空间（Kernel space ）&lt;/mark> 。&lt;/p>
&lt;p>像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如文件管理、进程通信、内存管理等等。也就是说，我们想要进行 IO 操作，一定是要依赖内核空间的能力。&lt;/p>
&lt;p>并且，用户空间的程序不能直接访问内核空间。&lt;/p>
&lt;p>当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。&lt;/p>
&lt;p>因此，用户进程想要执行 IO 操作的话，必须通过 &lt;mark>系统调用&lt;/mark> 来间接访问内核空间&lt;/p>
&lt;p>我们在平常开发过程中接触最多的就是 &lt;mark>磁盘 IO（读写文件）&lt;/mark> 和 &lt;mark>网络 IO（网络请求和响应）&lt;/mark>。&lt;/p>
&lt;p>&lt;mark>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。&lt;/mark>&lt;/p>
&lt;p>当应用程序发起 I/O 调用后，会经历两个步骤：&lt;/p></description></item><item><title>Java IO 设计模式总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/io-design-patterns/</guid><description>&lt;p>这篇文章我们简单来看看我们从 IO 中能够学习到哪些设计模式的应用。&lt;/p>
&lt;h2 id="装饰器模式">
 装饰器模式
 &lt;a class="anchor" href="#%e8%a3%85%e9%a5%b0%e5%99%a8%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>&lt;mark>装饰器（Decorator）模式&lt;/mark> 可以在不改变原有对象的情况下拓展其功能。&lt;/p>
&lt;p>装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。&lt;/p>
&lt;p>对于字节流来说， &lt;code>FilterInputStream&lt;/code> （对应输入流）和&lt;code>FilterOutputStream&lt;/code>（对应输出流）是装饰器模式的核心，分别用于增强 &lt;code>InputStream&lt;/code> 和&lt;code>OutputStream&lt;/code>子类对象的功能。&lt;/p>
&lt;p>我们常见的&lt;code>BufferedInputStream&lt;/code>(字节缓冲输入流)、&lt;code>DataInputStream&lt;/code> 等等都是&lt;code>FilterInputStream&lt;/code> 的子类，&lt;code>BufferedOutputStream&lt;/code>（字节缓冲输出流）、&lt;code>DataOutputStream&lt;/code>等等都是&lt;code>FilterOutputStream&lt;/code>的子类。&lt;/p>
&lt;p>举个例子，我们可以通过 &lt;code>BufferedInputStream&lt;/code>（字节缓冲输入流）来增强 &lt;code>FileInputStream&lt;/code> 的功能。&lt;/p>
&lt;p>&lt;code>BufferedInputStream&lt;/code> 构造函数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">BufferedInputStream&lt;/span>(InputStream in) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>(in, DEFAULT_BUFFER_SIZE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">BufferedInputStream&lt;/span>(InputStream in, &lt;span style="color:#66d9ef">int&lt;/span> size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>(in);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (size &lt;span style="color:#f92672">&amp;lt;=&lt;/span> 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;Buffer size &amp;lt;= 0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>size&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看出，&lt;code>BufferedInputStream&lt;/code> 的构造函数其中的一个参数就是 &lt;code>InputStream&lt;/code> 。&lt;/p>
&lt;p>&lt;code>BufferedInputStream&lt;/code> 代码示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> (BufferedInputStream bis &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BufferedInputStream(&lt;span style="color:#66d9ef">new&lt;/span> FileInputStream(&lt;span style="color:#e6db74">&amp;#34;input.txt&amp;#34;&lt;/span>))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> content;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> skip &lt;span style="color:#f92672">=&lt;/span> bis.&lt;span style="color:#a6e22e">skip&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ((content &lt;span style="color:#f92672">=&lt;/span> bis.&lt;span style="color:#a6e22e">read&lt;/span>()) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">print&lt;/span>((&lt;span style="color:#66d9ef">char&lt;/span>) content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">catch&lt;/span> (IOException e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e.&lt;span style="color:#a6e22e">printStackTrace&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个时候，你可以会想了：&lt;mark>为啥我们直接不弄一个&lt;code>BufferedFileInputStream&lt;/code>（字符缓冲文件输入流）呢？&lt;/mark>&lt;/p></description></item><item><title>Java NIO 核心知识总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/nio-basis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/io/nio-basis/</guid><description>&lt;p>在学习 NIO 之前，需要先了解一下计算机 I/O 模型的基础理论知识。还不了解的话，可以参考我写的这篇文章：
&lt;a target="_blank" href="https://javaguide.cn/java/io/io-model.html">Java IO 模型详解&lt;/a>。&lt;/p>
&lt;h2 id="nio-简介">
 NIO 简介
 &lt;a class="anchor" href="#nio-%e7%ae%80%e4%bb%8b">#&lt;/a>
&lt;/h2>
&lt;p>在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。&lt;/p>
&lt;p>为了解决这个问题，在 Java1.4 版本引入了一种新的 I/O 模型 — &lt;mark>NIO&lt;/mark> （New IO，也称为 Non-blocking IO） 。NIO 弥补了同步阻塞 I/O 的不足，它在标准 Java 代码中提供了非阻塞、面向缓冲、基于通道的 I/O，可以使用少量的线程来处理多个连接，大大提高了 I/O 效率和并发。&lt;/p>
&lt;p>下图是 BIO、NIO 和 AIO 处理客户端请求的简单对比图（关于 AIO 的介绍，可以看我写的这篇文章：
&lt;a target="_blank" href="https://javaguide.cn/java/io/io-model.html">Java IO 模型详解&lt;/a>，不是重点，了解即可）。&lt;/p>
&lt;p>&lt;img src="img/98dff57fe042ea1338f793206c7335d2_MD5.jpg" alt="BIO、NIO 和 AIO 对比" />&lt;/p>
&lt;p>⚠️需要注意：使用 NIO 并不一定意味着高性能，它的性能优势主要体现在高并发和高延迟的网络环境下。当连接数较少、并发程度较低或者网络传输速度较快时，NIO 的性能并不一定优于传统的 BIO 。&lt;/p>
&lt;h2 id="nio-核心组件">
 NIO 核心组件
 &lt;a class="anchor" href="#nio-%e6%a0%b8%e5%bf%83%e7%bb%84%e4%bb%b6">#&lt;/a>
&lt;/h2>
&lt;p>NIO 主要包括以下三个核心组件：&lt;/p>
&lt;ul>
&lt;li>&lt;mark>Buffer（缓冲区）&lt;/mark>：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。&lt;/li>
&lt;li>&lt;mark>Channel（通道）&lt;/mark>：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。&lt;/li>
&lt;li>&lt;mark>Selector（选择器）&lt;/mark>：允许一个线程处理多个 Channel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。&lt;/li>
&lt;/ul>
&lt;p>三者的关系如下图所示（暂时不理解没关系，后文会详细介绍）：&lt;/p></description></item></channel></rss>