<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/</link><description>Recent content on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>Java内存区域详解（重点）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/memory-area/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/memory-area/</guid><description>&lt;blockquote>
&lt;p>如果没有特殊说明，都是针对的是 HotSpot 虚拟机。&lt;/p>
&lt;p>本文基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》进行总结补充。&lt;/p>
&lt;p>常见面试题：&lt;/p>
&lt;ul>
&lt;li>介绍下 Java 内存区域（运行时数据区）&lt;/li>
&lt;li>Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）&lt;/li>
&lt;li>对象的访问定位的两种方式（句柄和直接指针两种方式）&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。&lt;/p>
&lt;h2 id="运行时数据区域">
 运行时数据区域
 &lt;a class="anchor" href="#%e8%bf%90%e8%a1%8c%e6%97%b6%e6%95%b0%e6%8d%ae%e5%8c%ba%e5%9f%9f">#&lt;/a>
&lt;/h2>
&lt;p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。&lt;/p>
&lt;p>JDK 1.8 和之前的版本略有不同，我们这里以 JDK 1.7 和 JDK 1.8 这两个版本为例介绍。&lt;/p>
&lt;p>&lt;strong>JDK 1.7&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.7.png" alt="Java 运行时数据区域（JDK1.7）" />&lt;/p>
&lt;p>&lt;strong>JDK 1.8&lt;/strong>：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png" alt="Java 运行时数据区域（JDK1.8 ）" />&lt;/p>
&lt;p>&lt;strong>线程私有的：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>程序计数器&lt;/li>
&lt;li>虚拟机栈&lt;/li>
&lt;li>本地方法栈&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>线程共享的：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>堆&lt;/li>
&lt;li>方法区&lt;/li>
&lt;li>直接内存 (非运行时数据区的一部分)&lt;/li>
&lt;/ul>
&lt;p>Java 虚拟机规范对于运行时数据区域的规定是相当宽松的。以堆为例：堆可以是连续空间，也可以不连续。堆的大小可以固定，也可以在运行时按需扩展 。虚拟机实现者可以使用任何垃圾回收算法管理堆，甚至完全不进行垃圾收集也是可以的。&lt;/p>
&lt;h3 id="程序计数器">
 程序计数器
 &lt;a class="anchor" href="#%e7%a8%8b%e5%ba%8f%e8%ae%a1%e6%95%b0%e5%99%a8">#&lt;/a>
&lt;/h3>
&lt;p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。&lt;/p></description></item><item><title>JDK监控和故障处理工具总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jdk-monitoring-and-troubleshooting-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jdk-monitoring-and-troubleshooting-tools/</guid><description>&lt;h2 id="jdk-命令行工具">
 JDK 命令行工具
 &lt;a class="anchor" href="#jdk-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7">#&lt;/a>
&lt;/h2>
&lt;p>这些命令在 JDK 安装目录下的 bin 目录下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>jps&lt;/code>&lt;/strong> (JVM Process Status）: 类似 UNIX 的 &lt;code>ps&lt;/code> 命令。用于查看所有 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息；&lt;/li>
&lt;li>&lt;strong>&lt;code>jstat&lt;/code>&lt;/strong>（JVM Statistics Monitoring Tool）: 用于收集 HotSpot 虚拟机各方面的运行数据;&lt;/li>
&lt;li>&lt;strong>&lt;code>jinfo&lt;/code>&lt;/strong> (Configuration Info for Java) : Configuration Info for Java,显示虚拟机配置信息;&lt;/li>
&lt;li>&lt;strong>&lt;code>jmap&lt;/code>&lt;/strong> (Memory Map for Java) : 生成堆转储快照;&lt;/li>
&lt;li>&lt;strong>&lt;code>jhat&lt;/code>&lt;/strong> (JVM Heap Dump Browser) : 用于分析 heapdump 文件，它会建立一个 HTTP/HTML 服务器，让用户可以在浏览器上查看分析结果。JDK9 移除了 jhat；&lt;/li>
&lt;li>&lt;strong>&lt;code>jstack&lt;/code>&lt;/strong> (Stack Trace for Java) : 生成虚拟机当前时刻的线程快照，线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合。&lt;/li>
&lt;/ul>
&lt;h3 id="jps查看所有-java-进程">
 &lt;code>jps&lt;/code>:查看所有 Java 进程
 &lt;a class="anchor" href="#jps%e6%9f%a5%e7%9c%8b%e6%89%80%e6%9c%89-java-%e8%bf%9b%e7%a8%8b">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>jps&lt;/code>(JVM Process Status) 命令类似 UNIX 的 &lt;code>ps&lt;/code> 命令。&lt;/p></description></item><item><title>JVM垃圾回收详解（重点）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-garbage-collection/</guid><description>&lt;blockquote>
&lt;p>如果没有特殊说明，都是针对的是 HotSpot 虚拟机。&lt;/p>
&lt;p>本文基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》进行总结补充。&lt;/p>
&lt;p>常见面试题：&lt;/p>
&lt;ul>
&lt;li>如何判断对象是否死亡（两种方法）。&lt;/li>
&lt;li>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。&lt;/li>
&lt;li>如何判断一个常量是废弃常量&lt;/li>
&lt;li>如何判断一个类是无用的类&lt;/li>
&lt;li>垃圾收集有哪些算法，各自的特点？&lt;/li>
&lt;li>HotSpot 为什么要分为新生代和老年代？&lt;/li>
&lt;li>常见的垃圾回收器有哪些？&lt;/li>
&lt;li>介绍一下 CMS,G1 收集器。&lt;/li>
&lt;li>Minor Gc 和 Full GC 有什么不同呢？&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>当需要排查各种内存溢出问题、当垃圾收集成为系统达到更高并发的瓶颈时，我们就需要对这些“自动化”的技术实施必要的监控和调节。&lt;/p>
&lt;h2 id="堆空间的基本结构">
 堆空间的基本结构
 &lt;a class="anchor" href="#%e5%a0%86%e7%a9%ba%e9%97%b4%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84">#&lt;/a>
&lt;/h2>
&lt;p>Java 的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java 自动内存管理最核心的功能是 &lt;strong>堆&lt;/strong> 内存中对象的分配与回收。&lt;/p>
&lt;p>Java 堆是垃圾收集器管理的主要区域，因此也被称作 &lt;strong>GC 堆（Garbage Collected Heap）&lt;/strong>。&lt;/p>
&lt;p>从垃圾回收的角度来说，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆被划分为了几个不同的区域，这样我们就可以根据各个区域的特点选择合适的垃圾收集算法。&lt;/p>
&lt;p>在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常分为下面三部分：&lt;/p>
&lt;ol>
&lt;li>新生代内存(Young Generation)&lt;/li>
&lt;li>老生代(Old Generation)&lt;/li>
&lt;li>永久代(Permanent Generation)&lt;/li>
&lt;/ol>
&lt;p>下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/hotspot-heap-structure.png" alt="堆内存结构" />&lt;/p></description></item><item><title>JVM线上问题排查和性能调优案例</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-in-action/</guid><description>&lt;p>JVM 线上问题排查和性能调优也是面试常问的一个问题，尤其是社招中大厂的面试。&lt;/p>
&lt;p>这篇文章，我会分享一些我看到的相关的案例。&lt;/p>
&lt;p>下面是正文。&lt;/p>
&lt;p>
&lt;a href="https://juejin.cn/post/7205141492264976445">一次线上 OOM 问题分析 - 艾小仙 - 2023&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>现象&lt;/strong>：线上某个服务有接口非常慢，通过监控链路查看发现，中间的 GAP 时间非常大，实际接口并没有消耗很多时间，并且在那段时间里有很多这样的请求。&lt;/li>
&lt;li>&lt;strong>分析&lt;/strong>：使用 JDK 自带的&lt;code>jvisualvm&lt;/code>分析 dump 文件(MAT 也能分析)。&lt;/li>
&lt;li>&lt;strong>建议&lt;/strong>：对于 SQL 语句，如果监测到没有&lt;code>where&lt;/code>条件的全表查询应该默认增加一个合适的&lt;code>limit&lt;/code>作为限制，防止这种问题拖垮整个系统&lt;/li>
&lt;li>&lt;strong>资料&lt;/strong>：
&lt;a href="https://heapdump.cn/article/3489050">实战案例：记一次 dump 文件分析历程转载 - HeapDump - 2022&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>
&lt;a href="https://www.cnblogs.com/mylibs/p/production-accident-0002.html">生产事故-记一次特殊的 OOM 排查 - 程语有云 - 2023&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>现象&lt;/strong>：网络没有问题的情况下，系统某开放接口从 2023 年 3 月 10 日 14 时许开始无法访问和使用。&lt;/li>
&lt;li>&lt;strong>临时解决办法&lt;/strong>：紧急回滚至上一稳定版本。&lt;/li>
&lt;li>&lt;strong>分析&lt;/strong>：使用 MAT (Memory Analyzer Tool)工具分析 dump 文件。&lt;/li>
&lt;li>&lt;strong>建议&lt;/strong>：正常情况下，&lt;code>-Xmn&lt;/code>参数（控制 Young 区的大小）总是应当小于&lt;code>-Xmx&lt;/code>参数（控制堆内存的最大大小），否则就会触发 OOM 错误。&lt;/li>
&lt;li>&lt;strong>资料&lt;/strong>：
&lt;a href="https://javaguide.cn/java/jvm/jvm-parameters-intro.html">最重要的 JVM 参数总结 - JavaGuide - 2023&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>
&lt;a href="https://juejin.cn/post/7078624931826794503">一次大量 JVM Native 内存泄露的排查分析（64M 问题） - 掘金 - 2022&lt;/a>&lt;/p></description></item><item><title>大白话带你认识 JVM</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-intro/</guid><description>&lt;blockquote>
&lt;p>来自
&lt;a href="https://juejin.im/user/5c2400afe51d45451758aa96">说出你的愿望吧丷&lt;/a>投稿，原文地址：
&lt;a href="https://juejin.im/post/5e1505d0f265da5d5d744050">https://juejin.im/post/5e1505d0f265da5d5d744050&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="前言">
 前言
 &lt;a class="anchor" href="#%e5%89%8d%e8%a8%80">#&lt;/a>
&lt;/h2>
&lt;p>如果在文中用词或者理解方面出现问题，欢迎指出。此文旨在提及而不深究，但会尽量效率地把知识点都抛出来&lt;/p>
&lt;h2 id="一jvm-的基本介绍">
 一、JVM 的基本介绍
 &lt;a class="anchor" href="#%e4%b8%80jvm-%e7%9a%84%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>JVM 是 Java Virtual Machine 的缩写，它是一个虚构出来的计算机，一种规范。通过在实际的计算机上仿真模拟各类计算机功能实现···&lt;/p>
&lt;p>好，其实抛开这么专业的句子不说，就知道 JVM 其实就类似于一台小电脑运行在 windows 或者 linux 这些操作系统环境下即可。它直接和操作系统进行交互，与硬件不直接交互，而操作系统可以帮我们完成和硬件进行交互的工作。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/infoq/da/da0380a04d9c04facd2add5f6dba06fa.png" alt="" />&lt;/p>
&lt;h3 id="11-java-文件是如何被运行的">
 1.1 Java 文件是如何被运行的
 &lt;a class="anchor" href="#11-java-%e6%96%87%e4%bb%b6%e6%98%af%e5%a6%82%e4%bd%95%e8%a2%ab%e8%bf%90%e8%a1%8c%e7%9a%84">#&lt;/a>
&lt;/h3>
&lt;p>比如我们现在写了一个 HelloWorld.java 好了，那这个 HelloWorld.java 抛开所有东西不谈，那是不是就类似于一个文本文件，只是这个文本文件它写的都是英文，而且有一定的缩进而已。&lt;/p>
&lt;p>那我们的 &lt;strong>JVM&lt;/strong> 是不认识文本文件的，所以它需要一个 &lt;strong>编译&lt;/strong> ，让其成为一个它会读二进制文件的 &lt;strong>HelloWorld.class&lt;/strong>&lt;/p>
&lt;h4 id="-类加载器">
 ① 类加载器
 &lt;a class="anchor" href="#-%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8">#&lt;/a>
&lt;/h4>
&lt;p>如果 &lt;strong>JVM&lt;/strong> 想要执行这个 &lt;strong>.class&lt;/strong> 文件，我们需要将其装进一个 &lt;strong>类加载器&lt;/strong> 中，它就像一个搬运工一样，会把所有的 &lt;strong>.class&lt;/strong> 文件全部搬进 JVM 里面来。&lt;/p>
&lt;p>&lt;img src="https://static001.geekbang.org/infoq/2f/2f012fde94376f43a25dbe1dd07e0dd8.png" alt="" />&lt;/p>
&lt;h4 id="-方法区">
 ② 方法区
 &lt;a class="anchor" href="#-%e6%96%b9%e6%b3%95%e5%8c%ba">#&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>方法区&lt;/strong> 是用于存放类似于元数据信息方面的数据的，比如类信息，常量，静态变量，编译后代码···等&lt;/p>
&lt;p>类加载器将 .class 文件搬过来就是先丢到这一块上&lt;/p>
&lt;h4 id="-堆">
 ③ 堆
 &lt;a class="anchor" href="#-%e5%a0%86">#&lt;/a>
&lt;/h4>
&lt;p>&lt;strong>堆&lt;/strong> 主要放了一些存储的数据，比如对象实例，数组···等，它和方法区都同属于 &lt;strong>线程共享区域&lt;/strong> 。也就是说它们都是 &lt;strong>线程不安全&lt;/strong> 的&lt;/p></description></item><item><title>类加载过程详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/class-loading-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/class-loading-process/</guid><description>&lt;h2 id="类的生命周期">
 类的生命周期
 &lt;a class="anchor" href="#%e7%b1%bb%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">#&lt;/a>
&lt;/h2>
&lt;p>类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）。其中，验证、准备和解析这三个阶段可以统称为连接（Linking）。&lt;/p>
&lt;p>这 7 个阶段的顺序如下图所示：&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/lifecycle-of-a-class.png" alt="一个类的完整生命周期" />&lt;/p>
&lt;h2 id="类加载过程">
 类加载过程
 &lt;a class="anchor" href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？&lt;/strong>&lt;/p>
&lt;p>系统加载 Class 类型的文件主要三步：&lt;strong>加载-&amp;gt;连接-&amp;gt;初始化&lt;/strong>。连接过程又可分为三步：&lt;strong>验证-&amp;gt;准备-&amp;gt;解析&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/class-loading-procedure.png" alt="类加载过程" />&lt;/p>
&lt;p>详见 
&lt;a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3" title="Java Virtual Machine Specification - 5.3. Creation and Loading">Java Virtual Machine Specification - 5.3. Creation and Loading&lt;/a>。&lt;/p>
&lt;h3 id="加载">
 加载
 &lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bd">#&lt;/a>
&lt;/h3>
&lt;p>类加载过程的第一步，主要完成下面 3 件事情：&lt;/p>
&lt;ol>
&lt;li>通过全类名获取定义此类的二进制字节流。&lt;/li>
&lt;li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构。&lt;/li>
&lt;li>在内存中生成一个代表该类的 &lt;code>Class&lt;/code> 对象，作为方法区这些数据的访问入口。&lt;/li>
&lt;/ol>
&lt;p>虚拟机规范上面这 3 点并不具体，因此是非常灵活的。比如：&amp;ldquo;通过全类名获取定义此类的二进制字节流&amp;rdquo; 并没有指明具体从哪里获取（ &lt;code>ZIP&lt;/code>、 &lt;code>JAR&lt;/code>、&lt;code>EAR&lt;/code>、&lt;code>WAR&lt;/code>、网络、动态代理技术运行时动态生成、其他文件生成比如 &lt;code>JSP&lt;/code>&amp;hellip;）、怎样获取。&lt;/p>
&lt;p>加载这一步主要是通过我们后面要讲到的 &lt;strong>类加载器&lt;/strong> 完成的。类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载由 &lt;strong>双亲委派模型&lt;/strong> 决定（不过，我们也能打破由双亲委派模型）。&lt;/p>
&lt;blockquote>
&lt;p>类加载器、双亲委派模型也是非常重要的知识点，这部分内容在
&lt;a href="https://javaguide.cn/java/jvm/classloader.html" title="类加载器详解">类加载器详解&lt;/a>这篇文章中有详细介绍到。阅读本篇文章的时候，大家知道有这么个东西就可以了。&lt;/p>
&lt;/blockquote>
&lt;p>每个 Java 类都有一个引用指向加载它的 &lt;code>ClassLoader&lt;/code>。不过，数组类不是通过 &lt;code>ClassLoader&lt;/code> 创建的，而是 JVM 在需要的时候自动创建的，数组类通过&lt;code>getClassLoader()&lt;/code>方法获取 &lt;code>ClassLoader&lt;/code> 的时候和该数组的元素类型的 &lt;code>ClassLoader&lt;/code> 是一致的。&lt;/p></description></item><item><title>类加载器详解（重点）</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/classloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/classloader/</guid><description>&lt;h2 id="回顾一下类加载过程">
 回顾一下类加载过程
 &lt;a class="anchor" href="#%e5%9b%9e%e9%a1%be%e4%b8%80%e4%b8%8b%e7%b1%bb%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;p>开始介绍类加载器和双亲委派模型之前，简单回顾一下类加载过程。&lt;/p>
&lt;ul>
&lt;li>类加载过程：&lt;strong>加载-&amp;gt;连接-&amp;gt;初始化&lt;/strong>。&lt;/li>
&lt;li>连接过程又可分为三步：&lt;strong>验证-&amp;gt;准备-&amp;gt;解析&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/jvm/class-loading-procedure.png" alt="类加载过程" />&lt;/p>
&lt;p>加载是类加载过程的第一步，主要完成下面 3 件事情：&lt;/p>
&lt;ol>
&lt;li>通过全类名获取定义此类的二进制字节流&lt;/li>
&lt;li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构&lt;/li>
&lt;li>在内存中生成一个代表该类的 &lt;code>Class&lt;/code> 对象，作为方法区这些数据的访问入口&lt;/li>
&lt;/ol>
&lt;h2 id="类加载器">
 类加载器
 &lt;a class="anchor" href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8">#&lt;/a>
&lt;/h2>
&lt;h3 id="类加载器介绍">
 类加载器介绍
 &lt;a class="anchor" href="#%e7%b1%bb%e5%8a%a0%e8%bd%bd%e5%99%a8%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h3>
&lt;p>类加载器从 JDK 1.0 就出现了，最初只是为了满足 Java Applet（已经被淘汰） 的需要。后来，慢慢成为 Java 程序中的一个重要组成部分，赋予了 Java 类可以被动态加载到 JVM 中并执行的能力。&lt;/p>
&lt;p>根据官方 API 文档的介绍：&lt;/p>
&lt;blockquote>
&lt;p>A class loader is an object that is responsible for loading classes. The class ClassLoader is an abstract class. Given the binary name of a class, a class loader should attempt to locate or generate data that constitutes a definition for the class. A typical strategy is to transform the name into a file name and then read a &amp;ldquo;class file&amp;rdquo; of that name from a file system.&lt;/p></description></item><item><title>类文件结构详解</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/class-file-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/class-file-structure/</guid><description>&lt;h2 id="回顾一下字节码">
 回顾一下字节码
 &lt;a class="anchor" href="#%e5%9b%9e%e9%a1%be%e4%b8%80%e4%b8%8b%e5%ad%97%e8%8a%82%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;p>在 Java 中，JVM 可以理解的代码就叫做&lt;code>字节码&lt;/code>（即扩展名为 &lt;code>.class&lt;/code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。&lt;/p>
&lt;p>Clojure（Lisp 语言的一种方言）、Groovy、Scala、JRuby、Kotlin 等语言都是运行在 Java 虚拟机之上。下图展示了不同的语言被不同的编译器编译成&lt;code>.class&lt;/code>文件最终运行在 Java 虚拟机之上。&lt;code>.class&lt;/code>文件的二进制格式可以使用 
&lt;a href="https://www.x-ways.net/winhex/">WinHex&lt;/a> 查看。&lt;/p>
&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/java/basis/java-virtual-machine-program-language-os.png" alt="运行在 Java 虚拟机之上的编程语言" />&lt;/p>
&lt;p>可以说&lt;code>.class&lt;/code>文件是不同的语言在 Java 虚拟机之间的重要桥梁，同时也是支持 Java 跨平台很重要的一个原因。&lt;/p>
&lt;h2 id="class-文件结构总结">
 Class 文件结构总结
 &lt;a class="anchor" href="#class-%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84%e6%80%bb%e7%bb%93">#&lt;/a>
&lt;/h2>
&lt;p>根据 Java 虚拟机规范，Class 文件通过 &lt;code>ClassFile&lt;/code> 定义，有点类似 C 语言的结构体。&lt;/p>
&lt;p>&lt;code>ClassFile&lt;/code> 的结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>ClassFile {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u4 magic; &lt;span style="color:#75715e">//Class 文件的标志&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 minor_version;&lt;span style="color:#75715e">//Class 的小版本号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 major_version;&lt;span style="color:#75715e">//Class 的大版本号&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 constant_pool_count;&lt;span style="color:#75715e">//常量池的数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cp_info constant_pool&lt;span style="color:#f92672">[&lt;/span>constant_pool_count&lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#75715e">//常量池&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 access_flags;&lt;span style="color:#75715e">//Class 的访问标记&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 this_class;&lt;span style="color:#75715e">//当前类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 super_class;&lt;span style="color:#75715e">//父类&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 interfaces_count;&lt;span style="color:#75715e">//接口数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 interfaces&lt;span style="color:#f92672">[&lt;/span>interfaces_count&lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#75715e">//一个类可以实现多个接口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 fields_count;&lt;span style="color:#75715e">//字段数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field_info fields&lt;span style="color:#f92672">[&lt;/span>fields_count&lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#75715e">//一个类可以有多个字段&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 methods_count;&lt;span style="color:#75715e">//方法数量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method_info methods&lt;span style="color:#f92672">[&lt;/span>methods_count&lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#75715e">//一个类可以有个多个方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> u2 attributes_count;&lt;span style="color:#75715e">//此类的属性表中的属性数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attribute_info attributes&lt;span style="color:#f92672">[&lt;/span>attributes_count&lt;span style="color:#f92672">]&lt;/span>;&lt;span style="color:#75715e">//属性表集合&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过分析 &lt;code>ClassFile&lt;/code> 的内容，我们便可以知道 class 文件的组成。&lt;/p></description></item><item><title>最重要的JVM参数总结</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-parameters-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/jvm/jvm-parameters-intro/</guid><description>&lt;blockquote>
&lt;p>本文由 JavaGuide 翻译自 
&lt;a href="https://www.baeldung.com/jvm-parameters">https://www.baeldung.com/jvm-parameters&lt;/a>，并对文章进行了大量的完善补充。&lt;/p>
&lt;p>JDK 版本：1.8&lt;/p>
&lt;/blockquote>
&lt;h2 id="1概述">
 1.概述
 &lt;a class="anchor" href="#1%e6%a6%82%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;p>在本篇文章中，你将掌握最常用的 JVM 参数配置。&lt;/p>
&lt;h2 id="2堆内存相关">
 2.堆内存相关
 &lt;a class="anchor" href="#2%e5%a0%86%e5%86%85%e5%ad%98%e7%9b%b8%e5%85%b3">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。&lt;strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="./pictures/%e5%86%85%e5%ad%98%e5%8c%ba%e5%9f%9f%e5%b8%b8%e8%a7%81%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0.png" alt="内存区域常见配置参数" />&lt;/p>
&lt;h3 id="21显式指定堆内存xms和-xmx">
 2.1.显式指定堆内存&lt;code>–Xms&lt;/code>和&lt;code>-Xmx&lt;/code>
 &lt;a class="anchor" href="#21%e6%98%be%e5%bc%8f%e6%8c%87%e5%ae%9a%e5%a0%86%e5%86%85%e5%ad%98xms%e5%92%8c-xmx">#&lt;/a>
&lt;/h3>
&lt;p>与性能有关的最常见实践之一是根据应用程序要求初始化堆内存。如果我们需要指定最小和最大堆大小（推荐显示指定大小），以下参数可以帮助你实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-Xms&amp;lt;heap size&amp;gt;&lt;span style="color:#f92672">[&lt;/span>unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-Xmx&amp;lt;heap size&amp;gt;&lt;span style="color:#f92672">[&lt;/span>unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>heap size&lt;/strong> 表示要初始化内存的具体大小。&lt;/li>
&lt;li>&lt;strong>unit&lt;/strong> 表示要初始化内存的单位。单位为 &lt;strong>&lt;em>“ g”&lt;/em>&lt;/strong> (GB)、&lt;strong>&lt;em>“ m”&lt;/em>&lt;/strong>（MB）、&lt;strong>&lt;em>“ k”&lt;/em>&lt;/strong>（KB）。&lt;/li>
&lt;/ul>
&lt;p>举个栗子 🌰，如果我们要为 JVM 分配最小 2 GB 和最大 5 GB 的堆内存大小，我们的参数应该这样来写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-Xms2G -Xmx5G
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22显式新生代内存young-generation">
 2.2.显式新生代内存(Young Generation)
 &lt;a class="anchor" href="#22%e6%98%be%e5%bc%8f%e6%96%b0%e7%94%9f%e4%bb%a3%e5%86%85%e5%ad%98young-generation">#&lt;/a>
&lt;/h3>
&lt;p>根据
&lt;a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html">Oracle 官方文档&lt;/a>，在堆总可用内存配置完成之后，第二大影响因素是为 &lt;code>Young Generation&lt;/code> 在堆内存所占的比例。默认情况下，YG 的最小大小为 1310 &lt;em>MB&lt;/em>，最大大小为 &lt;em>无限制&lt;/em>。&lt;/p>
&lt;p>一共有两种指定 新生代内存(Young Generation)大小的方法：&lt;/p>
&lt;p>&lt;strong>1.通过&lt;code>-XX:NewSize&lt;/code>和&lt;code>-XX:MaxNewSize&lt;/code>指定&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-XX:NewSize&lt;span style="color:#f92672">=&lt;/span>&amp;lt;young size&amp;gt;&lt;span style="color:#f92672">[&lt;/span>unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-XX:MaxNewSize&lt;span style="color:#f92672">=&lt;/span>&amp;lt;young size&amp;gt;&lt;span style="color:#f92672">[&lt;/span>unit&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>举个栗子 🌰，如果我们要为 新生代分配 最小 256m 的内存，最大 1024m 的内存我们的参数应该这样来写：&lt;/p></description></item></channel></rss>