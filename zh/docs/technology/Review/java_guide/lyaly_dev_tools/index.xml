<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发工具 on 随记</title><link>https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/</link><description>Recent content in 开发工具 on 随记</description><generator>Hugo</generator><language>zh</language><lastBuildDate>Tue, 07 Feb 2023 16:14:19 +0000</lastBuildDate><atom:link href="https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/index.xml" rel="self" type="application/rss+xml"/><item><title>git</title><link>https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/git/</link><pubDate>Tue, 07 Feb 2023 16:14:19 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/git/</guid><description>&lt;blockquote>
&lt;p>转载自https://github.com/Snailclimb/JavaGuide（添加小部分笔记）感谢作者!&lt;/p>
&lt;/blockquote>
&lt;h2 id="版本控制">
 版本控制
 &lt;a class="anchor" href="#%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h2>
&lt;h3 id="什么是版本控制">
 什么是版本控制
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>版本控制&lt;/strong>是一种&lt;strong>记录一个&lt;/strong>或&lt;strong>若干文件内容变化&lt;/strong>，以便&lt;strong>将来查阅特定版本修订情况&lt;/strong>的系统。 除了&lt;strong>项目源代码&lt;/strong>，你还可以对&lt;strong>任何类型的文件&lt;/strong>进行版本控制。&lt;/p>
&lt;h3 id="为什么要版本控制">
 为什么要版本控制
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6">#&lt;/a>
&lt;/h3>
&lt;p>有了它你就可以将某个文件&lt;strong>回溯到之前的状态&lt;/strong>，甚至将&lt;strong>整个项目都回退到过去某个时间点&lt;/strong>的状态，你可以&lt;strong>比较&lt;/strong>文件的变化细节，&lt;strong>查出最后&lt;/strong>是谁修改了哪个地方，从而&lt;strong>找出导致怪异问题&lt;/strong>出现的原因，又是&lt;strong>谁在何时报告了&lt;/strong>某个功能缺陷等等。&lt;/p>
&lt;h3 id="本地版本控制系统">
 本地版本控制系统
 &lt;a class="anchor" href="#%e6%9c%ac%e5%9c%b0%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>许多人习惯用&lt;strong>复制整个项目&lt;/strong>目录的方式来&lt;strong>保存不同的版本&lt;/strong>，或许还会&lt;strong>改名加上备份时间&lt;/strong>以示区别。 这么做唯一的好处就是&lt;strong>简单&lt;/strong>，但是特别容&lt;strong>易犯错&lt;/strong>。 有时候会&lt;strong>混淆&lt;/strong>所在的工作目录，一不小心会&lt;strong>写错&lt;/strong>文件或者&lt;strong>覆盖&lt;/strong>意想外的文件。&lt;/p>
&lt;p>为了解决这个问题，人们很久以前就开发了许多种&lt;strong>本地版本控制&lt;/strong>系统，大多都是采用某种&lt;strong>简单的数据库&lt;/strong>来&lt;strong>记录文件的历次更新&lt;/strong>差异。&lt;/p>
&lt;p>&lt;img src="img/ly-20241212142006392.png" alt="image.png" />&lt;/p>
&lt;h3 id="集中化的版本控制系统">
 集中化的版本控制系统
 &lt;a class="anchor" href="#%e9%9b%86%e4%b8%ad%e5%8c%96%e7%9a%84%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>接下来人们又遇到一个问题，如何让在&lt;strong>不同系统上的开发者协同&lt;/strong>工作？ 于是，&lt;strong>集中化的版本控制&lt;/strong>系统（&lt;strong>Centralized Version Control Systems&lt;/strong>，简称 &lt;strong>CVCS&lt;/strong>）应运而生。&lt;/p>
&lt;p>集中化的版本控制系统都有一个&lt;strong>单一的集中管理的服务器&lt;/strong>，&lt;strong>保存所有文件的修订版本&lt;/strong>，而协同工作的人们都通过客户端&lt;strong>连到这台服务器&lt;/strong>，取出&lt;strong>最新&lt;/strong>的文件或者&lt;strong>提交更新&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="img/ly-20241212142006663.png" alt="image.png" />&lt;/p>
&lt;p>这么做虽然解决了本地版本控制系统无法让在不同系统上的开发者协同工作的诟病，但也还是存在下面的问题：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>单点故障：&lt;/strong> &lt;strong>中央服务器宕机&lt;/strong>，则其他人无法使用；如果中心数据库磁盘损坏又没有进行备份，你将丢失所有数据。本地版本控制系统也存在类似问题，只要整个项目的历史记录被&lt;strong>保存在单一&lt;/strong>位置，就有&lt;strong>丢失所有历史更新记录&lt;/strong>的风险。&lt;/li>
&lt;li>&lt;strong>必须联网才能工作：&lt;/strong> &lt;strong>受网络&lt;/strong>状况、带宽影响。&lt;/li>
&lt;/ul>
&lt;h3 id="分布式版本控制系统">
 分布式版本控制系统
 &lt;a class="anchor" href="#%e5%88%86%e5%b8%83%e5%bc%8f%e7%89%88%e6%9c%ac%e6%8e%a7%e5%88%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h3>
&lt;p>于是分布式版本控制系统（&lt;strong>Distributed Version Control System&lt;/strong>，简称 &lt;strong>DVCS&lt;/strong>）面世了。 Git 就是一个典型的分布式版本控制系统。&lt;/p>
&lt;p>这类系统，客户端并&lt;strong>不只提取最新版本的文件快照&lt;/strong>，而是把&lt;strong>代码仓库完整地镜像&lt;/strong>下来。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用&lt;strong>任何一个镜像出来的本地仓库&lt;/strong>恢复。 因为每一次的克隆操作，实际上都是一次对&lt;strong>代码仓库的完整备份&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="img/ly-20241212142006803.png" alt="image.png" />&lt;/p>
&lt;p>分布式版本控制系统可以&lt;strong>不用联网就可以工作&lt;/strong>，因为每个人的电脑上都是完整的版本库，当你修改了某个文件后，你只需要&lt;strong>将自己的修改推送给别人&lt;/strong>就可以了。但是，在实际使用分布式版本控制系统的时候，很少会&lt;strong>直接进行推送&lt;/strong>修改，而是&lt;strong>使用一台充当“中央服务器”&lt;strong>的东西。这个服务器的作用仅仅是用来&lt;/strong>方便“交换”大家的修改&lt;/strong>，没有它大家也一样干活，只是交换修改不方便而已。&lt;/p>
&lt;p>分布式版本控制系统的优势不单是不必联网这么简单，后面我们还会看到 Git 极其&lt;strong>强大的分支管理&lt;/strong>等功能。&lt;/p>
&lt;h2 id="认识-git">
 认识 Git
 &lt;a class="anchor" href="#%e8%ae%a4%e8%af%86-git">#&lt;/a>
&lt;/h2>
&lt;h3 id="git-简史">
 Git 简史
 &lt;a class="anchor" href="#git-%e7%ae%80%e5%8f%b2">#&lt;/a>
&lt;/h3>
&lt;p>Linux 内核项目组当时使用分布式版本控制系统 &lt;strong>BitKeeper&lt;/strong> 来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 Linux 开源社区（特别是 Linux 的缔造者 &lt;strong>Linus Torvalds&lt;/strong>）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。&lt;/p></description></item><item><title>maven</title><link>https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/maven/</link><pubDate>Tue, 07 Feb 2023 13:28:19 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Review/java_guide/lyaly_dev_tools/maven/</guid><description>&lt;blockquote>
&lt;p>转载自https://github.com/Snailclimb/JavaGuide（添加小部分笔记）感谢作者!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>这部分内容主要根据 Maven 官方文档整理，做了对应的删减，主要保留比较重要的部分，不涉及实战，主要是一些重要概念的介绍。&lt;/p>
&lt;/blockquote>
&lt;h2 id="maven-介绍">
 Maven 介绍
 &lt;a class="anchor" href="#maven-%e4%bb%8b%e7%bb%8d">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/apache/maven">Maven&lt;/a> 官方文档是这样介绍的 Maven 的：&lt;/p>
&lt;blockquote>
&lt;p>Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project&amp;rsquo;s build, reporting and documentation from a central piece of information.&lt;/p>
&lt;p>Apache Maven 的本质是一个&lt;strong>软件项目管理&lt;/strong>和&lt;strong>理解&lt;/strong>工具。基于&lt;strong>项目对象模型&lt;/strong> (&lt;strong>Project Object Model&lt;/strong>，POM) 的概念，Maven 可以从&lt;strong>一条中心信息&lt;/strong> &lt;strong>管理&lt;/strong>项目的&lt;strong>构建&lt;/strong>、&lt;strong>报告&lt;/strong>和&lt;strong>文档&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>什么是 POM？&lt;/strong> 每一个 Maven 工程都有一个 &lt;strong>&lt;code>pom.xml&lt;/code>&lt;/strong> 文件，位于根目录中，包含项目&lt;strong>构建生命周期&lt;/strong>的详细信息。通过 &lt;code>pom.xml&lt;/code> 文件，我们可以定义&lt;strong>项目&lt;/strong>的&lt;strong>坐标&lt;/strong>、&lt;strong>项目依赖&lt;/strong>、&lt;strong>项目信息&lt;/strong>、&lt;strong>插件信息&lt;/strong>等等配置。&lt;/p>
&lt;p>对于开发者来说，Maven 的主要作用主要有 3 个：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>项目构建&lt;/strong> ：提供&lt;strong>标准&lt;/strong>的、&lt;strong>跨平台&lt;/strong>的&lt;strong>自动化项目构建&lt;/strong>方式。&lt;/li>
&lt;li>&lt;strong>依赖管理&lt;/strong> ：&lt;strong>方便快捷&lt;/strong>的&lt;strong>管理项目依赖的资源&lt;/strong>（&lt;strong>jar 包&lt;/strong>），避免&lt;strong>资源间的版本冲突&lt;/strong>问题。&lt;/li>
&lt;li>&lt;strong>统一开发结构&lt;/strong> ：提供&lt;strong>标准&lt;/strong>的、&lt;strong>统一&lt;/strong>的&lt;strong>项目结构&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>关于 Maven 的基本使用这里就不介绍了，建议看看官网的 5 分钟上手 Maven 的教程：&lt;a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven in 5 Minutes&lt;/a> 。&lt;/p></description></item></channel></rss>