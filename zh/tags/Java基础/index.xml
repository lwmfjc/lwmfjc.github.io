<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java基础 on 随记</title><link>https://lwmfjc.github.io/zh/tags/Java%E5%9F%BA%E7%A1%80/</link><description>Recent content in Java基础 on 随记</description><generator>Hugo</generator><language>zh</language><atom:link href="https://lwmfjc.github.io/zh/tags/Java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>Java基础常见面试题总结(上)</title><link>https://lwmfjc.github.io/zh/docs/technology/Interview/java/basis/java-basic-questions-01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lwmfjc.github.io/zh/docs/technology/Interview/java/basis/java-basic-questions-01/</guid><description>&lt;h2 id="基础概念与常识">
 基础概念与常识
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5%e4%b8%8e%e5%b8%b8%e8%af%86">#&lt;/a>
&lt;/h2>
&lt;h3 id="java-语言有哪些特点">
 Java 语言有哪些特点?
 &lt;a class="anchor" href="#java-%e8%af%ad%e8%a8%80%e6%9c%89%e5%93%aa%e4%ba%9b%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>简单易学（语法简单，上手容易）；&lt;/li>
&lt;li>面向对象（&lt;strong>封装，继承，多态&lt;/strong>）；&lt;/li>
&lt;li>&lt;strong>平台无关&lt;/strong>性（ Java 虚拟机实现平台无关性）；&lt;/li>
&lt;li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；&lt;/li>
&lt;li>可靠性（具备异常处理和自动内存管理机制）；&lt;/li>
&lt;li>安全性（Java 语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）；&lt;/li>
&lt;li>高效性（通过 Just In Time 编译器等技术的优化，Java 语言的运行效率还是非常不错的）；&lt;/li>
&lt;li>支持网络编程并且很方便；&lt;/li>
&lt;li>编译与解释并存；&lt;/li>
&lt;li>……&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>🐛 修正（参见：&lt;a href="https://github.com/Snailclimb/JavaGuide/issues/544">issue#544&lt;/a>）&lt;/strong>：C&lt;ins>11 开始（2011 年的时候）,C&lt;/ins>就引入了多线程库，在 windows、linux、macos 都可以使用&lt;code>std::thread&lt;/code>和&lt;code>std::async&lt;/code>来创建线程。参考链接：&lt;a href="http://www.cplusplus.com/reference/thread/thread/?kw=thread">http://www.cplusplus.com/reference/thread/thread/?kw=thread&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>🌈 拓展一下：&lt;/p>
&lt;p>“Write Once, Run Anywhere（一次编写，随处运行）”这句宣传口号，真心经典，流传了好多年！以至于，直到今天，依然有很多人觉得跨平台是 Java 语言最大的优势。实际上，跨平台已经不是 Java 最大的卖点了，各种 JDK 新特性也不是。目前市面上虚拟化技术已经非常成熟，比如你&lt;strong>通过 Docker 就很容易实现跨平台&lt;/strong>了。在我看来，&lt;strong>Java 强大的生态&lt;/strong>才是！&lt;/p>
&lt;h3 id="java-se-vs-java-ee">
 Java SE vs Java EE
 &lt;a class="anchor" href="#java-se-vs-java-ee">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Java &lt;strong>SE&lt;/strong>（Java Platform，Standard Edition）: &lt;strong>Java 平台标准版&lt;/strong>，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的&lt;strong>核心类库以及虚拟机&lt;/strong>等核心组件。Java SE 可以用于构建&lt;strong>桌面应用程序或简单的服务器&lt;/strong>应用程序。&lt;/li>
&lt;li>Java EE（Java Platform, Enterprise Edition ）：Java 平台企业版，建立在 Java SE 的基础上，包含了支持&lt;strong>企业级应用程序开发和部署的标准和规范&lt;/strong>（比如 &lt;strong>Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS&lt;/strong>）。 Java EE 可以用于构建&lt;strong>分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发&lt;strong>桌面应用程序或简单的服务器&lt;/strong>应用程序，Java EE 更适合开发&lt;strong>复杂的企业级应用程序或 Web 应用程序&lt;/strong>。&lt;/p></description></item></channel></rss>