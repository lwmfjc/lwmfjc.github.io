<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>20220416</title>
    <url>/2022/04/16/life/20220416/</url>
    <content><![CDATA[<p>最近几天吃饭，经常听到一首很嗨的歌。旋律很轻快，其实本来也就一听而过，可能是耳闻目染次数多了，好奇心上来了，查了下歌词。</p>
<p>听这首歌期间我居然联想了很多，果然是老emo了。不知道怎么回事，我这种与世无争的心态，听完后居然也让我幻想了一下这歌描述的爱情模样。我又突然想到，如今社会上离婚率居高不下，也许与网络信息的传输有密切关联。如果是古代，嫁错人或者娶错人，大家也都都认了，有什么小打小闹都互相包含。而如今，生活压力不断增大，加上网络上爆炸式（至少效果是）的宣传爱情，对比显著，很让人一着魔就陷进去，就摒弃几年甚至十几年的夫妻之情，去追求所谓的真爱、自由。</p>
<p>每个人对自己的过往，或多或少都会不甘。如果这种不甘自己没有办法化解，那么就会在某一刻爆发。每个人都应该，也必定会为自己曾经的所作所为负责。不要懵懵懂懂地进入(现代)婚姻，这样对自己和它人都极其不负责。
爆炸式的信息接收会激发你所有的冲动与不甘。</p>
<iframe src="//player.bilibili.com/player.html?aid=211411097&amp;bvid=BV1aa411y7u9&amp;cid=505755578&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2021/12/24/test/test1/</url>
    <content><![CDATA[<p>随便加点内容，注意，上面空了一行</p>
<h3 id="测试">测试</h3>
<h2 id="图片测试">图片测试</h2>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2021/12/24/test/test2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hello=<span class="string">&quot;ly&quot;</span>; </span><br><span class="line">System.out.println(<span class="string">&quot;Helo World&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>2021年最后一个周日</title>
    <url>/2021/12/26/life/20211226/20121226/</url>
    <content><![CDATA[<h2 id="装宽带">装宽带</h2>
<p>太晚了，不想写了-
-。简单写几个字吧，满心期待的装了宽带，但是并没有我想像的那么快乐。反而打了两把游戏更难过了，难过的是浪费了时间也什么都没得到
## 图书馆<br />
下午跑去图书馆收获倒是挺多，可能是我不太熟悉，对于书架上的书没有太大的感触。但是环境真的太棒了，很安静，感觉多发出点声音我都会觉得不好意思，大家都很自觉。也许对经常网上都能找到电子书看(程序员的事怎么能是盗呢)的人帮助不会特别大，但对于很大一部分人绝对帮助特别大，包括学生、老年人、还有一些文学类书籍阅读者等等(我一直认为文学类的一定要纸质的看起来才有味道~)<br />
当然，从图书馆回来我又打了两把游戏 o_O，dota2 yyds!!
打完日常卸载，哈哈</p>
<p>每次去图书馆我都会想起那句话，<code>"一个国家为其年轻人所提供的教育，决定了这个国家未来的样子"</code>。<br />
希望能多办点这样的图书馆，大家都能少点浮躁，多点沉淀；虽然我并不是热心公益人士，但我还是希望咱们国家的人民都生活的越来越好。不要辜负我们曾经受过的苦难。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>git使用ssh连不上</title>
    <url>/2022/04/22/problem/git/01/</url>
    <content><![CDATA[<ul>
<li><p>处理方式 在系统的host文件中，添加ip指定</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.4 github.com</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/01a/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>正确文件结构</title>
    <url>/2021/12/27/problem/hugo/correct/</url>
    <content><![CDATA[<p>正确文件结构，测试下面图片能显示<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876199450.png" /></p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>problem_temp2</title>
    <url>/2021/12/27/problem/hugo/indexa/</url>
    <content><![CDATA[<p>02.a<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/b.png" /></p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/p1/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
  </entry>
  <entry>
    <title>算法红皮书 1.1.1-1.1.5</title>
    <url>/2022/02/21/study/algorithm/algorithhms_4th/1.1.1-1.1.5/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="java程序的基本结构">Java程序的基本结构</h3>
<ul>
<li>本书学习算法的方法：用Java编程语言编写的程序来实现算法(相比用自然语言有很多优势)</li>
<li>劣势：编程语言特定，使算法的思想和实现细节变得困难(所以本书尽量使用大部分语言都必须的语法)</li>
<li>把描述和实现算法所用到的语言特性、软件库和操作系统特定总称为基础编程模型</li>
<li>Java程序的基本结构
<ul>
<li><p>一段Java程序或者是一个静态方法库，或者定义了一个数据类型，需要用到的语法</p>
<ul>
<li>原始数据类型(在计算机中精确地定义整数浮点数布尔值等)</li>
<li>语句(创建变量并赋值，控制运行流程或引发副作用来进行计算，包括声明、赋值、条件、循环、调用和返回)</li>
<li>数组(多个同种数据类型值的集合)</li>
<li>静态方法(封装并重用代码)</li>
<li>字符串(一连串的字符，内置一些对他们的操作)</li>
<li>标准输入/输出(是程序与外界联系的桥梁)</li>
<li>数据抽象(数据抽象封装和重用代码，可以定义非原始数据类型，进而面向对象编程)</li>
</ul></li>
<li><p>把这种输入命令执行程序的环境称为 虚拟终端</p></li>
<li><p>要执行一条Java程序，需要先用javac命令编译，然后用java命令运行，比如下面的文件，需要使用命令</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac BinarySearch.java</span><br><span class="line">java BinarySearch </span><br></pre></td></tr></table></figure></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434867646.png" /><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434894479.png" /></p></li>
</ul></li>
</ul>
<h3 id="原始数据类型与表达式">原始数据类型与表达式</h3>
<ul>
<li>数据类型就是一组数据和其所能进行的操作的集合</li>
<li>Java中最基础的数据类型(整型int，双精度实数类型double,布尔值boolean,字符型char)</li>
<li>Java程序控制用标识符命名的变量</li>
<li>对于原始类型，用标识符引用变量，+-*/指定操作，用字面量来表示值(如1或3.14),用表达式表示对值的操作(
表达式:(x+2.334)/2 )</li>
<li>只要能够指定值域和在此值域上的操作，就能定义一个数据类型(很像数学上函数的定义)</li>
<li>+-*/是被重载过的</li>
<li>运算产生的数据的数据类型和参与运算的数据的数据类型是相同的(5/3=1,5.0/3.0=1.6667等)</li>
<li>如下图(图歪了亿点点..) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645435436655.png" /><br />
</li>
<li>表达式</li>
<li>表达式具有优先级，Java使用的是中缀表达式(一个字面量紧接运算符，然后是另一个字面量)。逻辑运算中优先级
! &amp;&amp; || ,运算符中 * / % 高于+ -
。括号能改变这些规则。代码中尽量使用括号消除对优先级的依赖</li>
<li>类型转换
<ul>
<li>数值会自动提升为高级数据类型，如1+2.5 1会被先转为double
1.0，值也为double的3.5</li>
<li>强转(把类型名放在括号里讲其转换为括号中的类型)
讲高级数据类型转为低级可能会导致精度的缺失，尽量少使用</li>
</ul></li>
<li>比较
<ul>
<li>==、!=、&lt;、&lt;=、&gt;、&gt;=，这些运算符称为
混合类型运算符，因为结果是布尔型而不是参与比较的数据类型</li>
<li>结果是布尔型的表达式称为布尔表达式</li>
</ul></li>
<li>其他原始类型(int为32位，double为64位)
<ul>
<li>long,64位整数</li>
<li>short,16位整数</li>
<li>char,16位字符</li>
<li>byte,8位整数</li>
<li>32位单精度实数,float ### 语句</li>
</ul></li>
<li>语句用来创建和操作变量、对变量赋值并控制操作的执行流程</li>
<li>包括声明语句、赋值语句、条件语句、循环语句、调用和返回语句</li>
<li>声明：让一个变量名和一个类型在编译时关联起来</li>
<li>赋值：将(由一个表达式定义的)某个数据类型额值和一个变量关联起来</li>
<li>条件语句： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure></li>
<li>循环语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure> 其中循环语句中的代码段称为循环体</li>
<li>break与continue语句
<ul>
<li>break，立即退出循环</li>
<li>continue，立即开始下一轮循环 ### 简便记法</li>
<li>声明并初始化</li>
<li>隐式赋值
<ul>
<li>++i;--i</li>
<li>i/=2;i+=1</li>
</ul></li>
<li>单语句代码段(省略if/while代码段的花括号)</li>
<li>for语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(&lt;initialize&gt;;&lt;boolean expression&gt;;&lt;increment&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;block statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这段代码等价于后面的 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;initialize&gt;;</span><br><span class="line">while(&lt;boolean expression&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  &lt;block statments&gt;</span><br><span class="line">  &lt;increment&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>java语句总结<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493111378.png" />
### 数组</li>
</ul></li>
<li>数组能够存储相同类型的多个数据</li>
<li>N个数组的数组编号为0至N-1；这种数组在Java中称为一维数组</li>
<li>创建并初始化数组
<ul>
<li>需要三个步骤，声明数组名字和类型，创建数组，初始化数组元素</li>
<li>声明并初始化一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493370383.png" /></li>
<li>简化写法<br />
double[] a = new double[N];</li>
<li>使用数组(访问的索引小于0或者大于N-1时会抛出ArrayIndexOutOfBoundsException)</li>
<li>典型的数组处理代码<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493720043.png" /></li>
</ul></li>
<li>起别名
<ul>
<li>下面的情况并没有将数组新复制一份，而是a，b指向了同一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493897849.png" /></li>
</ul></li>
<li>二维数组
<ul>
<li>Java中二维数组就是一堆数组的数组</li>
<li>二维数组可以是参差不齐，比如a[0]=new double[5],a[1]=new
double[6]之类</li>
<li>二维数组的创建及初始化 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double[][] a;</span><br><span class="line">a = new double[M][N];</span><br><span class="line">for (int i = 0; i &lt; M; i++)</span><br><span class="line">    for (int j = 0; j &lt; N; j++)</span><br><span class="line">        a[i][j] = 0.0;</span><br></pre></td></tr></table></figure></li>
<li>精简后的代码 double[][] a=new double[M][N];</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.1.6-1.1.11</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.1.6-1.1.11/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="静态方法">静态方法</h3>
<ul>
<li>本书中所有的Java程序要么是数据类型的定义，要么是一个静态方法库</li>
<li>当讨论静态方法和实体方法共有的属性时，我们会使用不加定语的方法一词</li>
<li>方法需要参数(某种数据类型的值)并根据参数计算出某种数据类型的返回值(例如数学函数的结果)或者产生某种副作用(例如打印一个值)</li>
<li>静态方法由签名(public static
以及函数的返回值,方法名及一串参数)和函数体组成</li>
<li>调用静态方法(写出方法名并在后面的括号中列出数值)</li>
<li>方法的性质
<ul>
<li>方法的参数按值传递，方法中使用的参数变量能够引用调用者的参数并改变其内容(只是不能改变<strong><em>原数组变量</em></strong>本身)</li>
<li>方法名可以被重载</li>
<li>方法只能返回一个值，但能包含多个返回语句</li>
<li>方法可以产生副作用</li>
</ul></li>
<li>递归：方法可以调用自己
可以使用数学归纳法证明所解释算法的正确性,编写递归重要的三点
<ul>
<li>递归总有一个最简单的情况(方法第一条总包含return的条件语句)</li>
<li>递归调用总是去尝试解决一个规模更小的子问题</li>
<li>递归调用的父问题和尝试解决的子问题之间不应该由交集
如下图中，两个子问题各自操作的数组部分是不同的<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645498373138.png" /></li>
</ul></li>
<li>基础编程模型
<ul>
<li>静态方法库是定义在一个Java类中的一组静态方法</li>
<li>Java开发的基本模式是编写一个静态方法库(包含一个main()方法)类完成一个任务<br />
</li>
<li>在本书中，当我们提到用于执行一项人物的Java程序时，我们指的就是用这种模式开发的代码(还包括对数据类型的定义)</li>
</ul></li>
<li>模块化编程
<ul>
<li>通过静态方法库实现了模块化编程<br />
</li>
<li>一个库中的静态方法也能够调用另一个库中定义的静态方法</li>
</ul></li>
<li>单元测试
<ul>
<li>Java编程最佳实践之一就是每个静态方法库中都包含一个main()函数来测试库中所有的方法</li>
<li>本书中使用main()来说明模块的功能并将测试用例留作练习</li>
</ul></li>
<li>外部库
<ul>
<li>系统标准库 java.lang.*:包括Math库;String和StringBuilder库</li>
<li>导入的系统库 java.util.Arrays</li>
<li>本书中其他库</li>
<li>本书使用了作者开发的标准库Std* ### API</li>
</ul></li>
<li>模块化编程重要组成部分，记录库方法的用法并供其他人参考的文档</li>
<li>会统一使用应用程序编程接口API的方法列出每个库方法、签名及简述</li>
<li>用例(调用另一个库中的方法的程序)，实现(实现了某个API方法的Java代码)</li>
<li>作者自己的两个库，一个扩展Math.random(),一个支持各种统计
<ul>
<li>随机静态方法库(StdRandom)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499238258.png" /></li>
<li>数据分析方法库(StdStats)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499266972.png" /></li>
<li>StdRandom库中的静态方法的实现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499387538.png" /></li>
</ul></li>
<li>编写自己的库
<ul>
<li>编写用例，实现中将计算过程分解</li>
<li>明确静态方法库和与之对应的API</li>
<li>实现API和一个能够对方法进行独立测试的main()函数</li>
<li>API的目的是将调用和实现分离 ### 字符串</li>
</ul></li>
<li>字符串拼接，使用 +</li>
<li>类型转换(将用户从键盘输入的内容转换成相应数据类型的值以及将各种数据类型的值转换成能够在屏幕上显示的值)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499613030.png" /></li>
<li>如果数字跟在+后面，那么会将数据类型的值自动转换为字符串</li>
<li>命令行参数
<ul>
<li>Java中字符串的存在，使程序能够接收到从命令行传递来的信息</li>
<li>当输入命令java和一个库名及一系列字符串后，Java系统会调用库的main()方法并将后面的一系列字符串变成一个数组作为参数传递给它
### 输入输出</li>
</ul></li>
<li>Java程序可以从<strong><em>命令行参数</em></strong>或者一个名为<strong><em>标准输入流</em></strong>的抽象字符流中获得输入，并将输出写入另一个名为标准输出流的字符流中</li>
<li>默认情况下，命令行参数、标准输入和标准输出是和应用程序绑定的，而应用程序是由能够接受命令输入的操作系统或是开发环境所支持</li>
<li>使用终端来指代这个应用程序提供的供输入和显示的窗口,如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500007895.png" /></li>
<li>命令和参数
<ul>
<li>终端窗口包含一个提示符，通过它我们能够向操作系统输入命令和参数</li>
<li>操作系统常用命令<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500167245.png" /></li>
</ul></li>
<li>标准输出
<ul>
<li>StdOut库的作用是支持标准输出</li>
<li>标准输出库的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500444820.png" /></li>
<li>格式化输出
字符%并紧跟一个字符表示的转换代码(包括d,f和s)。%和转换代码之间可以插入证书表示值的宽度，且转换后会在字符串左边添加空格以达到需要的宽度。负数表示空格从右边加</li>
<li>宽度后用小数点及数值可以指定精度(或String字符串所截取的长度)</li>
<li>格式中转换代码和对应参数的数据类型必须匹配 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500484321.png" /></li>
</ul></li>
<li>标准输入
<ul>
<li>StdIn库从标准输入流中获取数据，然后将标准输出定向到终端窗口</li>
<li>标准输入流最重要的特点，这些值会在程序读取后消失</li>
<li>例子<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500902261.png" /></li>
<li>标准输入库中的静态方法API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500946918.png" /></li>
</ul></li>
<li>重定向和管道
<ul>
<li>将标准输出重定向到一个文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 &gt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>从文件而不是终端应用程序中读取数据 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java Average &lt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>将一个程序的输出重定向为另一个程序的输入，叫做管道<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 | java Average</span><br></pre></td></tr></table></figure>
<ul>
<li>突破了我们能够处理的输入输出流的长度限制<br />
</li>
<li>即使计算机没有足够的空间来存储十亿个数，</li>
<li>我们仍然可以将例子中的1000 换成1 000 000 000
（当然我们还是需要一些时间来处理它们）。当RandomSeq 调用StdOut.println()
时，它就向输出流的末尾添加了一个字符串；当Average 调用StdIn.readInt()
时，它就从输入流的开头删除了一个字符串。这些动作发生的实际顺序取决于操作系统</li>
</ul></li>
<li>命令行的重定向及管道<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645501458419.png" /></li>
</ul></li>
<li>基于文件的输入输出</li>
<li>In和Out库提供了一些静态方法,来实现向文件中写入或从文件中读取一个原始数据类型的数组的抽象</li>
<li>用于读取和写入数组的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508058593.png" /></li>
<li>标准绘图库(基本方法和控制方法)--这里跳过 ### 二分查找</li>
<li>如图，在终端接收需要判断的数字，如果不存在于白名单(文件中的int数组)中则输出</li>
<li>开发用例以及使用测试文件(数组长度很大的白名单)</li>
<li>模拟实际情况来展示当前算法的必要性，比如
<ul>
<li>将客户的账号保存在一个文件中，我们称它为白名单；</li>
<li>从标准输入中得到每笔交易的账号；</li>
<li>使用这个测试用例在标准输出中打印所有与任何客户无关的账号，公司很可能拒绝此类交易。
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508356801.png" /></li>
</ul></li>
<li>使用顺序查找<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static int rank(int key, int[] a)</span><br><span class="line">&#123;</span><br><span class="line">  for (int i = 0; i &lt; a.length; i++)</span><br><span class="line">    if (a[i] == key) return i;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当处理大量输入的时候，顺序查找的效率极其低 ### 展望</li>
<li>下一节，鼓励使用数据抽象，或称面向对象编程，而不是操作预定义的数据类型的静态方法</li>
<li>使用数据抽象的好处
<ul>
<li>复用性</li>
<li>链式数据结构比数组更灵活</li>
<li>可以准确地定义锁面对的算法问题 ### 1.1 End</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.2.1-1.2.5</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.2.1-1.2.5/</url>
    <content><![CDATA[<h2 id="数据抽象">数据抽象</h2>
<p><strong><em>数据类型</em></strong>指的是一组值和一组对这些值的操作的集合<br />
* 定义和使用数据类型的过程，也被称为数据抽象 *
Java编程的基础是使用class关键字构造被称为<strong><em>引用类型</em></strong>的数据类型，也称面向对象编程
* 定义自己的数据类型来抽象任意对象 *
抽象数据类型（ADT）是一种能够对使用者隐藏数据表示的数据类型 *
抽象数据类型将数据和函数的实现相关联，将数据的表示方式隐藏起来 *
抽象数据类型使用时，关注API描述的操作上而不会去关心数据的表示；实现抽象数据类型时，关注数据本身并将实现对数据的各种操作
* 研究同一个问题的不同算法的主要原因是他们的性能不同</p>
<h3 id="使用抽象数据类型">使用抽象数据类型</h3>
<ul>
<li>使用一种数据类型并不一定非得知道它是如何实现的</li>
<li>使用Counter(计数器)的简单数据类型的程序，操作有
<ul>
<li>创建对象并初始化为0</li>
<li>当前值加1</li>
<li>获取当前值</li>
</ul></li>
<li>场景，用于电子计票</li>
<li>抽象数据类型的API(应用程序编程接口)
<ul>
<li>API用来说明抽象数据类型的行为</li>
<li>将列出所有构造函数和实例方法(即操作)</li>
</ul></li>
<li>计算器的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645622786940.png" /></li>
<li>继承的方法
<ul>
<li>所有数据类型都会继承toString()方法</li>
<li>Java会在用+运算符将任意数据类型的值和String值连接时调用toString()</li>
<li>默认实现：返回该数据类型值的内存地址</li>
</ul></li>
<li>用例代码
<ul>
<li>可以在用例代码中，声明变量、创建对象来保存数据类型的值并允许通过实例方法来操作它们</li>
</ul></li>
<li>对象
<ul>
<li>对象是能够承载数据类型的值的实体</li>
<li>对象三大特性：状态、标识和行为
<ul>
<li>状态：数据类型中的值</li>
<li>标识：在内存中的地址</li>
<li>行为：数据类型的操作</li>
</ul></li>
<li>Java使用"引用类型"和原始数据类型区别</li>
</ul></li>
<li>创建对象
<ul>
<li>每种数据类型中的值都存储于一个对象中</li>
<li>构造函数总是返回他的数据类型的对象的引用</li>
<li>使用new()，会为新的对象分配内存空间，调用构造函数初始化对象中的值，返回该对象的一个引用</li>
</ul></li>
<li>抽象数据类型向用例隐藏了值的表示细节</li>
<li>实例方法：参数按值传递</li>
<li>方法每次触发都和一个对象相关</li>
<li>静态方法的主要作用是实现函数；非静态(实例)方法的主要作用是实现数据类型的操作</li>
<li>使用对象<br />
开发某种数据类型的用例
<ul>
<li>声明该类型的变量，以引用对象</li>
<li>使用new触发能够创建该类型的对象的一个构造函数</li>
<li>使用变量名调用实例方法</li>
</ul></li>
<li>赋值语句(对象赋值)
<ul>
<li>别名：两个变量同时指向同一个对象</li>
</ul></li>
<li>将对象作为参数
<ul>
<li>Java将参数值的一个副本从调用端传递给了方法，这种方式称为按值传递</li>
<li>当使用引用类型作为参数时我们创建的都是别名，这种约定会传递引用的值(复制引用)，也就是传递对象的引用</li>
<li>虽然无法改变原始的引用(将原变量指向另一个Counter对象)，但能够改变该对象的值</li>
</ul></li>
<li>将对象作为返回值
<ul>
<li>由于Java只由一个返回值，有了对象实际上就能返回多个值</li>
</ul></li>
<li>数组也是对象
<ul>
<li>将数组传递给一个方法或是将一个数组变量放在赋值语句的右侧时，我们都是在创建数组引用的一个副本，而非数组的副本</li>
</ul></li>
<li>对象的数组<br />
创建一个对象的数组
<ul>
<li>使用方括号语法调用数组的构造函数创建数组</li>
<li>对于每个数组元素调用它的构造函数创建相应的对象<br />
如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645625875287.png" /></li>
</ul></li>
<li>运用数据抽象的思想编写代码(定义和使用数据类型，将数据类型的值封装在对象中)的方式称为面向对象编程</li>
<li>总结
<ul>
<li>数据类型指的是一组值和一组对值的操作的集合</li>
<li>我们会在数据类型的Java类中编写用理</li>
<li>对象是能够存储任意该数据类型的值的实体</li>
<li>对象有三个关键性质：状态、标识和行为</li>
</ul></li>
</ul>
<h3 id="抽象数据类型举例">抽象数据类型举例</h3>
<ul>
<li>本书中将会用到或开发的所有数据类型
<ul>
<li>java.lang.*</li>
<li>Java标准库中的抽象数据类型，需要import，比如java.io、java.net等</li>
<li>I/O处理嘞抽象数据类型,StdIn和StdOut</li>
<li>面向数据类抽象数据类型，计算机和和信息处理</li>
<li>集合类抽象数据类型，主要是为了简化对同一类型的一组数据的操作，包括Bag、Stack和Queue，PQ(优先队列)、ST(符号表)、SET(集合)</li>
<li>面向操作的抽象数据类型(用来分析各种算法)</li>
<li>图算法相关的抽象数据类型，用来封装各种图的表示的面向数据的抽象数据类型，和一些提供图的处理算法的面向操作的抽象数据类型</li>
</ul></li>
<li>几何对象(画图(图形)的)[跳过]</li>
<li>信息处理
<ul>
<li>抽象数据类型是组织信息的一种自然方式</li>
<li>定义和真实世界中的物体相对应的对象</li>
</ul></li>
<li>字符串
<ul>
<li>java的String</li>
<li>一个String值是一串可以由索引访问的char值</li>
<li>有了String类型可以写出清晰干净的用例代码而无需关心字符串的表示方式</li>
</ul></li>
</ul>
<h3 id="抽象数据类型的实现">抽象数据类型的实现</h3>
<ul>
<li>使用Java的类(class)实现抽象数据类型并将所有代码放入一个和类名相同并带有.java扩展名的文件</li>
<li>如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917949340.png" /></li>
<li>实例变量<br />
用来定义数据类型的值(每个对象的状态)<br />
</li>
<li>构造函数
<ul>
<li>每个Java类都至少有一个构造函数以创建一个对象的标识</li>
<li>每个构造函数将创建一个对象并向调用者返回一个该对象的引用<br />
</li>
</ul></li>
<li>实例方法
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917973220.png" /></li>
</ul></li>
<li>作用域
<ul>
<li>参数变量、局部变量、实例变量</li>
<li>范围(如图)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917991340.png" /></li>
</ul></li>
<li>API、用例与实现
<ul>
<li>我们要学习的每个抽象数据类型的实现，都会是一个含有若干私有实例变量、构造函数、实例方法和一个测试用例的Java类</li>
<li>用例和实现分离(一般将用例独立成含有静态方法main()的类)</li>
<li>做法如下
<ul>
<li>定义一份API，APi的作用是将使用和实现分离，以实现模块化编程</li>
<li>用一个Java类<strong>实现</strong>API的定义</li>
<li>实现多个测试用例来验证前两步做出的设计决定</li>
</ul></li>
<li>例子如下
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917905216.png" /></li>
<li>典型用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918040166.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918079248.png" /></li>
<li>使用方法(执行程序)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918109793.png" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="更多抽象数据类型的实现">更多抽象数据类型的实现</h3>
<ul>
<li>日期
<ul>
<li>两种实现方式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647919855792.png" /></li>
<li>本书反复出现的主题，即理解各种实现对空间和时间的需求<br />
</li>
</ul></li>
<li>维护多个实现
<ul>
<li>比较同一份API的两种实现在同一个用例中的性能表现，需要下面非正式的命名约定
<ul>
<li>使用前缀的描述性修饰符，比如BasicDate和SmallDate,以及是否合法的SmartDate</li>
<li>适合大多数用力的需求的实现，比如Date</li>
</ul></li>
</ul></li>
<li>累加器</li>
</ul>
<h3 id="数据类型的设计">数据类型的设计</h3>
<ul>
<li>抽象数据类型是一种向用例隐藏内部表示的数据类型
<ul>
<li>封装(数据封装)<br />
</li>
<li>设计APi<br />
</li>
</ul></li>
<li>算法与抽象数据类型
<ul>
<li>能够准确地说明一个算法的目的及其他程序应该如何使用该算法</li>
<li>每个Java程序都是一组静态方法和(或)一种数据类型的实现的集合</li>
</ul></li>
<li>本书中关注的是抽象数据类型的实现中的操作和向用例隐藏其中的数据表示</li>
<li>例子，将二分法封装
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926825727.png" /></li>
<li>典型的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926860564.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926913576.png" /></li>
</ul></li>
<li>接口继承
<ul>
<li>Java语言为定义对象之间的关系提供了支持，称为接口</li>
<li>接口继承使得我们的程序能够通过调用接口中的方法操作实现该接口的任意类型的对象<br />
</li>
</ul></li>
<li>本书中使用到的接口<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927204860.png" /></li>
<li>继承
<ul>
<li>由Object类继承得到的方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927291658.png" /></li>
<li>继承toString()并自定义</li>
<li>封装类型(内置的引用类型，包括Boolean、Byte、Character、Double、Float、Integer、Long和Short)</li>
</ul></li>
<li>等价性
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927424380.png" /></li>
<li>例子，在Date中重写equals<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927476357.png" /></li>
</ul></li>
<li>内存管理<br />
Java具有自动内存管理，通过记录孤儿对象并将它们的内存释放到内存池中</li>
<li>不可变性<br />
使用final保证数据不可变<br />
使用final修饰的引用类型，不能再引用(指向)其他对象，但对象本身的值可改变<br />
</li>
<li>契约式设计
<ul>
<li>Java语言能够在程序运行时检测程序状态</li>
<li>异常(Exception)+断言(Assertion)</li>
</ul></li>
<li>异常与错误<br />
允许抛出异常或抛出错误<br />
</li>
<li>断言<br />
程序不应该依赖断言</li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.3.1.1-1.3.2.5</title>
    <url>/2022/03/22/study/algorithm/algorithhms_4th/1.3.1.1-1.3.2.5/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<ul>
<li>数据类型的值就是一组对象的集合，所有操作都是关于添加、删除或是访问集合中的对象<br />
</li>
<li>本章将学习三种数据类型：背包Bag、队列Queue、栈Stack
<ul>
<li>对集合中的对象的表示方式直接影响各种操作的效率<br />
</li>
<li>介绍泛型和迭代<br />
</li>
<li>介绍并说明链式数据结构的重要性(链表)</li>
</ul></li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>泛型可迭代的基础集合数据类型的API
<ul>
<li>背包<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406152057569.png"
alt="image-20220406152057569" /></li>
<li>队列(先进先出FIFO)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153613674.png"
alt="image-20220406153613674" /></li>
<li>下压(后进先出,LIFO)栈 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153640138.png"
alt="image-20220406153640138" /></li>
</ul></li>
<li>泛型
<ul>
<li>泛型，参数化类型<br />
</li>
<li>在每份API 中，类名后的<Item> 记号将Item
定义为一个类型参数，它是一个象征性的占位符，表示的是用例将会使用的某种具体数据类型<br />
</li>
</ul></li>
<li>自动装箱
<ul>
<li>用来处理原始类型<br />
</li>
<li>Boolean、Byte、Character、Double、Float、Integer、Long 和Short
分别对应着boolean、byte、char、double、float、int、long 和short<br />
</li>
<li>自动将一个原始数据类型转换为一个封装类型称为自动装箱，自动将一个封装类型转换为一个原始数据类型被称为自动拆箱<br />
</li>
</ul></li>
<li>可迭代的集合类型
<ul>
<li>迭代访问集合中的所有元素<br />
</li>
</ul></li>
<li>背包是一种不支持从中删除元素的集合数据类型--帮助用例收集元素并迭代遍历所有收集到的元素（<strong>无序遍历</strong>）
<ul>
<li>典型用例，计算标准差<br />
<img src="./1.3.1.1-1.3.2.5/1648014765406.png" /></li>
</ul></li>
<li>先进先出队列
<ul>
<li>是一种基于先进先出(FIFO)策略的集合类型<br />
</li>
<li>使用队列的主要原因：集合保存元素的同时保存它们的相对顺序<br />
</li>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153751756.png"
alt="image-20220406153751756" /></li>
<li>Queue用例(先进先出)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153829692.png"
alt="image-20220406153829692" /></li>
</ul></li>
<li>下压栈
<ul>
<li>简称栈，是一种基于后进先出LIFO策略的集合类型<br />
</li>
<li>比如，收邮件等，如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154449201.png"
alt="image-20220406154449201" /></li>
<li>Stack的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154510301.png"
alt="image-20220406154510301" /></li>
</ul></li>
<li>用栈解决算数表达式的问题<br />
（双栈算数表达式求值算法）<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155021820.png"
alt="image-20220406155021820" /></li>
</ul>
<h3 id="集合类数据类型的实现">集合类数据类型的实现</h3>
<ul>
<li><p>定容栈，表示容量固定的字符串栈的抽象数据类型</p>
<ul>
<li><p>只能处理String值，支持push和pop</p></li>
<li><p>抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155522256.png"
alt="image-20220406155522256" /></p></li>
<li><p>测试用例</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155637243.png"
alt="image-20220406155637243" />
<figcaption aria-hidden="true">image-20220406155637243</figcaption>
</figure></li>
<li><p>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155712507.png"
alt="image-20220406155712507" /></p></li>
<li><p>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155728513.png"
alt="image-20220406155728513" /></p></li>
</ul></li>
<li><p>泛型</p>
<ul>
<li><code>public class FixedCapacityStack&lt;Item&gt;</code></li>
<li>由于不允许直接创建泛型数组，所以 <del>a =new Item[cap]</del>
不允许，应该改为<br />
a=(Item[])new Object[cap];<br />
</li>
<li>泛型定容栈的抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160905236.png"
alt="image-20220406160905236" /></li>
<li>测试用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160932941.png"
alt="image-20220406160932941" /></li>
<li>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160957117.png"
alt="image-20220406160957117" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161022669.png"
alt="image-20220406161022669" /></li>
</ul></li>
<li><p>调整数组大小</p>
<ul>
<li>N为当前元素的数量<br />
使用resize创建新的数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161247788.png"
alt="image-20220406161247788" /></li>
<li>当元素满了的时候进行扩容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161332720.png"
alt="image-20220406161332720" /></li>
<li>当元素过少(1/4)的时候，进行减半<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161408973.png"
alt="image-20220406161408973" /></li>
</ul></li>
<li><p>对象游离</p>
<ul>
<li><p>Java的垃圾回收策略是回收所有无法被访问的对象的内存</p></li>
<li><p>示例中，被弹出的元素不再需要，但由于数组中的引用仍然让它可以继续存在（垃圾回收器无法回收），这种情况（保存了一个不需要的对象的引用）称为游离，避免游离的做法就是将数组元素设为null</p></li>
</ul></li>
<li><p>迭代</p>
<ul>
<li><p>foreach和while<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406162432642.png"
alt="image-20220406162432642" /></p>
<ul>
<li>集合数据类型必须实现iterator()并返回Iterator对象</li>
<li>Iterator类必须包括两个方法,hasNext()和next()</li>
</ul></li>
<li><p>让类继承Iterable<Item>使类可迭代 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163317535.png"
alt="image-20220406163317535" /></p></li>
<li><p>使用一个嵌套类<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163515174.png"
alt="image-20220406163515174" /></p></li>
<li><p>下压栈的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResizingArrayStack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span>		Item[] a = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];      <span class="comment">/* 栈元素 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	<span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>;                                  <span class="comment">/* 元素数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">( <span class="type">int</span> max )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将栈移动到一个大小为max 的新数组 */</span></span><br><span class="line">		Item[] temp = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[max];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">			temp[i] = a[i];</span><br><span class="line">		a = temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">( Item item )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将元素添加到栈顶 */</span></span><br><span class="line">		<span class="keyword">if</span> ( N == a.length )</span><br><span class="line">			resize( <span class="number">2</span> * a.length );</span><br><span class="line">		a[N++] = item;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;                       <span class="comment">/* 从栈顶删除元素 */</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> a[--N];</span><br><span class="line">		a[N] = <span class="literal">null</span>;    <span class="comment">/* 避免对象游离（请见1.3.2.4 节） */</span></span><br><span class="line">		<span class="keyword">if</span> ( N &gt; <span class="number">0</span> &amp;&amp; N == a.length / <span class="number">4</span> )</span><br><span class="line">			resize( a.length / <span class="number">2</span> );</span><br><span class="line">		<span class="keyword">return</span>(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(<span class="keyword">new</span> <span class="title class_">ReverseArrayIterator</span>() );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;       <span class="comment">/* 支持后进先出的迭代 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(i &gt; <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(a[--i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书1.3.3.1-1.3.4</title>
    <url>/2022/04/06/study/algorithm/algorithhms_4th/1.3.3.1-1.3.4/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<h3 id="链表">链表</h3>
<ul>
<li><p>链表是一种递归的数据结构，它或者为空(null)，或者是一个指向一个结点（node）的引用，该节点含有一个泛型的元素和一个指向另一条链表的引用。
#### 结点记录</p></li>
<li><p>使用嵌套类定义结点的抽象数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Item item;</span><br><span class="line">	Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>该类没有其它任何方法，且会在代码中直接引用实例变量，这种类型的变量称为记录</li>
</ul></li>
</ul>
<h4 id="构造链表">构造链表</h4>
<ul>
<li>需要一个Node类型的变量，保证它的值是null或者指向另一个Node对象的next域指向了另一个链表</li>
<li>如下图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407091501353.png"
alt="image-20220407091501353" /></li>
<li>链表表示的是一列元素</li>
<li>链式结构在本书中的可视化表示
长方形表示对象；实例变量的值写在长方形中；用指向被引用对象的箭头表示引用关系</li>
<li>术语<strong>链接</strong>表示对结点的引用</li>
</ul>
<h4 id="在表头插入结点">在表头插入结点</h4>
<ul>
<li><p>在首结点为first 的给定链表开头插入字符串not，我们先将first
保存在oldfirst 中， 然后将一个新结点赋予first，并将它的item
域设为not，next 域设为oldfirst</p></li>
<li><p>时间复杂度为O(1)</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407092921756.png"
alt="image-20220407092921756" /></p></li>
</ul>
<h4 id="从表头删除结点">从表头删除结点</h4>
<ul>
<li><p>将first指向first.next</p></li>
<li><p>原先的结点称为孤儿，Java的内存管理系统最终将回收它所占用的内存</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407093000788.png"
alt="image-20220407093000788" /></p></li>
</ul>
<h4 id="在表尾插入结点">在表尾插入结点</h4>
<ul>
<li><p>每个修改链表的操作都需要增加检查是否要修改该变量（以及做出相应修改）的代码</p></li>
<li><p>例如，当删除链表首结点时可能改变指向链表的尾结点的引用，因为链表中只有一个结点时它既是首结点又是尾结点</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407094045245.png"
alt="image-20220407094045245" /></p></li>
</ul>
<h4 id="其他位置的插入和删除操作">其他位置的插入和删除操作</h4>
<p>删除指定结点；在指定节点插入新结点</p>
<ul>
<li>需要将链表尾结点的前一个节点中的链接（它指向的是last）值改为null</li>
<li>为了找到指向last的结点，需要遍历链表，时间复杂度为O(n)</li>
<li>实现任意插入和删除操作的标准解决方案是<strong>双向链表</strong></li>
</ul>
<h4 id="遍历">遍历</h4>
<ul>
<li><p>将x初始化为链表首结点，然后通过x.item访问和x相关联的元素，并将x设为x.next来访问链表中的下一个结点，知道x=null(没有下一个结点了，到达链表结尾)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理x.item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="栈的实现">栈的实现</h4>
<ul>
<li><p>使用链表实现栈</p></li>
<li><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first
指向栈顶。这样，当使用push() 压入一个元素时，我们会按照1.3.3.3
节所讨论的代码将该元素添加在表头；当使用pop()
删除一个元素时，我们会按照1.3.3.4
节讨论的代码将该元素从表头删除。要实现size() 方法，我们用实例变量N
保存元素的个数，在压入元素时将N 加1，在弹出元素时将N
减1。要实现isEmpty() 方法，只需检查first 是否为null（或者可以检查N
是否为0）</p></li>
<li><p>实现上述几个操作的时间复杂度为O(1)</p></li>
<li><p>下压堆栈（链表的实现）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 栈顶（最近添加的元素）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或：N == 0</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向栈顶添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从栈顶删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见本节前面部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试用例(pop()之前测试用例做了判断)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个栈并根据StdIn中的指示压入或弹出字符串</span></span><br><span class="line">	Stack&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		s.push(item); <span class="keyword">else</span> <span class="keyword">if</span> (!s.isEmpty()) StdOut.print(s.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + s.size() + <span class="string">&quot; left on stack)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="队列的实现">队列的实现</h4>
<ul>
<li><p>这里维护了first和last两个变量</p></li>
<li><p>Queue实现使用的数据结构和Stack都是链表，但实现了不同的添加和删除元素的算法，所以前者是先入先出，后者是后进先出</p></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的实现</p>
<ul>
<li>如下，enqueue()需要额外考虑first，dequeue()需要额外考虑last
<ul>
<li>如果原队列没有结点，那么增加后last指向了新的元素，应该把first也指向新元素</li>
<li>如果原对队列只有一个元素，那么删除后first确实指向null，而last没有更新，所以需要下面的判断手动更新</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 指向最早添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> Node last;</span><br><span class="line">	<span class="comment">// 指向最近添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 队列中的元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或： N == 0.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向表尾添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">		last = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		last.item = item;</span><br><span class="line">		last.next = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) first = last; <span class="keyword">else</span> oldlast.next = last;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从表头删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) last = <span class="literal">null</span>;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在结构化数据集时，链表是数组的一种重要替代方法</p></li>
</ul>
<h4 id="背包的实现">背包的实现</h4>
<ul>
<li><p>只需要将Stack中的push()改为add()即可，并去掉pop()</p></li>
<li><p>下面添加了Iterator实现类，以及iterator()具体方法
其中，嵌套类ListIterator
维护了一个实例变量current来记录链表的当前结点。hasNext()
方法会检测current 是否为null，next() 方法会保存当前元素的引用，将current
变量指向链表中的下个结点并返回所保存的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bag</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 链表的首结点</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 和Stack 的push() 方法完全相同</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">		<span class="keyword">public</span> Boolean <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> current != <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> current.item;</span><br><span class="line">			current = current.next;</span><br><span class="line">			<span class="keyword">return</span> item;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="综述">综述</h3>
<ul>
<li>学习了支持泛型和迭代的背包、队列和栈</li>
<li>现在拥有两种表示对象集合的方式，即数组和链表---&gt;顺序存储和链式存储
<ul>
<li>各种含有多个链接的数据结构，如二叉树的数据结构，由<strong>含有两个链接的节点</strong>组成</li>
<li><strong>复合型</strong>的数据结构：背包存储栈，队列存储数组等，例如用数组的背包表示<strong>图</strong></li>
</ul></li>
<li>基础数据结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105102346.png"
alt="image-20220407105102346" /></li>
<li>研究新领域时，按以下步骤识别并使用数据抽象解决问题
<ul>
<li>定义API</li>
<li>根据应用场景开发<strong>用例代码</strong></li>
<li>描述数据结构（一组值的表示），并在API所对应的抽象数据类型的实现中根据它定义类的实例变量</li>
<li>描述算法（实现一组操作的方式），实现类的实例方法</li>
<li>分析算法的性能特点</li>
</ul></li>
<li>本书的数据结构举例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105552258.png"
alt="image-20220407105552258" /></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.4.1-1.4.10</title>
    <url>/2022/04/07/study/algorithm/algorithhms_4th/1.4.1-1.4.10/</url>
    <content><![CDATA[<h2 id="算法分析">算法分析</h2>
<p>使用<strong>数学分析</strong>为算法成本建立简洁的模型，并使用实验数据验证这些模型</p>
<h3 id="科学方法">科学方法</h3>
<ul>
<li>观察、假设、预测、观察并核实预测、反复确认预测和观察</li>
<li>原则：实验可重现</li>
</ul>
<h3 id="观察">观察</h3>
<ul>
<li><p>计算性任务的困难程度可以用<strong>问题的规模</strong>来衡量</p></li>
<li><p>问题规模可以是输入的大小或某个命令行参数的值</p></li>
<li><p>研究问题规模和运行时间的关系</p></li>
<li><p>使用计时器得到大概的运行时间 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113311126.png"
alt="image-20220407113311126" /></p>
<ul>
<li><p>典型用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            a[i] = StdRandom.uniform(-<span class="number">1000000</span>, <span class="number">1000000</span>);</span><br><span class="line">        <span class="type">Stopwatch</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stopwatch</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> ThreeSum.count(a);</span><br><span class="line">        <span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timer.elapsedTime();</span><br><span class="line">        StdOut.println(cnt + <span class="string">&quot; triples &quot;</span> + time + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113407342.png"
alt="image-20220407113407342" /></p></li>
<li><p>数据类型的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stopwatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stopwatch</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">elapsedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (now - start) / <span class="number">1000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="数学模型">数学模型</h3>
<ul>
<li><p>程序运行的总时间主要和两点有关：执行每条语句的耗时；执行每条语句的频率</p></li>
<li><p>定义：我们用~f(N) 表示所有随着N 的增大除以f(N) 的结果趋近于1
的函数。我们用g(N) ~ f(N) 表示g(N)/f(N) 随着N 的增大趋近于1。
即使用曰等号忽略较小的项</p></li>
<li><p><span class="math display">\[
f(N)=N^b(logN)^c
\]</span></p>
<p>将f(N)称为g(N)的增长的数量级</p></li>
<li><p>常见的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170444747.png"
alt="image-20220407170444747" /></p></li>
<li><p>本书用性质表示需要用实验验证的猜想</p>
<ul>
<li><p>ThreeSum分析
执行最频繁的指令决定了程序执行的总时间--我们将这些指令称为程序的<strong>内循环</strong></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170842908.png"
alt="image-20220407170842908" />
<figcaption aria-hidden="true">image-20220407170842908</figcaption>
</figure></li>
<li><p>程序运行时间的分析 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170938405.png"
alt="image-20220407170938405" /></p></li>
<li><p>算法的分析
ThreeSum的运行时间增长数量级为N^3，与在哪台机器无关</p></li>
<li><p>成本模型
3-sum的成本模型：数组的访问次数（访问数组元素的次数，无论读写）</p></li>
<li><p>总结-得到运行时间的数学模型所需的步骤</p>
<ul>
<li>确定输入模型，定义问题的规模</li>
<li>识别内循环</li>
<li>根据内循环中的操作确定成本模型</li>
<li>对于给定的输入，判断这些操作的执行效率</li>
</ul></li>
</ul></li>
</ul>
<h3 id="增长数量级的分类">增长数量级的分类</h3>
<ul>
<li>成长增长的数量级一般都是问题规模N的若干函数之一，如下表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408091530468.png"
alt="image-20220408091530468" />
<ul>
<li>常数级别表示运行时间不依赖于N</li>
<li>对数级别，经典例子是<strong>二分查找</strong></li>
<li>线性级别（常见的for循环）</li>
<li>线性对数级别 ，其中，对数的底数和增长的数量级无关</li>
<li>平方级别，一般指两个嵌套的for循环</li>
<li>立方级别，一般含有三个嵌套的for循环</li>
<li>指数级别</li>
</ul></li>
<li>问题规模（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092436213.png"
alt="image-20220408092436213" /></li>
<li>典型的增长数量级函数（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092500239.png"
alt="image-20220408092500239" /></li>
<li>典型的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092659849.png"
alt="image-20220408092659849" /></li>
<li>在某个成本模型下可以提出精确的命题
比如，归并排序所需的比较次数在<span
class="math inline">\(1/2NlgN\)</span>~<span
class="math inline">\(NlgN\)</span>之间
，即归并排序所需的运行时间的增长数量级是线性对数的，也就是：归并排序是线性对数的</li>
</ul>
<h3 id="设计更快的算法">设计更快的算法</h3>
<ul>
<li><p>前提，目前已知归并排序是线性对数级别的，二分查找是对数级别的</p></li>
<li><p>将3-sum问题简化为2-sum问题，即找出一个输入文件中所有和为0的整数对的数量，为了简化问题，题设所有整数均不相同</p>
<ul>
<li><p>可以使用双层循环，以<strong>平方级别</strong>来解决</p></li>
<li><p>改进后的算法，当且仅当-a[i]存在于数组中且a[i]非零时，a[i]存在于某个和为0的整数对之中</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoSumFast</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为0的整数对的数目</span></span><br><span class="line">			Arrays.sort(a);</span><br><span class="line">			<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">			<span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">				<span class="keyword">if</span> (BinarySearch.rank(-a[i], a) &gt; i)</span><br><span class="line">					cnt++;</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">			<span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">			StdOut.println(count(a));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3-sum问题的快速算法</p>
<ul>
<li><p>当且仅当-(a[i]+a[j])在数组中,且不是a[i]也不是a[j]时，整数对(a[i]和a[j])为某个和为0的三元组的一部分</p></li>
<li><p>总运行时间和<span
class="math inline">\(N^2logN\)</span>成正比</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeSumFast</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为０的三元组的数目</span></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">                <span class="keyword">if</span> (BinarySearch.rank(-a[i] - a[j], a) &gt; j) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">        StdOut.println(count(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>下界</p>
<ul>
<li><p>为算法在最坏情况下的运行时间给出一个下界的思
想是非常有意义的</p></li>
<li><p>运行时间的总结</p>
<p>图1 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095417424.png"
alt="image-20220408095417424" /> 图2 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095509262.png"
alt="image-20220408095509262" /></p></li>
<li><p>实现并分析该问题的一种简单解法，我们称之为<strong>暴力算法</strong></p></li>
<li><p>算法的改进，能降低算法所需的运行时间的增长数量级</p></li>
</ul></li>
</ul></li>
</ul>
<h3 id="倍率实验">倍率实验</h3>
<ul>
<li><p>翻倍后运行时间，与没翻倍时的运行时间成正比</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublingRatio</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">timeTrial</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">		<span class="comment">// 参见DoublingTest（请见1.4.2.3 节实验程序）</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">prev</span> <span class="operator">=</span> timeTrial(<span class="number">125</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">250</span>; <span class="literal">true</span>; N += N)</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timeTrial(N);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%6d %7.1f &quot;</span>, N, time);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%5.1fn&quot;</span>, time/prev);</span><br><span class="line">			prev = time;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>试验结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112657967.png"
alt="image-20220408112657967" /></li>
<li>预测 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112708320.png"
alt="image-20220408112708320" /></li>
<li>倍率定理（没看懂，不管） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112746465.png"
alt="image-20220408112746465" />
<ul>
<li>评估它解决大型问题的可行性</li>
<li>评估使用更快的计算机所产生的价值</li>
</ul></li>
</ul></li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>大常数，<span class="math inline">\(c = 10^3或10^6\)</span></li>
<li>非决定性的内循环</li>
<li>指令时间</li>
<li>系统因素</li>
<li>不分伯仲（相同任务在不同场景效率不一样）</li>
<li>对输入的强烈依赖</li>
<li>多个问题参量</li>
</ul>
<h3 id="处理对于输入的依赖">处理对于输入的依赖</h3>
<ul>
<li>输入模型，例如假设ThreeSum的所有输入均为随机int值，可能不切实际</li>
<li>输入的分析，需要数学几千</li>
<li>对最坏情况下的性能保证
<ul>
<li>命题（这里只针对之前的代码） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113444176.png"
alt="image-20220408113444176" /></li>
</ul></li>
<li>对计划算法，有时候对输入需要进行打乱</li>
<li>操作序列</li>
<li>均摊分析 通过记录所有操作的总成本并除以操作总数来将成本均摊</li>
</ul>
<h3 id="内存">内存</h3>
<ul>
<li>Java的内存分配系统</li>
<li>原始数据类型的常见内存、需求 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113805644.png"
alt="image-20220408113805644" />
这里漏了，short也是2字节。总结boolean、byte 1字节；char、short
2字节；int、float 4字节；long、double 8字节</li>
<li>对象（跳过）
<ul>
<li><p>要知道一个对象所使用的内存量，需要将所有实例变量使用的内存与内存本身的开销（一般是16字节）</p></li>
<li><p>一般内存的使用都会被填充为<strong>8字节的倍数</strong>（注意，说的是64位计算机中的机器字）</p></li>
<li><p><strong>引用</strong>存储需要8字节</p></li>
<li><p>典型对象的内存需求 例如第一个，16+4=20；20+4 = 24为8的倍数</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114020688.png"
alt="image-20220408114020688" />
<figcaption aria-hidden="true">image-20220408114020688</figcaption>
</figure></li>
<li><p>链表，嵌套的非静态（内部）类，如<strong>上面的Node，需要额外的8字节</strong>（用于外部类的引用）</p></li>
<li><p>数组 int值、double值、对象和数组的数组对内存的典型需求
比如一个原始数据类型的数组，需要24字节的头信息（16字节的对象开销，4字节用于保存长度[数组长度]，以及4填充字节，再加上保存值需要的内存）
Date对象需要的：一个含有N 个Date 对象（请见表1.2.12）的数 组需要使用24
字节（数组开销）加上8N 字节（所有引用）加上每个对象的32 字节，总共（24
+40N）字节 【这里说的是需要，和本身存储是两回事】</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114325192.png"
alt="image-20220408114325192" />
<figcaption aria-hidden="true">image-20220408114325192</figcaption>
</figure></li>
<li><p>字符串对象</p>
<blockquote>
<p>String 的标准实现含有4 个实例变量：一个指向字符数组的引用（8
字节）和三 个int 值（各4 字节）。第一个int
值描述的是字符数组中的偏移量，第二个int
值是一个计数器（字符串的长度）。按照图1.4.10
中所示的实例变量名，对象所表示的字符串由value[offset]到value[offset +
count - 1] 中的字符组成。String 对象中的第三个int
值是一个散列值，它在某些情况下可以节省一些计算，我们现在可以忽略它。因此，每个String
对象总共会使用40字节（16 字节表示对象，三个int 实例变量各需4
字节，加上数组引用的8 字节和4 个填充字节）</p>
</blockquote></li>
<li><p>字符串的值和子字符串</p>
<ul>
<li>一个长度为N 的String 对象一般需要使用40 字节（String
对象本身）加上（24+2N）字节（字符数组），总共（64+2N）字节</li>
<li>Java 对字符串的表示希望能够避免复制字符串中的字符</li>
<li>一个子字符串所需的额外内存是一个常数，构造一个子字符串所需的时间也是常数</li>
<li>关于子字符串 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408151726265.png"
alt="image-20220408151726265" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="展望">展望</h3>
<ul>
<li>最重要的是代码正确，其次才是性能</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.5.1-1.5.3</title>
    <url>/2022/04/09/study/algorithm/algorithhms_4th/1.5.1-1.5.3/</url>
    <content><![CDATA[<h2 id="案例研究union-find-算法">案例研究：union-find 算法</h2>
<ul>
<li>设计和分析算法的基本方法
<ul>
<li>优秀的算法能解决实际问题</li>
<li>高效的算法也可以很简单</li>
<li>理解某个实现的性能特点是一项有趣的挑战</li>
<li>在解决同一个问题的多种算法间选择，科学方法是一种重要工具</li>
<li>迭代式改进能让算法效率越来越高</li>
</ul></li>
</ul>
<h3 id="动态连通性">动态连通性</h3>
<ul>
<li>从输入中读取整数对p
q，如果已知的所有整数对都不能说明p,q相连，就打印出pq</li>
<li>网络：整个程序能够判定是否需要在pq之间架设一条新的连接才能进行通信</li>
<li>变量名等价性（即指向同一个对象的多个引用）</li>
<li>数学集合：在处理一个整数对pq时，我们是在判断它们是否属于相同的集合</li>
<li>本节中，将对象称为<strong>触点</strong>，整数对称为<strong>连接</strong>，等价类称为<strong>连通分量</strong>或是<strong>简称分量</strong></li>
<li>连通性
问题只要求我们的程序能够判别给定的整数对pq是否相连，并没有要求给两者之间的通路上的所有连接</li>
<li>union-find算法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413001331923.png"
alt="image-20220413001331923" /></li>
<li>数据结构和算法的设计影响到算法的效率</li>
</ul>
<h3 id="实现">实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[]	id;</span><br><span class="line">	<span class="comment">/* 分量id（以触点作为索引） */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	count;</span><br><span class="line">	<span class="comment">/* 分量数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">UF</span><span class="params">( <span class="type">int</span> N )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 初始化分量id数组 */</span></span><br><span class="line">		count	= N;</span><br><span class="line">		id	= <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">					id[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(find( p ) == find( q ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">( <span class="type">int</span> p )</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">	<span class="comment">/* 请见1.5.2.1节用例（quick-find）、1.5.2.3节用例（quick-union）和算法1.5（加权quick-union） */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 解决由StdIn得到的动态连通性问题 */</span></span><br><span class="line">		<span class="type">int</span>	<span class="variable">N</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">		<span class="comment">/* 读取触点数量 */</span></span><br><span class="line">		<span class="type">UF</span>	<span class="variable">uf</span>	<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>( N );</span><br><span class="line">		<span class="comment">/* 初始化N个分量 */</span></span><br><span class="line">		<span class="keyword">while</span> ( !StdIn.isEmpty() )</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">int</span>	<span class="variable">p</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="type">int</span>	<span class="variable">q</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="comment">/* 读取整数对 */</span></span><br><span class="line">			<span class="keyword">if</span> ( uf.connected( p, q ) )</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">/* 如果已经连通则忽略 */</span></span><br><span class="line">			uf.union( p, q );</span><br><span class="line">			<span class="comment">/* 归并分量 */</span></span><br><span class="line">			StdOut.println( p + <span class="string">&quot; &quot;</span> + q );</span><br><span class="line">			<span class="comment">/* 打印连接 */</span></span><br><span class="line">		&#125;</span><br><span class="line">		StdOut.println( uf.count() + <span class="string">&quot;components&quot;</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>union-find的成本模型：union-find
API的各种算法，统计的是<strong>数组的访问次数</strong>，不论读写</p>
<ul>
<li><p>以下有三种实现</p>
<ul>
<li><p>且仅当id[p] 等于id[q] 时p 和q 是连通的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q归并到相同的分量中</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pID</span> <span class="operator">=</span> find(p);mi</span><br><span class="line">	<span class="type">int</span> <span class="variable">qID</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="comment">// 如果p和q已经在相同的分量之中则不需要采取任何行动</span></span><br><span class="line">	<span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 将p的分量重命名为q的名称</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">	<span class="keyword">if</span> (id[i] == pID) id[i] = qID;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命题F：在quick-find 算法中，每次find()
调用只需要访问数组一次，而归并两个分量的union()
操作访问数组的次数在(N+3) 到(2N+1) 之间。<br />
证明：由代码马上可以知道，每次connected() 调用都会检查id[]
数组中的两个元素是否相等，即会调用两次find() 方法。归并两个分量的union()
操作会调用两次find()，检查id[] 数组中的全部N 个元素并改变它们中1 到N-1
个元素的值。</p>
</blockquote>
<blockquote>
<p>假设我们使用quick-find
算法来解决动态连通性问题并且最后只得到了一个连通分量，那么这至少需要调用N-1
次union()，即至少(N+3)(N-1) ～ N2
次数组访问——我们马上可以猜想动态连通性的quick-find 算法是平方级别的</p>
</blockquote></li>
<li><p>以触点作为索引的id[]数组，每个触点所对应的id[]元素都是同一个分量中的另一个触点的名称
如下图： <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413222744695.png"
alt="image-20220413222744695" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 找出分量的名称</span></span><br><span class="line">	<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q的根节点统一</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">	<span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line">	id[pRoot] = qRoot;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union算法的最坏情况 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223324173.png"
alt="image-20220413223324173" /></p></li>
<li><p>加权quick-union算法（减少树的高度）
用一个数组来表示各个节点对应的分量的大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightedQuickUnionUF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] id;</span><br><span class="line">	<span class="comment">// 父链接数组（由触点索引）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] sz;</span><br><span class="line">	<span class="comment">// （由触点索引的）各个根节点所对应的分量的大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">	<span class="comment">// 连通分量的数量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WeightedQuickUnionUF</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">	&#123;</span><br><span class="line">		count = N;</span><br><span class="line">		id = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) id[i] = i;</span><br><span class="line">		sz = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) sz[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 跟随链接找到根节点</span></span><br><span class="line">		<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> find(p);</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> find(q);</span><br><span class="line">		<span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">// 将小树的根节点连接到大树的根节点</span></span><br><span class="line">		<span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;</span><br><span class="line">			id[i] = j;</span><br><span class="line">			sz[j] += sz[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			id[j] = i;</span><br><span class="line">			sz[i] += sz[j];</span><br><span class="line">		&#125;</span><br><span class="line">		count--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union 算法与加权quick-union 算法的对比（100 个触点，88
次union() 操作） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223710124.png"
alt="image-20220413223710124" /></p></li>
</ul></li>
<li><p>所有操作的总成本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223824910.png"
alt="image-20220413223824910" /></p></li>
</ul>
<h3 id="展望">展望</h3>
<p>研究问题的步骤</p>
<ul>
<li>完整而详细地定义问题，找出解决问题所必需的基本抽象操作并定义一份
API。</li>
<li>简洁地实现一种初级算法，给出一个精心组织的开发用例并使用实际数据作为输入。</li>
<li>当实现所能解决的问题的最大规模达不到期望时决定改进还是放弃。</li>
<li>逐步改进实现，通过经验性分析或（和）数学分析验证改进后的效果。</li>
<li>用更高层次的抽象表示数据结构或算法来设计更高级的改进版本。</li>
<li>如果可能尽量为最坏情况下的性能提供保证，但在处理普通数据时也要有良好的性能。</li>
<li>在适当的时候将更细致的深入研究留给有经验的研究者并继续解决下一个问题。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.1.1-</title>
    <url>/2022/04/13/study/algorithm/algorithhms_4th/2.1.1-/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<p>排序就是将一组对象按照某种逻辑顺序重新排序的过程</p>
<ul>
<li>对排序算法的分析有助于理解本书中比较算法性能的方法</li>
<li>类似技术能解决其他类型问题</li>
<li>排序算法常常是我们解决其他问题的第一步</li>
</ul>
<h2 id="初级排序算法">初级排序算法</h2>
<ul>
<li>熟悉术语及技巧</li>
<li>某些情况下初级算法更有效</li>
<li>有助于改进复杂算法的效率</li>
</ul>
<h3 id="游戏规则">游戏规则</h3>
<ul>
<li><p>主要关注重新排序<strong>数组元素</strong>的算法，每个元素都会有一个<strong>主键</strong></p></li>
<li><p>排序后索引较大的主键大于索引较小的主键</p></li>
<li><p>一般情况下排序算法通过两个方法操作数据，less()进行比较，exch()进行交换</p></li>
<li><p>排序算法类的模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 请见算法2.1、算法2.2、算法2.3、算法2.4、算法2.5或算法2.7*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">		a[i] = a[j];</span><br><span class="line">		a[j] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 在单行中打印数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">		StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		StdOut.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isSorted</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 测试数组元素是否有序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++)</span><br><span class="line">		<span class="keyword">if</span> (less(a[i], a[i-<span class="number">1</span>])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]</span></span><br><span class="line"><span class="params">	args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从标准输入读取字符串，将它们排序并输出</span></span><br><span class="line">		String[] a = In.readStrings();</span><br><span class="line">		sort(a);</span><br><span class="line">		<span class="keyword">assert</span> <span class="title function_">isSorted</span><span class="params">(a)</span>;</span><br><span class="line">		show(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more tiny.txt</span></span><br><span class="line">S O R T E X A M P L E</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; tiny.txt</span></span><br><span class="line">A E E L M O P R S T X</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more words3.txt</span></span><br><span class="line">bed bug dad yes zoo ... all bad yet</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; words.txt</span></span><br><span class="line">all bad bed bug dad ... yes yet zoo</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用assert验证</p></li>
<li><p>排序成本模型：在研究排序算法时，我们需要计算比较和交换的数量。对于不交换元素的算法，我们会比较访问数组的次数</p></li>
<li><p>额外内存开销和运行时间同等重要，排序算法分为</p>
<ul>
<li>除了函数调用需要的栈和固定数目的实例变量之外，无需额外内存的<strong>原地排序算法</strong></li>
<li>需要额外内存空间来存储另一份数组副本的<strong>其他排序算法</strong></li>
</ul></li>
<li><p>数据类型</p>
<ul>
<li><p>排序模板适用于任何实现了Comparable接口的数据类型</p></li>
<li><p>对于自己的数据类型，实现Comparable接口即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Date&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> day;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> month;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> year;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> m, <span class="type">int</span> y)</span></span><br><span class="line">	&#123;</span><br><span class="line">		day = d;</span><br><span class="line">		month = m;</span><br><span class="line">		year = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">day</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> day;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">month</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> month;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">year</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> year;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Date that)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &gt; that.year ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &lt; that.year ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &gt; that.month) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &lt; that.month) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &gt; that.day ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &lt; that.day ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> month + <span class="string">&quot;/&quot;</span> + day + <span class="string">&quot;/&quot;</span> + year;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>compareTo()必须实现<strong>全序关系</strong>
<ul>
<li>自反性，反对称性及传递性</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>经典算法，包括选择排序、插入排序、希尔排序、归并排序、快速排序和堆排序</p></li>
</ul>
<h3 id="选择排序">选择排序</h3>
<ul>
<li></li>
</ul>
<h3 id="插入排序">插入排序</h3>
<h3 id="排序算法的可视化">排序算法的可视化</h3>
<h3 id="希尔排序">希尔排序</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_01-X</title>
    <url>/2022/01/25/study/linux/hanshunping/01-X/</url>
    <content><![CDATA[<h2 id="基础介绍">基础介绍</h2>
<ul>
<li>本套课程内容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643095663069.png" />
<ul>
<li>基础篇: linux入门、vm和Linux的安装、linux目录结构</li>
<li>实操篇
<ul>
<li>远程登录（xshell，xftp）、实用指令、进程管理、用户管理</li>
<li>vi和vim编辑器、定时任务调度、RPM和YUM</li>
<li>开机、重启和用户登录注销、磁盘分区及挂载、网络配置</li>
</ul></li>
</ul></li>
<li>linux使用的地方
<ul>
<li>在linux下开发项目(需要把javaee项目部署到linux下运行)</li>
<li>linux运维工程师(服务器规划、优化、监控等)</li>
<li>linux嵌入式工程师(linux下驱动开发[c,c++])</li>
</ul></li>
<li>linux应用领域
<ul>
<li>个人桌面</li>
<li>服务器(免费稳定高效)</li>
<li>嵌入式领域(对软件裁剪，内核最小可达几百kb等) ## linux介绍</li>
</ul></li>
<li>linux是一个开源免费操作系统</li>
<li>linux吉祥物<br />
tux(/tu'ks/唾可si)，没找到音标，将就一下<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643096979670.png" /></li>
<li>linux之父，linus，也是git的创作者<br />
主要发行版：<strong>Ubuntu、RedHat，Centos</strong>，Debian等<br />
RedHat和Centos使用同样的源码，但是RedHat收费</li>
<li>Linux和Unix的关系<br />
unix也是一个操作系统，贝尔实验室。做一个多用户分时操作系统，
multics，但是没完成。其中一个后来在这基础上，完成的操作系统为unix
（原本是B语言写的），后面和另一个人用unix用c语言改写了。<br />
unix源码是公开的，后面商业公司拿来包装做成自己的系统，
后面有个人提倡自由时代用户应该对源码享有读写权利而非垄断<br />
后面RichardStallman发起GNU计划（开源计划），Linus参加该计划，并共享出linux内核，于是大家在此基础上开发出各种软件。linux又称GNU/linux<br />
</li>
<li>Linux和Unix关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098018271.png" />
## VMWare安装Centos7.6 在windows中安装Linux系统<br />
</li>
<li>VM和Linux系统在pc中的关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098209668.png" /></li>
<li>安装过程中，网络模式使用NAT模式</li>
<li>选择最小安装，且选择CompatibilityLibraries和DevelopmentTools<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100381319.png" /></li>
<li>linux分区<br />
一般分为三个<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100444776.png" /><br />
一般boot1G,swap分区一般跟内存大小一致，这里是2G，所以根分区就是剩下的，也就是20-1-2=17G<br />
如图，boot，/，swap都是标准分区。且boot和/是ext4的文件格式，swap是swap的文件格式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100873342.png" /><br />
</li>
<li>修改主机名<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101039503.png" /></li>
<li>修改密码及增加除root外的普通用户</li>
<li>修改网络为固定ip(NAT模式下)
<ul>
<li>先在VM里面把子网ip改了，这里改成 192.168.200.0<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101673327.png" /></li>
<li>然后改网关为192.168.200.200<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101741006.png" /></li>
<li>使用yum install -y vim 安装文本编辑工具</li>
<li>最后在linux中改配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li>
<li>其中先修改BOOTPROTO="static"</li>
<li>然后设置ip地址、网关和DNS，
下面是添加到上面的ifcfg-ens33后面，不是直接执行代码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.200.200</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=192.168.200.2</span><br></pre></td></tr></table></figure></li>
<li>使用命令重启网络<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart </span><br><span class="line"># 或者直接重启电脑 reboot</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li>这里顺便装一下zsx<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_01-05</title>
    <url>/2021/12/27/study/redis/shangguigu_BV1Rv41177Af/01-05/</url>
    <content><![CDATA[<h2 id="课程简介">课程简介</h2>
<p>NoSQL数据库简介、Redis概述与安装、常用五大数据结构、配置文件详解、发布与订阅、Redis6新数据类型、Redis与spring
boot整合、事务操作、持久化之RDB、持久化之AOF、主从复制及集群、Redis6应用问题(缓存穿透、击穿、雪崩以及分布式锁)、Redis6新增功能
## NoSQL数据库简介 * Redis属于NoSQL数据库 * 技术分为三大类 *
解决功能性问题：Java、Jsp、RDBMS、Tomcat、Linux、JDBC、SVN *
解决扩展性问题：Struts、Spring、SpringMVC、Hibernate、Mybatis *
解决性能问题：NoSQL、Java线程、Nginx、MQ、ElasticSearch *
缓存数据库的好处 * 完全在内存中，速度快，结构简单 *
作为缓存数据库：减少io的读操作<br />
* NoSQL＝Not Only SQL,不仅仅是SQL，泛指<strong>非泛型数据库</strong> *
不支持ACID(但是NoSQL支持事务) * 选超于SQL的性能 * NoSQL适用场景 *
对数据高并发的读写 * 海量数据的读写 * 对数据高可扩展性 *
NoSQL不适用的场景 * 需要事务支持 * 基于sql的结构化查询存储 *
多种NoSQL数据库介绍 * Memcache
不支持持久化，数据类型单一，一般作为辅助持久化的数据库 * Redis
支持持久化，除了k-v模式还有其他多种数据结构，一般作为辅助持久化的数据库
*
MongoDB，是文档型数据类型；k-v模型，但是对value提供了丰富的查询功能；支持二进制数据及大型对象；替代RDBMS，成为独立数据库
* 大数据时代（行式数据库、列式数据库） * 行式数据库<br />
查询某一块数据的时候效率高<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929802056.png" /><br />
* 列式数据库<br />
查询某一列统计信息快<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929838300.png" /><br />
* 其他<br />
Hbase，Cassandra，图关系数据库(比如社会关系，公共交通网等)<br />
* 小计<br />
NoSQL数据库是为提高性能而产生的非关系型数据库<br />
## Redis概述与安装<br />
* 简单概述<br />
* Redis是一个开源的kv存储系统<br />
*
相比Mencached，支持存储的数据类型更多，包括string，list，set，zset以及hash，这些类型都支持(pop、add/remove及取交并集和差集等)，操作都是原子性的<br />
* Redis数据都是缓存在内存中 *
Redis会周期性地把数据写入磁盘或修改操作写入追加的记录文件 *
能在此基础上实现master-slave(主从)同步 * Redis功能 *
配合关系型数据库做高速缓存 * Redis具有多样的数据结构存储持久化数据 *
其他部分功能<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929869759.png" /><br />
* Redis安装<br />
* 从官网中下载redis-6.xx.tar.gz包(该教程在linux中使用redis6教学) *
编译redis需要gcc环境 * 使用gcc --version查看服务器是否有gcc环境 *
如果没有需要进行安装 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y gcc</span><br><span class="line">或者</span><br><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure> * 将redis压缩文件进行解压
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6xx.tar.gz</span><br></pre></td></tr></table></figure> * 进入解压后的文件夹，并使用make命令进行编译<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure> * 如果报错了，需要先用下面命令清理，之后再进行编译
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make distclean</span><br></pre></td></tr></table></figure> * 安装redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure> *
进入/usr/local/bin目录，查看目录<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640939791651.png" />
* Redis启动 * 前台启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server </span><br></pre></td></tr></table></figure> * 后台启动 *
在刚才解压的文件夹中，拷贝出redis.conf文件(这里拷贝到/etc/目录下)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure> * 到etc中修改redis.conf文件<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br><span class="line"># 进入编辑器后使用下面命令进行搜索并回车</span><br><span class="line">/daemonize no</span><br></pre></td></tr></table></figure> 将no改为yes并保存 * 进入/usr/local/bin目录启动redis
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf </span><br></pre></td></tr></table></figure> * 查看进程，发现redis已经启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure> *
使用redis-cli 客户端连接redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">keys * </span><br></pre></td></tr></table></figure> ## 相关知识<br />
* Redis6379的由来 * 人名Merz 在九宫格对应的数字就是6379<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283251602.png" />
* Redis默认有15个库，默认数据都在数据库0中，所有库的密码都是相同的 *
Redis是单线程+多路复用技术<br />
* Redis是串行操作<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283379975.png" />
* 火车站的例子<br />
当1，2，3没有票的时候，不用一直等待买票，可以继续做自己的事情，黄牛买到票就会通知123进行取票<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283510456.png" />
* Memcached和Redis区别<br />
* Memcached支持单一数据类型，Redis支持多数据类型 *
Memcached不支持持久化<br />
* Memcached用的多线程+锁的机制，Redis用的是单线程+多路复用程序 ##
End</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_06-11</title>
    <url>/2022/01/04/study/redis/shangguigu_BV1Rv41177Af/06-11/</url>
    <content><![CDATA[<h2 id="redis针对key的基本操作">Redis针对key的基本操作</h2>
<ul>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys * #查找当前库所有库</span><br><span class="line">exists key1 #key1是否存在 1存在；0不存在</span><br><span class="line">type key2 #key2的类型</span><br><span class="line">del key3 #删除key3</span><br><span class="line">unlink key3 #删除key3(选择非阻塞删除。会先从元数据删除，而真正删除是异步删除)</span><br><span class="line">expire key1 10 #设置key1的过期时间，单位秒</span><br><span class="line">ttl key1 #获取key1的剩余存活时间，-2表示key已过期或不存在，-1表示永不过期</span><br><span class="line">select 1 #切换到1号库(redis中有15个库，默认在库1)</span><br><span class="line">dbsize #查找当前redis库中有多少个key</span><br><span class="line">flushdb #清空当前库</span><br><span class="line">flushall #清空所有库</span><br></pre></td></tr></table></figure> ## Redis中常用数据类型 ### 字符串（String）</li>
<li>String是二进制安全的，可以包含jpg图片或序列化的对象</li>
<li>一个Redis中字符串value最多可以只能是512M</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key1 value1</span><br><span class="line">get key1 </span><br><span class="line">set key1 value11 #将覆盖上一个值</span><br><span class="line">append key1 abc #在key1的值追加&quot;abc&quot;</span><br><span class="line">strlen key1 #key值的长度</span><br><span class="line">setnx key1 value #当key不存在时才设置key</span><br><span class="line">incr n1 #将n1的值加一,,如果n1不存在则会创建key n1 并改为1(0+1)</span><br><span class="line">decr n1 #将n1的值减一,如果n1不存在则会创建key n1 并改为-1(0-1)</span><br><span class="line">incrby n1 20 #将n1的值加20，其他同上</span><br><span class="line">decrby n1 20 #将n1的值减20，其他同上</span><br></pre></td></tr></table></figure></li>
<li>redis原子性<br />
incr具有原子性操作<br />
java中的i++不是原子操作<br />
</li>
<li>其他命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mset k1 v1 k2 v2</span><br><span class="line">mget k1 k2 </span><br><span class="line">msetnx k1 v1 k2 v2 #仅当所有的key都不存在时才会进行设置</span><br><span class="line">getrange name 0 3 #截断字符串[0,3]</span><br><span class="line">setrange name 3 123 #从下标[3]开始替换字符串（换成123）</span><br><span class="line">setex k1 20 v1 #设置过期时间为20s</span><br><span class="line">expire k1 30 #设置过期时间为30s</span><br><span class="line">getset k1 123 #获取旧值，并设置一个新值</span><br></pre></td></tr></table></figure></li>
<li>数据结构，SimpleDynamicString，SDS，简单动态字符串，内部结构类似Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384642245.png" /><br />
### 列表 (List)<br />
</li>
<li>单键多值<br />
</li>
<li>底层是双向链表<br />
</li>
<li>从左放 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush k1 v1 v2 v3 #从左边放(从左往右推)</span><br><span class="line">lrange k1 0 -1 #从左边取(v3 v2 v1)</span><br></pre></td></tr></table></figure></li>
<li>lpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384992243.png" /><br />
</li>
<li>从右放<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpush k2 v1 v2 v3 </span><br></pre></td></tr></table></figure></li>
<li>brpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642385552581.png" /><br />
</li>
<li>lpop/rpop<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop k2 #从左边弹出一个值</span><br><span class="line">lpop k2 2 #从左边弹出两个值，当键没有包含值时，键被删除</span><br></pre></td></tr></table></figure></li>
<li>rpoplpush<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush a a1 a2 a3</span><br><span class="line">rpush b b1 b2 b3</span><br><span class="line">rpoplpush a b #此时a:a1 a2，b:a3 b1 b2 b3</span><br></pre></td></tr></table></figure></li>
<li>lrange <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrange b 1 2 #获取b中下标[1,2]的所有值</span><br><span class="line">lrange b 1 -1 #获取所有值[1,最大下标]的所有值</span><br></pre></td></tr></table></figure></li>
<li>lindex,llen <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex b 1 #直接取第一个下标的元素</span><br><span class="line">llen b #获取列表的长度</span><br></pre></td></tr></table></figure></li>
<li>linsert <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linsert b before b2 myinsert</span><br><span class="line">linsert b after b2 myinsert</span><br><span class="line">#在某个列表的值(如果重复取第一个)的位置之前/之后插入值</span><br></pre></td></tr></table></figure> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405713546.png" /></li>
<li>lrem,lset <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem b 2 a #从b列表中，删除两个a（从左往右）</span><br><span class="line">lset b 2 AA #把下标2的值设置为AA</span><br></pre></td></tr></table></figure></li>
<li>list数据结构是一个快速列表，quicklist<br />
当元素较少的时候，会使用连续的内存存储，结构时ziplist，即压缩列表；当数据多的时候会有多个压缩列表，然后会链接到一起(使用双向指针)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405814686.png" />
### 集合(Set)</li>
<li>特点：无序，不重复<br />
</li>
<li>Set:string类型的无序集合，底层是一个value为null的hash表；添加/删除时间复杂度为O(1)</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd k1 v1 v2 v3 v2 v2 v1 #设置集合中的值</span><br><span class="line">smembers k1 #取出集合中的值</span><br><span class="line">sismember k1 v3 #k1是否存在v3，存在返回1，不存在返回0</span><br><span class="line">scard k1 #返回集合中元素的个数</span><br><span class="line">srem k1 v2 v3 #删除集合中的v2和v3</span><br><span class="line">spop k1 #从k1中随机取出一个值</span><br><span class="line">srandmember k1 2 #从k1中随机取出2个值</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smove a k a1 #从a中将a1移动到k中</span><br><span class="line">sinter a k #取a，k的交集</span><br><span class="line">sunion a k #取a，k的并集</span><br><span class="line">sdiff a k #返回两个集合的差集（从集合a中，去除存在集合k中的元素，即a-k）</span><br></pre></td></tr></table></figure></li>
<li>Set数据结构时dict字典，字典使用哈希表实现的 ### 哈希（Hash)</li>
<li>是String类型的field和value的映射表，用来存储对象,类似java中的Map&lt;String,Object&gt;<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405567709.png" /><br />
</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset user:1001 id 1 #设置(对象)user:1001的id属性值</span><br><span class="line">hset user:1001 name zhangsan </span><br><span class="line">hget user:1001 name #取出user:1001的name</span><br><span class="line">hmset user:1001 id 1 name zhangsan #批量设置（现在hset也可以批量设置了，hmset已弃用）</span><br><span class="line">hexists user:1001 id 1 #判断属性id是否存在</span><br><span class="line">hkeys user:1001 #查看hash结构中的所有filed</span><br><span class="line">hvals user:1001 #查看hash结构中所有value</span><br><span class="line">hincrby user:1001 age 2 #给hash结构的age属性值加2</span><br><span class="line">hsetnx user:1001 age 10 #给hash结构的age属性设置值为10（如果age属性不存在）</span><br></pre></td></tr></table></figure></li>
<li>hash类型数据结构，当field-value长度较短时用的是ziplist，否则使用的是hashtable
### 有序集合(ZSet)</li>
<li>与set很相似，但是是有序的</li>
<li>有序集合的所有元素（成员）都关联一个评分(score)，score用来从最低到最高方式进行排序，成员唯一但评分是重复的</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd topn 100 xiaoming 120 xiaohong 60 xiaochen #添加key并为每个成员添加评分</span><br><span class="line">zadd topn xiaoli 200 </span><br><span class="line">zrange topn 0 -1 #查找出所有成员(按排名由小到大)</span><br><span class="line">zrange topn 0 -1 withscores #从小到大查找所有成员并显示分数</span><br><span class="line">zrangebyscore topn 130 200 #查找所有在130-200的成员</span><br><span class="line">zrevrangebyscore topn 200 130 #从大到小查找所有成员（注意，从大到小时第一个值必须大于等于第二个）</span><br><span class="line">zincrby topn 15 xiaohong #给小红添加15分</span><br><span class="line">zrem topn xiaohong #删除元素</span><br><span class="line">zcount topn 10 200 #统计该集合，分数区间内的元素个数</span><br><span class="line">zrank topn xiaohong #xiaohong的排名，从0开始</span><br></pre></td></tr></table></figure></li>
<li>zset底层数据结构
<ul>
<li>hash结构<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408140352.png" /></li>
<li>跳跃表 给元素value排序，根据score的范围获取元素列表</li>
<li>对比有序链表和跳跃表
<ul>
<li>查找51元素<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408284497.png" /></li>
<li>跳跃表<br />
按图中的顺序查找，查找四次就能找到<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408430332.png" /></li>
</ul></li>
</ul></li>
<li>End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_12-17</title>
    <url>/2022/01/18/study/redis/shangguigu_BV1Rv41177Af/12-17/</url>
    <content><![CDATA[<h2 id="redis配置文件">Redis配置文件</h2>
<ul>
<li>redis中单位的设置，支持k,kb,m,mb,g,gb，且不区分大小写<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642470299824.png" /></li>
<li>include (包含其他文件，比如公共部分)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642471413477.png" /><br />
</li>
<li>bind <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 ::1 #listens on loopback IPv4 and IPv6 </span><br></pre></td></tr></table></figure>
<ul>
<li>后面这个::1，相当于ipv6版的127.0.0.1。在redis配置文件中，整句表示只允许本地网卡的某个ip连接(但是它并不能指定某个主机连接到redis中。比如本机有两个网卡，两个ip，可以限定只有其中一个ip可以连接)</li>
<li>如果注释掉了/或者bind 0.0.0.0，表示允许所有主机连接</li>
</ul></li>
<li>protected-mode <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected-mode yes </span><br></pre></td></tr></table></figure>
<ul>
<li>设置保护模式为yes，protected是redis本身的一个安全层，这个安全层在同时满足下面三个条件的时候会开启，开启后只有本机可以访问redis
<ul>
<li>protected-mode yes</li>
<li>没有bind指令(bind 0.0.0.0不属于这个条件)</li>
<li>没有设置密码 (没有设置requirepass password)<br />
</li>
</ul></li>
<li>只要上面一个条件不满足，就不会开启保护模式。换言之，只要设置了bind
0.0.0.0或者没有设置bind，且不满足上面三个条件之一，就能够进行远程访问(当然，linux/windows的6379端口要开放)</li>
</ul></li>
<li>tcp-backlog 表示未连接队列总和<br />
</li>
<li>timeout 秒为单位，时间内没操作则断开连接</li>
<li>tcp-keepalive 300 心跳检测，每隔300s检测连接是否存在</li>
<li>pidfile /var/run/redis_6379.pid 将进程号保存到文件中</li>
<li>loglevel
表示日志的级别/debug/verbose/<strong>notice</strong>/warning</li>
<li>logfile "" 设置日志的路径</li>
<li>database 16 默认有16个库</li>
<li>requirepass password 设置密码</li>
<li>maxclients 设置最大连接数</li>
<li>maxmemory 设置最大内存量，达到则会根据移除策略进行移除操作 ##
Redis的发布和订阅</li>
<li>发布订阅，pub/sub，是一种消息通信模式：发送者pub发送消息，订阅器sub接收消息</li>
<li>发布者能发布消息，订阅者可以订阅/接收消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642496809416.png" /><br />
</li>
<li>操作<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe channel1 #客户端A订阅频道 </span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publish channel1 helloly #向频道发送消息</span><br></pre></td></tr></table></figure>
此时订阅channel1频道的客户端就会接收到消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642557791117.png" />
## redis新数据类型<br />
### Bitmaps
<ul>
<li><p>进行二进制操作</p></li>
<li><p>可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做<strong>偏移量</strong><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642560262874.png" /><br />
</p></li>
<li><p>bitcount:统计字符串被设置为1的bit数，这里结果是5</p></li>
<li><p>bitcount u1 0 1 #统计字符串第0个字节到第1个字节1的bit数<br />
(1,6,11,15,19bit值为1)[也就是统计第0到第15位的1的个数]<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u1 1 1</span><br><span class="line">setbit u1 2 1</span><br><span class="line">setbit u1 5 1</span><br><span class="line">setbit u1 9 1</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u2 0 1</span><br><span class="line">setbit u2 1 1</span><br><span class="line">setbit u2 4 1</span><br><span class="line">setbit u2 9 1</span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1，u2共同位为1的个数，如上1,9都是1，所以返回2，且 bitcount
u1--u2的值为2（第1和第9位为1），其实就是<strong>u1和u2进行&amp;操作</strong><br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitop and u1-and-u2 u1 u2 </span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1或u2存在值为1的位的个数，如上结果为8-2=6，结果存在u1-or-u2中，即1，2，5，9，0，4的位
值为1(的字符串)，其实就是<strong>u1和u2进行或操作</strong><br />
</p></li>
<li><p>性能比较，假设有一亿个用户，用户id数值递增，需求是存储每个用户是否活跃。下面是使用hashMap和bitmaps的比较<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642562600909.png" /></p></li>
<li><p>bitmaps主要用来进行位操作计算 ### HyperLogLog</p></li>
</ul></li>
<li>解决基数问题<br />
从{1,3,5,5,7,8,8,7,9}找出基数：基数为5，即不重复元素的个数</li>
<li>解决方案
<ul>
<li>mysql中可以用distinct count</li>
<li>redis中可以用hash,set,bitmaps</li>
</ul></li>
<li>使用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pfadd a 1 2 3 4 3 3 3 2 1 6 7</span><br><span class="line">pfcount a #得到基数 6 </span><br><span class="line">pfadd b 1 10 7 15 #基数4</span><br><span class="line">pfmerge c a b #将a，b合并到c</span><br><span class="line">pfcount c #得到基数8</span><br></pre></td></tr></table></figure> ### GEO类型 (geographic)<br />
</li>
<li>基本命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geoadd china:city 121.47 31.43 shanghai</span><br><span class="line">geoadd china:city 166.50 29.53 chongqing 114.05 22.52  shenzhen</span><br><span class="line">geoadd china:city 16.38 39.90 beijing </span><br></pre></td></tr></table></figure></li>
<li>不支持南北极，所以有效经度在-180到180度，有效纬度从-85.05xxx度到85.05xxx度</li>
<li>获取坐标值及直线距离 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geopos china:city beijing #获取beijing经纬度</span><br><span class="line">geodist china:city beijing shenzhen km #获取beijing到shenzhen的直线距离</span><br><span class="line"># 单位有m,km,ft,mi</span><br></pre></td></tr></table></figure></li>
<li>以给定的经纬度为中心，找出某一半径内的元素<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></table></figure> ## End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_18</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/18/</url>
    <content><![CDATA[<h2 id="jedis操作redis6">Jedis操作Redis6</h2>
<ul>
<li>插曲:本地项目关联github远程库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">#-m表示强制重命名</span><br><span class="line">git branch -M main</span><br><span class="line">#使用别名</span><br><span class="line">git remote add origin git@github.com:lwmfjc/jedis_demo.git</span><br><span class="line">#用了-u之后以后可以直接用git push替代整行 </span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure></li>
<li>jedis pom依赖 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>jedis使用 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> </span><br><span class="line">        DefaultJedisClientConfig.builder()</span><br><span class="line">                .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">        <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line">        <span class="comment">//ping</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//返回所有key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;key count: &quot;</span> +</span><br><span class="line">                keys.size());</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;key--:%s---value:%s\n&quot;</span>, </span><br><span class="line">        key, jedis.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;操作list&quot;</span>);</span><br><span class="line">        <span class="comment">//操作list</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;ly-list&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;css&quot;</span>);</span><br><span class="line">        List&lt;String&gt; lrange = jedis.lrange(<span class="string">&quot;ly-list&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : lrange) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作set</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作set&quot;</span>);</span><br><span class="line">        jedis.sadd(<span class="string">&quot;ly-set&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;ly-set&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : smembers) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作hash</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作hash&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;lidian&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;sex&quot;</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; lyHash = jedis.hgetAll(<span class="string">&quot;ly-hash&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : lyHash.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + lyHash.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作zset</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作zset&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">100</span>, <span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">80</span>, <span class="string">&quot;xiaoli&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">90</span>, <span class="string">&quot;xiaochen&quot;</span>);</span><br><span class="line">        List&lt;String&gt; person = jedis.zrange(<span class="string">&quot;person&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : person) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束操作</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_19-A</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/19-A/</url>
    <content><![CDATA[<h2 id="验证码模拟">验证码模拟</h2>
<ul>
<li>首先需要一个MyRedis单例类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyRedis单例类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJedis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jedis myJedis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果是空则进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//由于synchronized同步是在条件判断内，所以同步</span></span><br><span class="line">            <span class="comment">//并不会一直都执行，增加了效率</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyJedis.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置密码</span></span><br><span class="line">                    DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> DefaultJedisClientConfig.builder()</span><br><span class="line">                            .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">                    <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">                    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">redis</span>.clients.jedis.Jedis(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> jedis;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myJedis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
</search>
