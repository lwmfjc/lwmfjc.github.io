<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年最后一个周日</title>
    <url>/2021/12/26/life/20121226/</url>
    <content><![CDATA[<h2 id="装宽带">装宽带</h2>
<p>太晚了，不想写了-
-。简单写几个字吧，满心期待的装了宽带，但是并没有我想像的那么快乐。反而打了两把游戏更难过了，难过的是浪费了时间也什么都没得到
## 图书馆<br />
下午跑去图书馆收获倒是挺多，可能是我不太熟悉，对于书架上的书没有太大的感触。但是环境真的太棒了，很安静，感觉多发出点声音我都会觉得不好意思，大家都很自觉。也许对经常网上都能找到电子书看(程序员的事怎么能是盗呢)的人帮助不会特别大，但对于很大一部分人绝对帮助特别大，包括学生、老年人、还有一些文学类书籍阅读者等等(我一直认为文学类的一定要纸质的看起来才有味道~)<br />
当然，从图书馆回来我又打了两把游戏 o_O，dota2 yyds!!
打完日常卸载，哈哈</p>
<p>每次去图书馆我都会想起那句话，<code>"一个国家为其年轻人所提供的教育，决定了这个国家未来的样子"</code>。<br />
希望能多办点这样的图书馆，大家都能少点浮躁，多点沉淀；虽然我并不是热心公益人士，但我还是希望咱们国家的人民都生活的越来越好。不要辜负我们曾经受过的苦难。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>《作酒》有感</title>
    <url>/2022/04/16/life/20220416/</url>
    <content><![CDATA[<p>最近几天吃饭，经常听到一首很嗨的歌。旋律很轻快，其实本来也就一听而过，可能是耳闻目染次数多了，好奇心上来了，查了下歌词。</p>
<p>听这首歌期间我居然联想了很多，果然是老emo了。不知道怎么回事，我这种与世无争的心态，听完后居然也让我幻想了一下这歌描述的爱情模样。我又突然想到，如今社会上离婚率居高不下，也许与网络信息的传输有密切关联。如果是古代，嫁错人或者娶错人，大家也都都认了，有什么小打小闹都互相包含。而如今，生活压力不断增大，加上网络上爆炸式（至少效果是）的宣传爱情，对比显著，很让人一着魔就陷进去，就摒弃几年甚至十几年的夫妻之情，去追求所谓的真爱、自由。</p>
<p>每个人对自己的过往，或多或少都会不甘。如果这种不甘自己没有办法化解，那么就会在某一刻爆发。每个人都应该，也必定会为自己曾经的所作所为负责。不要懵懵懂懂地进入(现代)婚姻，这样对自己和它人都极其不负责。
爆炸式的信息接收会激发你所有的冲动与不甘。</p>
<iframe src="//player.bilibili.com/player.html?aid=211411097&amp;bvid=BV1aa411y7u9&amp;cid=505755578&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>人为什么要结婚(找对象)</title>
    <url>/2022/07/24/life/20220724/</url>
    <content><![CDATA[<p>其实这是我在六七年前思考的一个问题，我觉得结婚，并不能单纯的作为一个世俗任务。很多人，是因为年纪到了结婚，因为父母催结婚，因为看到别人结婚而结婚，总之，是为别人而活。但我觉得，结婚的本质，应该是两个人生活的结合，包括了很多，比如生活中的喜怒哀乐互享，这是最基础的，开心了有人替你高兴，生气难过了有人安慰你、心疼你。如果连这个都做不到而各活各的，那我实在想不明白这种婚姻的意义在哪，而现在很多情况正是这样，有为了家庭而工作辛苦而没有交集的，也有单纯的相处腻了、懒了。</p>
<p>而说到腻，这就在于一点，就是有些婚姻是很仓促的，压根就没看清楚对方的样子(性格、三观)，或者是不清楚自己喜欢的是什么样的人，就已经在一起了，之后才发现对方很多问题不是自己能接受的，但是这个时候已经晚了。所以“内在”，才能持久吸引一个人，因为这是不轻易随时光变迁而改变的。</p>
<p>分享也并非简单的分享，如果分享的东西对方没有啥感觉，那这种关系也是很难持久的。因此，最佳的婚姻，应该是异性知己，你的一些心理，不用向对方解释太多，当然
这里并不是说一开始就是这种状态，更多是通过后面不断了解、不断磨合而达成这种状态，当你被别人误会了有人理解，这是世间最好的良药。理解一个人，就是拯救一个世界，一花一世界，一树一菩提。</p>
<p><strong>婚姻，就是找个互相理解的爱人，共享世间冷暖，白首不相离。</strong></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2021/12/24/test/test1/</url>
    <content><![CDATA[<p>随便加点内容，注意，上面空了一行</p>
<h3 id="测试">测试</h3>
<h2 id="图片测试">图片测试</h2>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2021/12/24/test/test2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hello=<span class="string">&quot;ly&quot;</span>; </span><br><span class="line">System.out.println(<span class="string">&quot;Helo World&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>git使用ssh连不上</title>
    <url>/2022/04/22/problem/git/01/</url>
    <content><![CDATA[<ul>
<li><p>处理方式 在系统的host文件中，添加ip指定</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.4 github.com</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>git问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/01a/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/p1/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题01</title>
    <url>/2022/05/14/problem/idea/01/</url>
    <content><![CDATA[<h2 id="cannot-download-sources">Cannot download sources</h2>
<p>在maven项目(根目录)下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn dependency:resolve -Dclassifier=sources</span><br></pre></td></tr></table></figure>
<p>会开始下载，有控制台输出，结束后再点即可</p>
<h2 id="预留">预留</h2>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>idea问题</tag>
      </tags>
  </entry>
  <entry>
    <title>类、实例初始化</title>
    <url>/2022/09/22/review/basics/Class_and_instance_initialization/</url>
    <content><![CDATA[<h2 id="代码">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> i=test();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> j=method();</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(6)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Son()&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(7)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(8)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(9)&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(10)&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		Son s1=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">		System.out.println();</span><br><span class="line">		Son s2=<span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> i=test();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> j=method();</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(1)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Father()&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(2)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(3)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(4)&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;(5)&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(5)(1)(10)(6)(9)(3)(2)(9)(8)(7)</span><br><span class="line">(9)(3)(2)(9)(8)(7)</span><br></pre></td></tr></table></figure>
<h2 id="分析">分析</h2>
<ul>
<li><p>类初始化过程</p>
<ul>
<li>当实例化了一个对象/或main所在类会导致类初始化</li>
<li>子类初始化前会先初始化父类</li>
<li>类初始化执行的是<clinit >方法，编译查看字节码可得知 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922091920061.png"
alt="image-20220922091920061" /></li>
<li><clinit >由静态类变量显示赋值语句 以及
静态代码块组成(由上到下顺序)，且只执行一次<br />
如下<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922100207544.png"
alt="image-20220922100207544" /></li>
</ul></li>
<li><p>实例初始化过程</p>
<ul>
<li>执行的是<init>方法 由非静态实例变量显示赋值语句 以及 非静态代码块
[从上到下顺序] 以及对应构造器代码[最后执行] 组成
其中，子类构造器一定会调用super() [最前面] 1） super() 【最前】 2）i =
test() 3）子类的非静态代码块 【2，3按顺序】
<ol start="4" type="1">
<li>子类的无参构造(最后)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922100330126.png"
alt="image-20220922100330126" /></li>
</ol></li>
</ul></li>
<li><p>重写的问题
如上所示，初始化Son对象的时候，会先调用super()方法，即初始化父类，然后会先调用父类的
非静态变量赋值以及非静态代码块，最后才是父类的构造器代码块</p>
<p>调用父类非静态变量赋值的时候，如果调用了非静态方法，就会涉及到重写问题，比如这里的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> i= test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里会调用子类(当前正在初始化的对象)的test()方法，而不是父类的test()</p>
<ul>
<li>哪些方法不可被重写
final方法、静态方法、父类中的private等修饰使得子类不可见的方法</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>方法的参数传递机制</title>
    <url>/2022/09/22/review/basics/Method_parameter_passing_mechanism/</url>
    <content><![CDATA[<h2 id="代码">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exam4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">MyData</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyData</span>();</span><br><span class="line"></span><br><span class="line">        change(i, str, num, arr, my);</span><br><span class="line">        System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;str = &quot;</span> + str);</span><br><span class="line">        System.out.println(<span class="string">&quot;num = &quot;</span> + num);</span><br><span class="line">        System.out.println(<span class="string">&quot;arr = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">&quot;my.a = &quot;</span> + my.a); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> j, String s, Integer n, <span class="type">int</span>[] a,</span></span><br><span class="line"><span class="params">                              MyData m)</span> &#123;</span><br><span class="line">        j+=<span class="number">1</span>;</span><br><span class="line">        s+=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">        n+=<span class="number">1</span>;</span><br><span class="line">        a[<span class="number">0</span>]+=<span class="number">1</span>;</span><br><span class="line">        m.a+=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i = 1</span><br><span class="line">str = hello</span><br><span class="line">num = 2</span><br><span class="line">arr = [2, 2, 3, 4, 5]</span><br><span class="line">my.a = 11</span><br></pre></td></tr></table></figure>
<h2 id="知识点">知识点</h2>
<ul>
<li>方法的参数传递机制</li>
<li>String、包装类等对象的不可变性</li>
</ul>
<h2 id="分析">分析</h2>
<ul>
<li><p>对于包装类，如果是使用new，那么一定是开辟新的空间；如果是直接赋值，那么-128-127之间会有缓存池(堆中)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当使用new的时候，一定在堆中新开辟的空间</span></span><br><span class="line">Integer a1= <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line">Integer b1= <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line">System.out.println(a1 == b1);<span class="comment">//false</span></span><br><span class="line">Integer a2= -<span class="number">128</span>;</span><br><span class="line">Integer b2= -<span class="number">128</span>;</span><br><span class="line">System.out.println(a2 == b2);<span class="comment">//true</span></span><br><span class="line">Integer a21= -<span class="number">129</span>;</span><br><span class="line">Integer b21= -<span class="number">129</span>;</span><br><span class="line">System.out.println(a21 == b21);<span class="comment">//false</span></span><br><span class="line">Integer a3=  <span class="number">127</span>;</span><br><span class="line">Integer b3=  <span class="number">127</span>;</span><br><span class="line">System.out.println(a3 == b3);<span class="comment">//true</span></span><br><span class="line">Integer a4=  <span class="number">22</span>;</span><br><span class="line">Integer b4=  <span class="number">22</span>;</span><br><span class="line">System.out.println(a4 == b4);<span class="comment">//true</span></span><br><span class="line">Integer a31=  <span class="number">128</span>;</span><br><span class="line">Integer b31=  <span class="number">128</span>;</span><br><span class="line">System.out.println(a31 == b31);<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
<li><p>对于String类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先查找常量池中是否有&quot;abc&quot;，如果有直接返回在常量池中的引用,</span></span><br><span class="line"><span class="comment">//如果没有，则在常量池中创建&quot;abc&quot;,然后返回该引用</span></span><br><span class="line">String a=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//先查找常量池中是否有&quot;abc&quot;，如果有则在堆内存中创建对象，然后返回堆内存中的地址</span></span><br><span class="line"><span class="comment">//如果没有，则先在常量池中创建字符串对象，然后再在堆内存中创建对象，最后返回堆内存中的地址</span></span><br><span class="line">String ab=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(a==ab);<span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//intern() //判断常量池中是否有ab对象的字符串，如果存在&quot;abc&quot;则返回&quot;abc&quot;在</span></span><br><span class="line"><span class="comment">//常量池中的引用，如果不存在则在常量池中创建,</span></span><br><span class="line"><span class="comment">//并返回&quot;abc&quot;在常量池中的引用</span></span><br><span class="line">System.out.println(a==ab.intern());<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li>
<li><p>change方法调用之前，jvm中的结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922113056133.png"
alt="image-20220922113056133" /></p></li>
<li><p>方法栈帧中的数据 执行change方法后，实参给形参赋值：
基本数据类型：数据值 引用数据类型：地址值</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922211437515.png"
alt="image-20220922211437515" />
<figcaption aria-hidden="true">image-20220922211437515</figcaption>
</figure>
<p>当实参是特殊的类型时：比如String、包装类等对象，不可变，即
<code>s+="world";</code> 会导致创建两个对象，如图（ Integer也是） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220922211733044.png"
alt="image-20220922211733044" /></p></li>
</ul>
<p>数组和对象，则是找到堆内存中的地址，直接更改</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>成员变量与局部变量</title>
    <url>/2022/09/23/review/basics/member_variables_and_local_variables/</url>
    <content><![CDATA[<h2 id="代码">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> s;</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">     i++;</span><br><span class="line">     j++;</span><br><span class="line">     s++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> j)</span> &#123;</span><br><span class="line">     j++;</span><br><span class="line">     i++;</span><br><span class="line">     s++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="type">Exam5</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exam5</span>();</span><br><span class="line">     <span class="type">Exam5</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Exam5</span>();</span><br><span class="line">     obj1.test(<span class="number">10</span>);</span><br><span class="line">     obj1.test(<span class="number">20</span>);</span><br><span class="line">     obj2.test(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(obj1.i + <span class="string">&quot;,&quot;</span> + obj1.j + <span class="string">&quot;,&quot;</span> + obj1.s);</span><br><span class="line">     System.out.println(obj2.i + <span class="string">&quot;,&quot;</span> + obj2.j + <span class="string">&quot;,&quot;</span> + obj2.s);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2,1,5</span><br><span class="line">1,1,5</span><br></pre></td></tr></table></figure>
<h2 id="分析">分析</h2>
<h3 id="就近原则">就近原则</h3>
<p>代码中有很多修改变量的语句，下面是用就近原则+作用域分析的图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923110928107.png"
alt="image-20220923110928107" /></p>
<h3 id="局部变量和类变量">局部变量和类变量</h3>
<ul>
<li><p>局部变量包括方法体{}，形参，以及代码块</p>
<p>带static为类变量，不带的为实例变量<br />
代码中的变量分类 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923111604883.png"
alt="image-20220923111604883" /></p></li>
<li><p>修饰符 --局部变量只有final -- 实例变量 public , protected ,
private , final , static , volatile transient</p></li>
<li><p>存储位置</p>
<p>局部变量：栈<br />
实例变量：堆<br />
类变量：方法区（类信息、常量、静态变量）<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923111251514.png"
alt="image-20220923111251514" /></p></li>
<li><p>作用域 局部变量：从声明处开始，到所属的 } 结束 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923112828922.png"
alt="image-20220923112828922" /></p></li>
<li><p>this <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923113054686.png"
alt="image-20220923113054686" /></p></li>
<li><p>题中的s既可以用成员变量访问，也可以用类名访问</p></li>
<li><p>生命周期</p>
<ul>
<li>局部变量：每一个线程，每一次调用执行都是新的生命周期</li>
<li>实例变量：随着对象的创建而初始化，随着对象被回收而消亡（垃圾回收器），每一个对象的实例变量是独立的</li>
<li>类变量：随着类的初始化而初始化，随着类的卸载而消亡，该类的所有对象的类变量是共享的</li>
</ul></li>
</ul>
<h3 id="代码的执行jvm中">代码的执行，jvm中</h3>
<p>Exam5 obj1=new Exam5();</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923113659581.png"
alt="image-20220923113659581" />
<figcaption aria-hidden="true">image-20220923113659581</figcaption>
</figure>
<p>obj1.test(10)</p>
<p>非静态代码块或者进入方法，都会在栈中开辟空间存储局部变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923113808372.png"
alt="image-20220923113808372" /></p>
<p>注意：静态代码块定义的变量，只会存在于静态代码块中。不是类变量，也不属于成员变量</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>递归与迭代</title>
    <url>/2022/09/22/review/basics/recursion_and_iteration/</url>
    <content><![CDATA[<h2 id="编程题">编程题</h2>
<p>有n步台阶，一次只能上1步或2步，共有多少种走法</p>
<h3 id="分析">分析</h3>
<ul>
<li><p>分析<br />
n = 1，1步 f(1) = 1<br />
n = 2, 两个1步,2步 f(2) = 2<br />
n = 3, 分两种情况： 最后1步是2级台阶/最后1步是1级台阶， 即 f(3) =
f(1)+f(2) n = 4, 分两种情况： 最后1步是2级台阶/最后1步是1级台阶， 即f(4)
= f(2)+f(3)</p>
<p>也就是说，不管有几(n)个台阶，总要分成两种情况：最后1步是2级台阶/最后1步是1级台阶，即
f(n)= f(n-2) + f(n-1)</p></li>
</ul>
<h3 id="递归">递归</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> n;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> f(n-<span class="number">2</span>)+f(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(f(<span class="number">1</span>)); <span class="comment">//1</span></span><br><span class="line">      System.out.println(f(<span class="number">2</span>)); <span class="comment">//2</span></span><br><span class="line">      System.out.println(f(<span class="number">3</span>)); <span class="comment">//3</span></span><br><span class="line">      System.out.println(f(<span class="number">4</span>)); <span class="comment">//5</span></span><br><span class="line">      System.out.println(f(<span class="number">5</span>)); <span class="comment">//8</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>debug调试 方法栈 f(4)----&gt;分解成f(2)+f(3) f(2)---返回-
f(3)---f(2)返回---f(1)返回 【f(3)分解成f(2)和f(1)】 方法栈的个数： <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923093752921.png"
alt="image-20220923093752921" /></li>
</ul>
<h3 id="使用循环">使用循环</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">loop</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(n + <span class="string">&quot;不能小于1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> one=<span class="number">2</span>;<span class="comment">//最后只走1步，会有2种走法</span></span><br><span class="line">    <span class="type">int</span> two=<span class="number">1</span>;<span class="comment">//最后走2步，会有1种走法</span></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="comment">//最后跨两级台阶+最后跨一级台阶的走法</span></span><br><span class="line">        sum=two+one;</span><br><span class="line">        two=one;</span><br><span class="line">        one=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220923095719037.png"
alt="image-20220923095719037" />
<figcaption aria-hidden="true">image-20220923095719037</figcaption>
</figure>
<h3 id="小结">小结</h3>
<ul>
<li>方法调用自身称为递归，利用变量的原值推出新值称为迭代(while循环)</li>
<li>递归<br />
优点：大问题转换为小问题，代码精简<br />
缺点：浪费空间（栈空间），可能会照成栈的溢出</li>
<li>迭代<br />
优点：效率高，时间只受循环次数限制，不受出栈入栈时间<br />
缺点：不如递归精简，可读性稍差</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>自增变量</title>
    <url>/2022/09/21/review/basics/self_incrementing_variable/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">i=i++;</span><br><span class="line"><span class="type">int</span> j=i++;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i+ ++i * i++;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span>+k);</span><br></pre></td></tr></table></figure>
<h2 id="讲解">讲解</h2>
<h3
id="对于操作数栈和局部变量表的理解">对于操作数栈和局部变量表的理解</h3>
<ul>
<li><p>对于下面的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">9</span>;</span><br><span class="line">j=i;</span><br></pre></td></tr></table></figure>
<p>反编译之后，查看字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> bipush <span class="number">10</span></span><br><span class="line"><span class="number">2</span> istore_1</span><br><span class="line"><span class="number">3</span> bipush <span class="number">9</span></span><br><span class="line"><span class="number">5</span> istore_2</span><br><span class="line"><span class="number">6</span> iload_1</span><br><span class="line"><span class="number">7</span> istore_2</span><br><span class="line"><span class="number">8</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>如下图，这三行代码，是依次把10，9先放到局部变量表的1，2位置。<br />
之后呢，再把局部变量表中1位置的值，放入操作数栈中<br />
最后，将操作数栈弹出一个数(10)，将数值赋给局部变量表中的位置2</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220921114316189.png"
alt="image-20220921114316189" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220921122617548.png"
alt="image-20220921122617548" />
如上图，当方法为静态方法时，局部变量表0位置存储的是实参第1个数</p>
<p>(当方法为非静态方法时，局部变量表0位置存储的是this引用)</p></li>
<li><p>对于下面这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> j=<span class="number">20</span>;</span><br><span class="line">i=i++;</span><br><span class="line">j=++j;</span><br><span class="line">System.out.println(i);</span><br><span class="line">System.out.println(j);</span><br></pre></td></tr></table></figure>
<p>编译后的字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span> bipush <span class="number">10</span></span><br><span class="line"> <span class="number">2</span> istore_1</span><br><span class="line"> <span class="number">3</span> bipush <span class="number">20</span></span><br><span class="line"> <span class="number">5</span> istore_2</span><br><span class="line"> <span class="number">6</span> iload_1</span><br><span class="line"> <span class="number">7</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">10</span> istore_1</span><br><span class="line"><span class="number">11</span> iinc <span class="number">2</span> by <span class="number">1</span></span><br><span class="line"><span class="number">14</span> iload_2</span><br><span class="line"><span class="number">15</span> istore_2</span><br><span class="line"><span class="number">16</span> getstatic #<span class="number">5</span> &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span><br><span class="line"><span class="number">19</span> iload_1</span><br><span class="line"><span class="number">20</span> invokevirtual #<span class="number">6</span> &lt;java/io/PrintStream.println : (I)V&gt;</span><br><span class="line"><span class="number">23</span> getstatic #<span class="number">5</span> &lt;java/lang/System.out : Ljava/io/PrintStream;&gt;</span><br><span class="line"><span class="number">26</span> iload_2</span><br><span class="line"><span class="number">27</span> invokevirtual #<span class="number">6</span> &lt;java/io/PrintStream.println : (I)V&gt;</span><br><span class="line"><span class="number">30</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>如上对于j = ++j ;是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span> iinc <span class="number">2</span> by <span class="number">1</span></span><br><span class="line"><span class="number">14</span> iload_2</span><br><span class="line"><span class="number">15</span> istore_2</span><br></pre></td></tr></table></figure>
<p>先对局部变量表2中的 值 加1，然后将结果
放入操作数栈中，之后再将操作数栈弹出一个数并赋值给 位置2</p></li>
</ul>
<h3 id="对于题目的解释">对于题目的解释</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">i=i++;</span><br><span class="line"><span class="type">int</span> j=i++;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i+ ++i * i++;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">System.out.println(<span class="string">&quot;j=&quot;</span>+j);</span><br><span class="line">System.out.println(<span class="string">&quot;k=&quot;</span>+k);</span><br></pre></td></tr></table></figure>
<p>编译后的字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> <span class="number">1</span> istore_1</span><br><span class="line"> <span class="number">2</span> iload_1</span><br><span class="line"> <span class="number">3</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"> <span class="number">6</span> istore_1</span><br><span class="line"> <span class="number">7</span> iload_1</span><br><span class="line"> <span class="number">8</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">11</span> istore_2</span><br><span class="line"><span class="number">12</span> iload_1</span><br><span class="line"><span class="number">13</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">16</span> iload_1</span><br><span class="line"><span class="number">17</span> iload_1</span><br><span class="line"><span class="number">18</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">21</span> imul</span><br><span class="line"><span class="number">22</span> iadd</span><br><span class="line"><span class="number">23</span> istore_3</span><br></pre></td></tr></table></figure>
<p>对于 int j = i++</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">7</span> iload_1</span><br><span class="line"> <span class="number">8</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">11</span> istore_2</span><br></pre></td></tr></table></figure>
<p>先将i的值放进栈中，然后将局部变量表中的i + 1，之后将栈中的值赋值给j
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220921135728555.png"
alt="image-20220921135728555" /></p>
<p>到这步骤的时候，i = 2 ，j = 1</p>
<p>最后一步 int k = i+ ++i * i++</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">12</span> iload_1</span><br><span class="line"><span class="number">13</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">16</span> iload_1</span><br><span class="line"><span class="number">17</span> iload_1</span><br><span class="line"><span class="number">18</span> iinc <span class="number">1</span> by <span class="number">1</span></span><br><span class="line"><span class="number">21</span> imul</span><br><span class="line"><span class="number">22</span> iadd</span><br><span class="line"><span class="number">23</span> istore_3</span><br></pre></td></tr></table></figure>
<p>如字节码所示，先将i load进操作数栈中(2)，然后将局部变量表中的i 自增
(3)，之后将自增后的结果(3)放入操作数栈中，第二次将局部变量表中的i放入操作数栈中。然后此时操作数栈中存在
3 3 2 (由栈顶到栈底) ，依次进行乘法加法 （3*3+2） =11 ，放入局部变量表3
中。 所以结果为 2， 1，11</p>
<h3 id="小结">小结</h3>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220921140923018.png" /></p>
<p>​</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式</title>
    <url>/2022/09/21/review/basics/singleton_design_pattern/</url>
    <content><![CDATA[<h2 id="特点">特点</h2>
<ul>
<li>该类只有一个实例
<ul>
<li>构造器私有化</li>
</ul></li>
<li>该类内部自行创建该实例
<ul>
<li>使用静态变量保存</li>
</ul></li>
<li>能向外部提供这个实例
<ul>
<li>直接暴露</li>
<li>使用静态变量的get方法获取</li>
</ul></li>
</ul>
<h2 id="几大方法">几大方法</h2>
<h3 id="饿汉式">饿汉式</h3>
<p>随着类的加载进行初始化，不管是否需要都会直接创建实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 INSTANCE=<span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="枚举">枚举</h3>
<p>枚举类表示该类型的对象是有限的几个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">	 INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用静态代码块">使用静态代码块</h3>
<p>随着类的加载进行初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton2 INSTANCE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如图，当初始化实例时需要进行复杂取值操作时，可以取代第一种方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220921143557083.png"
alt="image-20220921143557083" /></p>
<h3 id="懒汉式">懒汉式</h3>
<ul>
<li><p>延迟创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton4</span> &#123;</span><br><span class="line">	<span class="comment">//为了防止重排序，需要添加volatile关键字</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton4 INSTANCE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">Singleton4</span><span class="params">()</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * double check</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">//2 先判断一次,对于后面的操作(此时已经创建了对象)能减少加锁次数</span></span><br><span class="line">		<span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="comment">//如果这里不加锁会导致线程安全问题，可能刚进了判断语句之后，执行权被剥夺了又创建好了对象，</span></span><br><span class="line">			<span class="comment">//所以判断及创建对象必须是原子操作</span></span><br><span class="line">			<span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">				<span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="comment">//用来模拟多线程被剥夺执行权</span></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="comment">//如果这个地方不加volatile,会出现的问题是,指令重排 1,2,3是正常的,</span></span><br><span class="line">					<span class="comment">//会重排成1,3,2 然后别的线程去拿的时候，判断为非空，但是实际上运行的时候，发现里面的数据是空的</span></span><br><span class="line"></span><br><span class="line">					<span class="comment">//1 memory = allocate();//分配对象空间</span></span><br><span class="line">					<span class="comment">//2 instance(memory); //初始化对象</span></span><br><span class="line">					<span class="comment">//3 instance = memory; //设置instance指向刚刚分配的位置</span></span><br><span class="line">					INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton4</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> INSTANCE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用静态内部类">使用静态内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton6</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton6</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 INSTANCE=<span class="keyword">new</span> <span class="title class_">Singleton6</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton6 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>只有当内部类被加载和初始化的时候，才会创建INSTANCE实例对象</li>
<li>静态内部类不会自动随着外部类的加载和初始化而初始化，他需要单独去加载和初始化</li>
<li>又由于他是在内部类加载和初始化时，创建的，属于类加载器处理的，所以是线程安全的</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域及事务</title>
    <url>/2022/09/23/review/ssm/scope_transaction/</url>
    <content><![CDATA[<h2 id="四种作用域">四种作用域</h2>
<ul>
<li>singleton：默认值，当IOC容器一创建就会创建bean实例，而且是单例的，每次得到的是同一个</li>
<li>prototype：原型的，IOC容器创建时不再创建bean实例。每次调用getBean方法时再实例化该bean（每次都会进行实例化）</li>
<li>request：每次请求会实例化一个bean</li>
<li>session：在一次会话中共享一个bean</li>
</ul>
<h2 id="事务">事务</h2>
<h3 id="事务是什么">事务是什么</h3>
<p>逻辑上的一组操作，要么都执行，要么都不执行</p>
<h3 id="事务的特性">事务的特性</h3>
<p>ACID</p>
<ul>
<li>Atomicity <code>/ˌætəˈmɪsəti/</code>原子性 ,
要么全部成功，要么全部失败</li>
<li>Consistency <code>/kənˈsɪstənsi/</code> 一致性 , 数据库的完整性</li>
<li>Isolation <code>/ˌaɪsəˈleɪʃn/</code> 隔离性 ,
数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致
, 这里涉及到事务隔离级别</li>
<li>Durability <code>/ˌdjʊərəˈbɪləti/</code> 持久性 ,
事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li>
</ul>
<h3 id="spring支持两种方式的事务管理">Spring支持两种方式的事务管理</h3>
<ul>
<li><p>编程式事务管理 <figure class="highlight plaintext"><figcaption><span>execute</span></figcaption><table><tr><td class="code"><pre><span class="line">使用transactionTemplate</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Autowired</span><br><span class="line">private TransactionTemplate transactionTemplate;</span><br><span class="line">public void testTransaction() &#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) &#123;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line"></span><br><span class="line">                    // ....  业务代码</span><br><span class="line">                &#125; catch (Exception e)&#123;</span><br><span class="line">                    //回滚</span><br><span class="line">                    transactionStatus.setRollbackOnly();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用transactionManager</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> transactionManager.getTransaction(<span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>());</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// ....  业务代码</span></span><br><span class="line">              transactionManager.commit(status);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              transactionManager.rollback(status);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明式事务管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">  <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">  b.bMethod();</span><br><span class="line">  c.cMethod();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="事务传播行为">事务传播行为</h3>
<p>Definition <code>/ˌdefɪˈnɪʃ(ə)n/</code> 定义</p>
<p>Propagation <code>/ˌprɒpəˈɡeɪʃn/</code> 传播<br />
假设有代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class A &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    B b;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> aMethod &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        b.bMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line">Class B &#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.XXXXXX)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bMethod &#123;</span><br><span class="line">       <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>共7种，其中主要有4种如下</p>
<ul>
<li><p><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong>
如果外部方法没有开启事务，则内部方法创建一个新的事务，即内外两个方法的事务互相独立；如果外部方法存在事务，则内部方法加入该事务，即内外两个方法使用同一个事务</p></li>
<li><p><strong><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code></strong>
如果外部方法存在事务，则会挂起当前的事务，并且开启一个新事务，当外部方法抛出异常时，内部方法不会回滚；而当内部方法抛出异常时，外部方法会检测到并进行回滚。
如果外部方法不存在事务，则也会开启一个新事务</p></li>
<li><p><strong><code>TransactionDefinition.PROPAGATION_NESTED</code></strong>:
如果外部方法开启事务，则在内部再开启一个事务，作为嵌套事务存在；如果外部方法无事务，则单独开启一个事务</p>
<blockquote>
<p><strong>在外围方法开启事务的情况下<code>Propagation.NESTED</code>修饰的内部方法属于外部事务的子事务，外围主事务回滚，子事务一定回滚，而内部子事务可以单独回滚而不影响外围主事务和其他子事务，也就是和上面的PROPAGATION_REQUIRES_NEW相反</strong></p>
</blockquote></li>
<li><p><strong><code>TransactionDefinition.PROPAGATION_MANDATORY</code></strong>
如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常 mandatory
<code>/ˈmændətəri/</code> 强制的</p></li>
<li><p>下面三个比较不常用</p>
<ul>
<li><strong><code>TransactionDefinition.PROPAGATION_SUPPORTS</code></strong>:
如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><strong><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code></strong>:
以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><strong><code>TransactionDefinition.PROPAGATION_NEVER</code></strong>:
以非事务方式运行，如果当前存在事务，则抛出异常。</li>
</ul></li>
</ul>
<h3 id="事务隔离级别">事务隔离级别</h3>
<ul>
<li><strong><code>TransactionDefinition.ISOLATION_DEFAULT</code></strong></li>
<li><strong><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code></strong>
读未提交，级别最低，允许读取尚未提交的数据，可能会导致脏读、幻读或不可重复读</li>
<li><strong><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code></strong>
读已提交，对同一字段的多次读取结果都是一致的。可以阻止脏读，但幻读或不可重复读仍会发生</li>
<li><strong><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code></strong>
串行化，可以防止脏读、幻读及不可重复读，所有事务依次逐个执行，完全服从ACID，但严重影响性能</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-SSM</tag>
      </tags>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2022/05/20/work/ztx/hg/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>ztx</tag>
      </tags>
  </entry>
  <entry>
    <title>big_decimal</title>
    <url>/2022/10/10/review/java_guide/basic/big_decimal/</url>
    <content><![CDATA[<h3 id="精度的丢失">精度的丢失</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2.0f</span> - <span class="number">1.9f</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1.8f</span> - <span class="number">1.7f</span>;</span><br><span class="line">System.out.println(a);<span class="comment">// 0.100000024</span></span><br><span class="line">System.out.println(b);<span class="comment">// 0.099999905</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>为什么会有精度丢失的风险</p>
<p>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示</p>
</blockquote>
<p>使用BigDecimal来定义浮点数的值，然后再进行浮点数的运算操作即可</p>
<h3 id="bigdecimal常见方法">BigDecimal常见方法</h3>
<ul>
<li><p>我们在使用 <code>BigDecimal</code>
时，为了防止精度丢失，推荐使用它的<code>BigDecimal(String val)</code>构造方法或者
<code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象</p></li>
<li><p>加减乘除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line">System.out.println(a.add(b));<span class="comment">// 1.9</span></span><br><span class="line">System.out.println(a.subtract(b));<span class="comment">// 0.1</span></span><br><span class="line">System.out.println(a.multiply(b));<span class="comment">// 0.90</span></span><br><span class="line">System.out.println(a.divide(b));<span class="comment">// 无法除尽，抛出 ArithmeticException 异常</span></span><br><span class="line">System.out.println(a.divide(b, <span class="number">2</span>, RoundingMode.HALF_UP));<span class="comment">// 1.11</span></span><br></pre></td></tr></table></figure>
<p>使用divide方法的时候，尽量使用3个参数版本（roundingMode.oldMode)</p></li>
<li><p>保留规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RoundingMode</span> &#123;</span><br><span class="line">   <span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">			 UP(BigDecimal.ROUND_UP),</span><br><span class="line">   <span class="comment">// 2.5 -&gt; 2 , 1.6 -&gt; 1</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -1 , -2.5 -&gt; -2</span></span><br><span class="line">			 DOWN(BigDecimal.ROUND_DOWN),</span><br><span class="line">			 <span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -1 , -2.5 -&gt; -2</span></span><br><span class="line">			 CEILING(BigDecimal.ROUND_CEILING),</span><br><span class="line">			 <span class="comment">// 2.5 -&gt; 2 , 1.6 -&gt; 1</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">			 FLOOR(BigDecimal.ROUND_FLOOR),</span><br><span class="line">   	<span class="comment">// 2.5 -&gt; 3 , 1.6 -&gt; 2</span></span><br><span class="line">   <span class="comment">// -1.6 -&gt; -2 , -2.5 -&gt; -3</span></span><br><span class="line">			 HALF_UP(BigDecimal.ROUND_HALF_UP),</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>大小比较<br />
使用compareTo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line">System.out.println(a.compareTo(b));<span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li>
<li><p>保留几位小数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.255433&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">n</span> <span class="operator">=</span> m.setScale(<span class="number">3</span>,RoundingMode.HALF_DOWN);</span><br><span class="line">System.out.println(n);<span class="comment">// 1.255</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用compareTo替换equals方法，equals不止会比较直，还会比较精度
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010170727552.png" /></p></li>
<li><p>BigDecimal工具类分享 (用来操作double算术)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简化BigDecimal计算的小工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认除法运算精度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEF_DIV_SCALE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BigDecimalUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> BigDecimal.valueOf(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> BigDecimal.valueOf(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">subtract</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> BigDecimal.valueOf(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> BigDecimal.valueOf(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">multiply</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> BigDecimal.valueOf(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> BigDecimal.valueOf(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> divide(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">divide</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> BigDecimal.valueOf(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> BigDecimal.valueOf(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> v, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> BigDecimal.valueOf(v);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> b.divide(one, scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的类型转换(Float)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 需要被转换的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">convertToFloat</span><span class="params">(<span class="type">double</span> v)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);</span><br><span class="line">        <span class="keyword">return</span> b.floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的类型转换(Int)不进行四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 需要被转换的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">convertsToInt</span><span class="params">(<span class="type">double</span> v)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);</span><br><span class="line">        <span class="keyword">return</span> b.intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的类型转换(Long)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 需要被转换的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回转换结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">convertsToLong</span><span class="params">(<span class="type">double</span> v)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v);</span><br><span class="line">        <span class="keyword">return</span> b.longValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回两个数中大的一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 需要被对比的第一个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 需要被对比的第二个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回两个数中大的一个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">returnMax</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.max(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回两个数中小的一个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 需要被对比的第一个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 需要被对比的第二个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回两个数中小的一个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">returnMin</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.min(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精确对比两个数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 需要被对比的第一个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 需要被对比的第二个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果两个数一样则返回0，如果第一个数比第二个数大则返回1，反之返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(<span class="type">double</span> v1, <span class="type">double</span> v2)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> BigDecimal.valueOf(v1);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> BigDecimal.valueOf(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.compareTo(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>javaGuide基础1</title>
    <url>/2022/09/28/review/java_guide/basic/java_guide_basic_1/</url>
    <content><![CDATA[<h2 id="基础概念及常识">基础概念及常识</h2>
<ul>
<li><p>Java语言特点</p>
<ul>
<li>面向对象（封装、继承、多态）</li>
<li>平台无关性（Java虚拟机）</li>
<li>等等</li>
</ul></li>
<li><p>JVM并非只有一种，只要满足JVM规范，可以开发自己专属JVM</p></li>
<li><p>JDK与JRE</p>
<ul>
<li>JDK，JavaDevelopmentKit，能够创建和编译程序，包含JRE。</li>
<li>JRE，Java运行时环境，包括Java虚拟机、Java类库，及Java命令等</li>
</ul></li>
<li><p>字节码，采用字节码的好处</p>
<ul>
<li>Java中，JVM可以理解的代码称为字节码（.class文件)，不面向任何处理器，只面向虚拟机</li>
<li>Java程序从源代码到运行的过程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220928110902410.png"
alt="image-20220928110902410" />
java代码必须先编译为字节码，之后呢，.class--&gt;机器码，这里JVM类加载器先加载字节码文件，然后通过解释器进行解释执行（也就是字节码需要由Java解释器来解释执行）</li>
</ul></li>
<li><p>编译与解释并存</p>
<ul>
<li>编译型：通过编译器将源代码一次性翻译成可被该平台执行的机器码，执行快、开发效率低</li>
<li>解释型：通过解释器一句一句的将代码解释成机器代码后执行，执行慢，开发效率高</li>
<li>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220928110844996.png"
alt="image-20220928110844996" /></li>
</ul></li>
<li><p>Java与C++区别</p>
<ul>
<li>没学过C++，Java不提供指针直接访问内存</li>
<li>Java为单继承；但是Java支持继承多接口</li>
<li>Java有自动内存管理垃圾回收机制（GC），不需要程序员手动释放无用内存</li>
</ul></li>
<li><p>注释分为 单行注释、多行注释、文档注释 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220928111257144.png"
alt="image-20220928111257144" /></p></li>
<li><p>标识符与关键字
标识符即名字，关键字则是被赋予特殊含义的标识符</p></li>
<li><p>自增自减运算符 当 <code>b = ++a</code> 时，先自增（自己增加
1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给
b)，再自增（自己增加 1）</p></li>
<li><p>continue/break/return</p>
<ul>
<li><code>continue</code>
：指跳出当前的这一次循环，继续下一次循环。</li>
<li><code>break</code> ：指跳出整个循环体，继续执行循环下面的语句。</li>
<li><code>return</code> 用于跳出所在方法，结束该方法的运行。</li>
</ul></li>
<li><p>变量</p>
<ul>
<li>成员变量和局部变量
<ul>
<li>成员变量可以被
<code>public</code>,<code>private</code>,<code>static</code>
等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code>
所修饰；但是，成员变量和局部变量都能被 <code>final</code> 所修饰</li>
<li>从变量在内存中的存储方式来看,如果成员变量是使用 <code>static</code>
修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code>
修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li>
<li>从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡（即方法栈弹出后消亡）。</li>
<li>final必须显示赋初始值，其他都自动以类型默认值赋值</li>
</ul></li>
<li>静态变量：被类所有实例共享</li>
</ul></li>
<li><p>字符型常量与字符串常量区别</p>
<ul>
<li><strong>形式</strong> :
字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0
个或若干个字符。</li>
<li><strong>含义</strong> : 字符常量相当于一个整型值( ASCII
值),可以参加表达式运算;
字符串常量代表一个地址值(该字符串在内存中存放位置)。</li>
<li><strong>占内存大小</strong> ： 字符常量只占 2 个字节;
字符串常量占若干个字节。</li>
</ul></li>
<li><p>静态方法为什么不能调用非静态成员</p>
<ul>
<li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。</li>
<li>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li>
</ul></li>
<li><p>调用方式</p>
<ul>
<li>使用类名.方法名 调用静态方法，或者对象.方法名 （不建议）
调用静态方法可以无需创建对象</li>
</ul></li>
<li><p>重载</p>
<ul>
<li>同一个类中（或者父类与子类之间），方法名相同，参数类型不同、个数不同、顺序不同、方法返回值和访问修饰符可以不同<br />
不允许存在（只有返回值不同的两个方法(方法名和参数个数及类型相同))</li>
<li>重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</li>
</ul></li>
<li><p>重写</p>
<ul>
<li>发生在运行期，子类对父类的允许访问的方法实现过程进行重新编写
<ul>
<li>方法名、参数列表必须相同，<strong>子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。【注意，这里只针对方法，类属性则没有这个限制】</strong></li>
<li>如果父类方法访问修饰符为 <code>private/final/static</code>
则子类就不能重写该方法，但是被 <code>static</code>
修饰的方法能够被再次声明。</li>
<li>构造方法无法被重写</li>
</ul></li>
</ul></li>
<li><p>可变长参数</p>
<ul>
<li><p>代码 可变参数只能作为函数的最后一个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(String arg1, String... args)</span> &#123;</span><br><span class="line">   <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>遇到方法重载的情况怎么办呢？会优先匹配固定参数还是可变参数的方法呢？</strong></p>
<p>答案是会优先匹配固定参数的方法</p>
<p>Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的
<code>class</code>文件就可以看出来了。</p></li>
<li><p>Java 的可变参数编译后实际会被转换成一个数组，我们看编译后生成的
<code>class</code>文件就可以看出来了。</p></li>
</ul></li>
<li><p>基本数据类型，8种</p>
<ul>
<li>6种数字类型，1种字符类型，1种布尔值
<ul>
<li>byte,short,int,long ; float,double ;<br />
</li>
<li>char</li>
<li>boolean</li>
</ul></li>
<li>1个字节8位，其中
<ul>
<li>byte 1字节，short 2字节，int 4字节 ，long 8字节</li>
<li>float 4字节，double 8 字节</li>
<li>char 2字节，boolean 1位</li>
</ul></li>
</ul></li>
<li><p>基本数据类型和包装类型的区别</p>
<ul>
<li>包装类型可用于泛型，而基本类型不可以</li>
<li>对于基本数据类型，局部变量会存放在Java虚拟机栈中的局部变量表中，成员变量（未被static修饰）存放在Java虚拟机堆中。<br />
包装类型属于对象类型，几乎所有对象实例都存在于堆中</li>
<li>相比对象类型，基本数据类型占用空间非常小</li>
<li>"基本数据类型存放在栈中"
这句话是错的，基本数据类型的成员变量如果没有被static修饰的话（不建议这么用，应该使用基本数据类型对应的包装类型），就存放在堆中。</li>
</ul></li>
<li><p>包装类型的缓存机制
Byte，Short，Integer，Long这4中包装类默认创建了数值[-128,127]的相应类型的缓存数据，Character创建了数值在[0,127]范围的缓存数据，Boolean直接返回True
or False</p>
<ul>
<li><p>Integer缓存代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Character缓存代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title function_">valueOf</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">      <span class="keyword">return</span> CharacterCache.cache[(<span class="type">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Character</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CharacterCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CharacterCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> <span class="title class_">Character</span>[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Character</span>((<span class="type">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Boolean缓存代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">valueOf</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意Float和Double没有使用缓存机制，且
只有调用valueOf才会使用缓存，当使用new的时候是直接创建新对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Integer</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      Boolean t=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">      Boolean f=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">      System.out.println(t==f); <span class="comment">//false</span></span><br><span class="line">      System.out.println(t.equals(f)); <span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line">      Boolean t1=Boolean.valueOf(<span class="literal">true</span>);</span><br><span class="line">      Boolean f1=Boolean.valueOf(<span class="literal">true</span>);</span><br><span class="line">      System.out.println(t1==f1); <span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line">      System.out.println(Boolean.TRUE==Boolean.TRUE); <span class="comment">//true</span></span><br><span class="line">      <span class="comment">//============================================//</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">33</span>; <span class="comment">//这里发生了自动装箱，相当于Integer.valueOf(30)</span></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">33</span>;</span><br><span class="line">      System.out.println(i1 == i2);<span class="comment">// 输出 true</span></span><br><span class="line">    </span><br><span class="line">      <span class="type">Float</span> <span class="variable">i11</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line">      <span class="type">Float</span> <span class="variable">i22</span> <span class="operator">=</span> <span class="number">333f</span>;</span><br><span class="line">      System.out.println(i11 == i22);<span class="comment">// 输出 false</span></span><br><span class="line">    </span><br><span class="line">      <span class="type">Double</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line">      <span class="type">Double</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">1.2</span>;</span><br><span class="line">      System.out.println(i3 == i4);<span class="comment">// 输出 false</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment">//===========================================//</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">40</span>);</span><br><span class="line">      System.out.println(i1==i2);</span><br></pre></td></tr></table></figure></li>
<li><p>如上，所有整型包装类对象之间值的比较，应该全部使用equals方法比较
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220929092643596.png"
alt="image-20220929092643596" /></p></li>
<li><p>什么是自动装箱和拆箱</p>
<ul>
<li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li>
<li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li>
</ul></li>
<li><p>举例说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> ;<span class="comment">//装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i ;<span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure>
<p>对应的字节码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L1</span><br><span class="line">    </span><br><span class="line"> LINENUMBER 8 L1</span><br><span class="line">    </span><br><span class="line"> ALOAD 0</span><br><span class="line">    </span><br><span class="line"> BIPUSH 10</span><br><span class="line">    </span><br><span class="line"> INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line">    </span><br><span class="line"> PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line">    </span><br><span class="line">L2</span><br><span class="line">    </span><br><span class="line"> LINENUMBER 9 L2</span><br><span class="line">    </span><br><span class="line"> ALOAD 0</span><br><span class="line">    </span><br><span class="line"> ALOAD 0</span><br><span class="line">    </span><br><span class="line"> GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line">    </span><br><span class="line"> INVOKEVIRTUAL java/lang/Integer.intValue ()I</span><br><span class="line">    </span><br><span class="line"> PUTFIELD AutoBoxTest.n : I</span><br><span class="line">    </span><br><span class="line"> RETURN</span><br></pre></td></tr></table></figure>
<p>如图，Integer i = 10 等价于Integer i = Integer.valueOf(10)</p>
<p>int n= i 等价于 int n= i.intValue();</p>
<p>频繁拆装箱会严重影响系统行呢个</p></li>
<li><p>浮点数运算的时候会有精度丢失的风险</p>
<blockquote>
<p>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。</p>
</blockquote>
<p>十进制下的0.2无法精确转换成二进制小数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，</span><br><span class="line">// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。</span><br><span class="line">0.2 * 2 = 0.4 -&gt; 0</span><br><span class="line">0.4 * 2 = 0.8 -&gt; 0</span><br><span class="line">0.8 * 2 = 1.6 -&gt; 1</span><br><span class="line">0.6 * 2 = 1.2 -&gt; 1</span><br><span class="line">0.2 * 2 = 0.4 -&gt; 0（发生循环）</span><br></pre></td></tr></table></figure></li>
<li><p>使用BigDecimal解决上面的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.9&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">x</span> <span class="operator">=</span> a.subtract(b);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">y</span> <span class="operator">=</span> b.subtract(c);</span><br><span class="line"></span><br><span class="line">System.out.println(x); <span class="comment">/* 0.1 */</span></span><br><span class="line">System.out.println(y); <span class="comment">/* 0.1 */</span></span><br><span class="line">System.out.println(Objects.equals(x, y)); <span class="comment">/* true */</span></span><br></pre></td></tr></table></figure></li>
<li><p>超过long整形的数据，使用BigInteger</p>
<p>Java中，64位long整型是最大的整数类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">System.out.println(l + <span class="number">1</span>); <span class="comment">// -9223372036854775808</span></span><br><span class="line">System.out.println(l + <span class="number">1</span> == Long.MIN_VALUE); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//BigInteger内部使用int[] 数组来存储任意大小的整型数据</span></span><br><span class="line"><span class="comment">//对于常规整数类型，使用BigInteger运算的效率会降低</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220929093558353.png"
alt="image-20220929093558353" />
<figcaption aria-hidden="true">image-20220929093558353</figcaption>
</figure></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>javaGuide基础2</title>
    <url>/2022/09/29/review/java_guide/basic/java_guide_basic_2/</url>
    <content><![CDATA[<h2 id="面向对象基础">面向对象基础</h2>
<ul>
<li><p>区别</p>
<ul>
<li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</li>
<li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。</li>
<li>面向对象编程 易维护、易复用、易扩展</li>
</ul></li>
<li><p>对象实体与对象引用的不同new 运算符，new
创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</p>
<p>一个对象引用可以指向 0 个或 1
个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n
个引用指向它（可以用 n 条绳子系住一个气球）。</p></li>
<li><p>对象的相等一般比较的是内存中存放的内容是否相等；引用相等一般比较的是他们指向的内存地址是否相等</p></li>
<li><p>关于构造方法：如果我们自己添加了类的构造方法（无论是否有参），Java
就不会再添加默认的无参数的构造方法了</p>
<ul>
<li>构造方法特点：名字与类名相同；没有返回值但不能用void生命构造函数；生成类的对象时自动执行</li>
<li>构造方法不能重写override，但能重载 overload</li>
</ul></li>
</ul>
<h2 id="java常见类">Java常见类</h2>
<h3 id="object">Object</h3>
<ul>
<li><p>常见方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * naitive 方法，用于创建并返回当前对象的一份拷贝。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例被垃圾回收器回收的时候触发的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>== 和 equals() 区别</p>
<ul>
<li>对于基本类型来说，== 比较的是值</li>
<li>对于引用类型，== 比较的是对象的内存地址</li>
<li>Java是值传递，所以本质上比较的都是值，只是引用类型变量存的值是对象地址</li>
</ul></li>
<li><p>equals不能用于判断基本数据类型的变量，且存在于Object类中，而Object类是所有类的直接或间接父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果类没有重写该方法，则如上</p></li>
<li><p>如果重写了，则已办都是重写equals方法来比较对象中的属性是否相等</p>
<blockquote>
<p>关于String 和 new String 的区别： String a = "xxx"
始终返回的是常量池中的引用；而new String 始终返回的是堆中的引用</p>
<ul>
<li><p>对于String a = "xxx"
，先到常量池中查找是否存在值为"xxx"的字符串，如果存在，直接将常量池中该值对应的引用返回，如果不存在，则在常量池中创建该对象，并返回引用。</p></li>
<li><p>对于new
String("xxx")，先到常量池中查找是否存在值为"xxx"的字符串，如果存在，则直接在堆中创建对象，并返回堆中的索引；如果不存在，则先在常量池中创建对象(值为xxx)，然后再在堆中创建对象，并返回堆中该对象的引用地址</p></li>
</ul>
<blockquote>
<p>来自
https://blog.csdn.net/weixin_44844089/article/details/103648448</p>
</blockquote>
</blockquote>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">System.out.println(aa == bb);<span class="comment">// true</span></span><br><span class="line">System.out.println(a == b);<span class="comment">// false</span></span><br><span class="line">System.out.println(a.equals(b));<span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">42</span> == <span class="number">42.0</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>String 类重写了equals()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>hashCode()有什么用<br />
hashCode()的作用是获取哈希码(int整数)，也称为散列码，作用是确定该对象在哈希表中的索引位置。函数定义在Object类中，且为本地方法，通常用来将对象的内存地址转换；散列表存储的是键值对(key-value)，根据“键”快速检索出“值”，利用了散列码</p></li>
<li><p>为什么需要hashCode</p>
<blockquote>
<p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code>
会先计算对象的 <code>hashCode</code>
值来判断对象加入的位置，同时也会与其他已经加入的对象的
<code>hashCode</code> 值作比较，如果没有相符的
<code>hashCode</code>，<code>HashSet</code>
会假设对象没有重复出现。但是如果发现有相同 <code>hashCode</code>
值的对象，这时会调用 <code>equals()</code> 方法来检查
<code>hashCode</code>
相等的对象是否真的相同。如果两者相同，<code>HashSet</code>
就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置【注意，我觉得这里应该是使用拉链法，说成散列到其他位置貌似有点不对】。这样我们就大大减少了
<code>equals</code> 的次数，相应就大大提高了执行速度。</p>
</blockquote></li>
<li><p>hashCode()和equals()都用于比较两个对象是否相等，为什么要同事提供两个方法（因为在一些容器中，如HashMap、HashSet中，判断元素是否在容器中效率更高)</p>
<ul>
<li>两个对象的hashCode值相等并不代表两个对象就相等</li>
<li>因为hashCode所使用的哈希算法也许会让多个对象传回相同哈希值，取决于哈希算法</li>
</ul></li>
<li><p>总结</p>
<ul>
<li>如果两个对象的<code>hashCode</code>
值相等，那这两个对象不一定相等（哈希碰撞）。</li>
<li>如果两个对象的<code>hashCode</code>
值相等并且<code>equals()</code>方法也返回
<code>true</code>，我们才认为这两个对象相等。</li>
<li>如果两个对象的<code>hashCode</code>
值不相等，我们就可以直接认为这两个对象不相等。</li>
</ul></li>
</ul>
<h3 id="string">String</h3>
<ul>
<li><p>String、StringBuffer，StringBuilder区别
String是不可变的，StringBuffer和StringBuilder都继承自AbstractStringBuilder类，是可变的（提供了修改字符串的方法）</p></li>
<li><p>String中的变量不可变，所以是线程安全的，而StringBuffer对方法加了同步锁，所以是线程安全的；而StringBuilder是线程不安全的</p></li>
<li><p>三者使用建议</p>
<ul>
<li>操作少量的数据: 适用 <code>String</code></li>
<li>单线程操作字符串缓冲区下操作大量数据: 适用
<code>StringBuilder</code></li>
<li>多线程操作字符串缓冲区下操作大量数据: 适用
<code>StringBuffer</code></li>
</ul></li>
<li><p>String 为什么是不可变的</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如上，保存字符串的数组被final修饰且为私有，并且String类没有提供暴露修改该字符串的方法</li>
<li>String类被修饰为final修饰呆滞不能被继承，避免子类破坏</li>
</ul></li>
<li><p>Java9</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable,Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="comment">// @Stable 注解表示变量最多被修改一次，称为“稳定的”。</span></span><br><span class="line">    <span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title class_">Appendable</span>, CharSequence &#123;</span><br><span class="line">    <span class="type">byte</span>[] value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><blockquote>
<p>Java9为何String底层实现由char[] 改成了 byte[] 新版的 String
其实支持两个编码方案： Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过
Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1
编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2
个字节（16），<code>byte</code> 相较 <code>char</code>
节省一半的内存空间。</p>
<p>JDK 官方就说了绝大部分字符串对象只包含 Latin-1 可表示的字符。</p>
</blockquote></li>
</ul></li>
</ul></li>
<li><p>字符串使用“+” 还是 Stringbuilder Java本身不支持运算符重载，但 “ +
” 和 “+=” 是专门为String重载过的运算符，Java中仅有的两个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;he&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;llo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2 + str3;</span><br></pre></td></tr></table></figure>
<p>对应的字节码：<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221008114449075.png"
alt="image-20221008114449075" /></p>
<p>字符串对象通过“+”的字符串拼接方式，实际上是通过
<code>StringBuilder</code> 调用 <code>append()</code>
方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个
<code>String</code>
对象。因此这里就会产生问题，如下代码，会产生过多的StringBuilder对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;he&quot;</span>, <span class="string">&quot;llo&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    s += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>会循环创建StringBuilder对象，建议自己创建一个新的StringBuilder并使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;he&quot;</span>, <span class="string">&quot;llo&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (String value : arr) &#123;</span><br><span class="line">    s.append(value);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></li>
<li><p>String#equals()和Object#equals()有何区别
String的equals被重写过，比较的是字符串的值是否相等，而Object的equals比较的是对象的内存地址</p></li>
<li><p>字符串常量池<br />
是JVM为了提升性能和减少内存消耗针对字符串（String类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”ab“ (这里也可以说是在常量池中创建对象)</span></span><br><span class="line"><span class="comment">// 将字符串对象”ab“的引用(常量池中的饮用)保存在字符串常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”ab“的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">System.out.println(aa==bb);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="string-s1-new-stringabc这句话创建了几个字符串对象">String s1
= new String("abc");这句话创建了几个字符串对象？</h4>
<p>会创建 1 或 2 个字符串对象。
如果常量池中存在值为"abc"的对象，则直接在堆中创建一个对象，并且返回该对象的引用；如果不存在，则先在常量池中创建该对象，然后再在堆中创建该对象，并且返回该对象（堆中）的引用</p>
<p>下面这个解释，说明常量池存储的是引用（堆中某一块区域的）<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221008144055351.png"
alt="image-20221008144055351" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串常量池中已存在字符串对象“abc”的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// 下面这段代码只会在堆中创建 1 个字符串对象“abc”</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>intern方法的作用，是一个native方法，作用是将指定的字符串对象的引用保存在字符串常量池中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”Java“</span></span><br><span class="line"><span class="comment">// 将字符串对象”Java“的引用保存在字符串常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line"><span class="comment">// 会在堆中在单独创建一个字符串对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s3.intern();</span><br><span class="line"><span class="comment">// s1 和 s2 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// s3 和 s4 指向的是堆中不同的对象</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// s1 和 s4 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>问题：String 类型的变量和常量做“+”运算时发生了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2;</span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>常量折叠<br />
对于 <code>String str3 = "str" + "ing";</code> 编译器会给你优化成
<code>String str3 = "string";</code> 。</p>
<p>并不是所有的常量都会进行折叠，只有编译器在程序编译期就可以确定值的常量才可以：</p>
<ul>
<li>基本数据类型(
<code>byte</code>、<code>boolean</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>float</code>、<code>long</code>、<code>double</code>)以及字符串常量。</li>
<li><code>final</code> 修饰的基本数据类型和字符串变量</li>
<li>字符串通过
“+”拼接得到的字符串、基本数据类型之间算数运算（加减乘除）、基本数据类型的位运算（&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;
）</li>
</ul></li>
</ul></li>
<li><p>引用的值在程序编译期间是无法确认的，无法对其优化</p></li>
<li><p>对象引用和“+”的字符串拼接方式，实际上是通过
<code>StringBuilder</code> 调用 <code>append()</code>
方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个
<code>String</code> 对象 。
如上面代码<code>String str4 = str1 + str2;</code>
但是如果使用了final关键字声明之后，就可以让编译器当作常量来处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="comment">// 下面两个表达式其实是等价的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">// 常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> str1 + str2; <span class="comment">// 常量池中的对象</span></span><br><span class="line">System.out.println(c == d);<span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是如果编译器在运行时才能知道其确切值的话，就无法对其优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> getStr();  <span class="comment">//str2只有在运行时才能确定其值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">// 常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> str1 + str2; <span class="comment">// 在堆上创建的新的对象</span></span><br><span class="line">System.out.println(c == d);<span class="comment">// false</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>javaGuide基础3</title>
    <url>/2022/10/08/review/java_guide/basic/java_guide_basic_3/</url>
    <content><![CDATA[<h2 id="异常">异常</h2>
<ul>
<li><p>unchecked exceptions (运行时异常)<br />
checked exceptions (非运行时异常，编译异常）</p></li>
<li><p>Java异常类层次结构图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221008163827798.png"
alt="image-20221008163827798" /></p></li>
<li><p>Exception和Error有什么区别</p>
<ul>
<li><p>除了RuntimeException及其子类以外，其他的Exception类极其子类都属于受检查异常</p></li>
<li><p>Exception : 程序本身可以处理的异常（可通过catch捕获）</p>
<ul>
<li><p>Checked Exception ，受检查异常，必须处理(<strong>catch 或者
throws ，否则编译器通过不了</strong>)
IOException，ClassNotFoundException，SQLException，FileNotFoundException</p></li>
<li><p>Unchecked Exception ， 不受检查异常 ， 可以不处理</p></li>
</ul></li>
</ul></li>
</ul>
<p>（算数异常，类型转换异常，不合法的线程状态异常，下标超出异常，空指针异常，参数类型异常，数字格式异常，不支持操作异常）
ArithmeticException，ClassCastException，IllegalThreadStateException，IndexOutOfBoundsException</p>
<pre><code>  NullPointerException，IllegalArgumentException，NumberFormatException，SecurityException，UnsupportedOperationException 


  ```illegal 英[ɪˈliːɡl] 非法的```  
  ```Arithmetic 英[əˈrɪθmətɪk] 算术```</code></pre>
<ul>
<li><p>Error： 程序无法处理的错误 ，不建议通过catch
捕获，已办错误发生时JVM会选择线程终止<br />
OutOfMemoryError （堆，Java heap
space），VirtualMachineError，StackOverFlowError，AssertionError
（断言），IOError</p></li>
<li><p>Throwable类常用方法</p>
<ul>
<li>String getMessage() //简要描述</li>
<li>String toString() //详细</li>
<li>String getLocalizedMessage()
//本地化信息，如果子类(Throwable的子类)没有覆盖该方法，则与gtMessage()
结果一样</li>
<li>void printStackTrace() //打印Throwable对象封装的异常信息</li>
</ul></li>
<li><p>try-catch-finally如何使用
try后面必须要有catch或者finally；无论是否捕获异常，finally都会执行；当在
<code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code>
语句时，<code>finally</code> 语句块将在方法返回之前被执行。</p>
<ul>
<li><p><strong>不要在 finally 语句块中使用 return!</strong> 当 try
语句和 finally 语句中都有 return 语句时，try 语句块中的 return
语句会被忽略。这是因为 try 语句中的 return
返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return
之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">不要在 <span class="keyword">finally</span> 语句块中使用 <span class="keyword">return</span>! 当 <span class="keyword">try</span> 语句和 <span class="keyword">finally</span> 语句中都有 <span class="keyword">return</span> 语句时，<span class="keyword">try</span> 语句块中的 <span class="keyword">return</span> 语句会被忽略。这是因为 <span class="keyword">try</span> 语句中的 <span class="keyword">return</span> 返回值会先被暂存在一个本地变量中，当执行到 <span class="keyword">finally</span> 语句中的 <span class="keyword">return</span> 之后，这个本地变量的值就变为了 <span class="keyword">finally</span> 语句中的 <span class="keyword">return</span> 返回值。</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>finally中的代码不一定执行（如果finally之前虚拟机就已经被终止了）</p>
<ul>
<li>另外两种情况，程序所在的线程死亡；关闭CPU；都会导致代码不执行</li>
</ul></li>
<li><p>使用try-with-resources代替try-catch-finally</p>
<ul>
<li><p>适用范围：任何实现<code>java.lang.AutoCloseable</code>或者<code>java.io.Closeable</code>的对象【比如InputStream、OutputStream、Scanner、PrintWriter等需要调用close()方法的资源】</p></li>
<li><p>在try-with-resources中，任何catch或finally块在声明的资源关闭后运行</p></li>
<li><p>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://read.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>改造后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try (Scanner scanner = new Scanner(new File(&quot;test.txt&quot;))) &#123;</span><br><span class="line">    while (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用分隔符来分割</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">     <span class="type">BufferedOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;out.txt&quot;</span>)))) &#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bout.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>需要注意的地方</p>
<ul>
<li>不要把异常定义为静态变量，因为这样会导致异常栈信息错乱。每次手动抛出异常，我们都需要手动
new 一个异常对象抛出。</li>
<li>抛出的异常信息一定要有意义。</li>
<li>建议抛出更加具体的异常比如字符串转换为数字格式错误的时候应该抛出<code>NumberFormatException</code>而不是其父类<code>IllegalArgumentException</code>。</li>
<li>使用日志打印异常之后就不要再抛出异常了（两者不要同时存在一段代码逻辑中）。</li>
</ul></li>
</ul>
<h2 id="泛型">泛型</h2>
<ul>
<li><p>什么是泛型？有什么作用
Java泛型（Generics）JDK5中引入的一个新特性，使用泛型参数，可以增强代码的可读性以及稳定性</p></li>
<li><p>编译器可以<strong>对泛型参数进行检测，并通过泛型参数可以指定传入的对象类型</strong>，比如<code>ArrayList&lt;Person&gt; persons=new ArrayList&lt;Person&gt;()</code>这行代码指明该ArrayList对象只能传入Person对象，若传入其他类型的对象则会报错</p>
<ul>
<li>原生List返回类型为Object，需要手动转换类型才能使用，使用泛型后编译器自动转换</li>
</ul></li>
<li><p>泛型使用方式</p>
<ul>
<li><p>泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span><br><span class="line"><span class="comment">//在实例化泛型类时，必须指定T的具体类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Generic&lt;Integer&gt; genericInteger = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;Integer&gt;(<span class="number">123456</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>不指定类型使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>指定类型使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>泛型方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line">   &#123;</span><br><span class="line">         <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">            System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span> &#125;;</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面称为静态方法，Java中泛型只是一个占位符，必须在传递类型后才能使用，类在实例化时才能传递类型参数，而类型方法的加载优先于类的实例化，静态泛型方法是<strong>没有办法使用类上声明的泛型（即上面的第二点中类名旁边的T）</strong>的，只能使用自己生命的<E></p>
<p>也可以是非静态的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="type">int</span>  <span class="title function_">geA</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        System.out.println(e.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用,其中 &lt;Object&gt; 可以省略</span></span><br><span class="line">a.&lt;Object&gt;geA(<span class="keyword">new</span> <span class="title class_">Object</span>());  </span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="反射">反射</h2>
<ul>
<li><p>反射赋予了我们在运行时分析类以及执行类中方法的能力，通过反射可以获取任意一个类的所有属性和方法</p></li>
<li><p>反射增加了安全问题，可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译器），不过其对于框架来说实际是影响不大的</p></li>
<li><p>应用场景<br />
一般用于框架中，框架中大量使用了动态代理，而动态代理的实现也依赖于反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JDK动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解也使用到了反射，比如Spring上的@Component注解。
可以基于反射分析类，然后获取到类/属性/方法/方法的参数上的注解，获取注解后，做进一步的处理</p></li>
</ul>
<h2 id="注解">注解</h2>
<ul>
<li><p>注解，Java5引入，用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注解本质上是一个继承了Annotation的特殊接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Override</span> <span class="keyword">extends</span> <span class="title class_">Annotation</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注解只有被解析后才会生效</p>
<ul>
<li><strong>编译期直接扫描</strong> ：编译器在编译 Java
代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code>
注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</li>
<li><strong>运行期通过反射处理</strong> ：像框架中自带的注解(比如 Spring
框架的 <code>@Value</code>
、<code>@Component</code>)都是通过反射来进行处理的。</li>
</ul></li>
</ul>
<h2 id="spi">SPI</h2>
<ul>
<li>介绍
<ul>
<li>Service Provider Interface ，服务提供者的接口 ，
专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口</li>
<li>SPI
将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。</li>
<li>很多框架都使用了 Java 的 SPI 机制，比如：Spring
框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。</li>
<li>SPI扩展实现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221009101411097.png"
alt="image-20221009101411097" /></li>
</ul></li>
<li>API和SPI区别 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221009101546801.png"
alt="image-20221009101546801" />
<ul>
<li>模块之间通过接口进行通讯，在服务调用方和服务实现方(服务提供者)之间引入一个“接口”
<ul>
<li>当接口和实现，都是放在实现方的时候，这就是API</li>
<li>当接口存在于调用方，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务，即SPI</li>
</ul></li>
</ul></li>
<li>提供了接口设计的灵活性，缺点：
<ul>
<li>需要遍历加载所有的实现类，不能做到按需加载，效率较低</li>
<li>当多个ServiceLoader同时load时，会有并发问题</li>
</ul></li>
</ul>
<h2 id="io">I/O</h2>
<ul>
<li><p>序列化和反序列化</p>
<ul>
<li>序列化：将数据结构或对象换成二级制字节流的过程</li>
<li>反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li>
<li>对于Java，序列化的都是对象（Object），即实例化后的类（Class）</li>
</ul></li>
<li><p>维基</p>
<blockquote>
<p><strong>序列化</strong>（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。依照序列化格式重新获取字节的结果时，可以利用它来产生与原始对象相同语义的副本。对于许多对象，像是使用大量引用的复杂对象，这种序列化重建的过程并不容易。面向对象中的对象序列化，并不概括之前原始对象所关系的函数。这种过程也称为对象编组（marshalling）。从一系列字节提取数据结构的反向操作，是反序列化（也称为解编组、deserialization、unmarshalling）。</p>
</blockquote></li>
<li><p>序列化的目的，通过网络传输对象，或者说是将对象存储到文件系统、数据库、内存中
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221009102741094.png"
alt="image-20221009102741094" /></p></li>
<li><p>被<code>transient</code>修饰的变量，不进行序列化：即当对象被反序列化时，被<code>transient</code>修饰的变量值不会被持久化和恢复
<code>transient 英[ˈtrænziənt]</code></p>
<ul>
<li><code>transient</code> 只能修饰变量，不能修饰类和方法。</li>
<li><code>transient</code>
修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰
<code>int</code> 类型，那么反序列后结果就是 <code>0</code>。</li>
<li><code>static</code> 变量因为不属于任何对象(Object)，所以无论有没有
<code>transient</code> 关键字修饰，均不会被序列化。</li>
</ul></li>
<li><p>JavaIO流</p>
<blockquote>
<p>IO 即
<code>Input/Output</code>，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为
IO 流。IO 流在 Java
中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。</p>
</blockquote></li>
<li><p>JavaIO流的类都是从如下4个抽象类基类中派生出来的</p>
<ul>
<li><code>InputStream</code>/<code>Reader</code>:
所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li>
<li><code>OutputStream</code>/<code>Writer</code>:
所有输出流的基类，前者是字节输出流，后者是字符输出流。</li>
</ul></li>
<li><p>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么I/O流操作要分为字节流操作和字符流操作</p>
<ul>
<li>字符流由Java虚拟机将字节转换得到，过程较为耗时</li>
<li>如果不知道编码类型的过，使用字节流的过程中很容易出现乱码</li>
</ul></li>
</ul>
<h2 id="语法糖">语法糖</h2>
<figure class="highlight plaintext"><figcaption><span>英[sɪnˈtæktɪk]``` 句法的</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">指的是为了方便程序员开发程序而设计的一种特殊语法，对编程语言的功能并没有影响，语法糖写出来的代码往往更简单简洁且容易阅读，比如```for-each```，原理：基于普通的for循环和迭代器</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">String[] strs = &#123;&quot;JavaGuide&quot;, &quot;公众号：JavaGuide&quot;, &quot;博客：https://javaguide.cn/&quot;&#125;;</span><br><span class="line">for (String s : strs) &#123;</span><br><span class="line">  	System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JVM 其实并不能识别语法糖，Java
语法糖要想被正确执行，需要先通过编译器进行解糖，也就是在程序编译阶段将其转换成
JVM 认识的基本语法。这也侧面说明，Java 中真正支持语法糖的是 Java
编译器而不是
JVM。如果你去看<code>com.sun.tools.javac.main.JavaCompiler</code>的源码，你会发现在<code>compile()</code>中有一个步骤就是调用<code>desugar()</code>，这个方法就是负责解语法糖的实现的。</p>
</blockquote>
<p>Java中常见的语法糖：<br />
泛型、自动拆装箱、变长参数、枚举、内部类、增强 for
循环、try-with-resources 语法、lambda 表达式等</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java_spi</title>
    <url>/2022/10/12/review/java_guide/basic/java_spi/</url>
    <content><![CDATA[<h3 id="简介">简介</h3>
<p>为了实现在模块装配的时候不用再程序里面动态指明，这就需要一种服务发现机制。JavaSPI就是提供了这样的一个机制：为某个接口寻找服务实现的机制。有点类似IoC的思想，将装配的控制权交到了程序之外</p>
<h3 id="spi介绍">SPI介绍</h3>
<p>SPI，ServiceProviderInterface
使用SPI：Spring框架、数据库加载驱动、日志接口、以及Dubbo的扩展实现</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221012105156504.png"
alt="image-20221012105156504" />
<figcaption aria-hidden="true">image-20221012105156504</figcaption>
</figure>
<p>感觉下面这个图不太对，被调用方应该
一般模块之间都是通过接口进行通讯，</p>
<blockquote>
<p>当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是
API ，这种接口和实现都是放在实现方的。</p>
<p>当接口存在于调用方这边时，就是 SPI
，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。</p>
<p>我的理解：被调用方（提供接口的人），调用方（使用接口的人），但是其实这里只把调用方--&gt;使用接口的人
这个关系是对的。</p>
<p>也就是说，正常情况下由被调用方自己提供接口和实现，即API。而现在，由调用方（这里的调用方其实可以理解成上面的被调用方），提供了接口还使用了接口，而由被调用方进行接口实现</p>
</blockquote>
<h3 id="实战演示">实战演示</h3>
<p>SLF4J只是一个日志门面（接口），但是SLF4J的具体实现可以有多种，如：Logback/Log4j/Log4j2等等</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221012160549090.png"
alt="image-20221012160549090" />
<figcaption aria-hidden="true">image-20221012160549090</figcaption>
</figure>
<h4 id="简易版本">简易版本</h4>
<ul>
<li><p>ServiceProviderInterface</p></li>
<li><p>目录结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">│  service-provider-interface.iml</span><br><span class="line">│</span><br><span class="line">├─.idea</span><br><span class="line">│  │  .gitignore</span><br><span class="line">│  │  misc.xml</span><br><span class="line">│  │  modules.xml</span><br><span class="line">│  └─ workspace.xml</span><br><span class="line">│</span><br><span class="line">└─src</span><br><span class="line">    └─edu</span><br><span class="line">        └─jiangxuan</span><br><span class="line">            └─up</span><br><span class="line">                └─spi</span><br><span class="line">                        Logger.java</span><br><span class="line">                        LoggerService.java</span><br><span class="line">                        Main.class</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Logger接口，即SPI
服务提供者接口，后面的服务提供者要针对这个接口进行实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.jiangxuan.up.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String msg)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>LoggerService类，主要是为服务使用者（调用方）提供特定功能，这个类是实现JavaSPI机制的关键所在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.jiangxuan.up.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LoggerService</span> <span class="variable">SERVICE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggerService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Logger&gt; loggerList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LoggerService</span><span class="params">()</span> &#123;</span><br><span class="line">        ServiceLoader&lt;Logger&gt; loader = ServiceLoader.load(Logger.class);</span><br><span class="line">        List&lt;Logger&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Logger log : loader) &#123;</span><br><span class="line">            list.add(log);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// LoggerList 是所有 ServiceProvider</span></span><br><span class="line">        loggerList = list;</span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// Logger 只取一个</span></span><br><span class="line">            logger = list.get(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LoggerService <span class="title function_">getService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SERVICE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;info 中没有发现 Logger 服务提供者&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loggerList.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;debug 中没有发现 Logger 服务提供者&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        loggerList.forEach(log -&gt; log.debug(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Main类（服务使用者，调用方）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.spi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LoggerService</span> <span class="variable">service</span> <span class="operator">=</span> LoggerService.getService();</span><br><span class="line"></span><br><span class="line">        service.info(<span class="string">&quot;Hello SPI&quot;</span>);</span><br><span class="line">        service.debug(<span class="string">&quot;Hello SPI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 结果</span></span><br><span class="line"><span class="comment">info 中没有发现 Logger 服务提供者 debug 中没有发现 Logger 服务提供者</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>新的项目，来实现Logger接口<br />
项目结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">│  service-provider.iml</span><br><span class="line">│</span><br><span class="line">├─.idea</span><br><span class="line">│  │  .gitignore</span><br><span class="line">│  │  misc.xml</span><br><span class="line">│  │  modules.xml</span><br><span class="line">│  └─ workspace.xml</span><br><span class="line">│</span><br><span class="line">├─lib</span><br><span class="line">│      service-provider-interface.jar</span><br><span class="line">|</span><br><span class="line">└─src</span><br><span class="line">    ├─edu</span><br><span class="line">    │  └─jiangxuan</span><br><span class="line">    │      └─up</span><br><span class="line">    │          └─spi</span><br><span class="line">    │              └─service</span><br><span class="line">    │                      Logback.java</span><br><span class="line">    │</span><br><span class="line">    └─META-INF</span><br><span class="line">        └─services</span><br><span class="line">                edu.jiangxuan.up.spi.Logger</span><br></pre></td></tr></table></figure>
<ul>
<li><p>首先需要有一个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.jiangxuan.up.spi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.jiangxuan.up.spi.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logback</span> <span class="keyword">implements</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logback info 打印日志：&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">debug</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logback debug 打印日志：&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将之前项目打包的jar导入项目中</p></li>
<li><p>之后要<code>src</code> 目录下新建 <code>META-INF/services</code>
文件夹，然后新建文件 <code>edu.jiangxuan.up.spi.Logger</code> （SPI
的全类名），文件里面的内容是：<code>edu.jiangxuan.up.spi.service.Logback</code>
（Logback 的全类名，即 SPI 的实现类的包名 + 类名）</p></li>
</ul></li>
<li><p><strong>这是 JDK SPI 机制 ServiceLoader
约定好的标准。</strong></p>
<blockquote>
<p>Java 中的 SPI 机制就是在每次类加载的时候会先去找到 class 相对目录下的
<code>META-INF</code> 文件夹下的 services
文件夹下的文件，将这个文件夹下面的所有文件先加载到内存中，然后根据这些文件的文件名和里面的文件内容找到相应接口的具体实现类，找到实现类后就可以通过反射去生成对应的对象，保存在一个
list
列表里面，所以可以通过迭代或者遍历的方式拿到对应的实例对象，生成不同的实现。</p>
<p>即：文件名一定要是接口的全类名，然后里面的内容一定要是实现类的全类名，实现类可以有多个，直接换行就好了，多个实现类的时候，会一个一个的迭代加载。</p>
</blockquote>
<ul>
<li>接下来同样将 <code>service-provider</code> 项目打包成 jar 包，这个
jar 包就是服务提供方的实现。通常我们导入 maven 的 pom
依赖就有点类似这种，只不过我们现在没有将这个 jar 包发布到 maven
公共仓库中，所以在需要使用的地方只能手动的添加到项目中</li>
</ul></li>
<li><p>效果展示 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221012171251890.png"
alt="image-20221012171251890" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.jiangxuan.up.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.jiangxuan.up.spi.LoggerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJavaSPI</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LoggerService</span> <span class="variable">loggerService</span> <span class="operator">=</span> LoggerService.getService();</span><br><span class="line">        loggerService.info(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        loggerService.debug(<span class="string">&quot;测试Java SPI 机制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过使用 SPI 机制，可以看出服务（<code>LoggerService</code>）和
服务提供者两者之间的耦合度非常低，如果说我们想要换一种实现，那么其实只需要修改
<code>service-provider</code> 项目中针对 <code>Logger</code>
接口的具体实现就可以了，只需要换一个 jar
包即可，也可以有在一个项目里面有多个实现，这不就是 SLF4J
原理吗？</p></li>
</ul>
<h3 id="serviceloader">ServiceLoader</h3>
<p>JDK 官方给的注释：<strong>一种加载服务实现的工具。</strong></p>
<h4 id="具体实现">具体实现</h4>
<h4 id="自己实现">自己实现</h4>
<p>//个人简易版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.jiangxuan.up.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServiceLoader</span>&lt;S&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的接口 Class 模板</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应实现类的 可以有多个，用 List 进行封装</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;S&gt; providers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露给外部使用的方法，通过调用这个方法可以开始加载自己定制的实现流程。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; MyServiceLoader&lt;S&gt; <span class="title function_">load</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyServiceLoader</span>&lt;&gt;(service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MyServiceLoader</span><span class="params">(Class&lt;S&gt; service)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.service = service;</span><br><span class="line">        <span class="built_in">this</span>.classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        doLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关键方法，加载具体实现类的逻辑</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLoad</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取所有 jar 包里面 META-INF/services 包下面的文件，这个文件名就是接口名，然后文件里面的内容就是具体的实现类的路径加全类名</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="string">&quot;META-INF/services/&quot;</span> + service.getName());</span><br><span class="line">            <span class="comment">// 挨个遍历取到的文件</span></span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="comment">// 取出当前的文件</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">                System.out.println(<span class="string">&quot;File = &quot;</span> + url.getPath());</span><br><span class="line">                <span class="comment">// 建立链接</span></span><br><span class="line">                <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">                urlConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">// 获取文件输入流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">                <span class="comment">// 从文件输入流获取缓存</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">                <span class="comment">// 从文件内容里面得到实现类的全类名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (className != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过反射拿到实现类的实例</span></span><br><span class="line">                    Class&lt;?&gt; clazz = Class.forName(className, <span class="literal">false</span>, classLoader);</span><br><span class="line">                    <span class="comment">// 如果声明的接口跟这个具体的实现类是属于同一类型，（可以理解为Java的一种多态，接口跟实现类、父类和子类等等这种关系。）则构造实例</span></span><br><span class="line">                    <span class="keyword">if</span> (service.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">S</span>&gt; constructor = (Constructor&lt;? <span class="keyword">extends</span> <span class="title class_">S</span>&gt;) clazz.getConstructor();</span><br><span class="line">                        <span class="type">S</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                        <span class="comment">// 把当前构造的实例对象添加到 Provider的列表里面</span></span><br><span class="line">                        providers.add(instance);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 继续读取下一行的实现类，可以有多个实现类，只需要换行就可以了。</span></span><br><span class="line">                    className = bufferedReader.readLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件异常。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回spi接口对应的具体实现类列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;S&gt; <span class="title function_">getProviders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> providers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过 URL 工具类从 jar 包的 /META-INF/services 目录下面找到对应的文件，</span><br><span class="line">读取这个文件的名称找到对应的 spi 接口，</span><br><span class="line">通过 InputStream 流将文件里面的具体实现类的全类名读取出来，</span><br><span class="line">根据获取到的全类名，先判断跟 spi 接口是否为同一类型，如果是的，那么就通过反射的机制构造对应的实例对象，</span><br><span class="line">将构造出来的实例对象添加到 Providers 的列表中。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么Java中只有值传递</title>
    <url>/2022/10/09/review/java_guide/basic/passByValue/</url>
    <content><![CDATA[<ul>
<li><p>形参&amp;&amp;实参</p>
<ul>
<li><p>形参(形式参数)，用于传递给函数/方法的参数，必须有确定的值</p></li>
<li><p>实参(实际参数)，用于定义函数/方法，接收实参，不需要有确定的值</p></li>
<li><p>```java String hello = "Hello!"; // hello 为实参 sayHello(hello);
// str 为形参 void sayHello(String str) { System.out.println(str); }
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 值传递&amp;&amp;引用传递</span><br><span class="line"></span><br><span class="line">  - 程序设计将实参传递给方法的方式分为两种，值传递：方法接收实参值的拷贝，会创建副本；引用传递：方法接受的是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参</span><br><span class="line"></span><br><span class="line">- Java中只有值传递，原因：</span><br><span class="line"></span><br><span class="line">  - 传递基本类型参数</span><br><span class="line"></span><br><span class="line">    ```java</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int num1 = 10;</span><br><span class="line">        int num2 = 20;</span><br><span class="line">        swap(num1, num2);</span><br><span class="line">        System.out.println(&quot;num1 = &quot; + num1);</span><br><span class="line">        System.out.println(&quot;num2 = &quot; + num2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void swap(int a, int b) &#123;</span><br><span class="line">        int temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">        System.out.println(&quot;a = &quot; + a);</span><br><span class="line">        System.out.println(&quot;b = &quot; + b);</span><br><span class="line">    &#125;</span><br><span class="line">    //输出</span><br><span class="line">    a = 20</span><br><span class="line">    b = 10</span><br><span class="line">    num1 = 10</span><br><span class="line">    num2 = 20</span><br></pre></td></tr></table></figure></p></li>
<li><p>传递引用类型参数 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">      System.out.println(arr[<span class="number">0</span>]); <span class="comment">//1</span></span><br><span class="line">      change(arr);</span><br><span class="line">      System.out.println(arr[<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">    array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>change方法的参数，拷贝的是arr(实参)的地址，所以array和arr指向的是同一个数组对象
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010103143086.png"
alt="image-20221010103143086" /></p></li>
<li><p>传递引用类型参数2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoZhang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoLi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    swap(xiaoZhang, xiaoLi);</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoZhang:&quot;</span> + xiaoZhang.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;xiaoLi:&quot;</span> + xiaoLi.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Person person1, Person person2)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">temp</span> <span class="operator">=</span> person1;</span><br><span class="line">    person1 = person2;</span><br><span class="line">    person2 = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;person1:&quot;</span> + person1.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;person2:&quot;</span> + person2.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">person1:小李</span><br><span class="line">person2:小张</span><br><span class="line">xiaoZhang:小张</span><br><span class="line">xiaoLi:小李</span><br></pre></td></tr></table></figure>
<p>这里并不会交换xiaoZhang和xiaoLi，只会交换swap方法栈里的person1和person2</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010103522823.png"
alt="image-20221010103522823" />
<figcaption aria-hidden="true">image-20221010103522823</figcaption>
</figure></li>
</ul></li>
<li><p>小结 Java 中将实参传递给方法（或函数）的方式是
<strong>值传递</strong> ：</p>
<ul>
<li>如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。</li>
<li>如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>proxy_pattern</title>
    <url>/2022/10/10/review/java_guide/basic/proxy_pattern/</url>
    <content><![CDATA[<h3 id="代理模式">代理模式</h3>
<p>使用代理对象来代替对真实对象的访问，就可以在不修改原目标对象的前提下提供额外的功能操作，扩展目标对象的功能，即在目标对象的某个方法执行前后可以增加一些自定义的操作</p>
<h3 id="静态代理">静态代理</h3>
<ol type="1">
<li>定义一个接口及其实现类；</li>
<li>创建一个代理类同样实现这个接口</li>
<li>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</li>
</ol>
<p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建代理类并同样实现发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsProxy</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SmsService smsService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmsProxy</span><span class="params">(SmsService smsService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.smsService = smsService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method send()&quot;</span>);</span><br><span class="line">        smsService.send(message);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method send()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>();</span><br><span class="line">        <span class="type">SmsProxy</span> <span class="variable">smsProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmsProxy</span>(smsService);</span><br><span class="line">        smsProxy.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">before method <span class="title function_">send</span><span class="params">()</span></span><br><span class="line">send message:java</span><br><span class="line">after method <span class="title function_">send</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<h3 id="动态代理">动态代理</h3>
<p>从JVM角度来说，动态代理是在运行时动态生成类字节码，并加载到JVM中的
SpringAOP和RPC等框架都实现了动态代理</p>
<h4 id="jdk动态代理">JDK动态代理</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义并发送短信的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JDK动态代理类</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2020年05月11日 11:23:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理类中的真实对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DebugInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当我们的动态代理对象调用原方法时，实际上调用的invoke()，然后invoke代替我们调用了被代理对象的原生方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂类及实际使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标类的类加载</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 代理需要实现的接口，可指定多个</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DebugInvocationHandler</span>(target)   <span class="comment">// 代理对象对应的自定义 InvocationHandler</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际使用</span></span><br><span class="line"><span class="type">SmsService</span> <span class="variable">smsService</span> <span class="operator">=</span> (SmsService) JdkProxyFactory.getProxy(<span class="keyword">new</span> <span class="title class_">SmsServiceImpl</span>());</span><br><span class="line">smsService.send(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">before method send</span><br><span class="line">send message:java</span><br><span class="line">after method send</span><br></pre></td></tr></table></figure>
<h4 id="cglib动态代理机制">CGLIB动态代理机制</h4>
<p>JDK动态代理问题：只能代理实现了接口的类Spring
的AOP中，如果使用了接口，则使用JDK动态代理；否则采用CGLB</p>
<p>继承</p>
<p>核心是Enhancer类及MethodInterceptor接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Callback</span>&#123;</span><br><span class="line">    <span class="comment">// 拦截被代理类中的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象，被拦截方法，参数，调用原始方法</p>
<ul>
<li><p>实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个类，及方法拦截器</span></span><br><span class="line"><span class="keyword">package</span> github.javaguide.dynamicProxy.cglibDynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliSmsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send message:&quot;</span> + message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MethodInterceptor （方法拦截器）</span></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义MethodInterceptor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           代理对象（增强的对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      被拦截的方法（需要增强的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args        方法入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 用于调用原始方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//调用方法之前，我们可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;before method &quot;</span> + method.getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="comment">//调用方法之后，我们同样可以添加自己的操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after method &quot;</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxy</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建动态代理增强类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 设置类加载器</span></span><br><span class="line">        enhancer.setClassLoader(clazz.getClassLoader());</span><br><span class="line">        <span class="comment">// 设置被代理类</span></span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        <span class="comment">// 设置方法拦截器</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">DebugMethodInterceptor</span>());</span><br><span class="line">        <span class="comment">// 创建代理类</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际使用</span></span><br><span class="line"><span class="type">AliSmsService</span> <span class="variable">aliSmsService</span> <span class="operator">=</span> (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class);</span><br><span class="line">aliSmsService.send(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="对比">对比</h3>
<p>动态代理更为灵活，且不需要实现接口，可以直接代理实现类，并且不需要针对每个对象都创建代理类；一旦添加方法，动态代理类不需要修改；</p>
<p>静态代理：静态代理在编译时就将接口、实现类变成实际的class对象，即运行时生成动态类字节码，并加载到JVM中</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java-reflex</title>
    <url>/2022/10/10/review/java_guide/basic/reflex/</url>
    <content><![CDATA[<h3 id="何为反射">何为反射</h3>
<p>赋予了我们在运行时分析类以及执行类中方法的能力；运行中获取任意一个类的所有属性和方法，以及调用这些方法和属性</p>
<h3 id="应用场景">应用场景</h3>
<p>Spring/Spring Boot 、MyBatis等框架都用了大量反射机制，以下为</p>
<ul>
<li><p>JDK动态代理</p>
<ul>
<li><p>接口及实现类</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarImpl</span> <span class="keyword">implements</span> <span class="title class_">Car</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;car running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>代理类 及main方法使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line">  <span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">  <span class="comment">//JDK动态代理代理类 </span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">      <span class="comment">//真实类的对象</span></span><br><span class="line">      <span class="keyword">private</span> Object car;</span><br><span class="line">      <span class="comment">//构造方法赋值给真实的类</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">CarHandler</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.car = obj;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">//代理类执行方法时，调用的是这个方法</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">          <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(car, args);</span><br><span class="line">          System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//main方法使用</span></span><br><span class="line">  <span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          <span class="type">CarImpl</span> <span class="variable">carImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarImpl</span>();</span><br><span class="line">          <span class="type">CarHandler</span> <span class="variable">carHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarHandler</span>(carImpl);</span><br><span class="line">          <span class="type">Car</span> <span class="variable">proxy</span> <span class="operator">=</span> (Car)Proxy.newProxyInstance(</span><br><span class="line">                  main.class.getClassLoader(), <span class="comment">//第一个参数，获取ClassLoader</span></span><br><span class="line">                  carImpl.getClass().getInterfaces(), <span class="comment">//第二个参数，获取被代理类的接口</span></span><br><span class="line">                  carHandler);<span class="comment">//第三个参数，一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</span></span><br><span class="line">          proxy.run();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">before</span><br><span class="line">car running</span><br><span class="line">after</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>Cglib动态代理（没有实现接口的Car</p>
<ul>
<li><p>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarNoInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;car running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>cglib代理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object car;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 创建代理对象 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(Object object)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.car = object;  </span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();  </span><br><span class="line">        enhancer.setSuperclass(<span class="built_in">this</span>.car.getClass());  </span><br><span class="line">        <span class="comment">// 回调方法  </span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);  </span><br><span class="line">        <span class="comment">// 创建代理对象  </span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args,MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;事物开始&quot;</span>);  </span><br><span class="line">        proxy.invokeSuper(obj, args);  </span><br><span class="line">        System.out.println(<span class="string">&quot;事物结束&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;    </span><br><span class="line">        <span class="type">CglibProxy</span> <span class="variable">cglibProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxy</span>();</span><br><span class="line">        <span class="type">CarNoInterface</span> <span class="variable">carNoInterface</span> <span class="operator">=</span> (CarNoInterface)cglibProxy.getInstance(<span class="keyword">new</span> <span class="title class_">CarNoInterface</span>());</span><br><span class="line">        carNoInterface.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">事物开始</span><br><span class="line">car running</span><br><span class="line">事物结束</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>我们可以基于反射分析类，然后获取到类/属性/方法/方法参数上的注解，之后做进一步的处理</p></li>
<li><p>反射机制的优缺点</p>
<ul>
<li>优点<br />
让代码更加灵活</li>
<li>确定，增加安全问题，可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时，且性能较差）</li>
</ul></li>
<li><p>反射实战</p>
<ul>
<li><p>获取Class对象的几种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass</span> <span class="operator">=</span> TargetObject.class;<span class="comment">//第一种</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);<span class="comment">//第二种</span></span><br><span class="line"><span class="type">TargetObject</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass2</span> <span class="operator">=</span> o.getClass(); <span class="comment">//第三种</span></span><br><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>); <span class="comment">//第4种，通过类加载器获取Class对象不会进行初始化，意味着不进行包括初始化等一系列操作，静态代码块和静态对象不会得到执行</span></span><br></pre></td></tr></table></figure></li>
<li><p>反射的基本操作 例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TargetObject</span><span class="params">()</span> &#123;</span><br><span class="line">        value = <span class="string">&quot;JavaGuide&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I love &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;value is &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过反射操作这个类的方法以及参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.javaguide;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;?&gt; targetClass = Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br><span class="line">        <span class="type">TargetObject</span> <span class="variable">targetObject</span> <span class="operator">=</span> (TargetObject) targetClass.newInstance();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取 TargetObject 类中定义的所有方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method[] methods = targetClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取指定方法并调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">publicMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;publicMethod&quot;</span>,</span><br><span class="line">                String.class);</span><br><span class="line"></span><br><span class="line">        publicMethod.invoke(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取指定参数并对参数进行修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> targetClass.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//为了对类中的参数进行修改我们取消安全检查</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 调用 private 方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">        <span class="comment">//为了调用private方法我们取消安全检查</span></span><br><span class="line">        privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        privateMethod.invoke(targetObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">publicMethod</span><br><span class="line">privateMethod</span><br><span class="line">I love JavaGuide</span><br><span class="line">value is JavaGuide</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化详解</title>
    <url>/2022/10/10/review/java_guide/basic/serialize/</url>
    <content><![CDATA[<h3 id="什么是序列化什么是反序列化">什么是序列化？什么是反序列化</h3>
<p>当需要持久化Java对象，比如将Java对象保存在文件中、或者在网络中传输Java对象，这些场景都需要用到序列化</p>
<p>即：</p>
<ul>
<li>序列化：将数据结构/对象，转换成二进制字节流</li>
<li>反序列化：将在序列化过程中所生成的二进制字节流的过程，转换成数据结构或者对象的过程</li>
</ul>
<p>对于Java，序列化的是对象(Object)，也就是实例化后的类(Class)</p>
<p>序列化的目的，是通过网络传输对象，或者说是将对象存储到文件系统、数据库、内存中，如图：
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010105218691.png"
alt="image-20221010105218691" /></p>
<h3 id="实际场景">实际场景</h3>
<ul>
<li>对象在<strong><u>进行网络传输（比如远程方法调用 RPC
的时候）之前</u></strong>需要先被序列化，<u><strong>接收到</strong></u>序列化的对象<u><strong>之后</strong></u>需要再进行<u><strong>反序列化</strong></u>；</li>
<li>将对象<u><strong>存储到文件中</strong></u>的时候需要进行序列化，将对象从文件中读取出来需要进行反序列化。</li>
<li>将<strong><u>对象存储到缓存数据库（如
Redis）时需要用到序列化</u></strong>，将对象<strong><u>从缓存数据库中读取</u></strong>出来需要反序列化</li>
</ul>
<h3 id="序列化协议对于tcpip-4层模型的哪一层">序列化协议对于TCP/IP
4层模型的哪一层</h3>
<p>4层包括，网络接口层，网络层，传输层，应用层 如下图所示：<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010110650054.png"
alt="image-20221010110650054" /></p>
<p>OSI七层协议模型中，表示层就是对应用层的用户数据，进行处理转换成二进制流；反过来的话，就是将二进制流转换成应用层的用户数据，即序列化和反序列化，所以<strong>序列化协议属于应用层</strong></p>
<h3 id="常见序列化协议对比">常见序列化协议对比</h3>
<p>kryo 英音 [k'rɪəʊ]
，除了JDK自带的序列化，还有hessian、kryo、protostuff</p>
<ul>
<li><p>JDK自带的序列化，只需要实现java.io.Serializable接口即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1905122041950251207L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> Object[] parameters;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] paramTypes;</span><br><span class="line">    <span class="keyword">private</span> RpcMessageTypeEnum rpcMessageTypeEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>serialVersionUID用于版本控制，会被写入二进制序列，反序列化如果发现和当前类不一致则会抛出InvalidClassException异常。一般不使用JDK自带序列化，1
不支持跨语言调用 2 性能差，序列化之后字节数组体积过大</p></li>
<li><p>Kryo
由于变长存储特性并使用了字节码生成机制，拥有较高的运行速度和较小字节码体积，代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kryo serialization class, Kryo serialization efficiency is very high, but only compatible with Java language</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shuang.kou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2020年05月13日 19:29:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KryoSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Kryo&gt; kryoThreadLocal = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.register(RpcResponse.class);</span><br><span class="line">        kryo.register(RpcRequest.class);</span><br><span class="line">        <span class="keyword">return</span> kryo;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object obj) &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">             <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(byteArrayOutputStream)) &#123;</span><br><span class="line">            <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> kryoThreadLocal.get();</span><br><span class="line">            <span class="comment">// Object-&gt;byte:将对象序列化为byte数组</span></span><br><span class="line">            kryo.writeObject(output, obj);</span><br><span class="line">            kryoThreadLocal.remove();</span><br><span class="line">            <span class="keyword">return</span> output.toBytes();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Serialization failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">             <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(byteArrayInputStream)) &#123;</span><br><span class="line">            <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> kryoThreadLocal.get();</span><br><span class="line">            <span class="comment">// byte-&gt;Object:从byte数组中反序列化出对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> kryo.readObject(input, clazz);</span><br><span class="line">            kryoThreadLocal.remove();</span><br><span class="line">            <span class="keyword">return</span> clazz.cast(o);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Deserialization failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Protobuf 出自google</p></li>
<li><p>ProtoStuff，更为易用</p></li>
<li><p>hessian，轻量级的自定义描述的二进制RPC协议，跨语言，hessian2，为阿里修改过的hessian
lite，是dubbo RPC默认启用的序列化方式</p></li>
<li><p>总结</p>
<ul>
<li>如果不需要跨语言可以考虑Kryo</li>
<li>Protobuf，ProtoStuff，hessian支持跨语言</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>语法糖</title>
    <url>/2022/10/12/review/java_guide/basic/syntactic_sugar/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>语法糖（Syntactic
Sugar）也称糖衣语法，指的是在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用，简而言之，让程序更加简洁，有更高的可读性</p>
<h2 id="java中有哪些语法糖">Java中有哪些语法糖</h2>
<p>Java虚拟机并不支持这些语法糖，这些语法糖在编译阶段就会被还原成简单的基础语法结构，这个过程就是解语法糖</p>
<ul>
<li><code>javac</code>命令可以将后缀为<code>.java</code>的源文件编译为后缀名为<code>.class</code>的可以运行于Java虚拟机的字节码。其中，<code>com.sun.tools.javac.main.JavaCompiler</code>的源码中，<code>compile()</code>中有一个步骤就是调用<code>desugar()</code>，这个方法就是负责解语法糖的实现的</li>
<li>Java中的语法糖，包括
泛型、变长参数、条件编译、自动拆装箱、内部类等</li>
</ul>
<h3 id="switch支持string与枚举">switch支持String与枚举</h3>
<p>switch本身原本只支持基本类型，如char、byte、short、int及其封装类，以及String、enum
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221013110105262.png"
alt="image-20221013110105262" /></p>
<p>int是数值，而char转ascii码，所以其实对于编译器来说，都是int类型(整型)
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221013111130070.png"
alt="image-20221013111130070" /></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221013111255889.png"
alt="image-20221013111255889" /> 而对于enum类型，<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221013111642816.png"
alt="image-20221013111642816" /></p>
<p>对于switch中使用String，则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchDemoString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;world&quot;</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译之后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchDemoString</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">switchDemoString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">switch</span>((s = str).hashCode())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">99162322</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">                System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">113318802</span>:</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>))</span><br><span class="line">                System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即switch判断是通过equals()和hashCode()方法来实现的</p>
<p>equals()检查是必要的，因为有可能发生碰撞，所以性能没有直接使用枚举进行switch或纯整数常量性能高</p>
<h3 id="泛型">泛型</h3>
<p>编译器处理泛型有两种方式：<code>Code specialization</code>和<code>Code sharing</code>。C++和
C#是使用<code>Code specialization</code>的处理机制，而 Java
使用的是<code>Code sharing</code>的机制</p>
<blockquote>
<p>Code sharing
方式为每个泛型类型创建唯一的字节码表示，并且将该泛型类型的实例都映射到这个唯一的字节码表示上。将多种泛型类形实例映射到唯一的字节码表示是通过类型擦除（<code>type erasue</code>）实现的。</p>
</blockquote>
<p>两个例子</p>
<ul>
<li><p>Map擦除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hollis&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;Hollis&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;www.hollischuang.com&quot;</span>);</span><br><span class="line"><span class="comment">//解语法糖之后</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hollis&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;wechat&quot;</span>, <span class="string">&quot;Hollis&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;blog&quot;</span>, <span class="string">&quot;www.hollischuang.com&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>其他擦除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;A <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;A&gt;&gt; A <span class="title function_">max</span><span class="params">(Collection&lt;A&gt; xs)</span> &#123;</span><br><span class="line">    Iterator&lt;A&gt; xi = xs.iterator();</span><br><span class="line">    <span class="type">A</span> <span class="variable">w</span> <span class="operator">=</span> xi.next();</span><br><span class="line">    <span class="keyword">while</span> (xi.hasNext()) &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">x</span> <span class="operator">=</span> xi.next();</span><br><span class="line">        <span class="keyword">if</span> (w.compareTo(x) &lt; <span class="number">0</span>)</span><br><span class="line">            w = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//擦除后变成</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title function_">max</span><span class="params">(Collection xs)</span>&#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">xi</span> <span class="operator">=</span> xs.iterator();</span><br><span class="line">    <span class="type">Comparable</span> <span class="variable">w</span> <span class="operator">=</span> (Comparable)xi.next();</span><br><span class="line">    <span class="keyword">while</span>(xi.hasNext())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">x</span> <span class="operator">=</span> (Comparable)xi.next();</span><br><span class="line">        <span class="keyword">if</span>(w.compareTo(x) &lt; <span class="number">0</span>)</span><br><span class="line">            w = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>小结</p>
<ul>
<li>虚拟机中并不存在泛型，泛型类没有自己独有的Class类对象，即不存在List<String>.class
或是 List<Integer>.class ，而只有List.class</li>
<li>虚拟机中，只有普通类和普通方法，所有泛型类的类型参数，在编译时都会被擦除</li>
</ul></li>
</ul>
<h3 id="自动装箱与拆箱">自动装箱与拆箱</h3>
<ul>
<li><p>装箱过程，通过调用<strong>包装器的valueOf</strong>方法实现的，而拆箱过程，则是通过调用<strong>包装器的xxxValue</strong>方法实现的</p></li>
<li><p>自动装箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译后的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> Integer.valueOf(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自动拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译后的代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i.intValue(); <span class="comment">//注意，是intValue，不是initValue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="可变长参数">可变长参数</h3>
<p>variable arguments，是在Java
1.5中引入的一个特性，允许一个方法把任意数量的值作为参数，代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">&quot;Holis&quot;</span>, <span class="string">&quot;公众号:Hollis&quot;</span>, <span class="string">&quot;博客：www.hollischuang.com&quot;</span>, <span class="string">&quot;QQ：907607222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String... strs)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译后代码</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    print(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">        <span class="string">&quot;Holis&quot;</span>, <span class="string">&quot;\u516C\u4F17\u53F7:Hollis&quot;</span>, <span class="string">&quot;\u535A\u5BA2\uFF1Awww.hollischuang.com&quot;</span>, <span class="string">&quot;QQ\uFF1A907607222&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String strs[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++)</span><br><span class="line">        System.out.println(strs[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，可变参数在被使用的时候，会创建一个数组，数组的长度，就是调用该方法的传递的实参的个数，然后再把参数值全部放到这个数组当中，最后把这个数组作为参数传递到被调用的方法中</p>
<h3 id="枚举">枚举</h3>
<p>关键字<code>enum</code>可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用，这是一种非常有用的功能</p>
<p>写一个enum类进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">T</span> &#123;</span><br><span class="line">    SPRING,SUMMER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译之后</span></span><br><span class="line"><span class="comment">// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.kpdus.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   T.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ly.review.base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Enum</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    下面这个和博客不太一样,博客里面是这样的</span></span><br><span class="line"><span class="comment">//    ENUM$VALUES是博客编译后的数组名</span></span><br><span class="line"><span class="comment">    public static T[] values()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        T at[];</span></span><br><span class="line"><span class="comment">        int i;</span></span><br><span class="line"><span class="comment">        T at1[];</span></span><br><span class="line"><span class="comment">        System.arraycopy(at = ENUM$VALUES, 0, at1 = new T[i = at.length], 0, i);</span></span><br><span class="line"><span class="comment">        return at1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T[] values()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[])$VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T <span class="title function_">valueOf</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (T)Enum.valueOf(com/ly/review/base/T, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">T</span><span class="params">(String s, <span class="type">int</span> i)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(s, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T Spring;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> T SUMMER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> T $VALUES[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;</span><br><span class="line">        Spring = <span class="keyword">new</span> <span class="title class_">T</span>(<span class="string">&quot;Spring&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        SUMMER = <span class="keyword">new</span> <span class="title class_">T</span>(<span class="string">&quot;SUMMER&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        $VALUES = (<span class="keyword">new</span> <span class="title class_">T</span>[] &#123;</span><br><span class="line">            Spring, SUMMER</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>重要代码：</p>
<ol type="1">
<li><p><code>public final class T extends Enum</code>
说明该类不可继承</p></li>
<li><p>```java public static final T Spring; public static final T
SUMMER; <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   说明枚举类型不可修改</span><br><span class="line"></span><br><span class="line">### 内部类</span><br><span class="line"></span><br><span class="line">内部类又称为嵌套类，可以把内部类理解成外部类的一个普通成员</span><br><span class="line">**内部类之所以也是语法糖，是因为它仅仅是一个编译时的概念，`outer.java`里面定义了一个内部类`inner`，一旦编译成功，就会生成两个完全不同的`.class`文件了，分别是`outer.class`和`outer$inner.class`。所以内部类的名字完全可以和它的外部类名字相同。**</span><br><span class="line"></span><br><span class="line">代码如下：  </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class OutterClass &#123;</span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class InnerClass&#123;</span><br><span class="line">        private String name;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ol>
<p>编译之后，会生成两个class文件OutterClass.class和OutterClass<span
class="math inline">\(InnerClass.class。所以内部类是可以跟外部类完全一样的名字的
如果要对OutterClass.class进行反编译，那么他会把OutterClass\)</span>InnerClass.class也一起进行反编译</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutterClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">final</span> OutterClass <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        InnerClass()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.<span class="built_in">this</span>$<span class="number">0</span> = OutterClass.<span class="built_in">this</span>;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutterClass</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args1[])</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件编译">条件编译</h3>
<p>—般情况下，程序中的每一行代码都要参加编译。但有时候出于<strong>对程序代码优化的考虑</strong>，希望只对其中一部分内容进行编译，此时就需要在程序中加上条件，让编译器只对满足条件的代码进行编译，将不满足条件的代码舍弃，这就是条件编译。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalCompilation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(DEBUG) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, DEBUG!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">ONLINE</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ONLINE)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, ONLINE!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译之后如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalCompilation</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConditionalCompilation</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, DEBUG!&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ONLINE</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Java 语法的条件编译，是通过判断条件为常量的 if
语句实现的。其原理也是 Java 语言的语法糖。根据 if
判断条件的真假，编译器直接把分支为 false
的代码块消除。通过该方式实现的条件编译，必须在方法体内实现，而无法在正整个
Java 类的结构或者类的属性上进行条件编译</strong></p>
<h3 id="断言">断言</h3>
<p>Java
在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都将忽略！），如果要开启断言检查，则需要用开关<code>-enableassertions</code>或<code>-ea</code>来开启</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssertTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">assert</span> <span class="variable">a</span> <span class="operator">=</span>= b;</span><br><span class="line">        System.out.println(<span class="string">&quot;公众号：Hollis&quot;</span>);</span><br><span class="line">        <span class="keyword">assert</span> a != b : <span class="string">&quot;Hollis&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;博客：www.hollischuang.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译之后代码如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssertTest</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">AssertTest</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!$assertionsDisabled &amp;&amp; a != b)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>();</span><br><span class="line">    System.out.println(<span class="string">&quot;\u516C\u4F17\u53F7\uFF1AHollis&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!$assertionsDisabled &amp;&amp; a == b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Hollis&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\u535A\u5BA2\uFF1Awww.hollischuang.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">$assertionsDisabled</span> <span class="operator">=</span> !com/hollis/suguar/AssertTest.desiredAssertionStatus();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>断言的底层是if语言，如果断言为true，则什么都不做；如果断言为false，则程序抛出AssertError来打断程序执行</li>
<li>-enableassertions会设置$assertionsDisabled字段的值</li>
</ul>
<h3 id="数值字面量">数值字面量</h3>
<p>java7中，字面量允许在数字之间插入任意多个下划线，不会对字面值产生影响，可以方便阅读</p>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10_000</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-each">for-each</h3>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    String[] strs = &#123;<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;公众号：Hollis&quot;</span>, <span class="string">&quot;博客：www.hollischuang.com&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (String s : strs) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; strList = ImmutableList.of(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;公众号：Hollis&quot;</span>, <span class="string">&quot;博客：www.hollischuang.com&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : strList) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反编译之后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    String strs[] = &#123;</span><br><span class="line">        <span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;\u516C\u4F17\u53F7\uFF1AHollis&quot;</span>, <span class="string">&quot;\u535A\u5BA2\uFF1Awww.hollischuang.com&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    String args1[] = strs;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> args1.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> args1[j];</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">List</span> <span class="variable">strList</span> <span class="operator">=</span> ImmutableList.of(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;\u516C\u4F17\u53F7\uFF1AHollis&quot;</span>, <span class="string">&quot;\u535A\u5BA2\uFF1Awww.hollischuang.com&quot;</span>);</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> strList.iterator(); iterator.hasNext(); System.out.println(s))</span><br><span class="line">        s = (String)iterator.next();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会改成普通的for语句循环，或者使用迭代器</p>
<h3 id="try-with-resource">try-with-resource</h3>
<p>关闭资源的方式，就是再finally块里释放，即调用close方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String line;</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:\\hollischuang.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// handle exception</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="comment">// handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK7之后提供的关闭资源的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:\\ hollischuang.xml&quot;</span>))) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="comment">// handle exception</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">transient</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        BufferedReader br;</span><br><span class="line">        Throwable throwable;</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d:\\ hollischuang.xml&quot;</span>));</span><br><span class="line">        throwable = <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>((line = br.readLine()) != <span class="literal">null</span>)</span><br><span class="line">                System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable throwable2)</span><br><span class="line">        &#123;</span><br><span class="line">            throwable = throwable2;</span><br><span class="line">            <span class="keyword">throw</span> throwable2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(br != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">if</span>(throwable != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Throwable throwable1)</span><br><span class="line">                &#123;</span><br><span class="line">                    throwable.addSuppressed(throwable1);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                br.close();</span><br><span class="line">            <span class="keyword">break</span> MISSING_BLOCK_LABEL_113;</span><br><span class="line">            Exception exception;</span><br><span class="line">            exception;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">if</span>(throwable != <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        br.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span>(Throwable throwable3)</span><br><span class="line">                      &#123;</span><br><span class="line">                        throwable.addSuppressed(throwable3);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    br.close();</span><br><span class="line">        <span class="keyword">throw</span> exception;</span><br><span class="line">        IOException ioexception;</span><br><span class="line">        ioexception;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是我们没有做关闭的操作，编译器都帮我们做了</p>
<h3 id="lambda表达">Lambda表达</h3>
<ul>
<li><p>使用lambda表达式便利list</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    List&lt;String&gt; strList = ImmutableList.of(<span class="string">&quot;Hollis&quot;</span>, <span class="string">&quot;公众号：Hollis&quot;</span>, <span class="string">&quot;博客：www.hollischuang.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    strList.forEach( s -&gt; &#123; System.out.println(s); &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反编译之后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/* varargs */</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String ... args)</span> &#123;</span><br><span class="line">    <span class="type">ImmutableList</span> <span class="variable">strList</span> <span class="operator">=</span> ImmutableList.of((Object)<span class="string">&quot;Hollis&quot;</span>, (Object)<span class="string">&quot;\u516c\u4f17\u53f7\uff1aHollis&quot;</span>, (Object)<span class="string">&quot;\u535a\u5ba2\uff1awww.hollischuang.com&quot;</span>);</span><br><span class="line">    strList.forEach((Consumer&lt;String&gt;)LambdaMetafactory.metafactory(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, (Ljava/lang/Object;)V, lambda$main$<span class="number">0</span>(java.lang.String ), (Ljava/lang/String;)V)());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="comment">/* synthetic */</span> <span class="keyword">void</span> lambda$main$<span class="number">0</span>(String s) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>lambda表达式的实现其实是依赖了一些底层的api，在编译阶段，会把lambda表达式进行解糖，转换成调用内部api的方式</p></li>
</ul>
<h2 id="可能遇到的坑">可能遇到的坑</h2>
<h3 id="泛型-1">泛型</h3>
<ul>
<li><p>泛型的类型参数不能用在 Java 异常处理的 catch
语句中。因为异常处理是由 JVM 在运行时刻来进行的。由于类型信息被擦除，JVM
是无法区分两个异常类型<code>MyException&lt;String&gt;</code>和<code>MyException&lt;Integer&gt;</code>的</p></li>
<li><p>泛型类的所有静态变量是共享的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        GT&lt;Integer&gt; gti = <span class="keyword">new</span> <span class="title class_">GT</span>&lt;Integer&gt;();</span><br><span class="line">        gti.<span class="keyword">var</span>=<span class="number">1</span>;</span><br><span class="line">        GT&lt;String&gt; gts = <span class="keyword">new</span> <span class="title class_">GT</span>&lt;String&gt;();</span><br><span class="line">        gts.<span class="keyword">var</span>=<span class="number">2</span>;</span><br><span class="line">        System.out.println(gti.<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GT</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="keyword">var</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nothing</span><span class="params">(T x)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自动装箱与拆箱-1">自动装箱与拆箱</h3>
<p>对于自动装箱，整形对象通过使用相同的缓存和重用，适用于整数值区间 [
-128，+127 ]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;a == b is &quot;</span> + (a == b));</span><br><span class="line">    System.out.println((<span class="string">&quot;c == d is &quot;</span> + (c == d)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">a == b is <span class="type">false</span></span><br><span class="line"><span class="variable">c</span> <span class="operator">=</span>= d is <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="增强for循环">增强for循环</h3>
<p>遍历时不要使用list的remove方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Student stu : students) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stu.getId() == <span class="number">2</span>)</span><br><span class="line">        students.remove(stu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//会报ConcurrentModificationException异常，Iterator在工作的时候不允许被迭代的对象被改变，但可以使用Iterator本身的remove()来删除对象，会在删除当前对象的同时，维护索引的一致性</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>unsafe类</title>
    <url>/2022/10/10/review/java_guide/basic/unsafe_class/</url>
    <content><![CDATA[<p><code>sun.misc.Unsafe</code></p>
<p>提供执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，效率快，但由于有了操作内存空间的能力，会增加指针问题风险。且这些功能的实现依赖于本地方法，Java代码中只是声明方法头，具体实现规则交给本地代码
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221010172203732.png"
alt="image-20221010172203732" /></p>
<h3 id="为什么要使用本地方法">为什么要使用本地方法</h3>
<ul>
<li>需要用到Java中不具备的依赖于操作系统的特性，跨平台的同时要实现对底层控制</li>
<li>对于其他语言已经完成的现成功能，可以使用Java调用</li>
<li>对时间敏感/性能要求非常高，有必要使用更为底层的语言</li>
</ul>
<p>对于同一本地方法，不同的操作系统可能通过不同的方式来实现的</p>
<h3 id="unsafe创建">Unsafe创建</h3>
<p>sun.misc.Unsafe部分源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unsafe</span> &#123;</span><br><span class="line">  <span class="comment">// 单例对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe theUnsafe;</span><br><span class="line">  ......</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//Sensitive : 敏感的 英[ˈsensətɪv]</span></span><br><span class="line">  <span class="meta">@CallerSensitive</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var0</span> <span class="operator">=</span> Reflection.getCallerClass();</span><br><span class="line">    <span class="comment">// 仅在引导类加载器`BootstrapClassLoader`加载时才合法</span></span><br><span class="line">    <span class="keyword">if</span>(!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会先判断当前类是否由Bootstrap
classloader加载。即只有启动类加载器加载的类才能够调用Unsafe类中的方法</p>
<p>如何使用<code>Unsafe</code>这个类</p>
<ol type="1">
<li><p>利用反射获得Unsafe类中已经实例化完成的单例对象<code>theUnsafe</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title function_">reflectGetUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">      field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">return</span> (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      log.error(e.getMessage(), e);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过Java命令行命令<code>-Xbootclasspath/a</code>把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被引导类加载器加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xbootclasspath/a: $&#123;path&#125;   <span class="comment">// 其中path为调用Unsafe相关方法的类所在jar包路径</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="unsafe功能">Unsafe功能</h3>
<p>内存操作、内存屏障、对象操作、数据操作、CAS操作、线程调度、Class操作、系统信息</p>
<h4 id="内存操作">内存操作</h4>
<p>相关方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分配新的本地空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> bytes)</span>;</span><br><span class="line"><span class="comment">//重新调整内存空间的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> bytes)</span>;</span><br><span class="line"><span class="comment">//将内存设置为指定值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value)</span>;</span><br><span class="line"><span class="comment">//内存拷贝</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">copyMemory</span><span class="params">(Object srcBase, <span class="type">long</span> srcOffset,Object destBase, <span class="type">long</span> destOffset,<span class="type">long</span> bytes)</span>;</span><br><span class="line"><span class="comment">//清除内存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> address)</span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">memoryTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">addr</span> <span class="operator">=</span> unsafe.allocateMemory(size);</span><br><span class="line">    <span class="type">long</span> <span class="variable">addr3</span> <span class="operator">=</span> unsafe.reallocateMemory(addr, size * <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;addr: &quot;</span>+addr);</span><br><span class="line">    System.out.println(<span class="string">&quot;addr3: &quot;</span>+addr3);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//向每个字节，写入1 首先使用allocateMemory方法申请 4 字节长度的内存空间，在循环中调用setMemory方法向每个字节写入内容为byte类型的 1</span></span><br><span class="line">        unsafe.setMemory(<span class="literal">null</span>,addr ,size,(<span class="type">byte</span>)<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            unsafe.copyMemory(<span class="literal">null</span>,addr,<span class="literal">null</span>,addr3+size*i,<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(unsafe.getInt(addr));</span><br><span class="line">        System.out.println(unsafe.getLong(addr3));</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        unsafe.freeMemory(addr);</span><br><span class="line">        unsafe.freeMemory(addr3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">addr: <span class="number">2433733895744</span></span><br><span class="line">addr3: <span class="number">2433733894944</span></span><br><span class="line"><span class="number">16843009</span></span><br><span class="line"><span class="number">72340172838076673</span></span><br></pre></td></tr></table></figure>
<p>对于setMemory的解释 <a
href="https://www.cnblogs.com/throwable/p/9139947.html">来源</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value)</span>; 将给定内存块中的所有字节设置为固定值(通常是<span class="number">0</span>)。内存块的地址由对象引用o和偏移地址共同决定，如果对象引用o为<span class="literal">null</span>，offset就是绝对地址。第三个参数就是内存块的大小，如果使用allocateMemory进行内存开辟的话，这里的值应该和allocateMemory的参数一致。value就是设置的固定值，一般为<span class="number">0</span>(这里可以参考netty的DirectByteBuffer)。一般而言，o为<span class="literal">null</span>，所有有个重载方法是<span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(<span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value)</span>;，等效于setMemory(<span class="literal">null</span>, <span class="type">long</span> offset, <span class="type">long</span> bytes, <span class="type">byte</span> value);。</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<blockquote>
<p>分析一下运行结果，首先使用<code>allocateMemory</code>方法申请 4
字节长度的内存空间，在循环中调用<code>setMemory</code>方法向每个字节写入内容为<code>byte</code>类型的
1，当使用 Unsafe
调用<code>getInt</code>方法时，因为一个<code>int</code>型变量占 4
个字节，会一次性读取 4
个字节，组成一个<code>int</code>的值，对应的十进制结果为 16843009。</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221011114456296.png"
alt="image-20221011114456296" />
<figcaption aria-hidden="true">image-20221011114456296</figcaption>
</figure>
<p>对于reallocateMemory方法：</p>
<blockquote>
<p>在代码中调用<code>reallocateMemory</code>方法重新分配了一块 8
字节长度的内存空间，通过比较<code>addr</code>和<code>addr3</code>可以看到和之前申请的内存地址是不同的。在代码中的第二个
for
循环里，调用<code>copyMemory</code>方法进行了两次内存的拷贝，每次拷贝内存地址<code>addr</code>开始的
4
个字节，分别拷贝到以<code>addr3</code>和<code>addr3+4</code>开始的内存空间上：</p>
<p>拷贝完成后，使用<code>getLong</code>方法一次性读取8个字节，得到long类型的值</p>
<p>这种分配属于堆外内存，无法进行垃圾回收，需要我们把这些内存当作资源去手动调用freeMemory方法进行释放，否则会产生内存泄漏。通常是try-finally进行内存释放</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221011141135430.png"
alt="image-20221011141135430" />
<figcaption aria-hidden="true">image-20221011141135430</figcaption>
</figure>
<ul>
<li><p>为什么使用堆外内存</p>
<ul>
<li>对垃圾回收停顿的改善，堆外内存直接受操作系统管理而不是JVM</li>
<li>提升程序I/O操作的性能。通常I/O通信过程中，存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间的数据拷贝且生命周期较短的暂存数据，建议都存储到堆外内存</li>
</ul></li>
<li><p>典型应用
DirectByteBuffer，Java用于实现堆外内存的重要类，对于堆外内存的创建、使用、销毁等逻辑均由Unsafe提供的堆外内存API来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DirectByteBuffer类源</span></span><br><span class="line">DirectByteBuffer(<span class="type">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">pa</span> <span class="operator">=</span> VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ps</span> <span class="operator">=</span> Bits.pageSize();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.max(<span class="number">1L</span>, (<span class="type">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 分配内存并返回基地址</span></span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 内存初始化</span></span><br><span class="line">    unsafe.setMemory(base, size, (<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跟踪 DirectByteBuffer 对象的垃圾回收，以实现堆外内存释放</span></span><br><span class="line">    cleaner = Cleaner.create(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">Deallocator</span>(base, size, cap));</span><br><span class="line">    att = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="内存屏障">内存屏障</h4>
<ul>
<li><p>介绍</p>
<ul>
<li>编译器和 CPU
会在保证程序输出结果一致的情况下，会对代码进行重排序，从指令优化角度提升性能</li>
<li>后果是，导致 CPU 的高速缓存和内存中数据的不一致</li>
<li>内存屏障（<code>Memory Barrier</code>）就是通过阻止屏障两边的指令重排序从而避免编译器和硬件的不正确优化情况</li>
</ul></li>
<li><p>Unsafe提供了三个内存屏障相关方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">loadFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">storeFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//内存屏障，禁止load、store操作重排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fullFence</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>以loadFence方法为例，会禁止读操作重排序，保证在这个屏障之前的所有读操作都已经完成，并且将缓存数据设为无效，重新从主存中进行加载
在某个线程修改Runnable中的flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangeThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">/**volatile**/</span> <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;subThread change flag to:&quot;</span> + flag);</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在主线程的while循环中，加入内存屏障，测试是否能感知到flag的修改变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">ChangeThread</span> <span class="variable">changeThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangeThread</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(changeThread).start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> changeThread.isFlag();</span><br><span class="line">        unsafe.loadFence(); <span class="comment">//加入读内存屏障</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;detected flag changed&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;main thread end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">subThread change flag to:<span class="literal">false</span></span><br><span class="line">detected flag changed</span><br><span class="line">main thread end</span><br></pre></td></tr></table></figure></li>
<li><p>如果删除上面的loadFence()方法，就会出现下面的情况，主线程无法感知flag发生的变化，会一直在while中循环
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221011163035365.png"
alt="image-20221011163035365" /></p></li>
<li><p>典型应用
Java8新引入的锁---<code>StampedLock</code>，乐观锁，类似于无锁的操作，完全不会阻塞写线程获取写锁，从而缓解读多写少的”饥饿“现象。由于StampedLock提供的乐观读锁不阻塞写线程获取读锁，当线程共享变量从主内存load到线程工作内存时，存在数据不一致的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(<span class="type">long</span> stamp)</span> &#123;</span><br><span class="line">   U.loadFence();</span><br><span class="line">   <span class="keyword">return</span> (stamp &amp; SBITS) == (state &amp; SBITS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="对象操作">对象操作</h4>
<ul>
<li><p>对象属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在对象的指定偏移地址获取一个对象引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">//在对象指定偏移地址写入一个对象引用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>对象实例化 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.b =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对象实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">objTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    A a1=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    System.out.println(a1.getB());</span><br><span class="line">    <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> A.class.newInstance();</span><br><span class="line">    System.out.println(a2.getB());</span><br><span class="line">    A a3= (A) unsafe.allocateInstance(A.class);</span><br><span class="line">    System.out.println(a3.getB());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>打印结果分别为
1、1、0，说明通过<code>allocateInstance</code>方法创建对象过程中，不会调用类的构造方法。使用这种方式创建对象时，只用到了<code>Class</code>对象，所以说如果想要跳过对象的初始化阶段或者跳过构造器的安全检查，就可以使用这种方法。在上面的例子中，如果将
A
类的构造函数改为<code>private</code>类型，将无法通过构造函数和反射创建对象，但<code>allocateInstance</code>方法仍然有效。</p>
</blockquote></li>
<li><p>典型应用</p>
<ul>
<li>常规对象实例化方式，从本质上来说，都是通过new机制来实现对象的创建</li>
<li>非常规的实例化方式：Unsafe中提供allocateInstance方法，仅通过Class对象就可以创建此类的实例对象</li>
</ul></li>
</ul>
<h4 id="数组操作">数组操作</h4>
<ul>
<li><p>介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面两个方法配置使用，即可定位数组中每个元素在内存中的位置</span></span><br><span class="line"><span class="comment">//返回数组中第一个元素的偏移地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayBaseOffset</span><span class="params">(Class&lt;?&gt; arrayClass)</span>;</span><br><span class="line"><span class="comment">//返回数组中一个元素占用的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">arrayIndexScale</span><span class="params">(Class&lt;?&gt; arrayClass)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>典型应用</p></li>
</ul>
<h4 id="cas操作">CAS操作</h4>
<ul>
<li><p>相关操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	*  CAS</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> o         包含要修改field的对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> offset    对象中某field的偏移量</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> expected  期望值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> update    更新值</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>          true | false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object o, <span class="type">long</span> offset,  Object expected, Object update)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected,<span class="type">int</span> update)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">long</span> expected, <span class="type">long</span> update)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>CAS，AS 即比较并替换（Compare And
Swap)，是实现并发算法时常用到的一种技术。CAS
操作包含三个操作数——内存位置、预期原值及新值。执行 CAS
操作的时候，将内存位置的值与预期原值比较，如果相匹配，那么处理器会自动将该位置值更新为新值，否则，处理器不做任何操作。我们都知道，CAS
是一条 CPU 的原子指令（cmpxchg
指令），不会造成所谓的数据不一致问题，<code>Unsafe</code> 提供的 CAS
方法（如 <code>compareAndSwapXXX</code>）底层实现即为 CPU 指令
<code>cmpxchg</code></p></li>
<li><p>输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> a;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      CasTest casTest=<span class="keyword">new</span> <span class="title class_">CasTest</span>();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">              casTest.increment(i);</span><br><span class="line">              System.out.print(casTest.a+<span class="string">&quot; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span> ; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">              casTest.increment(i);</span><br><span class="line">              System.out.print(casTest.a+<span class="string">&quot; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="type">long</span> <span class="variable">fieldOffset</span> <span class="operator">=</span> unsafe.objectFieldOffset(CasTest.class.getDeclaredField(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">              <span class="keyword">if</span> (unsafe.compareAndSwapInt(<span class="built_in">this</span>,fieldOffset,x-<span class="number">1</span>,x))</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//结果</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>使用两个线程去修改int型属性a的值，并且只有在a的值等于传入的参数x减一时，才会将a的值变为x，也就是实现对a的加一的操作
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221011184828760.png"
alt="image-20221011184828760" /></p></li>
</ul>
<h4 id="线程调度多线程问题">线程调度(多线程问题)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Unsafe类提供的相关方法</span></span><br><span class="line"><span class="comment">//取消阻塞线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object thread)</span>;</span><br><span class="line"><span class="comment">//阻塞线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> isAbsolute, <span class="type">long</span> time)</span>;</span><br><span class="line"><span class="comment">//获得对象锁（可重入锁）</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorEnter</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//释放对象锁</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorExit</span><span class="params">(Object o)</span>;</span><br><span class="line"><span class="comment">//尝试获取对象锁</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">tryMonitorEnter</span><span class="params">(Object o)</span>;</span><br></pre></td></tr></table></figure>
<p>方法 <code>park</code>、<code>unpark</code>
即可实现线程的挂起与恢复，将一个线程进行挂起是通过 <code>park</code>
方法实现的，调用 <code>park</code>
方法后，线程将一直阻塞直到超时或者中断等条件出现；<code>unpark</code>
可以终止一个挂起的线程，使其恢复正常。</p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 此外，<code>Unsafe</code>
源码中<code>monitor</code>相关的三个方法已经被标记为<code>deprecated</code>，不建议被使用：
======= Unsafe源码中monitor相关的方法被标记为deprecated
&gt;&gt;&gt;&gt;&gt;&gt;&gt;
01db5084445cfa1dd668fb907ec8e453c9136e03</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得对象锁</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorEnter</span><span class="params">(Object var1)</span>;</span><br><span class="line"><span class="comment">//释放对象锁</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">monitorExit</span><span class="params">(Object var1)</span>;</span><br><span class="line"><span class="comment">//尝试获得对象锁</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">tryMonitorEnter</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></figure>
<p><code>monitorEnter</code>方法用于获得对象锁，<code>monitorExit</code>用于释放对象锁，如果对一个没有被<code>monitorEnter</code>加锁的对象执行此方法，会抛出<code>IllegalMonitorStateException</code>异常。<code>tryMonitorEnter</code>方法尝试获取对象锁，如果成功则返回<code>true</code>，反之返回<code>false</code>。
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h4 id="class操作">Class操作</h4>
<p>=======</p>
<p>代码应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;subThread try to unpark mainThread&quot;</span>);</span><br><span class="line">            unsafe.unpark(mainThread);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;park main mainThread&quot;</span>);</span><br><span class="line">    unsafe.park(<span class="literal">false</span>,<span class="number">0L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;unpark mainThread success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">park main mainThread</span><br><span class="line">subThread <span class="keyword">try</span> to unpark mainThread</span><br><span class="line">unpark mainThread success</span><br></pre></td></tr></table></figure>
<p>流程图如下：<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20221012090743240.png"
alt="image-20221012090743240" /></p>
<h4 id="class操作-1">Class操作</h4>
<p>Unsafe对class的相关操作主要包括类加载和静态变量的操作方法</p>
<ul>
<li><p>静态属性读取相关的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取静态属性的偏移量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">//获取静态属性的对象指针---另一说,获取静态变量所属的类在方法区的首地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">//判断类是否需要实例化（用于获取类的静态属性前进行检测）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;Hydra&quot;</span>;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">staticTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    System.out.println(unsafe.shouldBeInitialized(User.class));</span><br><span class="line">    <span class="type">Field</span> <span class="variable">sexField</span> <span class="operator">=</span> User.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">fieldOffset</span> <span class="operator">=</span> unsafe.staticFieldOffset(sexField);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">fieldBase</span> <span class="operator">=</span> unsafe.staticFieldBase(sexField);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> unsafe.getObject(fieldBase, fieldOffset);</span><br><span class="line">    System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 运行结果:falseHydra</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Unsafe</code>
的对象操作中，我们学习了通过<code>objectFieldOffset</code>方法获取对象属性偏移量并基于它对变量的值进行存取，但是它不适用于类中的静态属性，这时候就需要使用<code>staticFieldOffset</code>方法。在上面的代码中，只有在获取<code>Field</code>对象的过程中依赖到了<code>Class</code>，而获取静态变量的属性时不再依赖于<code>Class</code>。</p>
<p>在上面的代码中首先创建一个<code>User</code>对象，这是因为如果一个类没有被实例化，那么它的静态属性也不会被初始化，最后获取的字段属性将是<code>null</code>。所以在获取静态属性前，需要调用<code>shouldBeInitialized</code>方法，判断在获取前是否需要初始化这个类。如果删除创建
User 对象的语句，运行结果会变为：<code>truenull</code></p></li>
<li><p><code>defineClass</code>方法允许程序在运行时动态创建一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len, ClassLoader loader,ProtectionDomain protectionDomain);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>利用class类字节码文件，动态创建一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">defineTest</span><span class="params">()</span> &#123;</span><br><span class="line">    String fileName=<span class="string">&quot;F:\\workspace\\unsafe-test\\target\\classes\\com\\cn\\model\\User.class&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">        <span class="type">byte</span>[] content=<span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)file.length()];</span><br><span class="line">        fis.read(content);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> unsafe.defineClass(<span class="literal">null</span>, content, <span class="number">0</span>, content.length, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">age</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getAge&quot;</span>).invoke(o, <span class="literal">null</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="系统信息">系统信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取系统相关信息 </span></span><br><span class="line"><span class="comment">//返回系统指针的大小。返回值为4（32位系统）或 8（64位系统）。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">addressSize</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//内存页的大小，此值为2的幂次方。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">pageSize</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>复习-javaGuide</tag>
        <tag>复习-javaGuide-基础</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.1.1-1.1.5</title>
    <url>/2022/02/21/study/algorithm/algorithhms_4th/1.1.1-1.1.5/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="java程序的基本结构">Java程序的基本结构</h3>
<ul>
<li>本书学习算法的方法：用Java编程语言编写的程序来实现算法(相比用自然语言有很多优势)</li>
<li>劣势：编程语言特定，使算法的思想和实现细节变得困难(所以本书尽量使用大部分语言都必须的语法)</li>
<li>把描述和实现算法所用到的语言特性、软件库和操作系统特定总称为基础编程模型</li>
<li>Java程序的基本结构
<ul>
<li><p>一段Java程序或者是一个静态方法库，或者定义了一个数据类型，需要用到的语法</p>
<ul>
<li>原始数据类型(在计算机中精确地定义整数浮点数布尔值等)</li>
<li>语句(创建变量并赋值，控制运行流程或引发副作用来进行计算，包括声明、赋值、条件、循环、调用和返回)</li>
<li>数组(多个同种数据类型值的集合)</li>
<li>静态方法(封装并重用代码)</li>
<li>字符串(一连串的字符，内置一些对他们的操作)</li>
<li>标准输入/输出(是程序与外界联系的桥梁)</li>
<li>数据抽象(数据抽象封装和重用代码，可以定义非原始数据类型，进而面向对象编程)</li>
</ul></li>
<li><p>把这种输入命令执行程序的环境称为 虚拟终端</p></li>
<li><p>要执行一条Java程序，需要先用javac命令编译，然后用java命令运行，比如下面的文件，需要使用命令</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac BinarySearch.java</span><br><span class="line">java BinarySearch </span><br></pre></td></tr></table></figure></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434867646.png" /><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434894479.png" /></p></li>
</ul></li>
</ul>
<h3 id="原始数据类型与表达式">原始数据类型与表达式</h3>
<ul>
<li>数据类型就是一组数据和其所能进行的操作的集合</li>
<li>Java中最基础的数据类型(整型int，双精度实数类型double,布尔值boolean,字符型char)</li>
<li>Java程序控制用标识符命名的变量</li>
<li>对于原始类型，用标识符引用变量，+-*/指定操作，用字面量来表示值(如1或3.14),用表达式表示对值的操作(
表达式:(x+2.334)/2 )</li>
<li>只要能够指定值域和在此值域上的操作，就能定义一个数据类型(很像数学上函数的定义)</li>
<li>+-*/是被重载过的</li>
<li>运算产生的数据的数据类型和参与运算的数据的数据类型是相同的(5/3=1,5.0/3.0=1.6667等)</li>
<li>如下图(图歪了亿点点..) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645435436655.png" /><br />
</li>
<li>表达式</li>
<li>表达式具有优先级，Java使用的是中缀表达式(一个字面量紧接运算符，然后是另一个字面量)。逻辑运算中优先级
! &amp;&amp; || ,运算符中 * / % 高于+ -
。括号能改变这些规则。代码中尽量使用括号消除对优先级的依赖</li>
<li>类型转换
<ul>
<li>数值会自动提升为高级数据类型，如1+2.5 1会被先转为double
1.0，值也为double的3.5</li>
<li>强转(把类型名放在括号里讲其转换为括号中的类型)
讲高级数据类型转为低级可能会导致精度的缺失，尽量少使用</li>
</ul></li>
<li>比较
<ul>
<li>==、!=、&lt;、&lt;=、&gt;、&gt;=，这些运算符称为
混合类型运算符，因为结果是布尔型而不是参与比较的数据类型</li>
<li>结果是布尔型的表达式称为布尔表达式</li>
</ul></li>
<li>其他原始类型(int为32位，double为64位)
<ul>
<li>long,64位整数</li>
<li>short,16位整数</li>
<li>char,16位字符</li>
<li>byte,8位整数</li>
<li>32位单精度实数,float ### 语句</li>
</ul></li>
<li>语句用来创建和操作变量、对变量赋值并控制操作的执行流程</li>
<li>包括声明语句、赋值语句、条件语句、循环语句、调用和返回语句</li>
<li>声明：让一个变量名和一个类型在编译时关联起来</li>
<li>赋值：将(由一个表达式定义的)某个数据类型额值和一个变量关联起来</li>
<li>条件语句： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure></li>
<li>循环语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure> 其中循环语句中的代码段称为循环体</li>
<li>break与continue语句
<ul>
<li>break，立即退出循环</li>
<li>continue，立即开始下一轮循环 ### 简便记法</li>
<li>声明并初始化</li>
<li>隐式赋值
<ul>
<li>++i;--i</li>
<li>i/=2;i+=1</li>
</ul></li>
<li>单语句代码段(省略if/while代码段的花括号)</li>
<li>for语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(&lt;initialize&gt;;&lt;boolean expression&gt;;&lt;increment&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;block statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这段代码等价于后面的 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;initialize&gt;;</span><br><span class="line">while(&lt;boolean expression&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  &lt;block statments&gt;</span><br><span class="line">  &lt;increment&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>java语句总结<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493111378.png" />
### 数组</li>
</ul></li>
<li>数组能够存储相同类型的多个数据</li>
<li>N个数组的数组编号为0至N-1；这种数组在Java中称为一维数组</li>
<li>创建并初始化数组
<ul>
<li>需要三个步骤，声明数组名字和类型，创建数组，初始化数组元素</li>
<li>声明并初始化一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493370383.png" /></li>
<li>简化写法<br />
double[] a = new double[N];</li>
<li>使用数组(访问的索引小于0或者大于N-1时会抛出ArrayIndexOutOfBoundsException)</li>
<li>典型的数组处理代码<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493720043.png" /></li>
</ul></li>
<li>起别名
<ul>
<li>下面的情况并没有将数组新复制一份，而是a，b指向了同一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493897849.png" /></li>
</ul></li>
<li>二维数组
<ul>
<li>Java中二维数组就是一堆数组的数组</li>
<li>二维数组可以是参差不齐，比如a[0]=new double[5],a[1]=new
double[6]之类</li>
<li>二维数组的创建及初始化 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double[][] a;</span><br><span class="line">a = new double[M][N];</span><br><span class="line">for (int i = 0; i &lt; M; i++)</span><br><span class="line">    for (int j = 0; j &lt; N; j++)</span><br><span class="line">        a[i][j] = 0.0;</span><br></pre></td></tr></table></figure></li>
<li>精简后的代码 double[][] a=new double[M][N];</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.1.6-1.1.11</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.1.6-1.1.11/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="静态方法">静态方法</h3>
<ul>
<li>本书中所有的Java程序要么是数据类型的定义，要么是一个静态方法库</li>
<li>当讨论静态方法和实体方法共有的属性时，我们会使用不加定语的方法一词</li>
<li>方法需要参数(某种数据类型的值)并根据参数计算出某种数据类型的返回值(例如数学函数的结果)或者产生某种副作用(例如打印一个值)</li>
<li>静态方法由签名(public static
以及函数的返回值,方法名及一串参数)和函数体组成</li>
<li>调用静态方法(写出方法名并在后面的括号中列出数值)</li>
<li>方法的性质
<ul>
<li>方法的参数按值传递，方法中使用的参数变量能够引用调用者的参数并改变其内容(只是不能改变<strong><em>原数组变量</em></strong>本身)</li>
<li>方法名可以被重载</li>
<li>方法只能返回一个值，但能包含多个返回语句</li>
<li>方法可以产生副作用</li>
</ul></li>
<li>递归：方法可以调用自己
可以使用数学归纳法证明所解释算法的正确性,编写递归重要的三点
<ul>
<li>递归总有一个最简单的情况(方法第一条总包含return的条件语句)</li>
<li>递归调用总是去尝试解决一个规模更小的子问题</li>
<li>递归调用的父问题和尝试解决的子问题之间不应该由交集
如下图中，两个子问题各自操作的数组部分是不同的<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645498373138.png" /></li>
</ul></li>
<li>基础编程模型
<ul>
<li>静态方法库是定义在一个Java类中的一组静态方法</li>
<li>Java开发的基本模式是编写一个静态方法库(包含一个main()方法)类完成一个任务<br />
</li>
<li>在本书中，当我们提到用于执行一项人物的Java程序时，我们指的就是用这种模式开发的代码(还包括对数据类型的定义)</li>
</ul></li>
<li>模块化编程
<ul>
<li>通过静态方法库实现了模块化编程<br />
</li>
<li>一个库中的静态方法也能够调用另一个库中定义的静态方法</li>
</ul></li>
<li>单元测试
<ul>
<li>Java编程最佳实践之一就是每个静态方法库中都包含一个main()函数来测试库中所有的方法</li>
<li>本书中使用main()来说明模块的功能并将测试用例留作练习</li>
</ul></li>
<li>外部库
<ul>
<li>系统标准库 java.lang.*:包括Math库;String和StringBuilder库</li>
<li>导入的系统库 java.util.Arrays</li>
<li>本书中其他库</li>
<li>本书使用了作者开发的标准库Std* ### API</li>
</ul></li>
<li>模块化编程重要组成部分，记录库方法的用法并供其他人参考的文档</li>
<li>会统一使用应用程序编程接口API的方法列出每个库方法、签名及简述</li>
<li>用例(调用另一个库中的方法的程序)，实现(实现了某个API方法的Java代码)</li>
<li>作者自己的两个库，一个扩展Math.random(),一个支持各种统计
<ul>
<li>随机静态方法库(StdRandom)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499238258.png" /></li>
<li>数据分析方法库(StdStats)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499266972.png" /></li>
<li>StdRandom库中的静态方法的实现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499387538.png" /></li>
</ul></li>
<li>编写自己的库
<ul>
<li>编写用例，实现中将计算过程分解</li>
<li>明确静态方法库和与之对应的API</li>
<li>实现API和一个能够对方法进行独立测试的main()函数</li>
<li>API的目的是将调用和实现分离 ### 字符串</li>
</ul></li>
<li>字符串拼接，使用 +</li>
<li>类型转换(将用户从键盘输入的内容转换成相应数据类型的值以及将各种数据类型的值转换成能够在屏幕上显示的值)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499613030.png" /></li>
<li>如果数字跟在+后面，那么会将数据类型的值自动转换为字符串</li>
<li>命令行参数
<ul>
<li>Java中字符串的存在，使程序能够接收到从命令行传递来的信息</li>
<li>当输入命令java和一个库名及一系列字符串后，Java系统会调用库的main()方法并将后面的一系列字符串变成一个数组作为参数传递给它
### 输入输出</li>
</ul></li>
<li>Java程序可以从<strong><em>命令行参数</em></strong>或者一个名为<strong><em>标准输入流</em></strong>的抽象字符流中获得输入，并将输出写入另一个名为标准输出流的字符流中</li>
<li>默认情况下，命令行参数、标准输入和标准输出是和应用程序绑定的，而应用程序是由能够接受命令输入的操作系统或是开发环境所支持</li>
<li>使用终端来指代这个应用程序提供的供输入和显示的窗口,如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500007895.png" /></li>
<li>命令和参数
<ul>
<li>终端窗口包含一个提示符，通过它我们能够向操作系统输入命令和参数</li>
<li>操作系统常用命令<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500167245.png" /></li>
</ul></li>
<li>标准输出
<ul>
<li>StdOut库的作用是支持标准输出</li>
<li>标准输出库的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500444820.png" /></li>
<li>格式化输出
字符%并紧跟一个字符表示的转换代码(包括d,f和s)。%和转换代码之间可以插入证书表示值的宽度，且转换后会在字符串左边添加空格以达到需要的宽度。负数表示空格从右边加</li>
<li>宽度后用小数点及数值可以指定精度(或String字符串所截取的长度)</li>
<li>格式中转换代码和对应参数的数据类型必须匹配 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500484321.png" /></li>
</ul></li>
<li>标准输入
<ul>
<li>StdIn库从标准输入流中获取数据，然后将标准输出定向到终端窗口</li>
<li>标准输入流最重要的特点，这些值会在程序读取后消失</li>
<li>例子<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500902261.png" /></li>
<li>标准输入库中的静态方法API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500946918.png" /></li>
</ul></li>
<li>重定向和管道
<ul>
<li>将标准输出重定向到一个文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 &gt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>从文件而不是终端应用程序中读取数据 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java Average &lt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>将一个程序的输出重定向为另一个程序的输入，叫做管道<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 | java Average</span><br></pre></td></tr></table></figure>
<ul>
<li>突破了我们能够处理的输入输出流的长度限制<br />
</li>
<li>即使计算机没有足够的空间来存储十亿个数，</li>
<li>我们仍然可以将例子中的1000 换成1 000 000 000
（当然我们还是需要一些时间来处理它们）。当RandomSeq 调用StdOut.println()
时，它就向输出流的末尾添加了一个字符串；当Average 调用StdIn.readInt()
时，它就从输入流的开头删除了一个字符串。这些动作发生的实际顺序取决于操作系统</li>
</ul></li>
<li>命令行的重定向及管道<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645501458419.png" /></li>
</ul></li>
<li>基于文件的输入输出</li>
<li>In和Out库提供了一些静态方法,来实现向文件中写入或从文件中读取一个原始数据类型的数组的抽象</li>
<li>用于读取和写入数组的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508058593.png" /></li>
<li>标准绘图库(基本方法和控制方法)--这里跳过 ### 二分查找</li>
<li>如图，在终端接收需要判断的数字，如果不存在于白名单(文件中的int数组)中则输出</li>
<li>开发用例以及使用测试文件(数组长度很大的白名单)</li>
<li>模拟实际情况来展示当前算法的必要性，比如
<ul>
<li>将客户的账号保存在一个文件中，我们称它为白名单；</li>
<li>从标准输入中得到每笔交易的账号；</li>
<li>使用这个测试用例在标准输出中打印所有与任何客户无关的账号，公司很可能拒绝此类交易。
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508356801.png" /></li>
</ul></li>
<li>使用顺序查找<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static int rank(int key, int[] a)</span><br><span class="line">&#123;</span><br><span class="line">  for (int i = 0; i &lt; a.length; i++)</span><br><span class="line">    if (a[i] == key) return i;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当处理大量输入的时候，顺序查找的效率极其低 ### 展望</li>
<li>下一节，鼓励使用数据抽象，或称面向对象编程，而不是操作预定义的数据类型的静态方法</li>
<li>使用数据抽象的好处
<ul>
<li>复用性</li>
<li>链式数据结构比数组更灵活</li>
<li>可以准确地定义锁面对的算法问题 ### 1.1 End</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.2.1-1.2.5</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.2.1-1.2.5/</url>
    <content><![CDATA[<h2 id="数据抽象">数据抽象</h2>
<p><strong><em>数据类型</em></strong>指的是一组值和一组对这些值的操作的集合<br />
* 定义和使用数据类型的过程，也被称为数据抽象 *
Java编程的基础是使用class关键字构造被称为<strong><em>引用类型</em></strong>的数据类型，也称面向对象编程
* 定义自己的数据类型来抽象任意对象 *
抽象数据类型（ADT）是一种能够对使用者隐藏数据表示的数据类型 *
抽象数据类型将数据和函数的实现相关联，将数据的表示方式隐藏起来 *
抽象数据类型使用时，关注API描述的操作上而不会去关心数据的表示；实现抽象数据类型时，关注数据本身并将实现对数据的各种操作
* 研究同一个问题的不同算法的主要原因是他们的性能不同</p>
<h3 id="使用抽象数据类型">使用抽象数据类型</h3>
<ul>
<li>使用一种数据类型并不一定非得知道它是如何实现的</li>
<li>使用Counter(计数器)的简单数据类型的程序，操作有
<ul>
<li>创建对象并初始化为0</li>
<li>当前值加1</li>
<li>获取当前值</li>
</ul></li>
<li>场景，用于电子计票</li>
<li>抽象数据类型的API(应用程序编程接口)
<ul>
<li>API用来说明抽象数据类型的行为</li>
<li>将列出所有构造函数和实例方法(即操作)</li>
</ul></li>
<li>计算器的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645622786940.png" /></li>
<li>继承的方法
<ul>
<li>所有数据类型都会继承toString()方法</li>
<li>Java会在用+运算符将任意数据类型的值和String值连接时调用toString()</li>
<li>默认实现：返回该数据类型值的内存地址</li>
</ul></li>
<li>用例代码
<ul>
<li>可以在用例代码中，声明变量、创建对象来保存数据类型的值并允许通过实例方法来操作它们</li>
</ul></li>
<li>对象
<ul>
<li>对象是能够承载数据类型的值的实体</li>
<li>对象三大特性：状态、标识和行为
<ul>
<li>状态：数据类型中的值</li>
<li>标识：在内存中的地址</li>
<li>行为：数据类型的操作</li>
</ul></li>
<li>Java使用"引用类型"和原始数据类型区别</li>
</ul></li>
<li>创建对象
<ul>
<li>每种数据类型中的值都存储于一个对象中</li>
<li>构造函数总是返回他的数据类型的对象的引用</li>
<li>使用new()，会为新的对象分配内存空间，调用构造函数初始化对象中的值，返回该对象的一个引用</li>
</ul></li>
<li>抽象数据类型向用例隐藏了值的表示细节</li>
<li>实例方法：参数按值传递</li>
<li>方法每次触发都和一个对象相关</li>
<li>静态方法的主要作用是实现函数；非静态(实例)方法的主要作用是实现数据类型的操作</li>
<li>使用对象<br />
开发某种数据类型的用例
<ul>
<li>声明该类型的变量，以引用对象</li>
<li>使用new触发能够创建该类型的对象的一个构造函数</li>
<li>使用变量名调用实例方法</li>
</ul></li>
<li>赋值语句(对象赋值)
<ul>
<li>别名：两个变量同时指向同一个对象</li>
</ul></li>
<li>将对象作为参数
<ul>
<li>Java将参数值的一个副本从调用端传递给了方法，这种方式称为按值传递</li>
<li>当使用引用类型作为参数时我们创建的都是别名，这种约定会传递引用的值(复制引用)，也就是传递对象的引用</li>
<li>虽然无法改变原始的引用(将原变量指向另一个Counter对象)，但能够改变该对象的值</li>
</ul></li>
<li>将对象作为返回值
<ul>
<li>由于Java只由一个返回值，有了对象实际上就能返回多个值</li>
</ul></li>
<li>数组也是对象
<ul>
<li>将数组传递给一个方法或是将一个数组变量放在赋值语句的右侧时，我们都是在创建数组引用的一个副本，而非数组的副本</li>
</ul></li>
<li>对象的数组<br />
创建一个对象的数组
<ul>
<li>使用方括号语法调用数组的构造函数创建数组</li>
<li>对于每个数组元素调用它的构造函数创建相应的对象<br />
如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645625875287.png" /></li>
</ul></li>
<li>运用数据抽象的思想编写代码(定义和使用数据类型，将数据类型的值封装在对象中)的方式称为面向对象编程</li>
<li>总结
<ul>
<li>数据类型指的是一组值和一组对值的操作的集合</li>
<li>我们会在数据类型的Java类中编写用理</li>
<li>对象是能够存储任意该数据类型的值的实体</li>
<li>对象有三个关键性质：状态、标识和行为</li>
</ul></li>
</ul>
<h3 id="抽象数据类型举例">抽象数据类型举例</h3>
<ul>
<li>本书中将会用到或开发的所有数据类型
<ul>
<li>java.lang.*</li>
<li>Java标准库中的抽象数据类型，需要import，比如java.io、java.net等</li>
<li>I/O处理嘞抽象数据类型,StdIn和StdOut</li>
<li>面向数据类抽象数据类型，计算机和和信息处理</li>
<li>集合类抽象数据类型，主要是为了简化对同一类型的一组数据的操作，包括Bag、Stack和Queue，PQ(优先队列)、ST(符号表)、SET(集合)</li>
<li>面向操作的抽象数据类型(用来分析各种算法)</li>
<li>图算法相关的抽象数据类型，用来封装各种图的表示的面向数据的抽象数据类型，和一些提供图的处理算法的面向操作的抽象数据类型</li>
</ul></li>
<li>几何对象(画图(图形)的)[跳过]</li>
<li>信息处理
<ul>
<li>抽象数据类型是组织信息的一种自然方式</li>
<li>定义和真实世界中的物体相对应的对象</li>
</ul></li>
<li>字符串
<ul>
<li>java的String</li>
<li>一个String值是一串可以由索引访问的char值</li>
<li>有了String类型可以写出清晰干净的用例代码而无需关心字符串的表示方式</li>
</ul></li>
</ul>
<h3 id="抽象数据类型的实现">抽象数据类型的实现</h3>
<ul>
<li>使用Java的类(class)实现抽象数据类型并将所有代码放入一个和类名相同并带有.java扩展名的文件</li>
<li>如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917949340.png" /></li>
<li>实例变量<br />
用来定义数据类型的值(每个对象的状态)<br />
</li>
<li>构造函数
<ul>
<li>每个Java类都至少有一个构造函数以创建一个对象的标识</li>
<li>每个构造函数将创建一个对象并向调用者返回一个该对象的引用<br />
</li>
</ul></li>
<li>实例方法
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917973220.png" /></li>
</ul></li>
<li>作用域
<ul>
<li>参数变量、局部变量、实例变量</li>
<li>范围(如图)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917991340.png" /></li>
</ul></li>
<li>API、用例与实现
<ul>
<li>我们要学习的每个抽象数据类型的实现，都会是一个含有若干私有实例变量、构造函数、实例方法和一个测试用例的Java类</li>
<li>用例和实现分离(一般将用例独立成含有静态方法main()的类)</li>
<li>做法如下
<ul>
<li>定义一份API，APi的作用是将使用和实现分离，以实现模块化编程</li>
<li>用一个Java类<strong>实现</strong>API的定义</li>
<li>实现多个测试用例来验证前两步做出的设计决定</li>
</ul></li>
<li>例子如下
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917905216.png" /></li>
<li>典型用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918040166.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918079248.png" /></li>
<li>使用方法(执行程序)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918109793.png" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="更多抽象数据类型的实现">更多抽象数据类型的实现</h3>
<ul>
<li>日期
<ul>
<li>两种实现方式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647919855792.png" /></li>
<li>本书反复出现的主题，即理解各种实现对空间和时间的需求<br />
</li>
</ul></li>
<li>维护多个实现
<ul>
<li>比较同一份API的两种实现在同一个用例中的性能表现，需要下面非正式的命名约定
<ul>
<li>使用前缀的描述性修饰符，比如BasicDate和SmallDate,以及是否合法的SmartDate</li>
<li>适合大多数用力的需求的实现，比如Date</li>
</ul></li>
</ul></li>
<li>累加器</li>
</ul>
<h3 id="数据类型的设计">数据类型的设计</h3>
<ul>
<li>抽象数据类型是一种向用例隐藏内部表示的数据类型
<ul>
<li>封装(数据封装)<br />
</li>
<li>设计APi<br />
</li>
</ul></li>
<li>算法与抽象数据类型
<ul>
<li>能够准确地说明一个算法的目的及其他程序应该如何使用该算法</li>
<li>每个Java程序都是一组静态方法和(或)一种数据类型的实现的集合</li>
</ul></li>
<li>本书中关注的是抽象数据类型的实现中的操作和向用例隐藏其中的数据表示</li>
<li>例子，将二分法封装
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926825727.png" /></li>
<li>典型的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926860564.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926913576.png" /></li>
</ul></li>
<li>接口继承
<ul>
<li>Java语言为定义对象之间的关系提供了支持，称为接口</li>
<li>接口继承使得我们的程序能够通过调用接口中的方法操作实现该接口的任意类型的对象<br />
</li>
</ul></li>
<li>本书中使用到的接口<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927204860.png" /></li>
<li>继承
<ul>
<li>由Object类继承得到的方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927291658.png" /></li>
<li>继承toString()并自定义</li>
<li>封装类型(内置的引用类型，包括Boolean、Byte、Character、Double、Float、Integer、Long和Short)</li>
</ul></li>
<li>等价性
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927424380.png" /></li>
<li>例子，在Date中重写equals<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927476357.png" /></li>
</ul></li>
<li>内存管理<br />
Java具有自动内存管理，通过记录孤儿对象并将它们的内存释放到内存池中</li>
<li>不可变性<br />
使用final保证数据不可变<br />
使用final修饰的引用类型，不能再引用(指向)其他对象，但对象本身的值可改变<br />
</li>
<li>契约式设计
<ul>
<li>Java语言能够在程序运行时检测程序状态</li>
<li>异常(Exception)+断言(Assertion)</li>
</ul></li>
<li>异常与错误<br />
允许抛出异常或抛出错误<br />
</li>
<li>断言<br />
程序不应该依赖断言</li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.3.1.1-1.3.2.5</title>
    <url>/2022/03/22/study/algorithm/algorithhms_4th/1.3.1.1-1.3.2.5/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<ul>
<li>数据类型的值就是一组对象的集合，所有操作都是关于添加、删除或是访问集合中的对象<br />
</li>
<li>本章将学习三种数据类型：背包Bag、队列Queue、栈Stack
<ul>
<li>对集合中的对象的表示方式直接影响各种操作的效率<br />
</li>
<li>介绍泛型和迭代<br />
</li>
<li>介绍并说明链式数据结构的重要性(链表)</li>
</ul></li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>泛型可迭代的基础集合数据类型的API
<ul>
<li>背包<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406152057569.png"
alt="image-20220406152057569" /></li>
<li>队列(先进先出FIFO)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153613674.png"
alt="image-20220406153613674" /></li>
<li>下压(后进先出,LIFO)栈 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153640138.png"
alt="image-20220406153640138" /></li>
</ul></li>
<li>泛型
<ul>
<li>泛型，参数化类型<br />
</li>
<li>在每份API 中，类名后的<Item> 记号将Item
定义为一个类型参数，它是一个象征性的占位符，表示的是用例将会使用的某种具体数据类型<br />
</li>
</ul></li>
<li>自动装箱
<ul>
<li>用来处理原始类型<br />
</li>
<li>Boolean、Byte、Character、Double、Float、Integer、Long 和Short
分别对应着boolean、byte、char、double、float、int、long 和short<br />
</li>
<li>自动将一个原始数据类型转换为一个封装类型称为自动装箱，自动将一个封装类型转换为一个原始数据类型被称为自动拆箱<br />
</li>
</ul></li>
<li>可迭代的集合类型
<ul>
<li>迭代访问集合中的所有元素<br />
</li>
</ul></li>
<li>背包是一种不支持从中删除元素的集合数据类型--帮助用例收集元素并迭代遍历所有收集到的元素（<strong>无序遍历</strong>）
<ul>
<li>典型用例，计算标准差<br />
<img src="./1.3.1.1-1.3.2.5/1648014765406.png" /></li>
</ul></li>
<li>先进先出队列
<ul>
<li>是一种基于先进先出(FIFO)策略的集合类型<br />
</li>
<li>使用队列的主要原因：集合保存元素的同时保存它们的相对顺序<br />
</li>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153751756.png"
alt="image-20220406153751756" /></li>
<li>Queue用例(先进先出)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153829692.png"
alt="image-20220406153829692" /></li>
</ul></li>
<li>下压栈
<ul>
<li>简称栈，是一种基于后进先出LIFO策略的集合类型<br />
</li>
<li>比如，收邮件等，如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154449201.png"
alt="image-20220406154449201" /></li>
<li>Stack的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154510301.png"
alt="image-20220406154510301" /></li>
</ul></li>
<li>用栈解决算数表达式的问题<br />
（双栈算数表达式求值算法）<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155021820.png"
alt="image-20220406155021820" /></li>
</ul>
<h3 id="集合类数据类型的实现">集合类数据类型的实现</h3>
<ul>
<li><p>定容栈，表示容量固定的字符串栈的抽象数据类型</p>
<ul>
<li><p>只能处理String值，支持push和pop</p></li>
<li><p>抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155522256.png"
alt="image-20220406155522256" /></p></li>
<li><p>测试用例</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155637243.png"
alt="image-20220406155637243" />
<figcaption aria-hidden="true">image-20220406155637243</figcaption>
</figure></li>
<li><p>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155712507.png"
alt="image-20220406155712507" /></p></li>
<li><p>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155728513.png"
alt="image-20220406155728513" /></p></li>
</ul></li>
<li><p>泛型</p>
<ul>
<li><code>public class FixedCapacityStack&lt;Item&gt;</code></li>
<li>由于不允许直接创建泛型数组，所以 <del>a =new Item[cap]</del>
不允许，应该改为<br />
a=(Item[])new Object[cap];<br />
</li>
<li>泛型定容栈的抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160905236.png"
alt="image-20220406160905236" /></li>
<li>测试用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160932941.png"
alt="image-20220406160932941" /></li>
<li>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160957117.png"
alt="image-20220406160957117" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161022669.png"
alt="image-20220406161022669" /></li>
</ul></li>
<li><p>调整数组大小</p>
<ul>
<li>N为当前元素的数量<br />
使用resize创建新的数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161247788.png"
alt="image-20220406161247788" /></li>
<li>当元素满了的时候进行扩容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161332720.png"
alt="image-20220406161332720" /></li>
<li>当元素过少(1/4)的时候，进行减半<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161408973.png"
alt="image-20220406161408973" /></li>
</ul></li>
<li><p>对象游离</p>
<ul>
<li><p>Java的垃圾回收策略是回收所有无法被访问的对象的内存</p></li>
<li><p>示例中，被弹出的元素不再需要，但由于数组中的引用仍然让它可以继续存在（垃圾回收器无法回收），这种情况（保存了一个不需要的对象的引用）称为游离，避免游离的做法就是将数组元素设为null</p></li>
</ul></li>
<li><p>迭代</p>
<ul>
<li><p>foreach和while<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406162432642.png"
alt="image-20220406162432642" /></p>
<ul>
<li>集合数据类型必须实现iterator()并返回Iterator对象</li>
<li>Iterator类必须包括两个方法,hasNext()和next()</li>
</ul></li>
<li><p>让类继承Iterable<Item>使类可迭代 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163317535.png"
alt="image-20220406163317535" /></p></li>
<li><p>使用一个嵌套类<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163515174.png"
alt="image-20220406163515174" /></p></li>
<li><p>下压栈的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResizingArrayStack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span>		Item[] a = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];      <span class="comment">/* 栈元素 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	<span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>;                                  <span class="comment">/* 元素数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">( <span class="type">int</span> max )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将栈移动到一个大小为max 的新数组 */</span></span><br><span class="line">		Item[] temp = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[max];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">			temp[i] = a[i];</span><br><span class="line">		a = temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">( Item item )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将元素添加到栈顶 */</span></span><br><span class="line">		<span class="keyword">if</span> ( N == a.length )</span><br><span class="line">			resize( <span class="number">2</span> * a.length );</span><br><span class="line">		a[N++] = item;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;                       <span class="comment">/* 从栈顶删除元素 */</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> a[--N];</span><br><span class="line">		a[N] = <span class="literal">null</span>;    <span class="comment">/* 避免对象游离（请见1.3.2.4 节） */</span></span><br><span class="line">		<span class="keyword">if</span> ( N &gt; <span class="number">0</span> &amp;&amp; N == a.length / <span class="number">4</span> )</span><br><span class="line">			resize( a.length / <span class="number">2</span> );</span><br><span class="line">		<span class="keyword">return</span>(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(<span class="keyword">new</span> <span class="title class_">ReverseArrayIterator</span>() );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;       <span class="comment">/* 支持后进先出的迭代 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(i &gt; <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(a[--i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书1.3.3.1-1.3.4</title>
    <url>/2022/04/06/study/algorithm/algorithhms_4th/1.3.3.1-1.3.4/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<h3 id="链表">链表</h3>
<ul>
<li><p>链表是一种递归的数据结构，它或者为空(null)，或者是一个指向一个结点（node）的引用，该节点含有一个泛型的元素和一个指向另一条链表的引用。
#### 结点记录</p></li>
<li><p>使用嵌套类定义结点的抽象数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Item item;</span><br><span class="line">	Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>该类没有其它任何方法，且会在代码中直接引用实例变量，这种类型的变量称为记录</li>
</ul></li>
</ul>
<h4 id="构造链表">构造链表</h4>
<ul>
<li>需要一个Node类型的变量，保证它的值是null或者指向另一个Node对象的next域指向了另一个链表</li>
<li>如下图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407091501353.png"
alt="image-20220407091501353" /></li>
<li>链表表示的是一列元素</li>
<li>链式结构在本书中的可视化表示
长方形表示对象；实例变量的值写在长方形中；用指向被引用对象的箭头表示引用关系</li>
<li>术语<strong>链接</strong>表示对结点的引用</li>
</ul>
<h4 id="在表头插入结点">在表头插入结点</h4>
<ul>
<li><p>在首结点为first 的给定链表开头插入字符串not，我们先将first
保存在oldfirst 中， 然后将一个新结点赋予first，并将它的item
域设为not，next 域设为oldfirst</p></li>
<li><p>时间复杂度为O(1)</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407092921756.png"
alt="image-20220407092921756" /></p></li>
</ul>
<h4 id="从表头删除结点">从表头删除结点</h4>
<ul>
<li><p>将first指向first.next</p></li>
<li><p>原先的结点称为孤儿，Java的内存管理系统最终将回收它所占用的内存</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407093000788.png"
alt="image-20220407093000788" /></p></li>
</ul>
<h4 id="在表尾插入结点">在表尾插入结点</h4>
<ul>
<li><p>每个修改链表的操作都需要增加检查是否要修改该变量（以及做出相应修改）的代码</p></li>
<li><p>例如，当删除链表首结点时可能改变指向链表的尾结点的引用，因为链表中只有一个结点时它既是首结点又是尾结点</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407094045245.png"
alt="image-20220407094045245" /></p></li>
</ul>
<h4 id="其他位置的插入和删除操作">其他位置的插入和删除操作</h4>
<p>删除指定结点；在指定节点插入新结点</p>
<ul>
<li>需要将链表尾结点的前一个节点中的链接（它指向的是last）值改为null</li>
<li>为了找到指向last的结点，需要遍历链表，时间复杂度为O(n)</li>
<li>实现任意插入和删除操作的标准解决方案是<strong>双向链表</strong></li>
</ul>
<h4 id="遍历">遍历</h4>
<ul>
<li><p>将x初始化为链表首结点，然后通过x.item访问和x相关联的元素，并将x设为x.next来访问链表中的下一个结点，知道x=null(没有下一个结点了，到达链表结尾)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理x.item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="栈的实现">栈的实现</h4>
<ul>
<li><p>使用链表实现栈</p></li>
<li><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first
指向栈顶。这样，当使用push() 压入一个元素时，我们会按照1.3.3.3
节所讨论的代码将该元素添加在表头；当使用pop()
删除一个元素时，我们会按照1.3.3.4
节讨论的代码将该元素从表头删除。要实现size() 方法，我们用实例变量N
保存元素的个数，在压入元素时将N 加1，在弹出元素时将N
减1。要实现isEmpty() 方法，只需检查first 是否为null（或者可以检查N
是否为0）</p></li>
<li><p>实现上述几个操作的时间复杂度为O(1)</p></li>
<li><p>下压堆栈（链表的实现）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 栈顶（最近添加的元素）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或：N == 0</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向栈顶添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从栈顶删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见本节前面部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试用例(pop()之前测试用例做了判断)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个栈并根据StdIn中的指示压入或弹出字符串</span></span><br><span class="line">	Stack&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		s.push(item); <span class="keyword">else</span> <span class="keyword">if</span> (!s.isEmpty()) StdOut.print(s.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + s.size() + <span class="string">&quot; left on stack)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="队列的实现">队列的实现</h4>
<ul>
<li><p>这里维护了first和last两个变量</p></li>
<li><p>Queue实现使用的数据结构和Stack都是链表，但实现了不同的添加和删除元素的算法，所以前者是先入先出，后者是后进先出</p></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的实现</p>
<ul>
<li>如下，enqueue()需要额外考虑first，dequeue()需要额外考虑last
<ul>
<li>如果原队列没有结点，那么增加后last指向了新的元素，应该把first也指向新元素</li>
<li>如果原对队列只有一个元素，那么删除后first确实指向null，而last没有更新，所以需要下面的判断手动更新</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 指向最早添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> Node last;</span><br><span class="line">	<span class="comment">// 指向最近添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 队列中的元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或： N == 0.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向表尾添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">		last = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		last.item = item;</span><br><span class="line">		last.next = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) first = last; <span class="keyword">else</span> oldlast.next = last;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从表头删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) last = <span class="literal">null</span>;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在结构化数据集时，链表是数组的一种重要替代方法</p></li>
</ul>
<h4 id="背包的实现">背包的实现</h4>
<ul>
<li><p>只需要将Stack中的push()改为add()即可，并去掉pop()</p></li>
<li><p>下面添加了Iterator实现类，以及iterator()具体方法
其中，嵌套类ListIterator
维护了一个实例变量current来记录链表的当前结点。hasNext()
方法会检测current 是否为null，next() 方法会保存当前元素的引用，将current
变量指向链表中的下个结点并返回所保存的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bag</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 链表的首结点</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 和Stack 的push() 方法完全相同</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">		<span class="keyword">public</span> Boolean <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> current != <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> current.item;</span><br><span class="line">			current = current.next;</span><br><span class="line">			<span class="keyword">return</span> item;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="综述">综述</h3>
<ul>
<li>学习了支持泛型和迭代的背包、队列和栈</li>
<li>现在拥有两种表示对象集合的方式，即数组和链表---&gt;顺序存储和链式存储
<ul>
<li>各种含有多个链接的数据结构，如二叉树的数据结构，由<strong>含有两个链接的节点</strong>组成</li>
<li><strong>复合型</strong>的数据结构：背包存储栈，队列存储数组等，例如用数组的背包表示<strong>图</strong></li>
</ul></li>
<li>基础数据结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105102346.png"
alt="image-20220407105102346" /></li>
<li>研究新领域时，按以下步骤识别并使用数据抽象解决问题
<ul>
<li>定义API</li>
<li>根据应用场景开发<strong>用例代码</strong></li>
<li>描述数据结构（一组值的表示），并在API所对应的抽象数据类型的实现中根据它定义类的实例变量</li>
<li>描述算法（实现一组操作的方式），实现类的实例方法</li>
<li>分析算法的性能特点</li>
</ul></li>
<li>本书的数据结构举例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105552258.png"
alt="image-20220407105552258" /></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.4.1-1.4.10</title>
    <url>/2022/04/07/study/algorithm/algorithhms_4th/1.4.1-1.4.10/</url>
    <content><![CDATA[<h2 id="算法分析">算法分析</h2>
<p>使用<strong>数学分析</strong>为算法成本建立简洁的模型，并使用实验数据验证这些模型</p>
<h3 id="科学方法">科学方法</h3>
<ul>
<li>观察、假设、预测、观察并核实预测、反复确认预测和观察</li>
<li>原则：实验可重现</li>
</ul>
<h3 id="观察">观察</h3>
<ul>
<li><p>计算性任务的困难程度可以用<strong>问题的规模</strong>来衡量</p></li>
<li><p>问题规模可以是输入的大小或某个命令行参数的值</p></li>
<li><p>研究问题规模和运行时间的关系</p></li>
<li><p>使用计时器得到大概的运行时间 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113311126.png"
alt="image-20220407113311126" /></p>
<ul>
<li><p>典型用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            a[i] = StdRandom.uniform(-<span class="number">1000000</span>, <span class="number">1000000</span>);</span><br><span class="line">        <span class="type">Stopwatch</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stopwatch</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> ThreeSum.count(a);</span><br><span class="line">        <span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timer.elapsedTime();</span><br><span class="line">        StdOut.println(cnt + <span class="string">&quot; triples &quot;</span> + time + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113407342.png"
alt="image-20220407113407342" /></p></li>
<li><p>数据类型的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stopwatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stopwatch</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">elapsedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (now - start) / <span class="number">1000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="数学模型">数学模型</h3>
<ul>
<li><p>程序运行的总时间主要和两点有关：执行每条语句的耗时；执行每条语句的频率</p></li>
<li><p>定义：我们用~f(N) 表示所有随着N 的增大除以f(N) 的结果趋近于1
的函数。我们用g(N) ~ f(N) 表示g(N)/f(N) 随着N 的增大趋近于1。
即使用曰等号忽略较小的项</p></li>
<li><p><span class="math display">\[
f(N)=N^b(logN)^c
\]</span></p>
<p>将f(N)称为g(N)的增长的数量级</p></li>
<li><p>常见的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170444747.png"
alt="image-20220407170444747" /></p></li>
<li><p>本书用性质表示需要用实验验证的猜想</p>
<ul>
<li><p>ThreeSum分析
执行最频繁的指令决定了程序执行的总时间--我们将这些指令称为程序的<strong>内循环</strong></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170842908.png"
alt="image-20220407170842908" />
<figcaption aria-hidden="true">image-20220407170842908</figcaption>
</figure></li>
<li><p>程序运行时间的分析 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170938405.png"
alt="image-20220407170938405" /></p></li>
<li><p>算法的分析
ThreeSum的运行时间增长数量级为N^3，与在哪台机器无关</p></li>
<li><p>成本模型
3-sum的成本模型：数组的访问次数（访问数组元素的次数，无论读写）</p></li>
<li><p>总结-得到运行时间的数学模型所需的步骤</p>
<ul>
<li>确定输入模型，定义问题的规模</li>
<li>识别内循环</li>
<li>根据内循环中的操作确定成本模型</li>
<li>对于给定的输入，判断这些操作的执行效率</li>
</ul></li>
</ul></li>
</ul>
<h3 id="增长数量级的分类">增长数量级的分类</h3>
<ul>
<li>成长增长的数量级一般都是问题规模N的若干函数之一，如下表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408091530468.png"
alt="image-20220408091530468" />
<ul>
<li>常数级别表示运行时间不依赖于N</li>
<li>对数级别，经典例子是<strong>二分查找</strong></li>
<li>线性级别（常见的for循环）</li>
<li>线性对数级别 ，其中，对数的底数和增长的数量级无关</li>
<li>平方级别，一般指两个嵌套的for循环</li>
<li>立方级别，一般含有三个嵌套的for循环</li>
<li>指数级别</li>
</ul></li>
<li>问题规模（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092436213.png"
alt="image-20220408092436213" /></li>
<li>典型的增长数量级函数（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092500239.png"
alt="image-20220408092500239" /></li>
<li>典型的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092659849.png"
alt="image-20220408092659849" /></li>
<li>在某个成本模型下可以提出精确的命题
比如，归并排序所需的比较次数在<span
class="math inline">\(1/2NlgN\)</span>~<span
class="math inline">\(NlgN\)</span>之间
，即归并排序所需的运行时间的增长数量级是线性对数的，也就是：归并排序是线性对数的</li>
</ul>
<h3 id="设计更快的算法">设计更快的算法</h3>
<ul>
<li><p>前提，目前已知归并排序是线性对数级别的，二分查找是对数级别的</p></li>
<li><p>将3-sum问题简化为2-sum问题，即找出一个输入文件中所有和为0的整数对的数量，为了简化问题，题设所有整数均不相同</p>
<ul>
<li><p>可以使用双层循环，以<strong>平方级别</strong>来解决</p></li>
<li><p>改进后的算法，当且仅当-a[i]存在于数组中且a[i]非零时，a[i]存在于某个和为0的整数对之中</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoSumFast</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为0的整数对的数目</span></span><br><span class="line">			Arrays.sort(a);</span><br><span class="line">			<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">			<span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">				<span class="keyword">if</span> (BinarySearch.rank(-a[i], a) &gt; i)</span><br><span class="line">					cnt++;</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">			<span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">			StdOut.println(count(a));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3-sum问题的快速算法</p>
<ul>
<li><p>当且仅当-(a[i]+a[j])在数组中,且不是a[i]也不是a[j]时，整数对(a[i]和a[j])为某个和为0的三元组的一部分</p></li>
<li><p>总运行时间和<span
class="math inline">\(N^2logN\)</span>成正比</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeSumFast</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为０的三元组的数目</span></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">                <span class="keyword">if</span> (BinarySearch.rank(-a[i] - a[j], a) &gt; j) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">        StdOut.println(count(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>下界</p>
<ul>
<li><p>为算法在最坏情况下的运行时间给出一个下界的思
想是非常有意义的</p></li>
<li><p>运行时间的总结</p>
<p>图1 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095417424.png"
alt="image-20220408095417424" /> 图2 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095509262.png"
alt="image-20220408095509262" /></p></li>
<li><p>实现并分析该问题的一种简单解法，我们称之为<strong>暴力算法</strong></p></li>
<li><p>算法的改进，能降低算法所需的运行时间的增长数量级</p></li>
</ul></li>
</ul></li>
</ul>
<h3 id="倍率实验">倍率实验</h3>
<ul>
<li><p>翻倍后运行时间，与没翻倍时的运行时间成正比</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublingRatio</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">timeTrial</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">		<span class="comment">// 参见DoublingTest（请见1.4.2.3 节实验程序）</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">prev</span> <span class="operator">=</span> timeTrial(<span class="number">125</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">250</span>; <span class="literal">true</span>; N += N)</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timeTrial(N);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%6d %7.1f &quot;</span>, N, time);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%5.1fn&quot;</span>, time/prev);</span><br><span class="line">			prev = time;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>试验结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112657967.png"
alt="image-20220408112657967" /></li>
<li>预测 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112708320.png"
alt="image-20220408112708320" /></li>
<li>倍率定理（没看懂，不管） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112746465.png"
alt="image-20220408112746465" />
<ul>
<li>评估它解决大型问题的可行性</li>
<li>评估使用更快的计算机所产生的价值</li>
</ul></li>
</ul></li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>大常数，<span class="math inline">\(c = 10^3或10^6\)</span></li>
<li>非决定性的内循环</li>
<li>指令时间</li>
<li>系统因素</li>
<li>不分伯仲（相同任务在不同场景效率不一样）</li>
<li>对输入的强烈依赖</li>
<li>多个问题参量</li>
</ul>
<h3 id="处理对于输入的依赖">处理对于输入的依赖</h3>
<ul>
<li>输入模型，例如假设ThreeSum的所有输入均为随机int值，可能不切实际</li>
<li>输入的分析，需要数学几千</li>
<li>对最坏情况下的性能保证
<ul>
<li>命题（这里只针对之前的代码） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113444176.png"
alt="image-20220408113444176" /></li>
</ul></li>
<li>对计划算法，有时候对输入需要进行打乱</li>
<li>操作序列</li>
<li>均摊分析 通过记录所有操作的总成本并除以操作总数来将成本均摊</li>
</ul>
<h3 id="内存">内存</h3>
<ul>
<li>Java的内存分配系统</li>
<li>原始数据类型的常见内存、需求 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113805644.png"
alt="image-20220408113805644" />
这里漏了，short也是2字节。总结boolean、byte 1字节；char、short
2字节；int、float 4字节；long、double 8字节</li>
<li>对象（跳过）
<ul>
<li><p>要知道一个对象所使用的内存量，需要将所有实例变量使用的内存与内存本身的开销（一般是16字节）</p></li>
<li><p>一般内存的使用都会被填充为<strong>8字节的倍数</strong>（注意，说的是64位计算机中的机器字）</p></li>
<li><p><strong>引用</strong>存储需要8字节</p></li>
<li><p>典型对象的内存需求 例如第一个，16+4=20；20+4 = 24为8的倍数</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114020688.png"
alt="image-20220408114020688" />
<figcaption aria-hidden="true">image-20220408114020688</figcaption>
</figure></li>
<li><p>链表，嵌套的非静态（内部）类，如<strong>上面的Node，需要额外的8字节</strong>（用于外部类的引用）</p></li>
<li><p>数组 int值、double值、对象和数组的数组对内存的典型需求
比如一个原始数据类型的数组，需要24字节的头信息（16字节的对象开销，4字节用于保存长度[数组长度]，以及4填充字节，再加上保存值需要的内存）
Date对象需要的：一个含有N 个Date 对象（请见表1.2.12）的数 组需要使用24
字节（数组开销）加上8N 字节（所有引用）加上每个对象的32 字节，总共（24
+40N）字节 【这里说的是需要，和本身存储是两回事】</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114325192.png"
alt="image-20220408114325192" />
<figcaption aria-hidden="true">image-20220408114325192</figcaption>
</figure></li>
<li><p>字符串对象</p>
<blockquote>
<p>String 的标准实现含有4 个实例变量：一个指向字符数组的引用（8
字节）和三 个int 值（各4 字节）。第一个int
值描述的是字符数组中的偏移量，第二个int
值是一个计数器（字符串的长度）。按照图1.4.10
中所示的实例变量名，对象所表示的字符串由value[offset]到value[offset +
count - 1] 中的字符组成。String 对象中的第三个int
值是一个散列值，它在某些情况下可以节省一些计算，我们现在可以忽略它。因此，每个String
对象总共会使用40字节（16 字节表示对象，三个int 实例变量各需4
字节，加上数组引用的8 字节和4 个填充字节）</p>
</blockquote></li>
<li><p>字符串的值和子字符串</p>
<ul>
<li>一个长度为N 的String 对象一般需要使用40 字节（String
对象本身）加上（24+2N）字节（字符数组），总共（64+2N）字节</li>
<li>Java 对字符串的表示希望能够避免复制字符串中的字符</li>
<li>一个子字符串所需的额外内存是一个常数，构造一个子字符串所需的时间也是常数</li>
<li>关于子字符串 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408151726265.png"
alt="image-20220408151726265" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="展望">展望</h3>
<ul>
<li>最重要的是代码正确，其次才是性能</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.5.1-1.5.3</title>
    <url>/2022/04/09/study/algorithm/algorithhms_4th/1.5.1-1.5.3/</url>
    <content><![CDATA[<h2 id="案例研究union-find-算法">案例研究：union-find 算法</h2>
<ul>
<li>设计和分析算法的基本方法
<ul>
<li>优秀的算法能解决实际问题</li>
<li>高效的算法也可以很简单</li>
<li>理解某个实现的性能特点是一项有趣的挑战</li>
<li>在解决同一个问题的多种算法间选择，科学方法是一种重要工具</li>
<li>迭代式改进能让算法效率越来越高</li>
</ul></li>
</ul>
<h3 id="动态连通性">动态连通性</h3>
<ul>
<li>从输入中读取整数对p
q，如果已知的所有整数对都不能说明p,q相连，就打印出pq</li>
<li>网络：整个程序能够判定是否需要在pq之间架设一条新的连接才能进行通信</li>
<li>变量名等价性（即指向同一个对象的多个引用）</li>
<li>数学集合：在处理一个整数对pq时，我们是在判断它们是否属于相同的集合</li>
<li>本节中，将对象称为<strong>触点</strong>，整数对称为<strong>连接</strong>，等价类称为<strong>连通分量</strong>或是<strong>简称分量</strong></li>
<li>连通性
问题只要求我们的程序能够判别给定的整数对pq是否相连，并没有要求给两者之间的通路上的所有连接</li>
<li>union-find算法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413001331923.png"
alt="image-20220413001331923" /></li>
<li>数据结构和算法的设计影响到算法的效率</li>
</ul>
<h3 id="实现">实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[]	id;</span><br><span class="line">	<span class="comment">/* 分量id（以触点作为索引） */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	count;</span><br><span class="line">	<span class="comment">/* 分量数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">UF</span><span class="params">( <span class="type">int</span> N )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 初始化分量id数组 */</span></span><br><span class="line">		count	= N;</span><br><span class="line">		id	= <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">					id[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(find( p ) == find( q ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">( <span class="type">int</span> p )</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">	<span class="comment">/* 请见1.5.2.1节用例（quick-find）、1.5.2.3节用例（quick-union）和算法1.5（加权quick-union） */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 解决由StdIn得到的动态连通性问题 */</span></span><br><span class="line">		<span class="type">int</span>	<span class="variable">N</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">		<span class="comment">/* 读取触点数量 */</span></span><br><span class="line">		<span class="type">UF</span>	<span class="variable">uf</span>	<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>( N );</span><br><span class="line">		<span class="comment">/* 初始化N个分量 */</span></span><br><span class="line">		<span class="keyword">while</span> ( !StdIn.isEmpty() )</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">int</span>	<span class="variable">p</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="type">int</span>	<span class="variable">q</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="comment">/* 读取整数对 */</span></span><br><span class="line">			<span class="keyword">if</span> ( uf.connected( p, q ) )</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">/* 如果已经连通则忽略 */</span></span><br><span class="line">			uf.union( p, q );</span><br><span class="line">			<span class="comment">/* 归并分量 */</span></span><br><span class="line">			StdOut.println( p + <span class="string">&quot; &quot;</span> + q );</span><br><span class="line">			<span class="comment">/* 打印连接 */</span></span><br><span class="line">		&#125;</span><br><span class="line">		StdOut.println( uf.count() + <span class="string">&quot;components&quot;</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>union-find的成本模型：union-find
API的各种算法，统计的是<strong>数组的访问次数</strong>，不论读写</p>
<ul>
<li><p>以下有三种实现</p>
<ul>
<li><p>且仅当id[p] 等于id[q] 时p 和q 是连通的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q归并到相同的分量中</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pID</span> <span class="operator">=</span> find(p);mi</span><br><span class="line">	<span class="type">int</span> <span class="variable">qID</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="comment">// 如果p和q已经在相同的分量之中则不需要采取任何行动</span></span><br><span class="line">	<span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 将p的分量重命名为q的名称</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">	<span class="keyword">if</span> (id[i] == pID) id[i] = qID;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命题F：在quick-find 算法中，每次find()
调用只需要访问数组一次，而归并两个分量的union()
操作访问数组的次数在(N+3) 到(2N+1) 之间。<br />
证明：由代码马上可以知道，每次connected() 调用都会检查id[]
数组中的两个元素是否相等，即会调用两次find() 方法。归并两个分量的union()
操作会调用两次find()，检查id[] 数组中的全部N 个元素并改变它们中1 到N-1
个元素的值。</p>
</blockquote>
<blockquote>
<p>假设我们使用quick-find
算法来解决动态连通性问题并且最后只得到了一个连通分量，那么这至少需要调用N-1
次union()，即至少(N+3)(N-1) ～ N2
次数组访问——我们马上可以猜想动态连通性的quick-find 算法是平方级别的</p>
</blockquote></li>
<li><p>以触点作为索引的id[]数组，每个触点所对应的id[]元素都是同一个分量中的另一个触点的名称
如下图： <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413222744695.png"
alt="image-20220413222744695" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 找出分量的名称</span></span><br><span class="line">	<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q的根节点统一</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">	<span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line">	id[pRoot] = qRoot;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union算法的最坏情况 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223324173.png"
alt="image-20220413223324173" /></p></li>
<li><p>加权quick-union算法（减少树的高度）
用一个数组来表示各个节点对应的分量的大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightedQuickUnionUF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] id;</span><br><span class="line">	<span class="comment">// 父链接数组（由触点索引）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] sz;</span><br><span class="line">	<span class="comment">// （由触点索引的）各个根节点所对应的分量的大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">	<span class="comment">// 连通分量的数量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WeightedQuickUnionUF</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">	&#123;</span><br><span class="line">		count = N;</span><br><span class="line">		id = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) id[i] = i;</span><br><span class="line">		sz = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) sz[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 跟随链接找到根节点</span></span><br><span class="line">		<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> find(p);</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> find(q);</span><br><span class="line">		<span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">// 将小树的根节点连接到大树的根节点</span></span><br><span class="line">		<span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;</span><br><span class="line">			id[i] = j;</span><br><span class="line">			sz[j] += sz[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			id[j] = i;</span><br><span class="line">			sz[i] += sz[j];</span><br><span class="line">		&#125;</span><br><span class="line">		count--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union 算法与加权quick-union 算法的对比（100 个触点，88
次union() 操作） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223710124.png"
alt="image-20220413223710124" /></p></li>
</ul></li>
<li><p>所有操作的总成本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223824910.png"
alt="image-20220413223824910" /></p></li>
</ul>
<h3 id="展望">展望</h3>
<p>研究问题的步骤</p>
<ul>
<li>完整而详细地定义问题，找出解决问题所必需的基本抽象操作并定义一份
API。</li>
<li>简洁地实现一种初级算法，给出一个精心组织的开发用例并使用实际数据作为输入。</li>
<li>当实现所能解决的问题的最大规模达不到期望时决定改进还是放弃。</li>
<li>逐步改进实现，通过经验性分析或（和）数学分析验证改进后的效果。</li>
<li>用更高层次的抽象表示数据结构或算法来设计更高级的改进版本。</li>
<li>如果可能尽量为最坏情况下的性能提供保证，但在处理普通数据时也要有良好的性能。</li>
<li>在适当的时候将更细致的深入研究留给有经验的研究者并继续解决下一个问题。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.1.1</title>
    <url>/2022/04/13/study/algorithm/algorithhms_4th/2.1.1/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<p>排序就是将一组对象按照某种逻辑顺序重新排序的过程</p>
<ul>
<li>对排序算法的分析有助于理解本书中比较算法性能的方法</li>
<li>类似技术能解决其他类型问题</li>
<li>排序算法常常是我们解决其他问题的第一步</li>
</ul>
<h2 id="初级排序算法">初级排序算法</h2>
<ul>
<li>熟悉术语及技巧</li>
<li>某些情况下初级算法更有效</li>
<li>有助于改进复杂算法的效率</li>
</ul>
<h3 id="游戏规则">游戏规则</h3>
<ul>
<li><p>主要关注重新排序<strong>数组元素</strong>的算法，每个元素都会有一个<strong>主键</strong></p></li>
<li><p>排序后索引较大的主键大于索引较小的主键</p></li>
<li><p>一般情况下排序算法通过两个方法操作数据，less()进行比较，exch()进行交换</p></li>
<li><p>排序算法类的模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 请见算法2.1、算法2.2、算法2.3、算法2.4、算法2.5或算法2.7*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">		a[i] = a[j];</span><br><span class="line">		a[j] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 在单行中打印数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">		StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		StdOut.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isSorted</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 测试数组元素是否有序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++)</span><br><span class="line">		<span class="keyword">if</span> (less(a[i], a[i-<span class="number">1</span>])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]</span></span><br><span class="line"><span class="params">	args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从标准输入读取字符串，将它们排序并输出</span></span><br><span class="line">		String[] a = In.readStrings();</span><br><span class="line">		sort(a);</span><br><span class="line">		<span class="keyword">assert</span> <span class="title function_">isSorted</span><span class="params">(a)</span>;</span><br><span class="line">		show(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more tiny.txt</span></span><br><span class="line">S O R T E X A M P L E</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; tiny.txt</span></span><br><span class="line">A E E L M O P R S T X</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more words3.txt</span></span><br><span class="line">bed bug dad yes zoo ... all bad yet</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; words.txt</span></span><br><span class="line">all bad bed bug dad ... yes yet zoo</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用assert验证</p></li>
<li><p>排序成本模型：在研究排序算法时，我们需要计算比较和交换的数量。对于不交换元素的算法，我们会比较访问数组的次数</p></li>
<li><p>额外内存开销和运行时间同等重要，排序算法分为</p>
<ul>
<li>除了函数调用需要的栈和固定数目的实例变量之外，无需额外内存的<strong>原地排序算法</strong></li>
<li>需要额外内存空间来存储另一份数组副本的<strong>其他排序算法</strong></li>
</ul></li>
<li><p>数据类型</p>
<ul>
<li><p>排序模板适用于任何实现了Comparable接口的数据类型</p></li>
<li><p>对于自己的数据类型，实现Comparable接口即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Date&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> day;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> month;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> year;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> m, <span class="type">int</span> y)</span></span><br><span class="line">	&#123;</span><br><span class="line">		day = d;</span><br><span class="line">		month = m;</span><br><span class="line">		year = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">day</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> day;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">month</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> month;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">year</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> year;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Date that)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &gt; that.year ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &lt; that.year ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &gt; that.month) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &lt; that.month) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &gt; that.day ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &lt; that.day ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> month + <span class="string">&quot;/&quot;</span> + day + <span class="string">&quot;/&quot;</span> + year;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>compareTo()必须实现<strong>全序关系</strong>
<ul>
<li>自反性，反对称性及传递性</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>经典算法，包括选择排序、插入排序、希尔排序、归并排序、快速排序和堆排序</p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.1.2-2.1.3</title>
    <url>/2022/04/23/study/algorithm/algorithhms_4th/2.1.2-2.1.3/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<h2 id="初级排序算法">初级排序算法</h2>
<h3 id="选择排序">选择排序</h3>
<ul>
<li><p>命题A。对于长度为N 的数组，选择排序需要大约 N^2/2 次比较和N
次交换。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Selection</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 将a[]按升序排列</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">		<span class="comment">// 数组长度</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 将a[i]和a[i+1..N]中最小的元素交换</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">			<span class="comment">// 最小元素的索引</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">			<span class="keyword">if</span> (less(a[j], a[min])) min = j;</span><br><span class="line">			exch(a, i, min);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// less()、exch()、isSorted()和main()方法见“排序算法类模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>运行时间与输入无关，即输入数据的初始状态（比如是否已排序好等等）不影响排序时间</li>
<li>数据移动是最少的（只使用了N次交换，交换次数和数组的大小是线性关系</li>
</ul></li>
</ul>
<h3 id="插入排序">插入排序</h3>
<ul>
<li><p>命题B。对于随机排列的长度为N
且主键不重复的数组，平均情况下插入排序需要～ N^2/4 次比较以及～ N^2/4
次交换。最坏情况下需要～ N^2/2 次比较和～ N^2/2
次交换，最好情况下需要N-1次比较和0 次交换。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="comment">//将下表为 n-1的数，依次和n-2,n-3一直到0比较，</span></span><br><span class="line">        <span class="comment">//所以第二层for只走到1，因为0前面没有值</span></span><br><span class="line">        <span class="comment">//如果比前面的值小，就进行交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当倒置的数量很小时，插入排序比本章中的其他任何算法都快</p></li>
<li><blockquote>
<p>命题C。插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</p>
</blockquote></li>
<li><blockquote>
<p>性质D。对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数</p>
</blockquote></li>
</ul>
<h3 id="希尔排序">希尔排序</h3>
<ul>
<li><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的，这样的数组称为h有序数组，一个h有序数组就是h个互相独立的有序数组编制在一起组成的数组</p></li>
<li><p>算法2.3 的实现使用了序列1/2（3k-1），从N/3
开始递减至1。我们把这个序列称为递增序列</p></li>
<li><p>详述</p></li>
<li><p>实现希尔排序的一种方法是对于每个h，用插入排序将h
个子数组独立地排序。但因为子数组是相互独立的，一个更简单的方法是在h-
子数组中将每个元素交换到比它大的元素之前去（将比它大的元素向右移动一格）。只需要在插入排序的代码中将移动元素的距离由1
改为h
即可。这样，希尔排序的实现就转化为了一个类似于插入排序但使用不同增量的过程。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 将a[]按升序排列</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">		<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (h &lt; N/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">		<span class="keyword">while</span> (h &gt;= <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 将数组变为h有序</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; N; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 将a[i]插入到a[i-h], a[i-2*h], a[i-3*h]... 之中</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h)</span><br><span class="line">				exch(a, j, j-h);</span><br><span class="line">			&#125;</span><br><span class="line">			h = h/<span class="number">3</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// less()、exch()、isSorted()和main()方法见“排序算法类模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过提升速度来解决其他方式无法解决的问题是研究算法的设计和性能的主要原因之一</p></li>
</ul>
<h2 id="归并排序">归并排序</h2>
<p>归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需时间和NlogN成正比，主要缺点是他所需的额外空间和N成正比</p>
<ul>
<li>归并排序示意图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426112820116.png"
alt="image-20220426112820116" /></li>
</ul>
<h3 id="自顶向下的归并排序">自顶向下的归并排序</h3>
<ul>
<li><p>原地归并的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里有一个前提，就是a[i..mid]是有序的，</span></span><br><span class="line"><span class="comment"> * a[mid..hi]是有序的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] a,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//先在辅助数组赋上需要的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最坏情况下这里时需要比较hi-lo+1次的，也就是数组长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">            <span class="comment">//说明i(左边）比较完了，直接拿右边的值放进去</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">            <span class="comment">//说明j(右边)比较完了，直接拿左边的值放进去</span></span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">            <span class="comment">//左右都还有值的情况下，取出最小的值放进去</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>递归进行归并排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//保证左边有序</span></span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        <span class="comment">//保证右边有序</span></span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">//归并数组有序的两部分</span></span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>辅助数组的一次性初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="title class_">Comparable</span>[a.length];<span class="comment">//辅助数组，一次性分配空间</span></span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自顶向下的归并排序的调用轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426111242973.png"
alt="image-20220426111242973" /></p></li>
<li><p>N=16时归并排序中子数组的依赖树 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426140310539.png"
alt="image-20220426140310539" /></p></li>
<li><p>每个结点都表示一个sort() 方法通过merge()
方法归并而成的子数组。这棵树正好有n 层。对于0 到n-1
之间的任意k，自顶向下的第k 层有2^k 个子数组，每个数组的长度为 <span
class="math inline">\(2^{(n-k)}\)</span>，归并最多需要<span
class="math inline">\(2^{(n-k)}\)</span>次比较。因此每层的比较次数为$
2^k * 2 ^ {( n - 1 )} = 2 ^ n $ ，n层总共为 <span
class="math inline">\(n*2^n = lg N * (2 ^ { lg N}) = lg N *
N\)</span></p></li>
<li><blockquote>
<p>命题F。对于长度为N 的任意数组，自顶向下的归并排序需要(1/2)N lgN 至N
lgN 次比较。</p>
<p>注：因为归并所需要的比较次数最少为N/2</p>
</blockquote></li>
<li><blockquote>
<p>命题G。对于长度为N
的任意数组，自顶向下的归并排序最多需要访问数组6NlgN 次。
证明。每次归并最多需要访问数组6N 次（2N 次用来复制，2N
次用来将排好序的元素移动回去，另外最多比较2N 次），根据命题F
即可得到这个命题的结果。</p>
</blockquote></li>
</ul>
<h3 id="自底向上的归并排序">自底向上的归并排序</h3>
<p>递归实现的归并排序时算法设计中<strong>分治思想</strong>
的典型应用<br />
自底向上的归并排序的可视轨迹</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426153552531.png" /></p>
<ul>
<li><p>源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">       aux = <span class="keyword">new</span> <span class="title class_">Comparable</span>[N];</span><br><span class="line">       <span class="comment">//每次合并的子数组长度翻倍</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;</span><br><span class="line">           <span class="comment">//lo:子数组索引 </span></span><br><span class="line">           <span class="comment">//边界问题， 假设是N为2^n，则倒数第二个数组的元素的下标，一定在倒数第一个元素下标(n-sz)之前</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz) &#123;</span><br><span class="line">               <span class="comment">//循环合并一个个的小数组</span></span><br><span class="line">               merge(a, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>子数组的大小sz的初始值为1，每次加倍</p></li>
<li><p>最后一个子数组的大小只有在数组大小是sz的偶数倍的时候才会等于sz（否则比sz小)</p></li>
<li><blockquote>
<p>命题H。对于长度为N 的任意数组，自底向上的归并排序需要1/2NlgN 至NlgN
次比较，最多访问数组6NlgN 次。</p>
</blockquote></li>
<li><blockquote>
<p>自底向上的归并排序比较适合用链表组织的数据。想象一下将链表先按大小为1
的子链表进行排序，然后是大小为2 的子链表，然后是大小为4
的子链表等。这种方法只需要重新组织链表链接就能将链表原地排序（不需要创建任何新的链表结点）</p>
</blockquote></li>
<li><p>归并排序告诉我们，当能够用其中一种方法解决一个问题时，都应该试试另一种，可以像Merge.sort()那样化整为零（然后递归地解决）问题，或者像MergeBU.sort()那样循序渐进的解决问题</p></li>
<li><blockquote>
<p>命题I。没有任何基于比较的算法能够保证使用少于lg（N!）～ NlgN
次比较将长度为N 的数组排序</p>
</blockquote></li>
<li><blockquote>
<p>命题J。归并排序是一种渐进最优的基于比较排序的算法。</p>
</blockquote></li>
</ul></li>
</ul>
<h2 id="快速排序">快速排序</h2>
<p>快速排序是应用最广泛的排序算法</p>
<h3 id="基本算法">基本算法</h3>
<ul>
<li><p>是一种分治的排序算法，将一个数组分成两个子数组，将两部分独立的排序</p></li>
<li><p>归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将两个数组排序；快速排序将数组排序的方式是当两个子数组都有序时整个数组也都有序了</p></li>
<li><p>归并排序：递归调用发生在处理数组之前；快速排序：递归调用发生在处理数组之后</p></li>
<li><p>归并排序中数组被分为两半；快速排序中切分取决于数组内容</p></li>
<li><p>快速排序示意图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503184109136.png"
alt="image-20220503184109136" /></p></li>
<li><p>递归代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> partition(a, lo, hi); <span class="comment">//切分</span></span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>); <span class="comment">/// 将左半部分a[lo .. j-1]排序</span></span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);<span class="comment">//将右半部分a[j+1..hi]排序</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>快速排序递归的将子数组a[lo..hi]排序，先用partition()方法将a[j]放到一个合适的位置，然后再用递归调用将其他位置的元素排序
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503184859350.png"
alt="image-20220503184859350" /></p></li>
<li><p>切分后使得数组满足三个条件</p>
<ul>
<li>对于某个j，a[j]已经排定</li>
<li>a[lo]到a[j-1]的所有元素都不大于a[j]</li>
<li>a[j+1]的所有元素都不小于a[j]</li>
</ul></li>
<li><p>归纳法证明数组有序：</p>
<blockquote>
<p>如果左子数组和右子数组都是有序的，那么由左子数组（有序且没有任何元素大于切分元素）、切分元素和右子数组（有序且没有任何元素小于切分元素）组成的结果数组也一定是有序的</p>
</blockquote></li>
</ul></li>
<li><blockquote>
<p>一般策略是先随意地取a[lo]
作为切分元素，即那个将会被排定的元素，然后我们从数组的左端开始向右扫描直到找到一个大于等于它的元素，再从数组的右端开始向左扫描直到找到一个小于等于它的元素。这两个元素显然是没有排定的，因此我们交换它们的位置。如此继续，我们就可以保证左指针i
的左侧元素都不大于切分元素，右指针j
的右侧元素都不小于切分元素。当两个指针相遇时，我们只需要将切分元素a[lo]
和左子数组最右侧的元素（a[j]）交换然后返回j 即可</p>
</blockquote></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = hi + <span class="number">1</span>; <span class="comment">//左右扫描指针</span></span><br><span class="line">    <span class="type">Comparable</span> <span class="variable">v</span> <span class="operator">=</span> a[lo]; <span class="comment">//切分元素</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//从左往右扫描，如果找到了大于等于v值的数，就退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右往左扫描，如果找到了小于等于v值得数，就退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[--j], v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;<span class="comment">//如果i，j相遇则退出循环</span></span><br><span class="line">        <span class="comment">//将左边大于等于v值的数与右边小于等于v值的数交换</span></span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面的遍历结束后，a[lo+1...j]和a[i..hi]都已经分别有序</span></span><br><span class="line">    <span class="comment">//且a[j]&lt;=a[i]&lt;=a[lo]，所以应该交换a[lo]和a[j](而不是a[i)，因为</span></span><br><span class="line">    <span class="comment">//a[i]有可能大于a[lo]</span></span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="comment">//返回a[lo]被交换的位置</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切分轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503190908482.png"
alt="image-20220503190908482" /></p></li>
<li></li>
</ul>
<h3 id="性能特点">性能特点</h3>
<blockquote>
<p>将长度为N的无重复数组排序，快速排序平均需要~2N lnN
次比较（以及1/6的交换）</p>
</blockquote>
<h3 id="算法改进">算法改进</h3>
<p>三向切分</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.4</title>
    <url>/2022/05/27/study/algorithm/algorithhms_4th/2.4/</url>
    <content><![CDATA[<h1 id="优先队列">优先队列</h1>
<ul>
<li>有些情况下，不需要要求处理的元素全部有序，只要求每次都处理键值最大的元素，然后再收集更多的元素，然后再处理键值最大的元素</li>
<li>需要一种数据结构，支持操作：删除最大元素和插入元素，这种数据类型叫做优先队列</li>
<li>优先队列的基本表现形式：其一或两种操作都能在线性时间内完成</li>
<li>基于<strong>二叉堆数据结构</strong>的优先队列，用数组保存元素并按照一定条件排序，以实现高效的删除最大元素和插入元素</li>
</ul>
<h2 id="api">API</h2>
<ul>
<li><p>抽象数据类型，最重要的操作是删除最大元素和插入元素
delMax()和insert()</p></li>
<li><p>用“最大元素”代替“最大键值”或是“键值最大的元素”</p></li>
<li><p>泛型优先队列的API <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231019846.png"
alt="image-20220530231019846" /></p></li>
<li><p>优先队列的调用示例 从N各输入中找到最大的M各元素所需成本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231059427.png"
alt="image-20220530231059427" /></p>
<ul>
<li><p>优先队列的用例
pq里面最多放5个，当大于5个的时候，就从中剔除1个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopM</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 打印输入流中最大的M行</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> Integer.parseint(args[<span class="number">0</span>]);</span><br><span class="line">		MinPQ&lt;Transaction&gt; pq = <span class="keyword">new</span> <span class="title class_">MinPQ</span>&lt;Transaction&gt;(M+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (StdIn.hasNextLine())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 为下一行输入创建一个元素并放入优先队列中</span></span><br><span class="line">			pq.insert(<span class="keyword">new</span> <span class="title class_">Transaction</span>(StdIn.readLine()));</span><br><span class="line">			<span class="keyword">if</span> (pq.size() &gt; M)</span><br><span class="line">			  pq.delMin();</span><br><span class="line">			<span class="comment">// 如果优先队列中存在M+1个元素则删除其中最小的元素</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 最大的M个元素都在优先队列中</span></span><br><span class="line">		Stack&lt;Transaction&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Transaction&gt;();</span><br><span class="line">		<span class="keyword">while</span> (!pq.isEmpty()) stack.push(pq.delMin());</span><br><span class="line">		<span class="keyword">for</span> (Transaction t : stack) StdOut.println(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>应用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231154665.png"
alt="image-20220530231154665" /></p></li>
</ul></li>
</ul>
<h2 id="初级实现">初级实现</h2>
<ul>
<li>数组实现（无序）
insert元素和栈的push()方法完全一样；要删除最大元素，可以添加一段类似选择排序的内循环的代码，将最大元素的边界元素交换，然后删除</li>
<li>数组实现（有序）
insert()方法时，始终将较大的元素，向右边移动一格以使数组有序；<strong>删除</strong>最大元素就是pop()</li>
<li>链表表示法</li>
<li>可以用基于链表的下压栈的代码作为基础，而后可以选择修改pop()
来找到并返回最大元素，或是修改push() 来保证所有元素为逆序并用pop()
来删除并返回链表的首元素(也就是最大的元素)</li>
<li>优先队列的各种实现在最坏情况下运行时间的增长数量级 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231218833.png"
alt="image-20220530231218833" /></li>
<li>在一个优先队列上执行的一系列操作如表2.4.4所示 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231233202.png"
alt="image-20220530231233202" /></li>
</ul>
<h2 id="堆的定义">堆的定义</h2>
<blockquote>
<p>当一棵二叉树的每个节点都大于等于他的两个子结点时，它被称为堆有序</p>
</blockquote>
<ul>
<li><p>重要性质1</p>
<p>在堆有序的二叉树中，每个结点都小于等于它的父结点（如果有的话）。从任意结点向上，我们都能得到一列非递减的元素；从任意结点向下，我们都能得到一列非递增的元素</p></li>
<li><p>重要命题 根结点是堆有序的二叉树中的最大结点</p></li>
<li><p>二叉堆表示法</p>
<ul>
<li>如果使用指针来表示堆有序的二叉树，需要三个指针来找到它的上下结点</li>
<li>使用数组来表示(前提是使用完全二叉树来表示)，那么只要一层一层由上向下从左至右，在每个结点的下方连接两个更小的结点，直至将N个结点全部连接完毕
即将二叉树的结点按照层级顺序放入数组中</li>
</ul></li>
<li><blockquote>
<p>二叉堆是一组能够用堆有序的完全二叉树排序的元素，并在数组中按照层级储存（不使
用数组的第一个位置）</p>
</blockquote></li>
<li><p>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231408925.png"
alt="image-20220530231408925" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231421881.png"
alt="image-20220530231421881" />
<figcaption aria-hidden="true">image-20220530231421881</figcaption>
</figure></li>
<li><p>下面将<strong>二叉树</strong> 简称为堆</p></li>
<li><p>在一个堆中，位置k
的结点的父结点的位置为k/2，而它的两个子结点的位置则分别为2k
和2k+1。这样在不使用指针的情况下（我们在第3
章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从a[k]
向上一层就令k 等于k/2，向下一层则令k 等于2k 或2k+1</p></li>
<li><blockquote>
<p>一棵大小为N的完全二叉树的高度为[lgN]</p>
</blockquote>
<p>当N达到2的幂时树的高度为加1 数组不使用位置[0]</p></li>
<li></li>
</ul>
<h2 id="堆的算法">堆的算法</h2>
<ul>
<li><p>堆实现的比较和交换方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> pq[i].compareTo(pq[j]) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">Key</span> <span class="variable">t</span> <span class="operator">=</span> pq[i];</span><br><span class="line">	pq[i] = pq[j];</span><br><span class="line">	pq[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>堆的操作首先进行一些简单的改动，打破堆的状态，再遍历堆并按照要求将堆的状态回复，这个过程称为堆的<strong>有序化</strong></p></li>
<li><p>当某个结点的优先级上升（或是在堆底加入一个新的元素）时，我们需要由下至上恢复堆的顺序。当某个结点的优先级下降（例如，将根结点替换为一个较小的元素）时，我们需要由上至下恢复堆的顺序</p></li>
<li><p>由下至上的堆有序化（上浮）<em>【在最后位置插入一个元素】</em></p>
<ul>
<li><p>说明
如果堆的有序状态因为某个结点变得比它的父结点更大而被打破，那么我们就需要通过交换它和它的父结点来修复堆。交换后，这个结点比它的两个子结点都大（一个是曾经的父结点，另一个比它更小，因为它是曾经父结点的子结点），但这个结点仍然可能比它现在的父结点更大。我们可以一遍遍地用同样的办法恢复秩序，将这个结点不断向上移动直到我们遇
到了一个更大的父结点。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k/<span class="number">2</span>, k))</span><br><span class="line">	&#123;</span><br><span class="line">		exch(k/<span class="number">2</span>, k);</span><br><span class="line">		k = k/<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>由上至下的堆有序化（下沉）<em>【在根节点插入一个元素】</em></p>
<ul>
<li><p>如果堆的有序状态因为某个结点变得比它的两个子结点或是其中之一更小了而被打破了，那么我们可以通过将它和它的两个子结点中的较大者交换来恢复堆。交换可能会在子结点处继续打破堆的有序状态，因此我们需要不断地用相同的方式将其修复，将结点向下移动直到它的子结点都比它更小或是到达了堆的底部</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">2</span>*k &lt;= N)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>*k;</span><br><span class="line">    <span class="comment">//j&lt;N用来判断j是否存在右兄弟结点，当j==N（即j为树的[从左到右]最末一个结点，那么它没有右兄弟结点）</span></span><br><span class="line">		<span class="keyword">if</span> (j &lt; N &amp;&amp; less(j, j+<span class="number">1</span>)) j++;</span><br><span class="line">    <span class="comment">//当根节点没有小于子节点时，跳出循环</span></span><br><span class="line">		<span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">		exch(k, j);</span><br><span class="line">		k = j;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>对于上面的说明</p>
<ul>
<li>插入元素。我们将新元素加到数组末尾，增加堆的大小并让这个新元素上浮到合适的位
置（如图2.4.5 左半部分所示）。</li>
<li>删除最大元素。我们从数组顶端删去最大的元素并将数组的最后一个元素放到顶端，减
小堆的大小并让这个元素下沉到合适的位置（如图2.4.5 右半部分所示）</li>
<li>上面对优先队列API的实现，能够保证插入元素和删除元素这两个操作的用时，和队列的大小仅成对数关系</li>
</ul></li>
<li><p>图解堆的操作 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231448254.png"
alt="image-20220530231448254" /></p></li>
<li><p>基于堆的优先队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxPQ</span>&lt;Key <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Key&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Key[] pq;</span><br><span class="line">	<span class="comment">// 基于堆的完全二叉树</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 存储于pq[1..N]中，pq[0]没有使用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">MaxPQ</span><span class="params">(<span class="type">int</span> maxN)</span></span><br><span class="line">	&#123;</span><br><span class="line">		pq = (Key[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[maxN+<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">N</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Key v)</span></span><br><span class="line">	&#123;</span><br><span class="line">		pq[++N] = v;</span><br><span class="line">		swim(N);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Key <span class="title function_">delMax</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">Key</span> <span class="variable">max</span> <span class="operator">=</span> pq[<span class="number">1</span>];</span><br><span class="line">		<span class="comment">// 从根结点得到最大元素</span></span><br><span class="line">		exch(<span class="number">1</span>, N--);</span><br><span class="line">		<span class="comment">// 将其和最后一个结点交换</span></span><br><span class="line">		pq[N+<span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 防止对象游离</span></span><br><span class="line">		sink(<span class="number">1</span>);</span><br><span class="line">		<span class="comment">// 恢复堆的有序性</span></span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 辅助方法的实现请见本节前面的代码框</span></span><br><span class="line">	<span class="keyword">private</span> Boolean <span class="title function_">less</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>说明</p>
<ul>
<li><p>优先队列由一个基于堆的完全二叉树表示， 存储于数组pq[1..N]
中，pq[0] 没有使用。在insert() 中，我们将N
加一并把新元素添加在数组最后，然后用swim() 恢复堆的秩序。在delMax()
中，我们从pq[1] 中得到需要返回的元素，然后将pq[N] 移动到pq[1]，将N
减一并用sink() 恢复堆的秩序。同时我们还将不再使用的pq[N+1]
设为null，以便系统回收它所占用的空间。和以前一样（请见1.3
节），这里省略了动态调整数组大小的代码</p></li>
<li><blockquote>
<p>对于一个含有N个元素的基于堆的优先队列，插入元素操作只需不超过（lgN+1）次比较，删除最大元素的操作需要不超过2lgN
次比较。</p>
</blockquote></li>
<li><p>在堆上进行操作 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231507695.png"
alt="image-20220530231507695" /></p></li>
</ul></li>
<li><p>多叉堆
基于用数组表示的完全三叉树构造堆并修改相应的代码并不困难。对于数组中1
至N 的N 个元素，位置k的结点大于等于位于3k-1、3k 和3k+1
的结点，小于等于位于(k+1)/3 的结点</p></li>
<li><p>调整数组大小 添加一个没有参数的构造函数， 在insert()
中添加将数组长度加倍的代码，在delMax()中添加将数组长度减半的代码，就像在1.3
节中的栈那样</p></li>
<li><p>元素的不可变性
优先队列存储了用例创建的对象，但同时假设用例代码不会改变它们</p></li>
<li><p>索引优先队列
注意minIndex()，最小元素的索引不一定是0，这里说的索引不是IndexMinPQ数据结构中的数组的索引。这两个不是一个意思
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231606619.png"
alt="image-20220530231606619" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231629490.png"
alt="image-20220530231629490" /></p>
<ul>
<li>表2.4.6 含有N
个元素的基于堆的索引优先队列所有操作在最坏情况下的成本</li>
</ul></li>
</ul></li>
<li><p>索引优先队列用例
将多个<strong>有序</strong>的输入流归并成一个有序的输出流
★注意，这多个输入流本身是有序的</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Multiway</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(In[] streams)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> streams.length;</span><br><span class="line">		IndexMinPQ&lt;String&gt; pq = <span class="keyword">new</span> <span class="title class_">IndexMinPQ</span>&lt;String&gt;(N);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!streams[i].isEmpty())&#123;</span><br><span class="line">        <span class="comment">//初始化，从文件流中读取一个数，放到优先队列中</span></span><br><span class="line">				pq.insert(i, streams[i].readString());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!pq.isEmpty())</span><br><span class="line">		&#123;</span><br><span class="line">			StdOut.println(pq.min());</span><br><span class="line">      <span class="comment">//从优先队列中取最小的数出来</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pq.delMin();</span><br><span class="line">			<span class="keyword">if</span> (!streams[i].isEmpty())</span><br><span class="line">        <span class="comment">//取出数的那个位置，再从文件流读一个值放进去</span></span><br><span class="line">				pq.insert(i, streams[i].readString());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> args.length;</span><br><span class="line">		In[] streams = <span class="keyword">new</span> <span class="title class_">In</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">				streams[i] = <span class="keyword">new</span> <span class="title class_">In</span>(args[i]);</span><br><span class="line">    <span class="comment">//三个文件地址</span></span><br><span class="line">		merge(streams);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li></li>
</ul>
<h2 id="堆排序">堆排序</h2>
<ul>
<li><p>我们可以把任意优先队列变成一种排序方法，将所有元素插入一个查找最小元素的优先队列，然后再重复调用删除最小元素的操作来将他们按顺序删去</p>
<ul>
<li>用堆来实现经典而优雅的排序算法--堆排序</li>
<li>为了与前面代码保持一致，使用面向最大元素的优先队列并重复删除最大元素；为了排序需要，直接使用swim()和sink()，且将需要排序的数组本身作为堆，省去额外空间</li>
</ul></li>
<li><p>堆的构造</p>
<ul>
<li><p>可以从左到右，就像连续向优先队列中插入元素一样</p></li>
<li><p>从右到左，用sink()函数构造子堆</p></li>
<li><p>★
重要前提：每个子堆都符合优先序列的根节点大于其他两个子节点（也就是我们可以跳过大小为1的子堆）
所以只要对每个子堆的根节点，进行sink()函数操作就可以构造出优先队列结构的数组了</p></li>
<li><p>进行排序
主要是将数组的位置1和N-1进行交换，然后在1位置进行sink()操作
不断循环，即可让整个数组有序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sort(Comparable[] a)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> N/<span class="number">2</span>; k &gt;= <span class="number">1</span>;</span><br><span class="line">	k--)</span><br><span class="line">	sink(a, k, N);</span><br><span class="line">	<span class="keyword">while</span> (N &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		exch(a, <span class="number">1</span>, N--);</span><br><span class="line">		sink(a, <span class="number">1</span>, N);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，这里的sink()函数被修改过，主要是指定了要sink的最后一个位置【sink()
被修改过，以a[] 和N 作为参数】</li>
</ul></li>
</ul></li>
<li><p>堆排序的轨迹（每次下沉后的数组内容） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231711247.png"
alt="image-20220530231711247" /></p></li>
<li><p>堆排序：堆的构造（左）和下沉排序（右） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220530231727650.png"
alt="image-20220530231727650" /></p></li>
<li><p>堆排序的主要工作都是在第二阶段完成的。这里我们将堆中的最大元素删除，然后放入堆缩小
后数组中空出的位置</p>
<blockquote>
<p>将N个元素排序，堆排序只需少于（2N x lgN+2N
）次比较（以及一般次数的交换）</p>
<p>。2N 项来自于堆的构造（ 见命题R）。2NlgN
项来自于每次下沉操作最大可能需要2lgN次比较（见命题P 与命题Q）</p>
</blockquote></li>
<li><p>我们将该实现和优先队列的API
独立开来是为了突出这个排序算法的简洁性（sort() 方法只需8 行代码，sink()
函数8 行），并使其可以嵌入其他代码之中。</p></li>
<li><p>小结</p>
<ul>
<li>在最坏的情况下它也能保证使用～ 2NlgN
次比较和恒定的额外空间。当空间十分紧张的时候（例如在嵌入式系统或低成本的移动设备中）它很流行，因为它只用几行就能实现（甚至机器码也是）较好的性能。但现代系统的许多应用很少使用它，因为它无法利用缓存。数组元素很少和相邻的其他元素进行比较，因此缓存未命中的次数要远远高于大多数比较都在相邻元素间进行的算法，如快速排序、归并排序，甚至是希尔排序</li>
<li>用堆实现的优先队列在现代应用程序中越来越重要，因为它能在插入操作和删除最大元素操作混合的动态场景中保证对数级别的运行时间</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.5</title>
    <url>/2022/05/29/study/algorithm/algorithhms_4th/2.5/</url>
    <content><![CDATA[<ul>
<li>排序如此有用的原因是，在有序的数组中查找一个元素，要比在一个无序的数组中查找简单得多</li>
<li>通用排序算法是最重要的</li>
<li>算法思想虽然简单，但是适用领域广泛</li>
</ul>
<h2 id="将各种数据排序">将各种数据排序</h2>
<ul>
<li><p>Java的约定使得我们能够利用Java的回调机制将任意实现Comparable接口的数据类型排序</p>
<ul>
<li>我们的代码直接能够将String、Integer、Double 和一些其他例如File 和URL
类型的数组排序，因为它们都实现了Comparable 接口</li>
</ul></li>
<li><p>交易事务
商业数据的处理，设想一家互联网商业公司为每笔交易记录都保存了所有的相关信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Transaction that)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.when.compareTo(that.when);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>指针排序
我们使用的方法在经典教材中被称为<strong>指针排序</strong>，因为我们只处理元素的引用而不移动数据本身</p></li>
<li><p>不可变的键
用不可变的数据类型作为键，比如String、Integer、Double和File等</p></li>
<li><p>廉价的交换</p>
<ul>
<li><p>使用引用的另一个好处是不必移动整个元素对于几乎任意大小的元素，使用引用使得在一般情况下交换的成本和比较的成本几乎相同（代价是需要额外的空间存储这些引用）</p></li>
<li><p>研究将数字排序的算法性能的一种方法就是观察其所需的比较和交换总数，因为这里隐式地假设了比较和交换的成本是相同的</p></li>
</ul></li>
<li><p>多种排序方法</p>
<ul>
<li>根据情况将一组对象按照不同的方式排序。Java 的Comparator
接口允许我们在一个类之中实现多种排序方法</li>
</ul></li>
<li><p>多键数组</p>
<ul>
<li><p>一个元素的多种属性都可能被用作排序的键</p>
<ul>
<li>我们可以定义多种比较器，要将Transaction
对象的数组按照时间排序可以调用： Insertion.sort(a, new
Transaction.WhenOrder()) 或者这样来按照金额排序： Insertion.sort(a, new
Transaction.HowMuchOrder())</li>
</ul></li>
<li><p>使用Comparator的插入排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Object[] a, Comparator c)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; less(Comparator, a[j], a[j-<span class="number">1</span>]); j--)</span><br><span class="line">	exch(a, j, j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title function_">less</span><span class="params">(Comparator c, Object v, Object w)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> c.compare(v, w) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Object[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">	a[i] = a[j];</span><br><span class="line">	a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用比较器实现优先队列</p>
<ul>
<li>扩展优先队列
<ul>
<li>导入 java.util.Comparator；</li>
<li>为 MaxPQ 添加一个实例变量 comparator
以及一个构造函数，该构造函数接受一个比较器 作为参数并用它将comparator
初始化；</li>
<li>在 less()中检查 comparator属性是否为
null（如果不是的话就用它进行比较）。</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用了Comparator的插入排序</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String who;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Date when;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> amount;</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WhoOrder</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Transaction&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Transaction v, Transaction w)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> v.who.compareTo(w.who);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WhenOrder</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Transaction&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Transaction v, Transaction w)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> v.when.compareTo(w.when);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HowMuchOrder</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Transaction&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Transaction v, Transaction w)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (v.amount &lt; w.amount) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (v.amount &gt; w.amount) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>稳定性</p>
<ul>
<li>如果一个排序算法能够保留数组中重复元素的相对位置则可以被称为是稳定的</li>
<li>例如，考虑一个需要处理大量含有地理位置和时间戳的事件的互联网商业应用程
序。首先，我们在事件发生时将它们挨个存储在一个数组中，这样在数组中它们已经是按照时间顺序排好了的。现在假设在进一步处理前将按照地理位置切分。一种简单的方法是将数组按照位置排序。如果排序算法不是稳定的，排序后的每个城市的交易可能不会再是按照时间顺序排列的了</li>
<li>我们学习过的一部分算法是稳定的（插入排序和归并排序），但很多不是（选择排序、希尔排序、快速排序和堆排序）</li>
<li>有很多办法能够将任意排序算法变成稳定的（请见练习2.5.18），但一般只有在稳定性是必要的情况下稳定的排序算法才有优势</li>
<li>图示 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220531233431323.png"
alt="image-20220531233431323" /></li>
</ul></li>
</ul></li>
</ul>
<h2 id="我应该使用哪种排序算法">我应该使用哪种排序算法</h2>
<ul>
<li>各种排序算法的性能特点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220531233605671.png"
alt="image-20220531233605671" />
<ul>
<li>快速排序是最快的通用排序算法</li>
</ul></li>
<li>将原始类型数据排序
一些性能优先的应用的重点可能是将数字排序，因此更合理的做法是跳过引用直接将原始数据
类型的数据排序</li>
<li>Java系统库的排序算法 java.util.Arrays.sort() <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220531233910990.png"
alt="image-20220531233910990" /></li>
<li>Java
的系统程序员选择对原始数据类型使用（三向切分的）快速排序，对引用类型使用归并排
序。这些选择实际上也暗示着用速度和空间（对于原始数据类型）来换取稳定性（对于引用类型），</li>
<li>如果考虑稳定性，则选择Merge.sort() 归并排序</li>
</ul>
<h2 id="问题的归约">问题的归约</h2>
<ul>
<li><p>归约指的是为解决某个问题而发明的算法正好可以用来解决另一种问题</p></li>
<li><p>使用解决问题B 的方法来解决问题A 时，你都是在将A
归约为B。</p></li>
<li><p>如果先将数据排序，那么解决剩下的问题就剩下线性级别的时间，归约后的运行时间的增长数量级由平方级别降低到了线性级别</p>
<ul>
<li><p>找出重复元素的个数（先排序，后遍历）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Quick.sort(a);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 假设a.length &gt; 0.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++)</span><br><span class="line">  <span class="keyword">if</span> (a[i].compareTo(a[i-<span class="number">1</span>]) != <span class="number">0</span>)</span><br><span class="line">    count++;</span><br></pre></td></tr></table></figure></li>
<li><p>Kendall tau距离</p></li>
<li><p>优先队列</p>
<blockquote>
<p>在2.4
节中我们已经见过两个被归约为优先队列操作的问题的例子。一个是2.4.2.1
节中的TopM，它能够找到输入流中M 个最大的元素；另一个是2.4.4.7
节中的Multiway，它能够将M
个输入流归并为一个有序的输出流。这两个问题都可以轻易用长度为M
的优先队列解决</p>
</blockquote></li>
<li><p>中位数与顺序统计 (与快速排序有关)</p></li>
<li></li>
</ul></li>
</ul>
<h2 id="排序应用一览">排序应用一览</h2>
<ul>
<li>商业计算：按照名字或者数字排序的账号、按照日期或者金额排序的交易、按照
邮编或者地址排序的邮件、按照名称或者日期排序的文件等，
处理这些数据必然需要排序算</li>
<li>信息搜索：有序的顺序可以使用经典的<strong>二分查找法</strong></li>
<li><strong>运筹学</strong>指的是研究数学模型并将其应用于问题解决和决策的领域</li>
<li>事件驱动模拟、数值计算、组合搜索</li>
<li>基于排序算法的算法
<ul>
<li>Prim算法和Dijkstra算法</li>
<li>Kruskal算法</li>
<li>霍夫曼压缩</li>
<li>字符串处理</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 3.1.1-3.1.7</title>
    <url>/2022/05/31/study/algorithm/algorithhms_4th/3.1.1-3.1.7/</url>
    <content><![CDATA[<h1 id="查找">查找</h1>
<ul>
<li>经典查找算法</li>
<li>用<strong>符号表</strong>这个词来描述抽象的表格，将信息（值）存储在其中，然后按照指定的<strong>键</strong>来获取这些信息</li>
<li>符号表也被称为<strong>字典</strong>
<ul>
<li>在英语字典里，键就是单词，值就是单词对应的定义、发音和词源</li>
<li>符号表有时又叫索引</li>
<li>在一本书的索引中，键就是术语，而值就是书中该术语出现的所有页码</li>
</ul></li>
<li>下面学习三种经典的数据类型：二叉查找树、红黑树和散列表</li>
</ul>
<h2 id="符号表">符号表</h2>
<ul>
<li><p>符号表最主要的目的是将<strong>键</strong>和<strong>值</strong>联系起来</p></li>
<li><p>用例能够将一个键值对插入符号表并希望在之后能够从符号表的所有键值对中按照键直接找到相对应的值</p></li>
<li><blockquote>
<p>符号表是一种存储键值对的数据结构，支持两种操作：<strong>插入</strong>(put)，即将一组新的键值对存入表中；查找(get)，即根据给定的键得到相应的值</p>
</blockquote></li>
<li><p>典型的符号表应用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220605224818125.png"
alt="image-20220605224818125" /></p></li>
</ul>
<h3 id="api">API</h3>
<ul>
<li><p>符号表是一种<strong>典型的数据类型</strong>
：代表着一组定义清晰的值及相应的操作。使用应用程序编程接口（API）来精确地定义这些操作
一种简单的泛型符号表API ST(Symbol Table) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220605225252370.png"
alt="image-20220605225252370" /></p></li>
<li><p>泛型
对于符号表，我们通过明确地指定查找时键和值的类型来区分它们的不同角色【key和value】</p></li>
<li><p>重复的键</p>
<ul>
<li>这里假设每个键只对应着一个值（表中不允许重复值）</li>
<li>当用例代码向表中存入的键值对和表中已有的键（及关联的值）冲突时，新的值会替代旧的值</li>
<li>上述定义了关联数组的抽象形式，可以将符号表想象成数组，键即索引，值即数组中的值</li>
<li>在一个关联数组中，键可以是任意类型，但我们仍然可以用它来快速访问数组的值</li>
<li>非Java使用st[key]来替代st.get(key)，用st[key]=val来替代st.put(key,val)</li>
</ul></li>
<li><p>键不能为空</p></li>
<li><p>值不能为空（因为规定当键不存在时get()返回空）
当值为空表示删除</p></li>
<li><p>删除操作</p>
<ul>
<li><p>延时删除，先将键对应的值置空，之后在某个时刻删除所有值为空的键</p></li>
<li><p>即时删除，立即从表中删除指定的键 put实现的开头：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(val == <span class="literal">null</span>)&#123;</span><br><span class="line"> delete(key);</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>便捷方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220606233111252.png"
alt="image-20220606233111252" /></p></li>
<li><p>迭代 在API第一行加上implements Iterable<Key>
，所有实现都包含iterator()方法来实现hasNext()和next()方法的迭代器；这里采用另一种方式：定义keys返回一个Iterable<Key>对象以方便便利所有的键，且允许遍历一部分</p></li>
<li><p>键的等价性
自定义的键需要重写equals()方法；且最好使用不可变数据类型作为键</p></li>
</ul></li>
</ul>
<h3 id="有序符号表">有序符号表</h3>
<ul>
<li>一种有序的泛型符号表的API <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220607214708600.png"
alt="image-20220607214708600" /></li>
<li>最大值和最小值、向下取整和向上取整、排名和选择</li>
<li>对于0到size()-1的所有i都有i==rank(select(i))，且所有的键都满足key ==
select(rank(key))</li>
<li>范围查找</li>
<li>例外情况
当一个方法需要返回一个键但表中没有合适的键可以返回时，我们约定抛出一个异常</li>
<li>有序符号表中冗余有序性方法的默认实现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220607215850406.png"
alt="image-20220607215850406" /></li>
<li>所有Comparable类型中compareTo()方法和equals()方法的一致性</li>
<li>★★成本模型
在学习符号表的实现时，我们会统计<strong>比较的次数</strong>（等价性测试或是键的相互比较），在内循环<strong>不进行比较（极少）</strong>的情况下，我们会统计数组的访问次数</li>
</ul>
<h3 id="用例举例">用例举例</h3>
<p>如何使用</p>
<ul>
<li><p>行为测试用例 简单的符号表测试用例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220607220233749.png"
alt="image-20220607220233749" /></p>
<ul>
<li>测试用例的键、值和输出 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220607220249349.png"
alt="image-20220607220249349" /></li>
</ul></li>
<li><p>性能测试用例 查找频率最高的单词</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrequencyCounter</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">minlen</span> <span class="operator">=</span> Integer.parseint(args[<span class="number">0</span>]);</span><br><span class="line">		<span class="comment">// 最小键长</span></span><br><span class="line">		ST&lt;String, Integer&gt; st = <span class="keyword">new</span> <span class="title class_">ST</span>&lt;String, Integer&gt;();</span><br><span class="line">		<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 构造符号表并统计频率</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">			<span class="keyword">if</span> (word.length() &lt; minlen) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">// 忽略较短的单词</span></span><br><span class="line">			<span class="keyword">if</span> (!st.contains(word)) st.put(word, <span class="number">1</span>); <span class="keyword">else</span> st.put(word, st.get(word) + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 找出出现频率最高的单词</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">max</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">		st.put(max, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (String word : st.keys())</span><br><span class="line">		<span class="keyword">if</span> (st.get(word) &gt; st.get(max))</span><br><span class="line">		max = word;</span><br><span class="line">		StdOut.println(max + <span class="string">&quot; &quot;</span> + st.get(max));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个单词都会被作为键进行搜索，因此处理性能和输入文本的单词总量必然有关；其次，输入的每个单词都会被存入符号表（输入中不重复单词的总数也就是所有键都被插入以后符号表的大小），因此输入流中不同的单词的总数也是相关的</p></li>
</ul>
<h3 id="无序链表中的顺序查找">无序链表中的顺序查找</h3>
<ul>
<li><p>顺序查找的定义：使用链表，每个结点存储一个键值对，get()实现即为遍历链表，用equals()方法比较需被查找的键和每个节点中的键。如果匹配成功我们就返回相应的值，否则返回null。put()实现也是遍历链表，用equals()方法比较需被查找的键和每个节点中的键。如果匹配成功我们就用第二个参数指定更新和该键相关联的值，否则我们就用给定的键值对创建一个新的结点并将其插入到链表的开头。这种方法称为<strong>顺序查找</strong></p></li>
<li><p><strong>命中</strong>表示一次成功的查找，<strong>未命中</strong>表示一次失败的查找</p></li>
<li><p>使用基于链表的符号表的索引用例的轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220607223552831.png"
alt="image-20220607223552831" /></p></li>
<li><p>顺序查找（基于无序链表）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SequentialSearchST</span>&lt;Key,Value&gt;</span><br><span class="line">  &#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">//链表首结点</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">		<span class="comment">//链表结点的定义</span></span><br><span class="line">		Key key;</span><br><span class="line">		Value val;</span><br><span class="line">		Node next;</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Key key, Value val, Node next)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">this</span>.key = key;</span><br><span class="line">			<span class="built_in">this</span>.val = val;</span><br><span class="line">			<span class="built_in">this</span>.next = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 查找给定的键，返回相关联的值</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">		<span class="keyword">if</span> (key.equals(x.key))</span><br><span class="line">		<span class="keyword">return</span> x.val;</span><br><span class="line">		<span class="comment">// 命中</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 未名中</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value val)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 查找给定的键，找到则更新其值，否则在表中新建结点</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">		<span class="keyword">if</span> (key.equals(x.key))</span><br><span class="line">		&#123;</span><br><span class="line">			x.val = val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 命中，更新</span></span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>(key, val, first);</span><br><span class="line">		<span class="comment">// 未命中，新建结点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><blockquote>
<p>在含有N
对键值的基于（无序）链表的符号表中，未命中的查找和插入操作都需要N
次比较。命中的查找在最坏情况下需要N 次比较。特别地，向一个空表中插入N
个不同的键需要∼ N2/2 次比较</p>
</blockquote></li>
</ul></li>
<li><blockquote>
<p>查找一个已经存在的键并不需要线性级别的时间。一种度量方法是查找表中的每个键，并将总
时间除以N</p>
</blockquote></li>
</ul>
<h3 id="有序数组中的二分查找">有序数组中的二分查找</h3>
<p>有序符号表API：它使用的数据结构是一对平行的数组，一个存储键一个存储值</p>
<p>//rank()：小于k的键的数量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchST</span>&lt;Key <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Key&gt;, Value&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Key[] keys;</span><br><span class="line">	<span class="keyword">private</span> Value[] vals;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BinarySearchST</span><span class="params">(<span class="type">int</span> capacity)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 调整数组大小的标准代码请见算法1.1</span></span><br><span class="line">		keys = (Key[]) <span class="keyword">new</span> <span class="title class_">Comparable</span>[capacity];</span><br><span class="line">		vals = (Value[]) <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rank(key);</span><br><span class="line">        <span class="comment">//注意，这里i不一定就是刚好是key所在的索引，他表示比key的值小的个数</span></span><br><span class="line">		<span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) <span class="keyword">return</span> vals[i]; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rank</span><span class="params">(Key key)</span></span><br><span class="line">	<span class="comment">// 请见算法3.2（续1）</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value val)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 查找键，找到则更新值，否则创建新的元素</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rank(key);</span><br><span class="line">		<span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			vals[i] = val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//根据成本模型，这里不统计</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> N; j &gt; i; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			keys[j] = keys[j-<span class="number">1</span>];</span><br><span class="line">			vals[j] = vals[j-<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		keys[i] = key;</span><br><span class="line">		vals[i] = val;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Key key)</span></span><br><span class="line">	<span class="comment">// 该方法的实现请见练习3.1.16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>二分查找
我们使用有序数组存储键的原因是，经典二分查找法能够根据数组的索引大大减少每次查找所需的比较次数</p></li>
<li><p>递归的二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rank</span><span class="params">(Key key, <span class="type">int</span> lo, <span class="type">int</span> hi)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (hi &lt; lo) <span class="keyword">return</span> lo;</span><br><span class="line">	<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(keys[mid]);</span><br><span class="line">	<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> rank(key, lo, mid-<span class="number">1</span>); <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">return</span> rank(key, mid+<span class="number">1</span>, hi); <span class="keyword">else</span> <span class="keyword">return</span> mid; <span class="comment">//如果存在，返回key所在位置的索引（也就是key之前的元素的个数 ）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>rank()的性质：如果表中存在该键，rank()应该返回该键的位置，也就是表中小于它的键的数量；如果表中不存在该键，ran()还是应该返回表中小于它的键的数量</p></li>
<li><p>好好想想算法3.2（续1）中非递归的rank()
为什么能够做到这些（你可以证明两个版本的等价性，或者直接证明非递归版本中的循环在结束时lo
的值正好等于表中小于被查找的键的键的数量），所有程序员都能从这些思考中有所收获。（提示：<strong>lo
的初始值为0，且永远不会变小</strong>） 假设有下面这么一组数(key
value)</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">0</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">4</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">9</td>
</tr>
</tbody>
</table>
<p>我要查找6，那么轨迹为： low=0，high=4，mid=2 low=2+1=3，high=4，mid=3
low=3+1=4，high=4，mid=4
low=4，high=4-1，此时high&lt;low，返回low【也就是说找到了最接近于要查找的数的下标】</p>
<ul>
<li>带图轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220612215031691.png"
alt="image-20220612215031691" /></li>
</ul></li>
<li><p>基于二分查找的有序符号表的其他操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Key <span class="title function_">min</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> keys[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">max</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> keys[N-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">select</span><span class="params">(<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> keys[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于等于key的最小整数</span></span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">ceiling</span><span class="params">(Key key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rank(key);</span><br><span class="line">	<span class="keyword">return</span> keys[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小于等于key的最大整数</span></span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">floor</span><span class="params">(Key key)</span></span><br><span class="line"><span class="comment">// 请见练习3.1.17</span></span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">delete</span><span class="params">(Key key)</span></span><br><span class="line"><span class="comment">// 请见练习3.1.16</span></span><br><span class="line"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title function_">keys</span><span class="params">(Key lo, Key hi)</span></span><br><span class="line">&#123;</span><br><span class="line">	Queue&lt;Key&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;Key&gt;();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> rank(lo); i &lt; rank(hi); i++)</span><br><span class="line">	q.enqueue(keys[i]);</span><br><span class="line">	<span class="keyword">if</span> (contains(hi))</span><br><span class="line">	q.enqueue(keys[rank(hi)]);</span><br><span class="line">	<span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="对二分查找的分析">对二分查找的分析</h3>
<blockquote>
<p>在N
个键的有序数组中进行二分查找最多需要（lgN+1）次比较（无论是否成功）</p>
</blockquote>
<blockquote>
<p>向大小为N 的有序数组中插入一个新的元素在最坏情况下需要访问∼ 2N
次数组，因此向一个空符号表中插入N 个元素在最坏情况下需要访问∼ N2
次数组</p>
</blockquote>
<h3 id="预览">预览</h3>
<ul>
<li>简单的符号表实现的成本总结</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220612220530385.png"
alt="image-20220612220530385" />
<figcaption aria-hidden="true">image-20220612220530385</figcaption>
</figure>
<ul>
<li>符号表的各种实现的优缺点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220612220639930.png"
alt="image-20220612220639930" /></li>
<li>我们有若干种高效的符号表实现，它们能够并且已经被应用于无数程序之中了</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 3.2.1</title>
    <url>/2022/06/12/study/algorithm/algorithhms_4th/3.2.1/</url>
    <content><![CDATA[<h2 id="二叉查找树">二叉查找树</h2>
<ul>
<li><p>使用每个结点含有两个链接（链表中每个结点只含有一个链接）的二叉查找树来高效地实现符号表</p></li>
<li><p>该数据结构由结点组成，结点包含的链接可以为空(null)或者指向其他结点</p></li>
<li><blockquote>
<p>一棵二叉查找树（BST）是一棵二叉树，其中每个结点都含有一个Comparable
的键（以
及相关联的值）且每个结点的键都大于其左子树中的任意结点的键而小于右子树的任意结点的键。</p>
</blockquote></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220614212331828.png"
alt="image-20220614212331828" />
<figcaption aria-hidden="true">image-20220614212331828</figcaption>
</figure></li>
</ul>
<h3 id="基本实现">基本实现</h3>
<ul>
<li><p>数据表示</p>
<ul>
<li>每个结点都含有一个键、一个值、一条左链接、一条右链接和一个结点计数器
左链接指向一棵由小于该结点的所有键组成的二叉查找树，右链接指向一棵由大于该节点的所有键组成的二叉查找树，变量N给出了以该结点为根的子树的结点总数</li>
<li>对于任意节点总是成立 size(x)=size(x.left)+size(x.right)+1</li>
</ul></li>
<li><p>多棵二叉查找树表示同一组有序的键来实现构建和使用二叉查找树的高校算法
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220614214218638.png"
alt="image-20220614214218638" /></p></li>
<li><p>查找</p>
<ul>
<li>在符号表中查找一个键可能得到两种结果：如果含有该键的结点存在表中，我们的查找就命中了，然后返回值；否则查找未命中（返回null)</li>
<li>递归：如果树是空的，则查找未命中；如果被查找的键和根节点的键相等，查找命中，否则在适当的子树中查找：如果被查找的键较小就选择左子树，否则选择右子树</li>
<li>下面的get()方法，第一个参数是一个结点（子树根节点），第二个参数是被查找的键，代码会保证只有该结点所表示的子树才会含有和被查找的键相等的结点</li>
<li>从根结点开始，在每个结点中查找的进程都会递归地在它的一个子结点上展开，因此一次查找也就定义了树的一条路径。对于命中的查找，路径在含有被查找的键的结点处结束。对于未命中的查找，路径的终点是一个空链接
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220614215917733.png"
alt="image-20220614215917733" /></li>
</ul></li>
<li><p>基于二叉查找树的符号表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BST</span>&lt;Key <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Key&gt;, Value&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node root;</span><br><span class="line">	<span class="comment">// 二叉查找树的根结点</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">private</span> Key key;</span><br><span class="line">		<span class="comment">// 键</span></span><br><span class="line">		<span class="keyword">private</span> Value val;</span><br><span class="line">		<span class="comment">// 值</span></span><br><span class="line">		<span class="keyword">private</span> Node left, right;</span><br><span class="line">		<span class="comment">// 指向子树的链接</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">		<span class="comment">// 以该结点为根的子树中的结点总数</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Key key, Value val, <span class="type">int</span> N)</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">this</span>.key = key;</span><br><span class="line">			<span class="built_in">this</span>.val = val;</span><br><span class="line">			<span class="built_in">this</span>.N = N;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> size(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(Node x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> x.N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span></span><br><span class="line">	<span class="comment">// 请见算法3.3（续1）</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value val)</span></span><br><span class="line">	<span class="comment">// 请见算法3.3（续1）</span></span><br><span class="line">	<span class="comment">// max()、min()、floor()、ceiling()方法请见算法3.3（续2）</span></span><br><span class="line">	<span class="comment">// select()、rank()方法请见算法3.3（续3）</span></span><br><span class="line">	<span class="comment">// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）</span></span><br><span class="line">	<span class="comment">// keys()方法请见算法3.3（续5）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每个Node 对象都是一棵含有N
个结点的子树的根结点，它的左链接指向一棵由小于该结点的所有键组成的二叉查找树，右链接指向一棵由大于该结点的所有键组成的二叉查找
树。root 变量指向二叉查找树的根结点Node
对象（这棵树包含了符号表中的所有键值对）</li>
</ul></li>
<li><p>二叉查找树的查找和排序方法的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Value <span class="title function_">get</span><span class="params">(Key key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> get(root, key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Value <span class="title function_">get</span><span class="params">(Node x, Key key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 在以x为根结点的子树中查找并返回key所对应的值；</span></span><br><span class="line">	<span class="comment">// 如果找不到则返回null</span></span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">	<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key); <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key); <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Key key, Value val)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 查找key，找到则更新它的值，否则为它创建一个新的结点</span></span><br><span class="line">	root = put(root, key, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">put</span><span class="params">(Node x, Key key, Value val)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 如果key存在于以x为根结点的子树中则更新它的值；</span></span><br><span class="line">	<span class="comment">// 否则将以key和val为键值对的新结点插入到该子树中</span></span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, val, <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">    <span class="comment">//注意，这里进行比较后，确认新节点应该放在当前节点的左边还是右边</span></span><br><span class="line">	<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val); <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val); <span class="keyword">else</span> x.val = val;</span><br><span class="line">	x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>插入
put()方法的实现逻辑和递归查找很相似：如果树是空的，就返回一个含有该键值对的新节点；如果被查找的键小于根节点的键，我们就会继续在左子树中插入该键，否则在右子树中插入该键</p></li>
<li><p>递归</p>
<ul>
<li>可以将递归调用前的代码想象成沿着树向下走：它会将给定的键和每个结点的键相比较并根据结果向左或者向右移动到下一个结点。然后可以将递归调用后的代码想象成沿着树向上爬</li>
<li>在一棵简单的二叉查找树中，唯一的新链接就是在最底层指向新结点的链接，重置更上层的链接可以通过比较语句来避免。同样，我们只需要将路径上每个结点中的计数器的值加1，但我们使用了更加通用的代码，使之等于结点的所有子结点的计数器之和加1</li>
</ul></li>
<li><p>使用二叉查找树的标准索引用例的轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220614221847861.png"
alt="image-20220614221847861" /></p></li>
</ul>
<h3 id="分析">分析</h3>
<blockquote>
<p>在由N 个随机键构造的二叉查找树中，查找命中平均所需的比较次数为∼
2lnN</p>
</blockquote>
<blockquote>
<p>在由N
个随机键构造的二叉查找树中插入操作和查找未命中平均所需的比较次数为∼
2lnN（约1.39lgN）</p>
</blockquote>
<h3 id="有序性相关的方法与删除操作">有序性相关的方法与删除操作</h3>
<h4 id="最大键和最小键">最大键和最小键</h4>
<p>如果根结点的左链接为空，那么一棵二叉查找树中最小的键就是根结点；如果左链接非空，那么
树中的最小键就是左子树中的最小键</p>
<h4 id="向上取整和向下取整">向上取整和向下取整</h4>
<blockquote>
<p>如果给定的键key 小于二叉查找树的根结点的键，那么小于等于key
的最大键floor(key) 一定 在根结点的左子树中；如果给定的键key
大于二叉查找树的根结点，那么只有当根结点右子树中存在小于等于key
的结点时，小于等于key
的最大键才会出现在右子树中，否则根结点就是小于等于key的最大键</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220623224733617.png"
alt="image-20220623224733617" />
<figcaption aria-hidden="true">image-20220623224733617</figcaption>
</figure>
<h4 id="选择操作">选择操作</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Key <span class="title function_">min</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> min(root).key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">min</span><span class="params">(Node x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (x.left == <span class="literal">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> min(x.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Key <span class="title function_">floor</span><span class="params">(Key key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> floor(root, key);</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">return</span> x.key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">floor</span><span class="params">(Node x, Key key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> key.compareTo(x.key);</span><br><span class="line">	<span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);</span><br><span class="line">	<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> floor(x.right, key);</span><br><span class="line">	<span class="keyword">if</span> (t != <span class="literal">null</span>) <span class="keyword">return</span> t; <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="排名">排名</h4>
<h4 id="删除最大键和删除最小键">删除最大键和删除最小键</h4>
<h4 id="删除操作">删除操作</h4>
<h4 id="范围查找">范围查找</h4>
<h4 id="性能分析">性能分析</h4>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>01-flowable基础</title>
    <url>/2022/05/14/study/flowable/boge_blbl/01-base/</url>
    <content><![CDATA[<h2 id="flowable介绍">Flowable介绍</h2>
<ul>
<li><p>flowable的历史</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514094153736.png"
alt="image-20220514094153736" />
<figcaption aria-hidden="true">image-20220514094153736</figcaption>
</figure></li>
<li><p>flowable是BPNM的一个基于java的软件实现，不仅包括BPMN，还有DMN决策表和CMMNCase管理引擎，并且有自己的用户管理、微服务API等</p></li>
</ul>
<h2 id="获取engine对象">获取Engine对象</h2>
<ul>
<li><p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.flowable/flowable-engine --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置并获取ProcessEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngineConfiguration configuration=</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>();</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        configuration.setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        configuration.setJdbcUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        configuration.setJdbcPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//nullCatalogMeansCurrent=true 设置为只查当前连接的schema库</span></span><br><span class="line">        configuration.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable-learn?&quot;</span> +</span><br><span class="line">                <span class="string">&quot;useUnicode=true&amp;characterEncoding=utf-8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;allowMultiQueries=true&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class="line">        <span class="comment">//如果数据库中表结构不存在则新建</span></span><br><span class="line">        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">        <span class="comment">//构建ProcessEngine</span></span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="日志和表结构介绍">日志和表结构介绍</h2>
<ul>
<li><p>添加slf4j依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-reload4j --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-reload4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加log配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">DEBUG, CA</span></span><br><span class="line"><span class="attr">log4j.appender.CA</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout.ConversionPattern</span> = <span class="string">%d&#123;hh:mm:ss,SSS&#125; &#123;%t&#125; %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此时再次启动就会看到一堆日志</li>
</ul></li>
<li><p>表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514102041305.png"
alt="image-20220514102041305" /></p></li>
</ul>
<h2 id="流程定义文件解析">流程定义文件解析</h2>
<ul>
<li><p>先通过流程绘制器绘制流程</p></li>
<li><p>案例（官网，请假流程） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514102241579.png"
alt="image-20220514102241579" /></p>
<ul>
<li><p>设计好流程之后，流程数据保存在holiday-request.bpmn20.xml文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--id process key--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holidayRequest&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sequenceFlow表示的是线条箭头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;同意或者拒绝请假&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--条件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--条件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--发送一个邮件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Send out rejection email&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="部署流程-代码实现">部署流程-代码实现</h2>
<ul>
<li><p>使用@bofore 处理测试中繁琐的配置操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    configuration =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>();</span><br><span class="line">    <span class="comment">//配置</span></span><br><span class="line">    configuration.setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    configuration.setJdbcUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    configuration.setJdbcPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//nullCatalogMeansCurrent=true 设置为只查当前连接的schema库</span></span><br><span class="line">    configuration.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable-learn?&quot;</span> +</span><br><span class="line">            <span class="string">&quot;useUnicode=true&amp;characterEncoding=utf-8&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;allowMultiQueries=true&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class="line">    <span class="comment">//如果数据库中表结构不存在则新建</span></span><br><span class="line">    configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ProcessEngine提供的几个服务 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514103435244.png"
alt="image-20220514103435244" /></p></li>
<li><p>流程部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy(); </span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId()); </span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514104106140.png"
alt="image-20220514104106140" /></p></li>
</ul>
<h2 id="查询和删除操作">查询和删除操作</h2>
<ul>
<li><p>查询已经部署的流程定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程定义及部署的查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeployQuery</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    RepositoryService repositoryService=processEngine.getRepositoryService();</span><br><span class="line">    <span class="comment">//流程部署查询</span></span><br><span class="line">    <span class="comment">//这里只部署了一个流程定义</span></span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeploymentQuery()</span><br><span class="line">            .deploymentId(<span class="string">&quot;1&quot;</span>).singleResult();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署时的名称:&quot;</span>+deployment.getName());</span><br><span class="line">    <span class="comment">//流程定义查询器</span></span><br><span class="line">    <span class="type">ProcessDefinitionQuery</span> <span class="variable">processDefinitionQuery</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery();</span><br><span class="line">    <span class="comment">//查询到的流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> processDefinitionQuery.deploymentId(<span class="string">&quot;1&quot;</span>).singleResult();</span><br><span class="line">  </span><br><span class="line">    System.out.println(<span class="string">&quot;部署id:&quot;</span>+processDefinition.getDeploymentId());</span><br><span class="line">    System.out.println(<span class="string">&quot;定义名:&quot;</span>+processDefinition.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;描述:&quot;</span>+processDefinition.getDescription());</span><br><span class="line">    System.out.println(<span class="string">&quot;定义id:&quot;</span>+processDefinition.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>删除流程定义</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDeploy</span><span class="params">()</span>&#123;</span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">        RepositoryService repositoryService=processEngine.</span><br><span class="line">                getRepositoryService();</span><br><span class="line">        <span class="comment">//注意：第一个参数时部署id</span></span><br><span class="line">        <span class="comment">//后面那个参数表示级联删除，如果流程启动了会同时删除任务。</span></span><br><span class="line">        repositoryService.deleteDeployment(<span class="string">&quot;2501&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下面三个表的数据都会被删除 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514105321078.png"
alt="image-20220514105321078" /></p></li>
</ul></li>
</ul>
<h2 id="启动流程实例">启动流程实例</h2>
<ul>
<li><p>由于刚才将部署删除了，所以这里再运行testDeploy()重新部署上</p></li>
<li><p>这里通过流程定义key（xml中的id）启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>,<span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(<span class="string">&quot;holidayRequest&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span>+holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span>+holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span>+holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>三个表 act_ru_variable act_ru_task arc_ru_execution</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514111442166.png"
alt="image-20220514111442166" />
<figcaption aria-hidden="true">image-20220514111442166</figcaption>
</figure></li>
</ul>
<h2 id="查询任务">查询任务</h2>
<ul>
<li><p>这里先指定一下每个任务的候选人，修改xml文件中userTask的节点属性</p>
<ul>
<li><p>修改前先删除一下之前部署的流程图(还是上面的代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDeploy</span><span class="params">()</span>&#123;</span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">        RepositoryService repositoryService=processEngine.</span><br><span class="line">                getRepositoryService();</span><br><span class="line">        <span class="comment">//注意：第一个参数时部署id</span></span><br><span class="line">        <span class="comment">//后面那个参数表示级联删除，true表示如果流程启动了会同时删除任务。</span></span><br><span class="line">        repositoryService.deleteDeployment(<span class="string">&quot;2501&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里用false参数测试，会提示失败，运行中的流程不允许删除。将第二个参数改为true即可级联删除<br />
删除后可以发现下面几个表数据全部清空了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112055940.png"
alt="image-20220514112055940" /></p></li>
<li><p>然后修改xml定义文件并运行testDeploy()重新部署</p>
<ul>
<li><p>定义修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;同意或者拒绝请假&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里增加了assignee属性值--&gt;</span>        </span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>运行流程 testRunProcess()</p>
<ul>
<li>运行后节点会跳到给zhangsan的那个任务，查看数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112605263.png"
alt="image-20220514112605263" /></li>
<li>流程变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112655133.png"
alt="image-20220514112655133" /></li>
</ul></li>
<li><p>查询任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryTask</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="comment">//通过流程定义查询任务</span></span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().processDefinitionKey(<span class="string">&quot;holidayRequest&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span> (Task task:list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务对应的流程定义id&quot;</span>+task.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名&quot;</span>+task.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务处理人&quot;</span>+task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务描述&quot;</span>+task.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务id&quot;</span>+task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="处理任务">处理任务</h2>
<ul>
<li><p>流程图定义的分析
任务A处理后，根据处理结果（这里是拒绝），会走向任务D，然后任务D是一个Service，且通过java的委托对象，自动实现操作</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514115334229.png"
alt="image-20220514115334229" />
<figcaption aria-hidden="true">image-20220514115334229</figcaption>
</figure></li>
<li><p>到了D那个节点，这里指定了一个自定义的java类处理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514115513100.png"
alt="image-20220514115513100" /></p>
<ul>
<li><p>代码配置，注意类名和xml中的一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.JavaDelegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendRejectionMail</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个flowable中的触发器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegateExecution</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution delegateExecution)</span> &#123;</span><br><span class="line">        <span class="comment">//触发执行的逻辑 按照我们在流程中的定义给被拒绝的员工发送通知邮件</span></span><br><span class="line">        System.out.println(<span class="string">&quot;不好意思，你的请假申请被拒绝了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>任务的完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleteTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">        <span class="comment">//查找出张三在这个流程定义中的任务</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().processDefinitionKey(<span class="string">&quot;holidayRequest&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">//创建流程变量</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;approved&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//完成任务</span></span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台 <img
src="C:\Users\ly\AppData\Roaming\Typora\typora-user-images\image-20220514120154300.png"
alt="image-20220514120154300" /></li>
<li>数据库 下面几个表的数据都被清空了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514120320988.png"
alt="image-20220514120320988" /></li>
</ul></li>
</ul>
<h2 id="历史任务的完成">历史任务的完成</h2>
<ul>
<li><p>Flowable流程引擎可以自动存储所有流程实例的审计数据或历史数据</p></li>
<li><p>先查看一下刚才用的流程定义的id <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514120756973.png"
alt="image-20220514120756973" /></p></li>
<li><p>历史信息查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHistory</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    HistoryService historyService=processEngine.getHistoryService();</span><br><span class="line">    List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class="line">            .processDefinitionId(<span class="string">&quot;holidayRequest:1:7503&quot;</span>)</span><br><span class="line">            .finished() <span class="comment">//查询已经完成的</span></span><br><span class="line">            .orderByHistoricActivityInstanceEndTime().asc() <span class="comment">//指定排序字段和升降序</span></span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(HistoricActivityInstance history:list)&#123;</span><br><span class="line">        <span class="comment">//注意,和视频不一样的地方，history表还记录了流程箭头流向的那个节点</span></span><br><span class="line">        <span class="comment">//_flow_</span></span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;活动名--&quot;</span>+history.getActivityName()+</span><br><span class="line">                        <span class="string">&quot;处理人--&quot;</span>+history.getAssignee()+</span><br><span class="line">                        <span class="string">&quot;活动id--&quot;</span>+history.getActivityId()+</span><br><span class="line">                <span class="string">&quot;处理时长--&quot;</span>+history.getDurationInMillis()+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不一样的地方，在旧版本时没有的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121509725.png"
alt="image-20220514121509725" /></p></li>
</ul>
<h2 id="流程设计器">流程设计器</h2>
<ul>
<li><p>有eclipse流程设计器，和flowable流程设计器</p></li>
<li><p>使用eclipse的设计，会生成一个bar文件，代码稍微有点不同
接收一个ZipInputStream</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514122035548.png"
alt="image-20220514122035548" />
<figcaption aria-hidden="true">image-20220514122035548</figcaption>
</figure></li>
</ul>
<h2 id="flowableui">FlowableUI</h2>
<ul>
<li>使用flowable官方提供的包，里面有一个war，直接用命令 java -jar
xx.war启动即可</li>
<li>这个应用分成四个模块 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121818052.png"
alt="image-20220514121818052" /></li>
<li>流程图的绘制及用户分配 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121906621.png"
alt="image-20220514121906621" /></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-02-flowable进阶_1</title>
    <url>/2022/05/14/study/flowable/boge_blbl/02-advance_1/</url>
    <content><![CDATA[<h2 id="表结构">表结构</h2>
<ul>
<li><p>尽量通过API动数据</p></li>
<li><p>ACT_RE：repository，包含流程定义和流程静态资源</p></li>
<li><p>ACT_RU:
runtime，包含流程实例、任务、变量等，流程结束会删除</p></li>
<li><p>ACT_HI:
history，包含历史数据，比如历史流程实例、变量、任务等</p></li>
<li><p>ACT_GE: general，通用数据</p></li>
<li><p>ACT_ID:
identity，组织机构。包含标识的信息，如用户、用户组等等</p></li>
<li><p>具体的</p>
<ul>
<li><p>流程历史记录</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220723828.png"
alt="image-20220514220723828" />
<figcaption aria-hidden="true">image-20220514220723828</figcaption>
</figure></li>
<li><p>流程定义表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220740732.png"
alt="image-20220514220740732" /></p></li>
<li><p>运行实例表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220808753.png"
alt="image-20220514220808753" /></p></li>
<li><p>用户用户组表</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220856033.png"
alt="image-20220514220856033" />
<figcaption aria-hidden="true">image-20220514220856033</figcaption>
</figure></li>
</ul></li>
<li><p>源码中的体现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220933558.png"
alt="image-20220514220933558" /></p></li>
</ul>
<h2 id="默认的配置文件加载">默认的配置文件加载</h2>
<ul>
<li><p>对于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">defaultProcessEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">getDefaultProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getProcessEngine(NAME_DEFAULT); <span class="comment">//NAME_DEFAULT = &quot;default&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">getProcessEngine</span><span class="params">(String processEngineName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> processEngines.get(processEngineName);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;部分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes all process engines that can be found on the classpath for resources &lt;code&gt;flowable.cfg.xml&lt;/code&gt; (plain Flowable style configuration) and for resources</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;flowable-context.xml&lt;/code&gt; (Spring style configuration).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (processEngines == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Create new map to store process-engines if current map is null</span></span><br><span class="line">                processEngines = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectUtil.getClassLoader();</span><br><span class="line">            Enumeration&lt;URL&gt; resources = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources = classLoader.getResources(<span class="string">&quot;flowable.cfg.xml&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableIllegalArgumentException</span>(<span class="string">&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot;</span> + System.getProperty(<span class="string">&quot;java.class.path&quot;</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//后面还有，每帖出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>注意这行<code>classLoader.getResources("flowable.cfg.xml");</code>
需要在resources根目录下放这么一个文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/flow1?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>allowMultiQueries=true<span class="symbol">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--异步执行器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建数据库flow1，运行测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processEngine2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">defaultProcessEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    System.out.println(defaultProcessEngine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时数据库已经有表</p></li>
</ul>
<h2 id="加载自定义名称的配置文件">加载自定义名称的配置文件</h2>
<ul>
<li><p>把刚才的数据库清空，将flowable的配置文件放到目录custom/lycfg.xml中
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514225700704.png"
alt="image-20220514225700704" /></p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processEngine03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;custom/lycfg.xml&quot;</span>);</span><br><span class="line">        System.out.println(configuration);</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">        System.out.println(processEngine);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="processengine源码查看">ProcessEngine源码查看</h2>
<ul>
<li><p>源码追溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.buildProcessEngine()</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="type">ProcessEngineImpl</span> <span class="variable">processEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessEngineImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----&gt;ProcessEngineImpl.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessEngineImpl</span> <span class="keyword">implements</span> <span class="title class_">ProcessEngine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(ProcessEngineImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> RepositoryService repositoryService;</span><br><span class="line">    <span class="keyword">protected</span> RuntimeService runtimeService;</span><br><span class="line">    <span class="keyword">protected</span> HistoryService historicDataService;</span><br><span class="line">    <span class="keyword">protected</span> IdentityService identityService;</span><br><span class="line">    <span class="keyword">protected</span> TaskService taskService;</span><br><span class="line">    <span class="keyword">protected</span> FormService formService;</span><br><span class="line">    <span class="keyword">protected</span> ManagementService managementService;</span><br><span class="line">    <span class="keyword">protected</span> DynamicBpmnService dynamicBpmnService;</span><br><span class="line">    <span class="keyword">protected</span> ProcessMigrationService processInstanceMigrationService;</span><br><span class="line">    <span class="keyword">protected</span> AsyncExecutor asyncExecutor;</span><br><span class="line">    <span class="keyword">protected</span> AsyncExecutor asyncHistoryExecutor;</span><br><span class="line">    <span class="keyword">protected</span> CommandExecutor commandExecutor;</span><br><span class="line">    <span class="keyword">protected</span> Map&lt;Class&lt;?&gt;, SessionFactory&gt; sessionFactories;</span><br><span class="line">    <span class="keyword">protected</span> TransactionContextFactory transactionContextFactory;</span><br><span class="line">    <span class="keyword">protected</span> ProcessEngineConfigurationImpl processEngineConfiguration;</span><br><span class="line">    <span class="comment">//这里通过ProcessEngineConfigurationImpl获取各种对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessEngineImpl</span><span class="params">(ProcessEngineConfigurationImpl processEngineConfiguration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processEngineConfiguration = processEngineConfiguration;</span><br><span class="line">        <span class="built_in">this</span>.name = processEngineConfiguration.getEngineName();</span><br><span class="line">        <span class="built_in">this</span>.repositoryService = processEngineConfiguration.getRepositoryService();</span><br><span class="line">        <span class="built_in">this</span>.runtimeService = processEngineConfiguration.getRuntimeService();</span><br><span class="line">        <span class="built_in">this</span>.historicDataService = processEngineConfiguration.getHistoryService();</span><br><span class="line">        <span class="built_in">this</span>.identityService = processEngineConfiguration.getIdentityService();</span><br><span class="line">        <span class="built_in">this</span>.taskService = processEngineConfiguration.getTaskService();</span><br><span class="line">        <span class="built_in">this</span>.formService = processEngineConfiguration.getFormService();</span><br><span class="line">        <span class="built_in">this</span>.managementService = processEngineConfiguration.getManagementService();</span><br><span class="line">        <span class="built_in">this</span>.dynamicBpmnService = processEngineConfiguration.getDynamicBpmnService();</span><br><span class="line">        <span class="built_in">this</span>.processInstanceMigrationService = processEngineConfiguration.getProcessMigrationService();</span><br><span class="line">        <span class="built_in">this</span>.asyncExecutor = processEngineConfiguration.getAsyncExecutor();</span><br><span class="line">        <span class="built_in">this</span>.asyncHistoryExecutor = processEngineConfiguration.getAsyncHistoryExecutor();</span><br><span class="line">        <span class="built_in">this</span>.commandExecutor = processEngineConfiguration.getCommandExecutor();</span><br><span class="line">        <span class="built_in">this</span>.sessionFactories = processEngineConfiguration.getSessionFactories();</span><br><span class="line">        <span class="built_in">this</span>.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----&gt;ProcessEngine.class 获取各个service服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProcessEngine</span> <span class="keyword">extends</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** the version of the flowable library */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">VERSION</span> <span class="operator">=</span> FlowableVersions.CURRENT_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts the execuctors (async and async history), if they are configured to be auto-activated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startExecutors</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    RepositoryService <span class="title function_">getRepositoryService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    RuntimeService <span class="title function_">getRuntimeService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    FormService <span class="title function_">getFormService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    TaskService <span class="title function_">getTaskService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    HistoryService <span class="title function_">getHistoryService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IdentityService <span class="title function_">getIdentityService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ManagementService <span class="title function_">getManagementService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    DynamicBpmnService <span class="title function_">getDynamicBpmnService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ProcessMigrationService <span class="title function_">getProcessMigrationService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ProcessEngineConfiguration <span class="title function_">getProcessEngineConfiguration</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2
id="processengineconfiguration中的init方法">ProcessEngineConfiguration中的init方法</h2>
<ul>
<li><p>源码追溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.buildProcessEngine()</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="type">ProcessEngineImpl</span> <span class="variable">processEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessEngineImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.init();</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        initEngineConfigurations();</span><br><span class="line">        initConfigurators();</span><br><span class="line">        configuratorsBeforeInit();</span><br><span class="line">        initClock();</span><br><span class="line">        initObjectMapper();</span><br><span class="line">        initProcessDiagramGenerator();</span><br><span class="line">        initCommandContextFactory();</span><br><span class="line">        initTransactionContextFactory();</span><br><span class="line">        initCommandExecutors();</span><br><span class="line">        initIdGenerator();</span><br><span class="line">        initHistoryLevel();</span><br><span class="line">        initFunctionDelegates();</span><br><span class="line">        initAstFunctionCreators();</span><br><span class="line">        initDelegateInterceptor();</span><br><span class="line">        initBeans();</span><br><span class="line">        initExpressionManager();</span><br><span class="line">        initAgendaFactory();</span><br><span class="line">        <span class="comment">//关系型数据库</span></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">            initDataSource();<span class="comment">//下面拿这个举例1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            initNonRelationalDataSource();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase || usingSchemaMgmt) &#123;</span><br><span class="line">            initSchemaManager();</span><br><span class="line">            initSchemaManagementCommand();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        configureVariableServiceConfiguration();</span><br><span class="line">        configureJobServiceConfiguration();</span><br><span class="line"></span><br><span class="line">        initHelpers();</span><br><span class="line">        initVariableTypes();</span><br><span class="line">        initFormEngines();</span><br><span class="line">        initFormTypes();</span><br><span class="line">        initScriptingEngines();</span><br><span class="line">        initBusinessCalendarManager();</span><br><span class="line">        initServices();</span><br><span class="line">        initWsdlImporterFactory();</span><br><span class="line">        initBehaviorFactory();</span><br><span class="line">        initListenerFactory();</span><br><span class="line">        initBpmnParser();</span><br><span class="line">        initProcessDefinitionCache();</span><br><span class="line">        initProcessDefinitionInfoCache();</span><br><span class="line">        initAppResourceCache();</span><br><span class="line">        initKnowledgeBaseCache();</span><br><span class="line">        initJobHandlers();</span><br><span class="line">        initHistoryJobHandlers();</span><br><span class="line"></span><br><span class="line">        initTransactionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">            initSqlSessionFactory();<span class="comment">//下面拿这个举例2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initSessionFactories();</span><br><span class="line">        <span class="comment">//相关表结构操作</span></span><br><span class="line">        initDataManagers(); <span class="comment">//下面拿这个举例2</span></span><br><span class="line">        initEntityManagers();</span><br><span class="line">        initCandidateManager();</span><br><span class="line">        initVariableAggregator();</span><br><span class="line">        initHistoryManager();</span><br><span class="line">        initChangeTenantIdManager();</span><br><span class="line">        initDynamicStateManager();</span><br><span class="line">        initProcessInstanceMigrationValidationManager();</span><br><span class="line">        initIdentityLinkInterceptor();</span><br><span class="line">        initJpa();</span><br><span class="line">        initDeployers();</span><br><span class="line">        initEventHandlers();</span><br><span class="line">        initFailedJobCommandFactory();</span><br><span class="line">        initEventDispatcher();</span><br><span class="line">        initProcessValidator();</span><br><span class="line">        initFormFieldHandler();</span><br><span class="line">        initDatabaseEventLogging();</span><br><span class="line">        initFlowable5CompatibilityHandler();</span><br><span class="line">        initVariableServiceConfiguration(); <span class="comment">//流程变量</span></span><br><span class="line">        initIdentityLinkServiceConfiguration();</span><br><span class="line">        initEntityLinkServiceConfiguration();</span><br><span class="line">        initEventSubscriptionServiceConfiguration();</span><br><span class="line">        initTaskServiceConfiguration();</span><br><span class="line">        initJobServiceConfiguration();</span><br><span class="line">        initBatchServiceConfiguration();</span><br><span class="line">        initAsyncExecutor();</span><br><span class="line">        initAsyncHistoryExecutor();</span><br><span class="line"></span><br><span class="line">        configuratorsAfterInit();</span><br><span class="line">        afterInitTaskServiceConfiguration();</span><br><span class="line">        afterInitEventRegistryEventBusConsumer();</span><br><span class="line">        </span><br><span class="line">        initHistoryCleaningManager();</span><br><span class="line">        initLocalizationManagers();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//---&gt;AbstractEngineConfiguration </span></span><br><span class="line"><span class="comment">//----&gt;AbstractEngineConfiguration.initDataSrouce()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title function_">getDefaultDatabaseTypeMappings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">databaseTypeMappings</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;H2&quot;</span>, DATABASE_TYPE_H2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;HSQL Database Engine&quot;</span>, DATABASE_TYPE_HSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;MySQL&quot;</span>, DATABASE_TYPE_MYSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;MariaDB&quot;</span>, DATABASE_TYPE_MYSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;Oracle&quot;</span>, DATABASE_TYPE_ORACLE);</span><br><span class="line">        databaseTypeMappings.setProperty(PRODUCT_NAME_POSTGRES, DATABASE_TYPE_POSTGRES);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;Microsoft SQL Server&quot;</span>, DATABASE_TYPE_MSSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(DATABASE_TYPE_DB2, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/NT&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/NT64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDP&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUX390&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXX8664&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXZ64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXPPC64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXPPC64LE&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/400 SQL&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/6000&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDB iSeries&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/AIX64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/HPUX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/HP64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/SUN&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/SUN64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/PTX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/2&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDB AS400&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(PRODUCT_NAME_CRDB, DATABASE_TYPE_COCKROACHDB);</span><br><span class="line">        <span class="keyword">return</span> databaseTypeMappings;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//initDataSource();</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSourceJndiName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dataSource = (DataSource) <span class="keyword">new</span> <span class="title class_">InitialContext</span>().lookup(dataSourceJndiName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;couldn&#x27;t lookup datasource from &quot;</span> + dataSourceJndiName + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jdbcUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((jdbcDriver == <span class="literal">null</span>) || (jdbcUsername == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;DataSource or JDBC properties have to be specified in a process engine configuration&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.debug(<span class="string">&quot;initializing datasource to db: &#123;&#125;&quot;</span>, jdbcUrl);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Configuring Datasource with following properties (omitted password for security)&quot;</span>);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource driver : &#123;&#125;&quot;</span>, jdbcDriver);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource url : &#123;&#125;&quot;</span>, jdbcUrl);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource user name : &#123;&#125;&quot;</span>, jdbcUsername);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">PooledDataSource</span> <span class="variable">pooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(<span class="built_in">this</span>.getClass().getClassLoader(), jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxActiveConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumActiveConnections(jdbcMaxActiveConnections);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxIdleConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumIdleConnections(jdbcMaxIdleConnections);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxCheckoutTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumCheckoutTime(jdbcMaxCheckoutTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxWaitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolTimeToWait(jdbcMaxWaitTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcPingEnabled) &#123;</span><br><span class="line">                    pooledDataSource.setPoolPingEnabled(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (jdbcPingQuery != <span class="literal">null</span>) &#123;</span><br><span class="line">                        pooledDataSource.setPoolPingQuery(jdbcPingQuery);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pooledDataSource.setPoolPingConnectionsNotUsedFor(jdbcPingConnectionNotUsedFor);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcDefaultTransactionIsolationLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setDefaultTransactionIsolationLevel(jdbcDefaultTransactionIsolationLevel);</span><br><span class="line">                &#125;</span><br><span class="line">                dataSource = pooledDataSource;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (databaseType == <span class="literal">null</span>) &#123;</span><br><span class="line">            initDatabaseType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//initSqlSessionFactory();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取MyBatis配置文件信息</span></span><br><span class="line">                inputStream = getMyBatisXmlConfigurationStream();</span><br><span class="line"></span><br><span class="line">                <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>(<span class="string">&quot;default&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">                <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                properties.put(<span class="string">&quot;prefix&quot;</span>, databaseTablePrefix);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">wildcardEscapeClause</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> ((databaseWildcardEscapeCharacter != <span class="literal">null</span>) &amp;&amp; (databaseWildcardEscapeCharacter.length() != <span class="number">0</span>)) &#123;</span><br><span class="line">                    wildcardEscapeClause = <span class="string">&quot; escape &#x27;&quot;</span> + databaseWildcardEscapeCharacter + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                properties.put(<span class="string">&quot;wildcardEscapeClause&quot;</span>, wildcardEscapeClause);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// set default properties</span></span><br><span class="line">                properties.put(<span class="string">&quot;limitBefore&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitAfter&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitBetween&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitBeforeNativeQuery&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitAfterNativeQuery&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;blobType&quot;</span>, <span class="string">&quot;BLOB&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;boolValue&quot;</span>, <span class="string">&quot;TRUE&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (databaseType != <span class="literal">null</span>) &#123;</span><br><span class="line">                    properties.load(getResourceAsStream(pathToEngineDbProperties()));</span><br><span class="line">                &#125;</span><br><span class="line">              </span><br><span class="line">                <span class="comment">//Mybatis相关的配置</span></span><br><span class="line">                <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> initMybatisConfiguration(environment, reader, properties);</span><br><span class="line">                sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(configuration);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;Error while building ibatis SqlSessionFactory: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtil.closeSilently(inputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//ProcessEngineConfigurationImpl.getMyBatisXmlConfigurationStream();</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getMyBatisXmlConfigurationStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResourceAsStream(mybatisMappingFile);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//代码往上翻</span></span><br><span class="line">  <span class="comment">//构造器中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessEngineConfigurationImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        mybatisMappingFile = DEFAULT_MYBATIS_MAPPING_FILE;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//其中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_MYBATIS_MAPPING_FILE</span> <span class="operator">=</span> <span class="string">&quot;org/flowable/db/mapping/mappings.xml&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>查找映射文件 mappings.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;ByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;VariableByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;JobByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;BatchByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;ByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;VariableByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;JobByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;BatchByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/ChangeTenantBpmn.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Attachment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Comment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/DeadLetterJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Deployment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Execution.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ActivityInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricActivityInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricDetail.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricProcessInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/variable/service/db/mapping/entity/HistoricVariableInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/HistoricTaskInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/HistoricTaskLogEntry.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/identitylink/service/db/mapping/entity/HistoricIdentityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/entitylink/service/db/mapping/entity/HistoricEntityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/HistoryJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/identitylink/service/db/mapping/entity/IdentityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/entitylink/service/db/mapping/entity/EntityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/Job.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Model.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ProcessDefinition.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ProcessDefinitionInfo.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/Property.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/ByteArray.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/common.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Resource.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/SuspendedJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/ExternalWorkerJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/TableData.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/Task.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/TimerJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/variable/service/db/mapping/entity/VariableInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/eventsubscription/service/db/mapping/entity/EventSubscription.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/EventLogEntry.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/batch/service/db/mapping/entity/Batch.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/batch/service/db/mapping/entity/BatchPart.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ProcessEnginConfigurationImpl.init()中的代码</span></span><br><span class="line">initDataManagers(); <span class="comment">//下面拿这个举例3</span></span><br><span class="line"><span class="comment">//-&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDataManagers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.initDataManagers();</span><br><span class="line">        <span class="keyword">if</span> (attachmentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            attachmentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisAttachmentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (commentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            commentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisCommentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deploymentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//下面拿这个查看</span></span><br><span class="line">            deploymentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisDeploymentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (eventLogEntryDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            eventLogEntryDataManager = <span class="keyword">new</span> <span class="title class_">MybatisEventLogEntryDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (executionDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            executionDataManager = <span class="keyword">new</span> <span class="title class_">MybatisExecutionDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dbSqlSessionFactory != <span class="literal">null</span> &amp;&amp; executionDataManager <span class="keyword">instanceof</span> AbstractDataManager) &#123;</span><br><span class="line">            dbSqlSessionFactory.addLogicalEntityClassMapping(<span class="string">&quot;execution&quot;</span>, ((AbstractDataManager) executionDataManager).getManagedEntityClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicActivityInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicActivityInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricActivityInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (activityInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            activityInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisActivityInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicDetailDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicDetailDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricDetailDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicProcessInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicProcessInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricProcessInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modelDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            modelDataManager = <span class="keyword">new</span> <span class="title class_">MybatisModelDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (processDefinitionDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            processDefinitionDataManager = <span class="keyword">new</span> <span class="title class_">MybatisProcessDefinitionDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (processDefinitionInfoDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            processDefinitionInfoDataManager = <span class="keyword">new</span> <span class="title class_">MybatisProcessDefinitionInfoDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resourceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            resourceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisResourceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;MybatisDeploymentDataManager，这个类相当于mybatis中的mapper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDeploymentDataManager</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessDataManager</span>&lt;DeploymentEntity&gt; <span class="keyword">implements</span> <span class="title class_">DeploymentDataManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MybatisDeploymentDataManager</span><span class="params">(ProcessEngineConfigurationImpl processEngineConfiguration)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(processEngineConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">DeploymentEntity</span>&gt; getManagedEntityClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> DeploymentEntityImpl.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DeploymentEntity <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DeploymentEntityImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">findDeploymentCountByQueryCriteria</span><span class="params">(DeploymentQueryImpl deploymentQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) getDbSqlSession().selectOne(<span class="string">&quot;selectDeploymentCountByQueryCriteria&quot;</span>, deploymentQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Deployment&gt; <span class="title function_">findDeploymentsByQueryCriteria</span><span class="params">(DeploymentQueryImpl deploymentQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;selectDeploymentsByQueryCriteria&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().selectList(query, deploymentQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getDeploymentResourceNames</span><span class="params">(String deploymentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().getSqlSession().selectList(<span class="string">&quot;selectResourceNamesByDeploymentId&quot;</span>, deploymentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Deployment&gt; <span class="title function_">findDeploymentsByNativeQuery</span><span class="params">(Map&lt;String, Object&gt; parameterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().selectListWithRawParameter(<span class="string">&quot;selectDeploymentByNativeQuery&quot;</span>, parameterMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">findDeploymentCountByNativeQuery</span><span class="params">(Map&lt;String, Object&gt; parameterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) getDbSqlSession().selectOne(<span class="string">&quot;selectDeploymentCountByNativeQuery&quot;</span>, parameterMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="processengine各种方法对比">ProcessEngine各种方法对比</h2>
<ul>
<li>ProcessEngines.getDefaultProcessEngine();的方式</li>
</ul>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line"> * Initializes all process engines that can be found on the classpath for resources &lt;code&gt;flowable.cfg.xml&lt;/code&gt; (plain Flowable style configuration) and for resources</span><br><span class="line"> * &lt;code&gt;flowable-context.xml&lt;/code&gt; (Spring style configuration).</span><br><span class="line"> */</span><br><span class="line">public static synchronized void init() &#123;</span><br><span class="line">    if (!isInitialized()) &#123;</span><br><span class="line">        if (processEngines == null) &#123;</span><br><span class="line">            // Create new map to store process-engines if current map is null</span><br><span class="line">            processEngines = new HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader classLoader = ReflectUtil.getClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            resources = classLoader.getResources(&quot;flowable.cfg.xml&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new FlowableIllegalArgumentException(&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot; + System.getProperty(&quot;java.class.path&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Remove duplicated configuration URL&#x27;s using set. Some</span><br><span class="line">        // classloaders may return identical URL&#x27;s twice, causing duplicate</span><br><span class="line">        // startups</span><br><span class="line">        Set&lt;URL&gt; configUrls = new HashSet&lt;&gt;();</span><br><span class="line">        while (resources.hasMoreElements()) &#123;</span><br><span class="line">            configUrls.add(resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        for (URL resource : configUrls) &#123;</span><br><span class="line">            LOGGER.info(&quot;Initializing process engine using configuration &#x27;&#123;&#125;&#x27;&quot;, resource);</span><br><span class="line">            initProcessEngineFromResource(resource); //注意这个</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            resources = classLoader.getResources(&quot;flowable-context.xml&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new FlowableIllegalArgumentException(&quot;problem retrieving flowable-context.xml resources on the classpath: &quot; + System.getProperty(&quot;java.class.path&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">        while (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line">            LOGGER.info(&quot;Initializing process engine using Spring configuration &#x27;&#123;&#125;&#x27;&quot;, resource);</span><br><span class="line">            initProcessEngineFromSpringResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setInitialized(true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        LOGGER.info(&quot;Process engines already initialized&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以通过Spring配置文件的方式</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initProcessEngineFromResource(resource); <span class="comment">//注意这个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> EngineInfo <span class="title function_">initProcessEngineFromResource</span><span class="params">(URL resourceUrl)</span> &#123;</span><br><span class="line">        <span class="type">EngineInfo</span> <span class="variable">processEngineInfo</span> <span class="operator">=</span> processEngineInfosByResourceUrl.get(resourceUrl.toString());</span><br><span class="line">        <span class="comment">// if there is an existing process engine info</span></span><br><span class="line">        <span class="keyword">if</span> (processEngineInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// remove that process engine from the member fields</span></span><br><span class="line">            processEngineInfos.remove(processEngineInfo);</span><br><span class="line">            <span class="keyword">if</span> (processEngineInfo.getException() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">processEngineName</span> <span class="operator">=</span> processEngineInfo.getName();</span><br><span class="line">                processEngines.remove(processEngineName);</span><br><span class="line">                processEngineInfosByName.remove(processEngineName);</span><br><span class="line">            &#125;</span><br><span class="line">            processEngineInfosByResourceUrl.remove(processEngineInfo.getResourceUrl());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceUrlString</span> <span class="operator">=</span> resourceUrl.toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;initializing process engine for resource &#123;&#125;&quot;</span>, resourceUrl);</span><br><span class="line">            <span class="comment">//注意这个</span></span><br><span class="line">            <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> buildProcessEngine(resourceUrl);</span><br><span class="line">            <span class="type">String</span> <span class="variable">processEngineName</span> <span class="operator">=</span> processEngine.getName();</span><br><span class="line">            LOGGER.info(<span class="string">&quot;initialised process engine &#123;&#125;&quot;</span>, processEngineName);</span><br><span class="line">            processEngineInfo = <span class="keyword">new</span> <span class="title class_">EngineInfo</span>(processEngineName, resourceUrlString, <span class="literal">null</span>);</span><br><span class="line">            processEngines.put(processEngineName, processEngine);</span><br><span class="line">            processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Exception while initializing process engine: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            processEngineInfo = <span class="keyword">new</span> <span class="title class_">EngineInfo</span>(<span class="literal">null</span>, resourceUrlString, ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125;</span><br><span class="line">        processEngineInfosByResourceUrl.put(resourceUrlString, processEngineInfo);</span><br><span class="line">        processEngineInfos.add(processEngineInfo);</span><br><span class="line">        <span class="keyword">return</span> processEngineInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buildProcessEngine(resourceUrl);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">(URL resource)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = resource.openStream();</span><br><span class="line">            <span class="type">ProcessEngineConfiguration</span> <span class="variable">processEngineConfiguration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">            <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableIllegalArgumentException</span>(<span class="string">&quot;couldn&#x27;t open resource stream: &quot;</span> + e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtil.closeSilently(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-02-flowable进阶_2</title>
    <url>/2022/05/14/study/flowable/boge_blbl/02-advance_2/</url>
    <content><![CDATA[<h2 id="service服务接口">Service服务接口</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514233449225.png"
alt="image-20220514233449225" />
<figcaption aria-hidden="true">image-20220514233449225</figcaption>
</figure>
<ul>
<li>各个Service类 RepositoryService 资源管理类，流程定义、部署、文件
RuntimeService 流程运行管理类，运行过程中（执行） TaskService 任务管理类
HistoryService 历史管理类 ManagerService 引擎管理类</li>
</ul>
<h2 id="flowable图标">Flowable图标</h2>
<p>BPMN2.0定义的一些图标</p>
<ul>
<li>时间</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514233856102.png"
alt="image-20220514233856102" />
<figcaption aria-hidden="true">image-20220514233856102</figcaption>
</figure>
<ul>
<li>活动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514234008644.png"
alt="image-20220514234008644" /></li>
<li>网关 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514234018899.png"
alt="image-20220514234018899" /></li>
<li></li>
</ul>
<h2 id="流程部署深入解析">流程部署深入解析</h2>
<ul>
<li><p>使用eclipse打包部署(没有eclipse环境，所以这里只有截图)
将两个流程，打包为bar文件，然后放到项目resources文件夹中 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235033874.png"
alt="image-20220514235033874" /><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235051403.png"
alt="image-20220514235051403" /></p></li>
<li><p>这里是为了测试一次部署多个流程（定义，图） 代码如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235134845.png"
alt="image-20220514235134845" /></p></li>
<li><p>部署完成后查看表结构</p>
<ul>
<li><p>act_re_procdef</p>
<p>部署id一样 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235300573.png"
alt="image-20220514235300573" /></p></li>
<li><p>act_re_deployment <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235344635.png"
alt="image-20220514235344635" /></p></li>
<li><p>结论：部署和定义是1对多的关系</p></li>
</ul></li>
<li><p>每次部署所涉及到的资源文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235449058.png"
alt="image-20220514235449058" /></p></li>
<li><p>涉及到的三张表</p>
<ul>
<li><p>act_ge_bytearray <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235610659.png"
alt="image-20220514235610659" /></p></li>
<li><p>act_re_procdef category--&gt;xml中的namespace
name--&gt;定义时起的名称 key_---&gt;xml中定义的id
resource_name---&gt;xml文件名称 dgrm_resource_name--&gt;生成图片名称
suspension_state --&gt; 是否被挂起</p>
<p>tenant_id -- &gt;谁部署的流程</p></li>
<li><p>act_re_deployment name_部署名</p></li>
</ul></li>
<li><p>代码 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000033931.png"
alt="image-20220515000033931" /></p></li>
<li><p>主要源码 DeployCmd.class <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000146834.png"
alt="image-20220515000146834" /></p></li>
<li><p>DeploymentEntityManagerImpl.java <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000232452.png"
alt="image-20220515000232452" /></p></li>
<li><p>insert()方法 插入并执行资源 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000308747.png"
alt="image-20220515000308747" /> 点开里面的insert方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000330794.png"
alt="image-20220515000330794" /></p></li>
<li><p>AbstractDataManger.insert() <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000405402.png"
alt="image-20220515000405402" /></p></li>
<li><p>回到test类，deploy()方法最终就是完成了表结构的数据的操作（通过Mybatis）</p></li>
</ul>
<h2 id="流程的挂起和激活">流程的挂起和激活</h2>
<ul>
<li><p>xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span><br><span class="line">             xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">             xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="line">             xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span><br><span class="line">             xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span><br><span class="line">             xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span><br><span class="line">             xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span><br><span class="line">             typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="line">             expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span><br><span class="line">             targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--id process key--&gt;</span><br><span class="line">    &lt;process id=<span class="string">&quot;holidayRequest&quot;</span> name=<span class="string">&quot;请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;startEvent id=<span class="string">&quot;startEvent&quot;</span>/&gt;</span><br><span class="line">        &lt;!--sequenceFlow表示的是线条箭头--&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;startEvent&quot;</span> targetRef=<span class="string">&quot;approveTask&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;userTask id=<span class="string">&quot;approveTask&quot;</span> name=<span class="string">&quot;同意或者拒绝请假&quot;</span> flowable:assignee=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;approveTask&quot;</span> targetRef=<span class="string">&quot;decision&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--网关--&gt;</span><br><span class="line">        &lt;exclusiveGateway id=<span class="string">&quot;decision&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;decision&quot;</span> targetRef=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span><br><span class="line">            &lt;!--条件--&gt;</span><br><span class="line">            &lt;conditionExpression xsi:type=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            &lt;/conditionExpression&gt;</span><br><span class="line">        &lt;/sequenceFlow&gt;</span><br><span class="line">        &lt;sequenceFlow  sourceRef=<span class="string">&quot;decision&quot;</span> targetRef=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span><br><span class="line">            &lt;!--条件--&gt;</span><br><span class="line">            &lt;conditionExpression xsi:type=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            &lt;/conditionExpression&gt;</span><br><span class="line">        &lt;/sequenceFlow&gt;</span><br><span class="line"></span><br><span class="line">        &lt;serviceTask id=<span class="string">&quot;externalSystemCall&quot;</span> name=<span class="string">&quot;Enter holidays in external system&quot;</span></span><br><span class="line">                     flowable:class=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;externalSystemCall&quot;</span> targetRef=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;userTask id=<span class="string">&quot;holidayApprovedTask&quot;</span> name=<span class="string">&quot;Holiday approved&quot;</span> flowable:assignee=<span class="string">&quot;lisi&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;holidayApprovedTask&quot;</span> targetRef=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--发送一个邮件--&gt;</span><br><span class="line">        &lt;serviceTask id=<span class="string">&quot;sendRejectionMail&quot;</span> name=<span class="string">&quot;Send out rejection email&quot;</span></span><br><span class="line">                     flowable:class=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;sendRejectionMail&quot;</span> targetRef=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/process&gt;</span><br><span class="line"></span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure>
<p>部署的流程默认情况下为激活，如果不想使用该定义的流程，那么可以挂起该流程，当然该流程定义下边所有的流程实例全部暂停。</p></li>
<li><p>流程定义被定义为挂起，该流程定义将不允许启动新的流程实例，且该流程定义下所有的流程实例将被全部挂起暂停执行</p></li>
<li><p>表结构
act_re_procdef表中的SUSPENSION_STATE字段来表示1激活，2挂起</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515075535507.png"
alt="image-20220515075535507" />
<figcaption aria-hidden="true">image-20220515075535507</figcaption>
</figure></li>
<li><p>挂起流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSuspend</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="comment">//找到流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.</span><br><span class="line">            createProcessDefinitionQuery().processDefinitionId(<span class="string">&quot;holidayRequest:1:7503&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//当前流程定义的状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">suspended</span> <span class="operator">=</span> processDefinition.isSuspended();</span><br><span class="line">    <span class="keyword">if</span> (suspended) &#123;</span><br><span class="line">        <span class="comment">//如果挂起则激活</span></span><br><span class="line">        System.out.println(<span class="string">&quot;激活流程(定义)&quot;</span> + processDefinition.getId() + <span class="string">&quot;name:&quot;</span> + processDefinition</span><br><span class="line">                .getName());</span><br><span class="line">        repositoryService.activateProcessDefinitionById(processDefinition.getId());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果激活则挂起</span></span><br><span class="line">        System.out.println(<span class="string">&quot;挂起流程(定义)&quot;</span> + processDefinition.getId() + <span class="string">&quot;name:&quot;</span> + processDefinition</span><br><span class="line">                .getName());</span><br><span class="line">        repositoryService.suspendProcessDefinitionById(processDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515080404847.png"
alt="image-20220515080404847" /></p></li>
<li><p>如果这时启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();<span class="comment">//configuration.buildProcessEngine();</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(</span><br><span class="line">            <span class="string">&quot;holidayRequest&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span> + holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span> + holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则会出现异常报错信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.flowable.common.engine.api.FlowableException: Cannot start process instance. Process definition 请假流程 (id = holidayRequest:1:7503) is suspended</span><br></pre></td></tr></table></figure></li>
<li><p>此时再运行一次testSuspend()，将流程定义激活，此时数据库act_re_procdef表中的SUSPENSION_STATE字段值为1
再运行testRunProcess()，流程正常启动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515081034659.png"
alt="image-20220515081034659" /></p></li>
</ul>
<h2 id="启动流程的原理">启动流程的原理</h2>
<ul>
<li><p>流程启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();<span class="comment">//configuration.buildProcessEngine();</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;ly05150817部署的请假流程&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    <span class="comment">//通过部署id查找流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery().</span><br><span class="line">            deploymentId(deploy.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">  </span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            processDefinition.getId(), <span class="string">&quot;order1000&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span> + holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span> + holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>涉及到的表：(HI中也有对应的表)</p>
<ul>
<li><p>ACT_RU_EXECUTION 运行时流程执行实例
当启动一个实例的时候，这里会有两个流程执行</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084231981.png"
alt="image-20220515084231981" />
<figcaption aria-hidden="true">image-20220515084231981</figcaption>
</figure></li>
<li><p>ACT_RU_IDENTITYLINK 运行时用户关系信息</p>
<ul>
<li><p>记录流程实例当前所处的节点</p></li>
<li><p>数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084517415.png"
alt="image-20220515084517415" /></p></li>
<li><p>有几种任务处理人的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdentityLinkType</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSIGNEE</span> <span class="operator">=</span> <span class="string">&quot;assignee&quot;</span>; <span class="comment">//指派</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CANDIDATE</span> <span class="operator">=</span> <span class="string">&quot;candidate&quot;</span>;<span class="comment">//候选</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OWNER</span> <span class="operator">=</span> <span class="string">&quot;owner&quot;</span>;<span class="comment">//拥有者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STARTER</span> <span class="operator">=</span> <span class="string">&quot;starter&quot;</span>;<span class="comment">//启动者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARTICIPANT</span> <span class="operator">=</span> <span class="string">&quot;participant&quot;</span>;<span class="comment">//参与者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REACTIVATOR</span> <span class="operator">=</span> <span class="string">&quot;reactivator&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>ACT_RU_TASK 运行时任务表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084822445.png"
alt="image-20220515084822445" /></p></li>
<li><p>ACT_RU_VARIABLE 运行时变量表</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084910997.png"
alt="image-20220515084910997" />
<figcaption aria-hidden="true">image-20220515084910997</figcaption>
</figure></li>
</ul></li>
</ul>
<h2 id="处理流程的原理">处理流程的原理</h2>
<ul>
<li><p>流程处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleted</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//获取当前流程实例绑定的流程变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> processVariables.get(key);</span><br><span class="line">        System.out.println(<span class="string">&quot;key:&quot;</span>+key+<span class="string">&quot;--value:&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    processVariables.put(<span class="string">&quot;approved&quot;</span>,<span class="literal">true</span>);<span class="comment">//同意</span></span><br><span class="line">    processVariables.put(<span class="string">&quot;description&quot;</span>,<span class="string">&quot;我被修改了&quot;</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里用的是之前的xml，所以应该给一个服务监听类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallExternalSystemDelegate</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您的请求通过了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>任务处理后，这里添加了一个变量，且修改了变量description <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091219370.png"
alt="image-20220515091219370" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091248276.png"
alt="image-20220515091248276" /></p>
<ul>
<li>可以通过流程变量，它可以在整个流程过程中流转的[注意，这里流程结束后流程变量会不存在的，但是act_hi_variinst里面可以看到流程变量实例]
//我感觉应该用表单替代</li>
</ul></li>
<li><p>act_ru_task和act_ru_identitylink</p>
<ul>
<li>两者区别
<ul>
<li><strong>ACT _ RU _
IDENTITYLINK</strong>：此表存储有关用户或组的数据及其与（流程/案例/等）实例相关的角色。该表也被其他需要身份链接的引擎使用。【显示全部，包括已完成】</li>
<li><strong>ACT _ RU _
TASK</strong>：此表包含一个正在运行的实例的每个未完成用户任务的条目。然后在查询用户的任务列表时使用此表。【这里只显示运行中】</li>
</ul></li>
<li>act_ru_task 记录当前实例所运行的当前节点的信息 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091649172.png"
alt="image-20220515091649172" /></li>
<li>act_ru_identitylink <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091833571.png"
alt="image-20220515091833571" /></li>
</ul></li>
<li><p>act_ru_execution这个表的数据不会有变动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091928802.png"
alt="image-20220515091928802" /></p></li>
</ul>
<h2 id="流程结束的原理">流程结束的原理</h2>
<ul>
<li><p>流程走完</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleted1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processInstanceId(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;lisi&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">//获取当前流程实例绑定的流程变量</span></span><br><span class="line">        Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">        Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> processVariables.get(key);</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span> + key + <span class="string">&quot;--value:&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            processVariables.put(&quot;approved&quot;,true);//拒绝</span></span><br><span class="line"><span class="comment">            processVariables.put(&quot;description&quot;,&quot;我被修改了&quot;);*/</span></span><br><span class="line">        taskService.complete(task.getId(), processVariables);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时跟流程相关的数据都会被清空掉 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093046925.png"
alt="image-20220515093046925" /></p></li>
<li><p>历史数据</p>
<ul>
<li><p>变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093214154.png"
alt="image-20220515093214154" /></p></li>
<li><p>任务流转历史 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093316108.png"
alt="image-20220515093316108" /></p></li>
<li><p>流程实例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093350660.png"
alt="image-20220515093350660" /></p></li>
<li><p>涉及到的用户 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093451995.png"
alt="image-20220515093451995" /></p></li>
<li><p>流程活动</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093538334.png"
alt="image-20220515093538334" />
<figcaption aria-hidden="true">image-20220515093538334</figcaption>
</figure></li>
<li></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_3</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_3/</url>
    <content><![CDATA[<h2 id="任务分配-uel表达式">任务分配-uel表达式</h2>
<p>通过变量指定来进行分配</p>
<ul>
<li><p>首先绘制流程图（定义） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100239983.png"
alt="image-20220515100239983" /></p>
<ul>
<li>变量处理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100603738.png"
alt="image-20220515100603738" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100629221.png"
alt="image-20220515100629221" /></li>
</ul></li>
<li><p>之后将xml文件导出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> exporter=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> exporterVersion=<span class="string">&quot;6.7.2&quot;</span>&gt;</span><br><span class="line">  &lt;process id=<span class="string">&quot;holiday-new&quot;</span> name=<span class="string">&quot;新请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;documentation&gt;<span class="keyword">new</span>-description&lt;/documentation&gt;</span><br><span class="line">    &lt;startEvent id=<span class="string">&quot;startEvent1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;&lt;/startEvent&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> name=<span class="string">&quot;创建请假流程&quot;</span> flowable:assignee=<span class="string">&quot;$&#123;assignee0&#125;&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> name=<span class="string">&quot;审批请假流程&quot;</span> flowable:assignee=<span class="string">&quot;$&#123;assignee1&#125;&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> sourceRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> targetRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;endEvent id=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/endEvent&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> sourceRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> targetRef=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> sourceRef=<span class="string">&quot;startEvent1&quot;</span> targetRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;bpmndi:BPMNDiagram id=<span class="string">&quot;BPMNDiagram_holiday-new&quot;</span>&gt;</span><br><span class="line">    &lt;bpmndi:BPMNPlane bpmnElement=<span class="string">&quot;holiday-new&quot;</span> id=<span class="string">&quot;BPMNPlane_holiday-new&quot;</span>&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;startEvent1&quot;</span> id=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;30.0&quot;</span> width=<span class="string">&quot;30.0&quot;</span> x=<span class="string">&quot;100.0&quot;</span> y=<span class="string">&quot;145.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> id=<span class="string">&quot;BPMNShape_sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;225.0&quot;</span> y=<span class="string">&quot;120.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> id=<span class="string">&quot;BPMNShape_sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;370.0&quot;</span> y=<span class="string">&quot;120.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span> id=<span class="string">&quot;BPMNShape_sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;28.0&quot;</span> width=<span class="string">&quot;28.0&quot;</span> x=<span class="string">&quot;555.0&quot;</span> y=<span class="string">&quot;146.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;14.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;14.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;469.94999999997356&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;555.0&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> flowable:sourceDockerX=<span class="string">&quot;15.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;15.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;129.94999928606217&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;224.99999999995185&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;324.9499999999907&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;369.9999999999807&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">    &lt;/bpmndi:BPMNPlane&gt;</span><br><span class="line">  &lt;/bpmndi:BPMNDiagram&gt;</span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>流程定义的部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;新请假流程.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程的启动（在流程启动时就已经处理好了各个节点的处理人）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess2</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="comment">//启动流程时，发起人就已经设置好了</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(<span class="string">&quot;holiday-new:1:4&quot;</span>,variables);</span><br><span class="line">    System.out.println(processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看数据库表数据</p>
<ul>
<li><p>act_ru_variable</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101806631.png"
alt="image-20220515101806631" /><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101906703.png"
alt="image-20220515101906703" /></p></li>
<li><p>act_ru_task <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101840975.png"
alt="image-20220515101840975" /></p></li>
</ul></li>
<li><p>让张三完成处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时观察task和identity这两张表</p>
<p>任务变成了李四，而identity多了张三的记录<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515102508734.png"
alt="image-20220515102508734" /></p></li>
</ul></li>
</ul>
<h2 id="任务分配-监听器分配">任务分配-监听器分配</h2>
<ul>
<li><p>首先，java代码中，自定义一个监听器
【注意，这里给任务分配assignee是在create中分配才是有用的】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.TaskListener;</span><br><span class="line"><span class="keyword">import</span> org.flowable.task.service.delegate.DelegateTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskListener</span> <span class="keyword">implements</span> <span class="title class_">TaskListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器触发的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegateTask</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(DelegateTask delegateTask)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyTaskListener触发：&quot;</span>+delegateTask</span><br><span class="line">                .getName());</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;创建请假流程&quot;</span>.equals(delegateTask.getName())</span><br><span class="line">        &amp;&amp;<span class="string">&quot;create&quot;</span>.equals(delegateTask.getEventName()))&#123;</span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>两个节点走的是同一个监听器</p></li>
<li><p>xml定义中任务监听器的配置(两个节点都配置了) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515103504436.png"
alt="image-20220515103504436" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> exporter=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> exporterVersion=<span class="string">&quot;6.7.2&quot;</span>&gt;</span><br><span class="line">  &lt;process id=<span class="string">&quot;holiday-new&quot;</span> name=<span class="string">&quot;新请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;documentation&gt;<span class="keyword">new</span>-description&lt;/documentation&gt;</span><br><span class="line">    &lt;startEvent id=<span class="string">&quot;startEvent1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;&lt;/startEvent&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> name=<span class="string">&quot;创建请假流程&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;flowable:taskListener event=<span class="string">&quot;create&quot;</span> class=<span class="string">&quot;org.flowable.listener.MyTaskListener&quot;</span>&gt;&lt;/flowable:taskListener&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> name=<span class="string">&quot;审批请假流程&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;flowable:taskListener event=<span class="string">&quot;create&quot;</span> class=<span class="string">&quot;org.flowable.listener.MyTaskListener&quot;</span>&gt;&lt;/flowable:taskListener&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> sourceRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> targetRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> sourceRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> targetRef=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> sourceRef=<span class="string">&quot;startEvent1&quot;</span> targetRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;endEvent id=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/endEvent&gt;</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;bpmndi:BPMNDiagram id=<span class="string">&quot;BPMNDiagram_holiday-new&quot;</span>&gt;</span><br><span class="line">    &lt;bpmndi:BPMNPlane bpmnElement=<span class="string">&quot;holiday-new&quot;</span> id=<span class="string">&quot;BPMNPlane_holiday-new&quot;</span>&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;startEvent1&quot;</span> id=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;30.0&quot;</span> width=<span class="string">&quot;30.0&quot;</span> x=<span class="string">&quot;100.0&quot;</span> y=<span class="string">&quot;115.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> id=<span class="string">&quot;BPMNShape_sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;195.0&quot;</span> y=<span class="string">&quot;90.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> id=<span class="string">&quot;BPMNShape_sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;370.0&quot;</span> y=<span class="string">&quot;90.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span> id=<span class="string">&quot;BPMNShape_sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;28.0&quot;</span> width=<span class="string">&quot;28.0&quot;</span> x=<span class="string">&quot;570.0&quot;</span> y=<span class="string">&quot;116.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;14.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;14.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;469.9499999999809&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;570.0&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> flowable:sourceDockerX=<span class="string">&quot;15.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;15.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;129.94999891869114&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;195.0&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;294.95000000000005&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;369.99999999993753&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">    &lt;/bpmndi:BPMNPlane&gt;</span><br><span class="line">  &lt;/bpmndi:BPMNDiagram&gt;</span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>之后将流程再重新部署一遍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;新请假流程.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-new:1:4&quot;</span>);</span><br><span class="line">    System.out.println(processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>控制台查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104113169.png"
alt="image-20220515104113169" /></p></li>
<li><p>数据库查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104240526.png"
alt="image-20220515104240526" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104248454.png"
alt="image-20220515104248454" /></p></li>
<li><p>让小明处理任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().taskAssignee(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104524706.png"
alt="image-20220515104524706" /></p></li>
</ul>
<h2 id="流程变量">流程变量</h2>
<ul>
<li><p>全局变量（跟流程有关）和局部变量（跟task有关）</p></li>
<li><p>一个流程定义，可以运行多个流程实例； <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105403272.png"
alt="image-20220515105403272" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105511486.png"
alt="image-20220515105511486" /> 当用到子流程时，就会出现一对多的关系
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105549313.png"
alt="image-20220515105549313" /></p></li>
<li><p>全局变量被重复赋值时后面会覆盖前面</p></li>
<li><p>流程图的创建 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515110130347.png"
alt="image-20220515110130347" /> 这里还设置了条件，详见xm文件
sequenceFlow.conditionExpression 属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;evection&quot;</span> <span class="attr">name</span>=<span class="string">&quot;出差申请单&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>出差申请单<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建出差申请单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee0&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee1&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee2&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">name</span>=<span class="string">&quot;财务审批</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee3&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_evection&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;evection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_evection&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;75.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;320.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;210.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;236.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.9499984899576&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;274.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;320.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;419.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;124.0085106382979&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;215.95744680851067&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;654.9499999998701&quot;</span> <span class="attr">y</span>=<span class="string">&quot;250.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;250.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;129.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;210.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;419.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>流程进行部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;出差申请单.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请假流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee2&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee3&quot;</span>,<span class="string">&quot;赵财务&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.</span><br><span class="line">            startProcessInstanceById(<span class="string">&quot;evection:1:4&quot;</span>, variables);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>//这时候节点走到张三了，让张三处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String,Object&gt; processVariables=task.getProcessVariables();</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下面修改num的值，修改之前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515113105628.png"
alt="image-20220515113105628" /></p>
<ul>
<li><p>全局变量的查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine(); </span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables() <span class="comment">//注意，这个一定要加的不然获取不到全局变量</span></span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//这里只能获取到任务的局部变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet1 = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet1)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables() <span class="comment">//注意，这个一定要加的不然获取不到全局变量</span></span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<p>按照视频的说法，这里错了，应该是会多了5条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515120415965.png"
alt="image-20220515120415965" /></p></li>
</ul></li>
<li><p>局部变量的再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//流程还没开始运行的情况下，取到的是全局变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    Map&lt;String,Object&gt; varUpdate=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varUpdate.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    taskService.setVariables(task.getId(),varUpdate);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515120817587.png"
alt="image-20220515120817587" /></li>
<li>修改后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515121223413.png"
alt="image-20220515121223413" />
<ul>
<li>结果表明这是批量增加/修改，而不是覆盖</li>
</ul></li>
</ul></li>
<li><p>当前数据库的数据 1个局部变量num，5个全局变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515121439233.png"
alt="image-20220515121439233" /></p></li>
<li><p>接下来在张三节点设置一个局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String,Object&gt; processVariables=task.getProcessVariables();</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看数据库表，发现num已经被修改成2</li>
</ul></li>
<li><p>这时李四设置了一个局部变量num=6</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables2</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult(); </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    Map&lt;String,Object&gt; varUpdate=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varUpdate.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),varUpdate);</span></span><br><span class="line">    taskService.setVariablesLocal(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅仅多了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515122216621.png"
alt="image-20220515122216621" /></p></li>
<li><p>修改全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables3</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a被修改了&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),varUpdate);</span></span><br><span class="line">    taskService.setVariables(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果如下，<strong>当局部变量和全局变量的名称一样时，只能修改局部变量</strong>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515122635345.png"
alt="image-20220515122635345" /></p></li>
<li><p>让李四完成审批
这里存在局部变量num=18，且完成时设置了局部变量20</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.complete(task.getId(),map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意，这里全局变量被改成20了，局部变量被删除了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515123339736.png"
alt="image-20220515123339736" /> 走到了总经理审批</p></li>
<li><p>再测试 将数据清空，重新部署并运行流程</p>
<p>现在在赵四节点，局部变量为 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515124117180.png"
alt="image-20220515124117180" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行完之后，局部变量变成20了，但是流程走不下去
稍作更改，添加一个全局变量(但是由于存在局部变量a，所以这里全局变量没设置成功)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">    Map&lt;String,Object&gt; map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map1.put(<span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    taskService.setVariables(task.getId(),map1);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>现在只能通过在complete中设置，来使得全局变量生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map1.put(<span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),map1);</span></span><br><span class="line">    taskService.complete(task.getId(),map1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果，全局变量设置成功，且任务流转到了财务那 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515124802205.png"
alt="image-20220515124802205" /></li>
</ul></li>
<li><p>再测试</p>
<ul>
<li><p>在存在局部变量num=2的情况下执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  	</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span> + task.getId());</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>, <span class="number">15</span>);</span><br><span class="line">    taskService.setVariables(task.getId(), map);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">    <span class="comment">/*Map&lt;String,Object&gt; map1=new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">    map1.put(&quot;num&quot;,1);</span></span><br><span class="line"><span class="comment">    taskService.complete(task.getId(),map1);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会提示报错，Unknown property used in expression: ${num &gt;= 3}</p>
<p>//说明线条中查找的是全局变量</p></li>
<li><p>在不存在局部变量num的情况下执行上面代码，会走总经理审批（num&gt;3)</p></li>
<li><p>在complete中加上map参数，验证明线条查找的是全局变量的值，complete带上variables会设置全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span> + task.getId());</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>, <span class="number">15</span>);</span><br><span class="line">   <span class="comment">// taskService.setVariables(task.getId(), map);</span></span><br><span class="line">    taskService.complete(task.getId(),map);</span><br><span class="line">    <span class="comment">/*Map&lt;String,Object&gt; map1=new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">    map1.put(&quot;num&quot;,1);</span></span><br><span class="line"><span class="comment">    taskService.complete(task.getId(),map1);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515130825823.png"
alt="image-20220515130825823" /></li>
</ul></li>
<li><p>act_hi_varinst 里面看得到局部变量</p></li>
</ul></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-02-flowable进阶_4</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_4/</url>
    <content><![CDATA[<h2 id="候选人">候选人</h2>
<ul>
<li><p>流程图设计</p>
<ul>
<li>总体 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515143002689.png"
alt="image-20220515143002689" /></li>
<li>具体 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515142952857.png"
alt="image-20220515142952857" /></li>
</ul></li>
<li><p>部署并启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().name(<span class="string">&quot;ly画的请假流程-候选人&quot;</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请假流程-候选人.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//设置候选人</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;candidate1&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;candidate2&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;candidate3&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//获取流程运行服务</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="comment">//运行流程</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-candidate:1:4&quot;</span>,variables);</span><br><span class="line">    System.out.println(<span class="string">&quot;processInstance--&quot;</span>+processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库表数据</p>
<ul>
<li>处理人为空 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144843249.png"
alt="image-20220515144843249" /></li>
<li>变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144901217.png"
alt="image-20220515144901217" /></li>
<li>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144943769.png"
alt="image-20220515144943769" /></li>
</ul></li>
<li><p>实际，作为登录用户如果是张三/李四或者王五，那它可以查看它自己是候选人的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询候选任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskCandidateUser(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(Task task:tasks)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id--&quot;</span>+task.getId()+<span class="string">&quot;--&quot;</span>+task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>拾取任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拾取任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">claimTaskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskCandidateUser(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="comment">//拾取任务</span></span><br><span class="line">        taskService.claim(task.getId(),<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;拾取任务成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515145820087.png"
alt="image-20220515145820087" /></li>
<li>此时查询李四候选任务，就查询不到了</li>
</ul></li>
<li><p>归还任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拾取任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unclaimTaskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="comment">//归还任务</span></span><br><span class="line">        taskService.unclaim(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;归还任务成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150149037.png"
alt="image-20220515150149037" /></li>
<li>此时用李四，拾取成功 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150352270.png"
alt="image-20220515150352270" /></li>
</ul></li>
<li><p>任务交接(委托)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务交接(委托)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        taskService.setAssignee(task.getId(),<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;任务交接给赵六&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150637180.png"
alt="image-20220515150637180" /></li>
</ul></li>
<li><p>完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;赵六&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时任务给wz了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150842118.png"
alt="image-20220515150842118" /></p></li>
</ul>
<h2 id="候选人组">候选人组</h2>
<ul>
<li><p>当候选人很多的情况下，可以分组。（先创建组，然后将用户放到组中）</p></li>
<li><p>维护用户和组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;李飞&quot;</span>);</span><br><span class="line">    user1.setFirstName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    user1.setLastName(<span class="string">&quot;fei&quot;</span>);</span><br><span class="line">    identityService.saveUser(user1);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;灯标&quot;</span>);</span><br><span class="line">    user2.setFirstName(<span class="string">&quot;deng&quot;</span>);</span><br><span class="line">    user2.setLastName(<span class="string">&quot;biao&quot;</span>);</span><br><span class="line">    identityService.saveUser(user2);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;田家&quot;</span>);</span><br><span class="line">    user3.setFirstName(<span class="string">&quot;tian&quot;</span>);</span><br><span class="line">    user3.setLastName(<span class="string">&quot;jia&quot;</span>);</span><br><span class="line">    identityService.saveUser(user3);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group1</span> <span class="operator">=</span> identityService.newGroup(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    group1.setName(<span class="string">&quot;销售部&quot;</span>);</span><br><span class="line">    group1.setType(<span class="string">&quot;typ1&quot;</span>);</span><br><span class="line">    identityService.saveGroup(group1);</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group2</span> <span class="operator">=</span> identityService.newGroup(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">    group2.setName(<span class="string">&quot;开发部&quot;</span>);</span><br><span class="line">    group2.setType(<span class="string">&quot;typ2&quot;</span>);</span><br><span class="line">    identityService.saveGroup(group2);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="comment">//找到组</span></span><br><span class="line">    <span class="type">Group</span> <span class="variable">group1</span> <span class="operator">=</span> identityService.createGroupQuery().groupId(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//找到所有用户</span></span><br><span class="line">    List&lt;User&gt; list = identityService.createUserQuery().list();</span><br><span class="line">    <span class="keyword">for</span>(User user:list)&#123;</span><br><span class="line">        identityService.createMembership(user.getId(),group1.getId());</span><br><span class="line">  </span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>表结构</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152203278.png"
alt="image-20220515152203278" />
<figcaption aria-hidden="true">image-20220515152203278</figcaption>
</figure>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152221653.png"
alt="image-20220515152221653" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152232911.png"
alt="image-20220515152232911" /></p></li>
</ul></li>
<li><p>应用，创建流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152724439.png"
alt="image-20220515152724439" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152756047.png"
alt="image-20220515152756047" /></p></li>
<li><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-group&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请求流程-候选人组&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:candidateGroups</span>=<span class="string">&quot;$&#123;g1&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;165.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;510.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;164.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;264.94999999998356&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.94340692927761&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.55019845363262&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;164.99999999999906&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.4985&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;429.9499999999989&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.04062499999998&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;510.0021426561354&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.70839534661596&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署并启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().name(<span class="string">&quot;ly画的请假流程-候选人&quot;</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请求流程-候选人组.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//实际开发，应该按下面代码让用户选</span></span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    List&lt;Group&gt; list = identityService.createGroupQuery().list();</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取流程运行服务</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//设置候选人</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;g1&quot;</span>,<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    <span class="comment">//运行流程</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.</span><br><span class="line">            startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-group:1:25004&quot;</span>,variables);</span><br><span class="line">    System.out.println(<span class="string">&quot;processInstance--&quot;</span>+processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515153509046.png"
alt="image-20220515153509046" /> variables <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515153549630.png"
alt="image-20220515153549630" /></p></li>
<li><p>查找当前用户所在组的任务，并拾取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询候选组任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryCandidateGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    String userId=<span class="string">&quot;灯标&quot;</span>;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> processEngine.getIdentityService();</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group</span> <span class="operator">=</span> identityService.createGroupQuery().</span><br><span class="line">            groupMember(userId)</span><br><span class="line">            .singleResult();</span><br><span class="line">    System.out.println(<span class="string">&quot;灯标组id&quot;</span>+group.getId());</span><br><span class="line">  </span><br><span class="line">    TaskService taskService=processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskCandidateGroup(group.getId())</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(Task task:tasks)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id--&quot;</span>+task.getId()+<span class="string">&quot;--&quot;</span>+task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskCandidateGroup(group.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拾取任务--&quot;</span>+task.getId()</span><br><span class="line">        +<span class="string">&quot;任务名--&quot;</span>+task.getName());</span><br><span class="line">        taskService.claim(task.getId(),userId);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515154857421.png"
alt="image-20220515154857421" /></li>
</ul></li>
<li><p>完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;灯标&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="section"></h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-02-flowable进阶_5</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_5/</url>
    <content><![CDATA[<h2 id="网关">网关</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515155359395.png"
alt="image-20220515155359395" />
<figcaption aria-hidden="true">image-20220515155359395</figcaption>
</figure>
<h3 id="排他网关">排他网关</h3>
<p>会按照所有出口顺序流定义的顺序对它们进行计算，选择第一个条件计算为true的顺序流（<strong>当没有设置条件时，认为顺序流为true</strong>）继续流程</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515155535107.png"
alt="image-20220515155535107" />
<figcaption aria-hidden="true">image-20220515155535107</figcaption>
</figure>
<ul>
<li><p>排他网关的绘制 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515161442209.png"
alt="image-20220515161442209" /> xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-exclusive&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程-排他网关&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wangwu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhaoliu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&gt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&lt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-exclusive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-exclusive&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-exclusive&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;150.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;315.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;155.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;420.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;405.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;630.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;504.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;680.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;680.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;155.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;404.99999999996083&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;59.94725673598754&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.70973069236373&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;150.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.96677419354836&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;249.95000000000002&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.18431734317343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;315.42592592592536&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.42592592592592&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;519.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;629.9999999998776&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;194.43942522321433&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;420.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请假流程-排他网关.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署成功:&quot;</span>+deploy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    runtimeService.startProcessInstanceById</span><br><span class="line">            (<span class="string">&quot;holiday-exclusive:1:4&quot;</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515161800379.png"
alt="image-20220515161800379" /></li>
</ul></li>
<li><p>张三完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>//接下来会走到部门经理审批</p></li>
<li><p>此时再ran一个num为4的实例，然后张三完成，此时会走到总经理审批</p>
<ul>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162344557.png"
title="fig:" alt="image-20220515162344557" /></li>
</ul></li>
<li><p>注意，如果这里num设置为3，则会报错 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162412014.png"
alt="image-20220515162412014" /></p></li>
<li><p>两者区别 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162512860.png"
alt="image-20220515162512860" />
如果上面的分支都不满足条件，那么会直接异常结束
//如果使用排他网关，如果条件都不满足，流程和任务都还在，只是代码抛异常
//如果两个都满足，那么会找出先定义的线走</p></li>
</ul>
<h3 id="并行网关">并行网关</h3>
<ul>
<li><p>绘制流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163112903.png"
alt="image-20220515163112903" /></p></li>
<li><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-parr-key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程-并行网关&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>holiday-parr-descr<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;技术经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">name</span>=<span class="string">&quot;项目经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wangwu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zjl&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-parr-key&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-parr-key&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-parr-key&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;138.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;387.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;495.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;495.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;695.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;795.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;840.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;847.586690647482&quot;</span> <span class="attr">y</span>=<span class="string">&quot;139.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;853.095383523332&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.02614923910227&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.9499984899576&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;174.9999999999917&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;404.70744680851067&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.2843450479233&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;395.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;82.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;494.9999999999998&quot;</span> <span class="attr">y</span>=<span class="string">&quot;84.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;182.43746693121696&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;239.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;840.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;239.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;407.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;182.44067421259845&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;407.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;494.9999999999674&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;795.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;96.13899613899613&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;274.9499999999998&quot;</span> <span class="attr">y</span>=<span class="string">&quot;173.87912087912088&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;388.52284263959393&quot;</span> <span class="attr">y</span>=<span class="string">&quot;164.5190355329949&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;594.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;107.91823529411766&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;701.273276904474&quot;</span> <span class="attr">y</span>=<span class="string">&quot;156.70967741935485&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;594.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;235.23460410557183&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;702.9632352941177&quot;</span> <span class="attr">y</span>=<span class="string">&quot;170.94457720588235&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>并行网关的条件会被忽略 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163308541.png"
alt="image-20220515163308541" /></p></li>
<li><p>代码测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部署并运行</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(<span class="string">&quot;请假流程-并行网关.bpmn20.xml&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        System.out.println(<span class="string">&quot;部署成功:&quot;</span> + deploy.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        runtimeService.startProcessInstanceById</span><br><span class="line">                (<span class="string">&quot;holiday-parr-key:1:12504&quot;</span>, variables);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时任务停留在zhangsan <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163545652.png"
alt="image-20220515163545652" /></p></li>
<li><p>让zhangsan完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;15001&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看表数据(一个任务包含多个执行实例) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163747247.png"
alt="image-20220515163747247" /></p></li>
<li><p>让王五和李四进行审批
查看数据库，wangwu审批后，act_ru_task就少了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164011925.png"
alt="image-20220515164011925" /></p></li>
<li><p>此时走到总经理节点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164102982.png"
alt="image-20220515164102982" /></p></li>
<li><p>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164127110.png"
alt="image-20220515164127110" /></p></li>
</ul>
<h3 id="包容网关">包容网关</h3>
<ul>
<li><p>包容网关可以选择多于一条顺序流。即固定几条必走，其他几条走条件</p></li>
<li><p>流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164830895.png"
alt="image-20220515164830895" /> xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-inclusive&quot;</span> <span class="attr">name</span>=<span class="string">&quot;holiday-inclusive-name&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>holiday-inclusive-desc<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i0&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;项目经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i2&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">name</span>=<span class="string">&quot;技术经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i3&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&gt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&lt;=3 &#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-inclusive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-inclusive&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-inclusive&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;195.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;366.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;451.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;450.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;120.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;465.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;255.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;656.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;137.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;137.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;855.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;900.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;240.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;549.9499999999988&quot;</span> <span class="attr">y</span>=<span class="string">&quot;159.14772727272728&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;656.3351955307262&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.33435754189946&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;294.94999999999993&quot;</span> <span class="attr">y</span>=<span class="string">&quot;171.45390070921985&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;367.32450331125824&quot;</span> <span class="attr">y</span>=<span class="string">&quot;166.32119205298014&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;907.3347402597402&quot;</span> <span class="attr">y</span>=<span class="string">&quot;139.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;913.1831773972388&quot;</span> <span class="attr">y</span>=<span class="string">&quot;240.02104379436742&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;22.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;7.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;775.8406515580737&quot;</span> <span class="attr">y</span>=<span class="string">&quot;142.87818696883852&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;855.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;116.58716981132078&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;405.4272235576724&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;428.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;428.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;449.99999999999346&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;695.4399309245483&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;750.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;770.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.44111163227018&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;770.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;264.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;900.033302364888&quot;</span> <span class="attr">y</span>=<span class="string">&quot;254.96981315483313&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;550.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;94.83228571428573&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;662.6257153758107&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.3587786259542&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;451.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.94999191137833&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;162.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;162.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;194.99999999998522&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;184.4426890432099&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;295.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;465.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;295.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;561.6083333333333&quot;</span> <span class="attr">y</span>=<span class="string">&quot;255.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;665.2307692307692&quot;</span> <span class="attr">y</span>=<span class="string">&quot;166.20769230769233&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署并运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;holiday-inclusive-name.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署成功:&quot;</span> + deploy.getId());</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    runtimeService.startProcessInstanceById</span><br><span class="line">            (<span class="string">&quot;holiday-inclusive:1:4&quot;</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>i0完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;i0&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>看数据，默认走人事和项目经理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165318571.png"
alt="image-20220515165318571" /></p></li>
<li><p>i1,i2所在任务执行完后，会发现走总经理 i1走完之后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165402581.png"
alt="image-20220515165402581" /></p>
<ul>
<li><p>i2走的时候，把num设为1，直接结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;i2&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.setVariable(task.getId(),</span><br><span class="line">            <span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li></li>
</ul>
<h3 id="事件网关">事件网关</h3>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165548361.png"
alt="image-20220515165548361" />
<figcaption aria-hidden="true">image-20220515165548361</figcaption>
</figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-02-flowable进阶_6</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_6/</url>
    <content><![CDATA[<h2 id="任务回退-串行回退">任务回退-串行回退</h2>
<ul>
<li><p>流程图绘制 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515170035810.png"
alt="image-20220515170035810" /></p></li>
<li><p>xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> exporter=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> exporterVersion=<span class="string">&quot;6.7.2&quot;</span>&gt;</span><br><span class="line">  &lt;process id=<span class="string">&quot;reback-key&quot;</span> name=<span class="string">&quot;回退处理&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;documentation&gt;reback-desc&lt;/documentation&gt;</span><br><span class="line">    &lt;startEvent id=<span class="string">&quot;startEvent1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;&lt;/startEvent&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-D380E41A-48EE-4C08-AD01-1D509C512543&quot;</span> name=<span class="string">&quot;用户1&quot;</span> flowable:assignee=<span class="string">&quot;user1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-E2423FC5-F954-43D3-B57C-8460057CB7D6&quot;</span> sourceRef=<span class="string">&quot;startEvent1&quot;</span> targetRef=<span class="string">&quot;sid-D380E41A-48EE-4C08-AD01-1D509C512543&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-AF50E3D0-2014-4308-A717-D76586837D70&quot;</span> name=<span class="string">&quot;用户2&quot;</span> flowable:assignee=<span class="string">&quot;user2&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-7C8750DC-E1C1-4AB2-B18C-2C103B61A5E5&quot;</span> sourceRef=<span class="string">&quot;sid-D380E41A-48EE-4C08-AD01-1D509C512543&quot;</span> targetRef=<span class="string">&quot;sid-AF50E3D0-2014-4308-A717-D76586837D70&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span> name=<span class="string">&quot;用户3&quot;</span> flowable:assignee=<span class="string">&quot;user3&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-F91582FE-D110-48C9-9407-605E503E42B2&quot;</span> sourceRef=<span class="string">&quot;sid-AF50E3D0-2014-4308-A717-D76586837D70&quot;</span> targetRef=<span class="string">&quot;sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span> name=<span class="string">&quot;用户4&quot;</span> flowable:assignee=<span class="string">&quot;user4&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-6D998C20-2A97-44B5-92D0-118E5CB05795&quot;</span> sourceRef=<span class="string">&quot;sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span> targetRef=<span class="string">&quot;sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;endEvent id=<span class="string">&quot;sid-6E5F5037-1979-4150-8408-D0BFD0315BCA&quot;</span>&gt;&lt;/endEvent&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-3ECF3E34-6C07-4AE6-997B-583BF8868AC8&quot;</span> sourceRef=<span class="string">&quot;sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span> targetRef=<span class="string">&quot;sid-6E5F5037-1979-4150-8408-D0BFD0315BCA&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;bpmndi:BPMNDiagram id=<span class="string">&quot;BPMNDiagram_reback-key&quot;</span>&gt;</span><br><span class="line">    &lt;bpmndi:BPMNPlane bpmnElement=<span class="string">&quot;reback-key&quot;</span> id=<span class="string">&quot;BPMNPlane_reback-key&quot;</span>&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;startEvent1&quot;</span> id=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;30.0&quot;</span> width=<span class="string">&quot;30.0&quot;</span> x=<span class="string">&quot;100.0&quot;</span> y=<span class="string">&quot;163.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-D380E41A-48EE-4C08-AD01-1D509C512543&quot;</span> id=<span class="string">&quot;BPMNShape_sid-D380E41A-48EE-4C08-AD01-1D509C512543&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;165.0&quot;</span> y=<span class="string">&quot;135.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-AF50E3D0-2014-4308-A717-D76586837D70&quot;</span> id=<span class="string">&quot;BPMNShape_sid-AF50E3D0-2014-4308-A717-D76586837D70&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;320.0&quot;</span> y=<span class="string">&quot;138.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span> id=<span class="string">&quot;BPMNShape_sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;465.0&quot;</span> y=<span class="string">&quot;138.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span> id=<span class="string">&quot;BPMNShape_sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;610.0&quot;</span> y=<span class="string">&quot;138.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-6E5F5037-1979-4150-8408-D0BFD0315BCA&quot;</span> id=<span class="string">&quot;BPMNShape_sid-6E5F5037-1979-4150-8408-D0BFD0315BCA&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;28.0&quot;</span> width=<span class="string">&quot;28.0&quot;</span> x=<span class="string">&quot;755.0&quot;</span> y=<span class="string">&quot;164.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-6D998C20-2A97-44B5-92D0-118E5CB05795&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-6D998C20-2A97-44B5-92D0-118E5CB05795&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;564.9499999999907&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;609.9999999999807&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-7C8750DC-E1C1-4AB2-B18C-2C103B61A5E5&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-7C8750DC-E1C1-4AB2-B18C-2C103B61A5E5&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;264.9499999999882&quot;</span> y=<span class="string">&quot;175.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;292.5&quot;</span> y=<span class="string">&quot;175.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;292.5&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;319.9999999999603&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-3ECF3E34-6C07-4AE6-997B-583BF8868AC8&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-3ECF3E34-6C07-4AE6-997B-583BF8868AC8&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;14.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;14.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;709.9499999999999&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;755.0&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-E2423FC5-F954-43D3-B57C-8460057CB7D6&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-E2423FC5-F954-43D3-B57C-8460057CB7D6&quot;</span> flowable:sourceDockerX=<span class="string">&quot;15.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;15.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;129.94340692927761&quot;</span> y=<span class="string">&quot;177.55019845363262&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;164.99999999999906&quot;</span> y=<span class="string">&quot;176.4985&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-F91582FE-D110-48C9-9407-605E503E42B2&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-F91582FE-D110-48C9-9407-605E503E42B2&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;419.94999999999067&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;464.9999999999807&quot;</span> y=<span class="string">&quot;178.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">    &lt;/bpmndi:BPMNPlane&gt;</span><br><span class="line">  &lt;/bpmndi:BPMNDiagram&gt;</span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>部署并运行</p></li>
<li><p>依次完成1，2，3</p>
<ul>
<li><p>从任意节点跳转到任意节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backProcess</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">        <span class="comment">//从当前流程跳转到任意节点</span></span><br><span class="line">        runtimeService.createChangeActivityStateBuilder()</span><br><span class="line">                .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">                <span class="comment">//4--&gt;3 ，活动id</span></span><br><span class="line">                .moveActivityIdTo(<span class="string">&quot;sid-727C1235-F9C1-4CC5-BC6C-E56ABCA105B0&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;sid-F4CE7565-5977-4B9C-A603-AB3B817B8C8C&quot;</span>)</span><br><span class="line">                .changeState();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以在这个表里让用户选择回退节点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515170856822.png"
alt="image-20220515170856822" /></p></li>
<li><p>此时让user3再完成任务</p></li>
<li><p>注：用下面的方法，不关心当前节点，只写明要跳转的结点即可 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515171133458.png"
alt="image-20220515171133458" /></p></li>
</ul></li>
</ul>
<h2 id="自定义表单">自定义表单</h2>
<h3 id="内置表单">内置表单</h3>
<ul>
<li><p>绘制 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515173247794.png"
alt="image-20220515173247794" /></p>
<ul>
<li><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;form1-test-key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form1-test-name&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>form1-test-desc<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;days&quot;</span> <span class="attr">name</span>=<span class="string">&quot;天数&quot;</span> <span class="attr">type</span>=<span class="string">&quot;long&quot;</span> <span class="attr">default</span>=<span class="string">&quot;5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;start_time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;开始时间&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">datePattern</span>=<span class="string">&quot;MM-dd-yyyy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;reason&quot;</span> <span class="attr">name</span>=<span class="string">&quot;原因&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4C9C8571-1423-4137-93FC-6A138D504E24&quot;</span> <span class="attr">name</span>=<span class="string">&quot;用户申请&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;days&quot;</span> <span class="attr">name</span>=<span class="string">&quot;天数&quot;</span> <span class="attr">type</span>=<span class="string">&quot;long&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;start_time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;开始时间&quot;</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">datePattern</span>=<span class="string">&quot;MM-dd-yyyy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:formProperty</span> <span class="attr">id</span>=<span class="string">&quot;reason&quot;</span> <span class="attr">name</span>=<span class="string">&quot;原因&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:formProperty</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-8944FE04-D27B-435F-A8A8-4E545AB3D6C0&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4C9C8571-1423-4137-93FC-6A138D504E24&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-0EA36B83-6115-414F-BC7D-9CB338B03F22&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4C9C8571-1423-4137-93FC-6A138D504E24&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4B6496FE-B5FE-41AC-83F8-4B7224B09FBD&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总监审批&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-8DE5EA05-89D5-48B0-9359-F8ABFB3A3500&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-562C26B5-B634-4771-BF54-C311D56A5317&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4B6496FE-B5FE-41AC-83F8-4B7224B09FBD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-9AC3E009-D4D6-4D8B-883C-701E044715E9&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8DE5EA05-89D5-48B0-9359-F8ABFB3A3500&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-9CD52D35-7874-42F4-B392-466F71316BFE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-FABB64D1-0182-41D8-90FE-53FE7FE3F024&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-9CD52D35-7874-42F4-B392-466F71316BFE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E4DB6764-3EA3-427B-AD00-4D812E404FD6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4B6496FE-B5FE-41AC-83F8-4B7224B09FBD&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;day &gt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-585C37CB-61FE-4518-B3B6-5722A90A854F&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-8DE5EA05-89D5-48B0-9359-F8ABFB3A3500&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;day &lt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_form1-test-key&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;form1-test-key&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_form1-test-key&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4C9C8571-1423-4137-93FC-6A138D504E24&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4C9C8571-1423-4137-93FC-6A138D504E24&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;138.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-35DD948A-C095-486E-98E0-4A0EEC4D9FBC&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;315.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4B6496FE-B5FE-41AC-83F8-4B7224B09FBD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4B6496FE-B5FE-41AC-83F8-4B7224B09FBD&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;405.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8DE5EA05-89D5-48B0-9359-F8ABFB3A3500&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-8DE5EA05-89D5-48B0-9359-F8ABFB3A3500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;405.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-0EC09183-F41B-4785-83E7-423BB86EB013&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;585.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9CD52D35-7874-42F4-B392-466F71316BFE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-9CD52D35-7874-42F4-B392-466F71316BFE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;670.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;171.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-585C37CB-61FE-4518-B3B6-5722A90A854F&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-585C37CB-61FE-4518-B3B6-5722A90A854F&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;189.43998414376327&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;405.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E4DB6764-3EA3-427B-AD00-4D812E404FD6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E4DB6764-3EA3-427B-AD00-4D812E404FD6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;336.66824324324324&quot;</span> <span class="attr">y</span>=<span class="string">&quot;151.67117117117118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;342.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;66.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;404.9999999999999&quot;</span> <span class="attr">y</span>=<span class="string">&quot;68.23008849557522&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-0EA36B83-6115-414F-BC7D-9CB338B03F22&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-0EA36B83-6115-414F-BC7D-9CB338B03F22&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;274.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;174.60633484162895&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;316.77118644067775&quot;</span> <span class="attr">y</span>=<span class="string">&quot;171.76800847457628&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8944FE04-D27B-435F-A8A8-4E545AB3D6C0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-8944FE04-D27B-435F-A8A8-4E545AB3D6C0&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.9499984899576&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;174.9999999999917&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-FABB64D1-0182-41D8-90FE-53FE7FE3F024&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-FABB64D1-0182-41D8-90FE-53FE7FE3F024&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;624.5591869398207&quot;</span> <span class="attr">y</span>=<span class="string">&quot;185.37820512820514&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;670.0002755524882&quot;</span> <span class="attr">y</span>=<span class="string">&quot;185.08885188426405&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9AC3E009-D4D6-4D8B-883C-701E044715E9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-9AC3E009-D4D6-4D8B-883C-701E044715E9&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;504.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;238.33333333333334&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;591.9565217391304&quot;</span> <span class="attr">y</span>=<span class="string">&quot;191.93913043478258&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-562C26B5-B634-4771-BF54-C311D56A5317&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-562C26B5-B634-4771-BF54-C311D56A5317&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;504.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将流程定义部署</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">@Test</span><br><span class="line">public void deploy() &#123;</span><br><span class="line">    ProcessEngine engine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    RepositoryService repositoryService = engine.getRepositoryService();</span><br><span class="line">    Deployment deploy = repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(&quot;form1-test-name.bpmn20.xml&quot;)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(&quot;部署成功:&quot; + deploy.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看部署的流程内置的表单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStartForm</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">FormService</span> <span class="variable">formService</span> <span class="operator">=</span> engine.getFormService();</span><br><span class="line">    <span class="type">StartFormData</span> <span class="variable">startFormData</span> <span class="operator">=</span> formService.getStartFormData(<span class="string">&quot;form1-test-key:1:17504&quot;</span>);</span><br><span class="line">    List&lt;FormProperty&gt; formProperties =</span><br><span class="line">            startFormData.getFormProperties();</span><br><span class="line">    <span class="keyword">for</span> (FormProperty property:formProperties)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id==&gt;&quot;</span>+property.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;name==&gt;&quot;</span>+property.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;value==&gt;&quot;</span>+property.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<ul>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515173832080.png"
title="fig:" alt="image-20220515173832080" /></li>
</ul></li>
<li><p>第一种启动方式，通过map <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515174011517.png"
alt="image-20220515174011517" /></p></li>
<li><p>第二种启动方式</p></li>
<li><p>```java <span class="citation" data-cites="Test">@Test</span>
public void startProcess2(){ ProcessEngine
engine=ProcessEngines.getDefaultProcessEngine(); FormService formService
= engine.getFormService(); Map&lt;String,String&gt; map=new
HashMap&lt;&gt;(); map.put("days","2"); map.put("startTime","22020405");
map.put("reason","想玩");
formService.submitStartFormData("form1-test-key:1:17504",map); }
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 注意查看act_ru_variable变量表</span><br><span class="line">    ![image-20220515174247320](https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515174247320.png)</span><br><span class="line"></span><br><span class="line">- 查看任务中的表单数据</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  </span><br><span class="line">      /**</span><br><span class="line">       * 查看对应的表单数据</span><br><span class="line">       */</span><br><span class="line">      @Test</span><br><span class="line">      public void getTaskFormData()&#123;</span><br><span class="line">          ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">          FormService formService = engine.getFormService();</span><br><span class="line">          TaskFormData taskFormData = formService.getTaskFormData(&quot;20012&quot;);</span><br><span class="line">          List&lt;FormProperty&gt; formProperties = taskFormData.getFormProperties();</span><br><span class="line">  </span><br><span class="line">          for (FormProperty property:formProperties)&#123;</span><br><span class="line">              System.out.println(&quot;id==&gt;&quot;+property.getId());</span><br><span class="line">              System.out.println(&quot;name==&gt;&quot;+property.getName());</span><br><span class="line">              System.out.println(&quot;value==&gt;&quot;+property.getValue());</span><br><span class="line">          &#125;</span><br><span class="line">          //这里做一个测试，设置处理人</span><br><span class="line">           /*TaskService taskService = engine.getTaskService();</span><br><span class="line">         taskService.setAssignee(&quot;20012&quot;,&quot;lalala&quot;);*/</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p>查看完成的任务【主要】//有点问题，不管 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515175944504.png"
alt="image-20220515175944504" /></p></li>
</ul></li>
</ul>
<h3 id="外置表单">外置表单</h3>
<ul>
<li><p>[flowable-ui中没找到，不知道是不是eclipse独有的]</p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>boge-03-其他</title>
    <url>/2022/05/19/study/flowable/boge_blbl/03-others/</url>
    <content><![CDATA[<h2 id="会签">会签</h2>
<ul>
<li><p>流程图绘制 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220519172038904.png"
alt="image-20220519172038904" /></p>
<ul>
<li><p>注意上面几个参数</p>
<ul>
<li>多实例类型用来判断串行并行</li>
<li>基数（有几个用户处理）</li>
<li>元素变量</li>
<li>集合（集合变量）</li>
<li>完成条件--这里填的是 ${nrOfCompletedInstances &gt; 1 }</li>
</ul></li>
<li><p>在任务监听器 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220519171545786.png"
alt="image-20220519171545786" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngines;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.TaskListener;</span><br><span class="line"><span class="keyword">import</span> org.flowable.task.api.Task;</span><br><span class="line"><span class="keyword">import</span> org.flowable.task.service.delegate.DelegateTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiInstanceTaskListener</span> <span class="keyword">implements</span> <span class="title class_">TaskListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(DelegateTask delegateTask)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理aaaa&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(delegateTask.getEventName().equals(<span class="string">&quot;create&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务id&quot;</span> + delegateTask.getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;哪些人需要会签&quot;</span> + delegateTask.getVariable(<span class="string">&quot;persons&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;任务处理人&quot;</span> + delegateTask.getVariable(<span class="string">&quot;person&quot;</span>));</span><br><span class="line">            <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">            <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">            <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().taskId(delegateTask.getId()).singleResult();</span><br><span class="line">            task.setAssignee(delegateTask.getVariable(<span class="string">&quot;person&quot;</span>).toString());</span><br><span class="line">            taskService.saveTask(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li></li>
<li><p>xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;join-key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;会签测试1&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>join-desc<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;申请人&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-477F728E-2F63-43BF-A278-76FBCF58B475&quot;</span> <span class="attr">name</span>=<span class="string">&quot;会签人员&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable:taskListener</span> <span class="attr">event</span>=<span class="string">&quot;create&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.listener.MultiInstanceTaskListener&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">flowable:taskListener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">multiInstanceLoopCharacteristics</span> <span class="attr">isSequential</span>=<span class="string">&quot;false&quot;</span> <span class="attr">flowable:collection</span>=<span class="string">&quot;persons&quot;</span> <span class="attr">flowable:elementVariable</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span><span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loopCardinality</span>&gt;</span>3<span class="tag">&lt;/<span class="name">loopCardinality</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">completionCondition</span>&gt;</span>$&#123;nrOfCompletedInstances &gt; 1 &#125;<span class="tag">&lt;/<span class="name">completionCondition</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">multiInstanceLoopCharacteristics</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B5F81E26-E53B-4D10-8328-C5B3C35E0DD5&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-477F728E-2F63-43BF-A278-76FBCF58B475&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-3448D902-AE89-467D-8945-805BDEDE7BCA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-598B2F86-A13B-48BE-88AF-6B61CDA24EA7&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-477F728E-2F63-43BF-A278-76FBCF58B475&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-3448D902-AE89-467D-8945-805BDEDE7BCA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_join-key&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;join-key&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_join-key&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;105.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-477F728E-2F63-43BF-A278-76FBCF58B475&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-477F728E-2F63-43BF-A278-76FBCF58B475&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-3448D902-AE89-467D-8945-805BDEDE7BCA&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-3448D902-AE89-467D-8945-805BDEDE7BCA&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;600.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;106.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B5F81E26-E53B-4D10-8328-C5B3C35E0DD5&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B5F81E26-E53B-4D10-8328-C5B3C35E0DD5&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;134.94999855629513&quot;</span> <span class="attr">y</span>=<span class="string">&quot;115.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;232.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;115.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;232.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-598B2F86-A13B-48BE-88AF-6B61CDA24EA7&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-598B2F86-A13B-48BE-88AF-6B61CDA24EA7&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;429.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;515.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;100.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;515.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;120.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;600.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;120.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li></li>
</ul></li>
<li><p>将流程部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span> &#123;</span><br><span class="line">    deleteAll();</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;会签测试1.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署成功:&quot;</span> + deploy.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行流程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">@Test</span><br><span class="line">public void run()&#123;</span><br><span class="line">    ProcessEngine defaultProcessEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    RuntimeService runtimeService = defaultProcessEngine.getRuntimeService();</span><br><span class="line">    HashMap&lt;String,Object&gt; map=new HashMap<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    ArrayList<span class="tag">&lt;<span class="name">String</span>&gt;</span> persons=new ArrayList<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    persons.add(&quot;张三&quot;);</span><br><span class="line">    persons.add(&quot;李四&quot;);</span><br><span class="line">    persons.add(&quot;王五&quot;);</span><br><span class="line">  </span><br><span class="line">    map.put(&quot;persons&quot;,persons);</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceById(&quot;join-key:1:17504&quot;,map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时数据库会有三个任务 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220519171653406.png"
alt="image-20220519171653406" /></p></li>
<li><p>完成第一个任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//15020</span></span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    taskService.complete(<span class="string">&quot;20020&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>再完成一个任务后，流程会直接结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTask</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//15020</span></span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    taskService.complete(<span class="string">&quot;20028&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程结束</p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-01-GettingStarted</title>
    <url>/2022/04/27/study/flowable/offical/01/</url>
    <content><![CDATA[<h2 id="入门">入门</h2>
<h3 id="什么是流动性">什么是流动性</h3>
<blockquote>
<p>Flowable 是一个用 Java 编写的轻量级业务流程引擎。Flowable
流程引擎允许您部署 BPMN 2.0 流程定义（用于定义流程的行业 XML
标准）、创建这些流程定义的流程实例、运行查询、访问活动或历史流程实例和相关数据等等。</p>
</blockquote>
<blockquote>
<p>可以使用 Flowable REST API 通过 HTTP 进行通信。还有几个 Flowable
应用程序（Flowable Modeler、Flowable Admin、Flowable IDM 和 Flowable
Task）提供开箱即用的示例 UI，用于处理流程和任务。</p>
</blockquote>
<h3 id="flowable和activiti">Flowable和Activiti</h3>
<p>Flowable是Activiti的一个分支</p>
<h3 id="构建命令行命令">构建命令行命令</h3>
<h4 id="创建流程引擎">创建流程引擎</h4>
<p>请假流程如下</p>
<ul>
<li>员工要求休假数次</li>
<li>经理批准或拒绝请求</li>
<li>之后将模拟再某个外部系统中注册请求，并向员工发送一封包含结果的邮件</li>
</ul>
<p>创建一个空的Mave项目，并添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.176<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--当版本号&gt;=8.0.22时会报date转字符串的错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加一个带有Main方法的类</p>
<p>这里实例化一个<strong>ProcessEngine</strong>实例，一般只需要实例化一次，是通过<strong>ProcessEngineConfiguration</strong>创建的，用来配置和调整流程引擎的配置</p>
<ul>
<li><em>ProcessEngineConfiguration</em>也可以使用配置 XML 文件创建</li>
<li><em>ProcessEngineConfiguration</em>需要的最低配置是与数据库的 JDBC
连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngineConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HolidayRequest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里改用mysql，注意后面的nullCatalogMeansCurrent=true</span></span><br><span class="line">        <span class="comment">//注意，pom需要添加mysql驱动依赖</span></span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>()</span><br><span class="line">                .setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable_official?useUnicode=true&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true&quot;</span></span><br><span class="line">                        +<span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .setJdbcUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .setJdbcPassword(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class="line">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">        <span class="comment">/* //这是官网，用的h2</span></span><br><span class="line"><span class="comment">        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()</span></span><br><span class="line"><span class="comment">                .setJdbcUrl(&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=-1&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcUsername(&quot;sa&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcPassword(&quot;&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcDriver(&quot;org.h2.Driver&quot;)</span></span><br><span class="line"><span class="comment">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> cfg.buildProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行后会出现slf4j的警告，添加依赖并编写配置文件即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG, CA</span></span><br><span class="line"><span class="attr">log4j.appender.CA</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout.ConversionPattern</span>=<span class="string">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>
<p>重运行程序无警告</p>
<p>会自动往mysql添加一些表及数据</p>
<h4 id="部署流程定义">部署流程定义</h4>
<p>flowable 引擎希望以 BPMN 2.0
格式定义流程，这是一种在行业中被广泛接受的 XML
标准。Flowable术语称之为<strong>流程定义</strong>
（可以理解成许多执行的蓝图），从流程定义中可以启动许多<strong>流程实例</strong></p>
<p>流程定义了请假假期所涉及的不同步骤，而一个流程实例与一位特定员工的假期请相匹配。</p>
<blockquote>
<p>BPMN 2.0 存储为
XML，但它也有一个可视化部分：它以标准方式定义每个不同的步骤类型（人工任务、自动服务调用等）如何表示，以及如何将这些不同的步骤连接到彼此。通过这种方式，BPMN
2.0 标准允许技术人员和业务人员以双方都理解的方式就业务流程进行交流。</p>
</blockquote>
<p>我们将使用的流程定义</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428092931927.png" /></p>
<ul>
<li>假设该过程是通过提供一些信息开始的</li>
<li>左边的圆圈称为<strong>开始事件</strong></li>
<li>第一个矩形是<strong>用户任务</strong>（经理必须执行，批准或拒绝）</li>
<li>根据经理决定，<strong>专用网关</strong>
（带有十字菱形）会将流程实例路由到批准或拒绝路径</li>
<li>如果获得批准，必须在某个外部系统中注册请求，然后再次为原始员工执行用户任务，通知他们该决定</li>
<li>如果被拒绝，则会向员工发送一封电子邮件，通知他们这一点</li>
</ul>
<p>此类流程定义使用可视化建模工具建模，例如Flowable
Designer（Eclipse）或FlowableModeler（Web应用程序）</p>
<ul>
<li><p>BPMN 2.0 及其概念
下面的holiday-request.bmpn20.xm文件放在src/main/resouces中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holidayRequest&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday Request&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Approve or reject request&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向，下面有两个分支--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向approved--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向!approved--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户任务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--服务任务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Send out rejection email&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支2结束--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支2结束--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>解释</p>
<ul>
<li>该文件与BPMN2.0标准规范完全兼容</li>
<li>每个步骤（活动
activity），都有一个id属性，在XML中，该属性提供唯一标识符
name属性为可选的名称，增加了可视化图表的可读性</li>
<li>活动通过<strong>顺序流(sequenceFlow)</strong>连接，即可视图中的定向箭头。执行流程实例时，执行将从开始事件流向下一个活动，且遵循顺序流</li>
<li>离开<em>专有网关</em>的<em>序列流</em>（带有 X
的菱形）显然是特殊的：两者都有一个以<em>表达式</em>形式定义的<em>条件</em>（见第
25 和 32
行）。当流程实例执行到达此<em>gateway</em>时，将评估<em>条件</em>并采用第一个解析为<em>true</em>的条件。这就是这里<em>独有</em>的含义：只选择一个。如果需要不同的路由行为，当然也可以使用其他类型的网关
<ul>
<li>表达式以<span
class="math inline">\({approved}的形式，是\)</span>{approved ==
true}的简写</li>
<li>approved称为过程变量，他与流程实例一起存储（持久数据为，在流程实例的声明周期内使用），意味着必须在流程实例的某个时间点（提交经理用户任务时，即结点<userTask id="approveTask" />[Flowable术语，完成])设置此流程变量）</li>
</ul></li>
</ul></li>
<li><p>部署流程
使用RepositoryService，它可以从ProcessEngine对象中检索，通过传递XML文件的位置并调用deploy()方法来执行它来创建一个新的Deployment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//部署流程</span></span><br><span class="line"><span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">  .addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">  .deploy();</span><br><span class="line">        <span class="comment">//打印部署id</span></span><br><span class="line">System.out.println(<span class="string">&quot;Found deployment id : &quot;</span> + deployment.getId());</span><br></pre></td></tr></table></figure>
<p>每次部署的id存在act_re_deployment表中 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428103748269.png" /></p></li>
<li><p>通过API查询来验证引擎是否知道流程定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class="line">  .deploymentId(deployment.getId())</span><br><span class="line">  .singleResult();</span><br><span class="line">System.out.println(<span class="string">&quot;Found process definition : &quot;</span> + processDefinition.getName());</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul></li>
</ul>
<h4 id="启动流程实例">启动流程实例</h4>
<p>现在已经将流程定义部署到流程引擎中了，所以可以将此<strong>流程定义</strong>作为“蓝图”来启动流程实例</p>
<p>启动前提供一些<em>初始流程变量</em>
，通常，当流程自动触发时，将通过呈现给用户的表单或者通过REST
API获得这些信息，本例为保持简单使用java.util.Scanner在命令中简单输入一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Who are you?&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">employee</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;How many holidays do you want to request?&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">nrOfHolidays</span> <span class="operator">=</span> Integer.valueOf(scanner.nextLine());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Why do you need them?&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></table></figure>
<p>接下来，通过RuntimeService启动一个流程实例，流程实例使用key启动，此键与BPMN2.0
XML文件中设置的id属性匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">variables.put(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">variables.put(<span class="string">&quot;nrOfHolidays&quot;</span>, nrOfHolidays);</span><br><span class="line">variables.put(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line"><span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span></span><br><span class="line">  runtimeService.startProcessInstanceByKey(<span class="string">&quot;holidayRequest&quot;</span>, variables);</span><br></pre></td></tr></table></figure>
<ul>
<li>流程实例启动时，会创建一个<strong>执行(execution)</strong>并将其放入<strong>start
event启动事件</strong>中。之后，此<strong>执行(execution)</strong>遵守<strong>user
task 用户任务</strong>的<strong>序列流 sequence
flow</strong>以供经理批准并执行<strong>用户任务user
task</strong>行为</li>
<li>此行为将在数据库中创建一个任务，稍后可以使用查询找到该任务</li>
<li>用户任务处于<em>等待状态</em>，引擎将停止进一步执行任何操作，返回
API 调用</li>
</ul>
<h4 id="支线交易性-sidetrack-transactionality">支线：交易性 (Sidetrack:
transactionality)</h4>
<ul>
<li>当您进行 Flowable API
调用时，默认情况下，一切都是同步<strong>synchronous</strong>的，并且是同一事务的一部分。这意味着，当方法调用返回时，将启动并提交事务。</li>
<li>当一个流程实例启动时，从流程实例启动到下一个<em>等待状态</em>会有<strong>一个数据库事务</strong>。在本例中，这是第一个用户任务。当引擎到达这个用户任务时，状态被持久化到数据库中并且事务被提交并且API调用返回</li>
<li>在 Flowable
中，当继续一个流程实例时，总会有一个数据库事务从前一个<em>等待状态</em>转到下一个<em>等待状态</em>。</li>
<li></li>
</ul>
<h4 id="查询和完成任务">查询和完成任务</h4>
<ul>
<li><p>为用户任务配置分配</p>
<ul>
<li><p>[第一个任务进入"经理"组]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Approve or reject request&quot;</span> <span class="attr">flowable:candidateGroups</span>=<span class="string">&quot;managers&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二个任务的<em>受让人assignee</em>属性
基于我们在流程实例启动时传递的流程变量的动态分配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;employee&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询并返回"managers"组的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateGroup(<span class="string">&quot;managers&quot;</span>).list();</span><br><span class="line">System.out.println(<span class="string">&quot;You have &quot;</span> + tasks.size() + <span class="string">&quot; tasks:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;tasks.size(); i++) &#123;</span><br><span class="line">  System.out.println((i+<span class="number">1</span>) + <span class="string">&quot;) &quot;</span> + tasks.get(i).getName());<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428132839571.png"
alt="image-20220428132839571" />
<figcaption aria-hidden="true">image-20220428132839571</figcaption>
</figure>
<p>有三个是因为启动了三个实例</p></li>
<li><p>获取特定的流程实例变量，并在屏幕上显示实际请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Which task would you like to complete?&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">taskIndex</span> <span class="operator">=</span> Integer.valueOf(scanner.nextLine());</span><br><span class="line"><span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> tasks.get(taskIndex - <span class="number">1</span>);</span><br><span class="line">Map&lt;String, Object&gt; processVariables = taskService.getVariables(task.getId());</span><br><span class="line">System.out.println(processVariables.get(<span class="string">&quot;employee&quot;</span>) + <span class="string">&quot; wants &quot;</span> +</span><br><span class="line">    processVariables.get(<span class="string">&quot;nrOfHolidays&quot;</span>) + <span class="string">&quot; of holidays. Do you approve this?&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>设置variables让经理批准</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">approved</span> <span class="operator">=</span> scanner.nextLine().toLowerCase().equals(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">variables.put(<span class="string">&quot;approved&quot;</span>, approved);</span><br><span class="line"><span class="comment">//经理完成任务</span></span><br><span class="line">taskService.complete(task.getId(), variables);</span><br></pre></td></tr></table></figure>
<p><span
class="math inline">\(\color{red}该任务现已完成，并且基于&quot;approved&quot;流程变量选择离开专用网关的两条路径之一\)</span></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428133646782.png" /></p></li>
</ul></li>
</ul>
<h4 id="编写javadelegate">编写JavaDelegate</h4>
<ul>
<li><p>实现在请求被批准时将执行的自动逻辑，在BPMN2.0
XML中，这是一个<strong>服务任务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里指定了具体实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.JavaDelegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallExternalSystemDelegate</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Calling the external system for employee &quot;</span></span><br><span class="line">            + execution.getVariable(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<strong>执行execution</strong>到达<strong>service
tast服务任务</strong>时，BPMN 2.0 XML中引用的类被实例化并被调用</p></li>
<li><p>运行，发现自定义逻辑确实已执行</p></li>
</ul>
<h4 id="处理历史数据">处理历史数据</h4>
<p>Flowable引擎会自动存储所有流程实例的<strong>审计数据audit
data</strong> 或<strong>历史数据historical data</strong></p>
<p>下面，显示一直在执行的流程实例的持续时间，从ProcessEngine获取HistoryService并创建历史活动查询。这里添加了过滤--1
仅针对一个特定流程实例的活动 --2 只有已经完成的活动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line">List&lt;HistoricActivityInstance&gt; activities =</span><br><span class="line">  historyService.createHistoricActivityInstanceQuery()</span><br><span class="line">   .processInstanceId(processInstance.getId())</span><br><span class="line">   .finished()</span><br><span class="line">   .orderByHistoricActivityInstanceEndTime().asc()</span><br><span class="line">   .list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (HistoricActivityInstance activity : activities) &#123;</span><br><span class="line">  System.out.println(activity.getActivityId() + <span class="string">&quot; took &quot;</span></span><br><span class="line">    + activity.getDurationInMillis() + <span class="string">&quot; milliseconds&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结论">结论</h4>
<p>本教程介绍了各种 Flowable 和 BPMN 2.0
概念和术语，同时还演示了如何以编程方式使用 Flowable API。</p>
<h3 id="flowable-rest-api入门">Flowable REST API入门</h3>
<h4 id="设置rest应用程序">设置REST应用程序</h4>
<p>使用flowable-rest.war , java -jar flowable-rest.war</p>
<p>测试是否运行成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test http://localhost:8080/flowable-rest/service/management/engine</span><br></pre></td></tr></table></figure>
<h4 id="部署流程定义-1">部署流程定义</h4>
<ul>
<li><p>先切到该文件夹下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428220759415.png" /></p></li>
<li><p>使用下面命令启动flowable-rest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar flowable-rest.war</span><br></pre></td></tr></table></figure></li>
<li><p>部署流程定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -F &quot;file=@holiday-request.bpmn20.xml&quot; http://localhost:8080/flowable-rest/service/repository/deployments</span><br></pre></td></tr></table></figure></li>
<li><p>查看流程是否部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test http://localhost:8080/flowable-rest/service/repository/process-definitions</span><br></pre></td></tr></table></figure>
<ul>
<li>将返回一个列表，列表每个元素是当前部署到引擎的所有流程定义</li>
</ul></li>
</ul>
<h4 id="启动流程实例-1">启动流程实例</h4>
<ul>
<li><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;processDefinitionKey&quot;:&quot;holidayRequest&quot;, &quot;variables&quot;: [ &#123; &quot;name&quot;:&quot;employee&quot;, &quot;value&quot;: &quot;John Doe&quot; &#125;, &#123; &quot;name&quot;:&quot;nrOfHolidays&quot;, &quot;value&quot;: 7 &#125;]&#125;&#x27; http://localhost:8080/flowable-rest/service/runtime/process-instances</span><br></pre></td></tr></table></figure>
<p>windows中会报错...估计是没转义啥的原因 将返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;43&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:8080/flowable-rest/service/runtime/process-instances/43&quot;</span><span class="punctuation">,</span><span class="attr">&quot;businessKey&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span><span class="attr">&quot;ended&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span><span class="attr">&quot;processDefinitionId&quot;</span><span class="punctuation">:</span><span class="string">&quot;holidayRequest:1:42&quot;</span><span class="punctuation">,</span><span class="attr">&quot;processDefinitionUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:8080/flowable-rest/service/repository/process-definitions/holidayRequest:1:42&quot;</span><span class="punctuation">,</span><span class="attr">&quot;activityId&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;tenantId&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="任务列表和完成任务">任务列表和完成任务</h4>
<ul>
<li><p>获取manager经理组的所有任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;candidateGroup&quot; : &quot;managers&quot; &#125;&#x27; http://localhost:8080/flowable-rest/service/query/tasks</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用命令完成一个任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;action&quot; : &quot;complete&quot;, &quot;variables&quot; : [ &#123; &quot;name&quot; : &quot;approved&quot;, &quot;value&quot; : true&#125; ]  &#125;&#x27; http://localhost:8080/flowable-rest/service/runtime/tasks/25</span><br></pre></td></tr></table></figure>
<ul>
<li><p>这里会报下面的错</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;Internal server error&quot;</span><span class="punctuation">,</span><span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span><span class="string">&quot;couldn&#x27;t instantiate class org.flowable.CallExternalSystemDelegate&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>解决办法</p>
<blockquote>
<p>这意味着引擎找不到服务任务中引用的 CallExternalSystemDelegate
类。为了解决这个问题，需要将该类放在应用程序的类路径中（这将需要重新启动）。按照本节所述创建类，将其打包为JAR，并将其放在Tomcat的webapps文件夹下的flowable-rest文件夹的WEB-INF/lib文件夹中。</p>
</blockquote></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-02-Configuration</title>
    <url>/2022/04/29/study/flowable/offical/02/</url>
    <content><![CDATA[<h3 id="创建流程引擎">创建流程引擎</h3>
<p>Flowable 流程引擎通过一个名为 flowable.cfg.xml 的 XML
文件进行配置</p>
<ul>
<li><p>现在类路径下放置floable.cfg.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mailServerHost&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mail.my-corp.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mailServerPort&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5025&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后使用静态方法进行获取ProcessEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br></pre></td></tr></table></figure></li>
<li><p>还有其他配置，这里不一一列举，详见文档地址
https://www.flowable.com/open-source/docs/bpmn/ch03-Configuration</p></li>
<li><p>大致目录如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220429095214773.png"
alt="image-20220429095214773" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220429095245768.png"
alt="image-20220429095245768" /></p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-03-api</title>
    <url>/2022/04/29/study/flowable/offical/03/</url>
    <content><![CDATA[<h3 id="流程引擎api和服务">流程引擎API和服务</h3>
<p>引擎API是与Flowable交互的常见方式，主要起点是ProcessEngine，可以通过配置（Configuration章节）中描述的多种方式创建。</p>
<p>从ProcessEngine获取包含工作流/BPM方法的各种服务。ProcessEngine和服务对象是线程安全的</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/api.services.png"
alt="api.services" />
<figcaption aria-hidden="true">api.services</figcaption>
</figure>
<p>下面是通过processEngine获取各种服务的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line"><span class="type">ManagementService</span> <span class="variable">managementService</span> <span class="operator">=</span> processEngine.getManagementService();</span><br><span class="line"><span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> processEngine.getIdentityService();</span><br><span class="line"><span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line"><span class="type">FormService</span> <span class="variable">formService</span> <span class="operator">=</span> processEngine.getFormService();</span><br><span class="line"><span class="type">DynamicBpmnService</span> <span class="variable">dynamicBpmnService</span> <span class="operator">=</span> processEngine.getDynamicBpmnService();</span><br></pre></td></tr></table></figure>
<p>ProcessEngines.getDefaultProcessEngine()在第一次调用时初始化并构建流程引擎，然后返回相同的流程引擎</p>
<p>ProcessEngines类将扫描所有flowable.cfg.xml和flowable-context.xml文件。</p>
<blockquote>
<p>对于所有 flowable.cfg.xml 文件，流程引擎将以典型的 Flowable
方式构建：ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()。</p>
<p>对于所有 flowable-context.xml 文件，流程引擎将以 Spring
方式构建：首先创建 Spring
应用程序上下文，然后从该应用程序上下文中获取流程引擎。</p>
</blockquote>
<blockquote>
<p>The <strong>RepositoryService</strong> is probably the first service
needed when working with the Flowable engine.</p>
</blockquote>
<p>该服务<strong>(RepositoryService)</strong>提供用于管理和操作部署<strong>deployments</strong>和流程定义的操作</p>
<ul>
<li>查询引擎已知的部署和流程定义</li>
<li>暂停和激活作为一个整体或特定流程定义的部署。挂起意味着不能对它们执行进一步的操作，而激活则相反并再次启用操作</li>
<li>检索各种资源，例如引擎自动生成的部署或流程图中包含的文件</li>
<li>检索流程定义的 POJO 版本，该版本可用于使用 Java 而不是 XML
来内省流程</li>
</ul>
<p>RepositoryService主要是关于静态信息（不会改变的数据，或者至少不会改变太多），而RuntimeService处理启动流程定义的<em>新流程实例</em></p>
<ul>
<li><p>流程定义定义了流程中不同步骤的结构和行为，流程实例是此类流程定义的一次执行</p></li>
<li><p>对于每个流程定义，通常有许多实例同时运行</p></li>
<li><p>Runtime也用于检索和存储<strong>流程变量</strong></p></li>
<li><p>Runtimeservice还可以用来查询流程实例和执行(executions)</p>
<blockquote>
<p>Executions are a representation of the 'token' concept of BPMN 2.0.
执行是指向流程实例当前所在位置的指针</p>
</blockquote></li>
<li><p>只要流程实例正在等待外部触发器并且流程需要继续，就会使用
RuntimeService</p></li>
<li><p>流程实例可以有各种等待状态，并且该服务包含各种操作以向实例发出“信号”，即接收到外部触发器并且流程实例可以继续</p></li>
</ul>
<p>需要由系统的人类用户执行的任务是BPM引擎（如Floable）的核心，围绕任务的所有内容都在TaskService中进行分组</p>
<ul>
<li>查询分配给用户或组的任务</li>
<li>创建新的独立任务（与流程实例无关）</li>
<li>任务被分配给哪个用户或哪些用户，以及让这些用户以某种方式参与该任务</li>
<li>要求并完成一项任务，声明意味着某人决定成为该任务的受让人<strong>assignee</strong></li>
</ul>
<p>IdentityService支持组和用户的管理（创建、更新、删除、查询）</p>
<p>FormService是可选服务，引入了启动表单（<strong>start
form</strong>）和任务表单(<strong>a task form</strong>)的概念</p>
<blockquote>
<p><strong>HistoryService</strong>公开了 Flowable
引擎收集的所有历史数据。在执行流程时，引擎可以保留很多数据（这是可配置的），例如流程实例的启动时间，谁做了哪些任务，完成任务花了多长时间，每个流程实例中遵循的路径，等等。</p>
</blockquote>
<p>使用Flowable
编写自定义应用程序时，通常不需要<strong>ManagementService
。</strong>它允许检索有关数据库表和表元数据的信息。此外，它还公开了作业的查询功能和管理操作</p>
<p><strong>DynamicBpmnService</strong>可用于更改流程定义的一部分，而无需重新部署它。例如，您可以更改流程定义中用户任务的受理人定义，或更改服务任务的类名。</p>
<h3 id="异常策略">异常策略</h3>
<p>Flowable 中的基本异常是 org.flowable.engine.FlowableException</p>
<p>Flowable的一些异常子类</p>
<ul>
<li>FlowableWrongDbException：当 Flowable
引擎发现数据库架构版本和引擎版本不匹配时抛出。</li>
<li>FlowableOptimisticLockingException：当并发访问同一数据条目导致数据存储发生乐观锁定时抛出。</li>
<li>FlowableClassLoadingException：当请求加载的类未找到或加载时发生错误时抛出（例如
JavaDelegates、TaskListeners ......）。</li>
<li>FlowableObjectNotFoundException：当请求或操作的对象不存在时抛出。</li>
<li>FlowableIllegalArgumentException：异常表明在 Flowable API
调用中提供了非法参数，在引擎配置中配置了非法值，或者提供了非法值，或者在流程定义中使用了非法值。</li>
<li>FlowableTaskAlreadyClaimedException：当任务已被声明时抛出，当
taskService.claim(...) 被调用时</li>
</ul>
<h3 id="查询接口">查询接口</h3>
<p>引擎查询数据有两种方式：the query API and native queries</p>
<ul>
<li><p>queryAPi允许使用fluent API编写完全类型安全的查询，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">    .taskAssignee(<span class="string">&quot;kermit&quot;</span>)</span><br><span class="line">    .processVariableValueEquals(<span class="string">&quot;orderId&quot;</span>, <span class="string">&quot;0815&quot;</span>)</span><br><span class="line">    .orderByDueDate().asc()</span><br><span class="line">    .list();</span><br></pre></td></tr></table></figure></li>
<li><p>native queries
（返回类型由您使用的查询对象定义，数据映射到正确的对象[比如任务、流程实例、执行等，且您必须使用在数据库中定义的表明和列名]）。如下，可以通过api检索表名等，使依赖关系尽可能小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createNativeTaskQuery()</span><br><span class="line">  .sql(<span class="string">&quot;SELECT count(*) FROM &quot;</span> + managementService.getTableName(Task.class) +</span><br><span class="line">      <span class="string">&quot; T WHERE T.NAME_ = #&#123;taskName&#125;&quot;</span>)</span><br><span class="line">  .parameter(<span class="string">&quot;taskName&quot;</span>, <span class="string">&quot;gonzoTask&quot;</span>)</span><br><span class="line">  .list();</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> taskService.createNativeTaskQuery()</span><br><span class="line">  .sql(<span class="string">&quot;SELECT count(*) FROM &quot;</span> + managementService.getTableName(Task.class) + <span class="string">&quot; T1, &quot;</span> +</span><br><span class="line">      managementService.getTableName(VariableInstanceEntity.class) + <span class="string">&quot; V1 WHERE V1.TASK_ID_ = T1.ID_&quot;</span>)</span><br><span class="line">  .count();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="变量">变量</h3>
<ul>
<li><p>每个流程实例都需要并使用数据来执行其组成的步骤。在 Flowable
中，这些数据称为<em>变量</em>，存储在数据库中</p></li>
<li><p>流程实例可以有变量（称为<em>流程变量</em>），也可以有<em>执</em>行（指向流程处于活动状态的特定指针）。用户任务也可以有变量，变量存储在ACT_RU_VARIABLE数据库表中</p></li>
<li><p>所有<em>startProcessInstanceXXX</em>方法都有一个可选参数，用于在创建和启动流程实例时提供变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessInstance <span class="title function_">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey, Map&lt;String, Object&gt; variables)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>可以在流程执行期间添加变量。例如，（<em>RuntimeService</em>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setVariable</span><span class="params">(String executionId, String variableName, Object value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariableLocal</span><span class="params">(String executionId, String variableName, Object value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariables</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariablesLocal</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>检索变量
<em>TaskService</em>上存在类似的方法。这意味着任务（如执行）可以具有仅在任务期间“活动”的局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(String executionId)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariablesLocal</span><span class="params">(String executionId)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariablesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class="line">Object <span class="title function_">getVariable</span><span class="params">(String executionId, String variableName)</span>;</span><br><span class="line">&lt;T&gt; T <span class="title function_">getVariable</span><span class="params">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>当前<strong><em>执行</em></strong>或<strong><em>任务</em></strong>对象是可用的，它可以用于变量设置和/或检索</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution.getVariables();</span><br><span class="line">execution.getVariables(Collection&lt;String&gt; variableNames);</span><br><span class="line">execution.getVariable(String variableName);</span><br><span class="line"></span><br><span class="line">execution.setVariables(Map&lt;String, object&gt; variables);</span><br><span class="line">execution.setVariable(String variableName, Object value);</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>在执行上述任何调用时，所有</strong>变量都会在后台从数据库中获取。这意味着，如果您有
10
个变量，但只能通过<em>getVariable("myVariable")</em>获得一个，那么在幕后将获取并缓存其他
9 个</p></li>
<li><p>接上述，可以设置是否缓存所有变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(Collection&lt;String&gt; variableNames, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br><span class="line">Object <span class="title function_">getVariable</span><span class="params">(String variableName, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariable</span><span class="params">(String variableName, Object value, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="瞬态变量">瞬态变量</h3>
<p>瞬态变量是行为类似于常规变量但不持久的变量。通常，瞬态变量用于高级用例</p>
<ul>
<li>对于瞬态变量，根本没有存储历史记录。</li>
<li>与<em>常规</em>变量一样，瞬态变量在设置时放在<em>最高父</em>级。这意味着在执行时设置变量时，瞬态变量实际上存储在流程实例执行中。与常规变量一样，如果在特定执行或任务上设置变量，则存在方法的<em>局部变体。</em></li>
<li>只能在流程定义中的下一个“等待状态”之前访问瞬态变量。在那之后，他们就走了。在这里，等待状态是指流程实例中它被持久化到数据存储中的点。请注意，在此定义中，<em>异步</em>活动也是“等待状态”！</li>
<li>瞬态变量只能由<em>setTransientVariable(name,
value)</em>设置，但调用<em>getVariable(name)</em>时也会返回瞬态变量（也存在一个<em>getTransientVariable(name)</em>，它只检查瞬态变量）。这样做的原因是使表达式的编写变得容易，并且使用变量的现有逻辑适用于这两种类型。</li>
<li>瞬态变量会<em>隐藏</em>同名的持久变量。这意味着当在流程实例上同时设置持久变量和瞬态变量并<em>调用
getVariable("someVariable")</em>时，将返回瞬态变量值。</li>
</ul>
<p>可以在大多数地方设置和获取瞬态变量</p>
<ul>
<li><p>关于<em>JavaDelegate</em>实现中的<em>DelegateExecution</em></p></li>
<li><p>关于<em>ExecutionListener</em>实现中的DelegateExecution<em>和</em>关于<em>TaskListener</em>实现的<em>DelegateTask</em></p></li>
<li><p><em>通过执行</em>对象在脚本任务中</p></li>
<li><p>通过运行时服务启动流程实例时</p></li>
<li><p>完成任务时</p></li>
<li><p>调用<em>runtimeService.trigger</em>方法时</p></li>
<li><p>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariable</span><span class="params">(String variableName, Object variableValue)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariableLocal</span><span class="params">(String variableName, Object variableValue)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariables</span><span class="params">(Map&lt;String, Object&gt; transientVariables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariablesLocal</span><span class="params">(Map&lt;String, Object&gt; transientVariables)</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">getTransientVariable</span><span class="params">(String variableName)</span>;</span><br><span class="line">Object <span class="title function_">getTransientVariableLocal</span><span class="params">(String variableName)</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getTransientVariables</span><span class="params">()</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getTransientVariablesLocal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeTransientVariable</span><span class="params">(String variableName)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeTransientVariableLocal</span><span class="params">(String variableName)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>典型示例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/api.transient.variable.example.png"
alt="api.transient.variable.example" /></p></li>
<li><p>瞬态变量传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.createProcessInstanceBuilder()</span><br><span class="line">       .processDefinitionKey(<span class="string">&quot;someKey&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam01&quot;</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam02&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam03&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">       .start();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FetchDataServiceTask</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">configParam01</span> <span class="operator">=</span> (String) execution.getVariable(configParam01);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="type">RestResponse</span> <span class="variable">restResponse</span> <span class="operator">=</span> executeRestCall();</span><br><span class="line">    execution.setTransientVariable(<span class="string">&quot;response&quot;</span>, restResponse.getBody());</span><br><span class="line">    execution.setTransientVariable(<span class="string">&quot;status&quot;</span>, restResponse.getStatus());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>离开独占网关的序列流的条件不知道使用的是持久变量还是瞬态变量（在本例中为<em>状态</em>瞬态变量）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>$&#123;status == 200&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="表达式">表达式</h3>
<p>Flowable使用UEL进行表达式解析，UEL代表统一表达式语言，是EE6规范的一部分。两种类型的表达式（值表达式和方法表达式），都可以在需要表达式的地方使用</p>
<ul>
<li><p>值表达式，解析为一个值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;myVar&#125;</span><br><span class="line">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方法表达式：调用带或不带参数的方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;printer.print()&#125;</span><br><span class="line">$&#123;myBean.addNewOrder(&#x27;orderName&#x27;)&#125;</span><br><span class="line">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表达式函数">表达式函数</h3>
<p>一些开箱即用的函数</p>
<ul>
<li><strong>variables:get(varName)</strong>：检索变量的值。与直接在表达式中写变量名的主要区别在于，当变量不存在时，使用这个函数不会抛出异常。例如，如果<em>myVariable</em>不存在，<em><span
class="math inline">\({myVariable ==
&quot;hello&quot;}*会抛出异常，但*\)</span>{var:get(myVariable) ==
'hello'}</em>会正常工作。</li>
<li><strong>variables:getOrDefault(varName,
defaultValue)</strong>：类似于<em>get</em>，但可以选择提供默认值，当变量未设置或值为<em>null</em>时返回。</li>
<li><strong>variables:exists(varName)</strong>
：如果变量具有非空值，则返回<em>true 。</em></li>
<li><strong>variables:isEmpty(varName)</strong> (alias <em>:empty</em> )
: 检查变量值是否不为空。根据变量类型，行为如下：
<ul>
<li>对于字符串变量，如果变量是空字符串，则认为该变量为空。</li>
<li>对于 java.util.Collection 变量，如果集合没有元素，则返回<em>true
。</em></li>
<li>对于 ArrayNode 变量，如果没有元素则返回<em>true</em></li>
<li>如果变量为<em>null</em>，则始终返回<em>true</em></li>
</ul></li>
<li><strong>variables:isNotEmpty(varName)</strong> (alias <em>:
notEmpty) :</em> <em>isEmpty</em>的逆运算。</li>
<li><strong>variables:equals(varName,
value)</strong>（别名<em>:eq</em>）：检查变量是否等于给定值。这是表达式的简写函数，否则将被写为<em>${execution.getVariable("varName")
!= null &amp;&amp; execution.getVariable("varName") == value}</em>。
<ul>
<li>如果变量值为 null，则返回 false（除非与 null 比较）。</li>
</ul></li>
<li><strong>variables:notEquals(varName, value)</strong>（别名<em>:ne
）：</em> <em>equals</em>的反向比较。</li>
<li><strong>variables:contains(varName, value1, value2,
...)</strong>：检查提供的<strong>所有</strong>值是否包含在变量中。根据变量类型，行为如下：
<ul>
<li>对于字符串变量，传递的值用作需要成为变量一部分的子字符串</li>
<li>对于 java.util.Collection
变量，所有传递的值都需要是集合的一个元素（正则<em>包含</em>语义）。</li>
<li>对于 ArrayNode 变量：支持检查 arraynode
是否包含作为变量类型支持的类型的 JsonNode</li>
<li>当变量值为 null 时，在所有情况下都返回
false。当变量值不为null，且实例类型不是上述类型之一时，会返回false。</li>
</ul></li>
<li><strong>variables:containsAny(varName, value1, value2,
...)</strong>：类似于<em>contains</em>函数，但如果<strong>任何</strong>（而非全部）传递的值包含在变量中，则将返回<em>true
。</em></li>
<li><strong>variables:base64(varName)</strong>：将二进制或字符串变量转换为
Base64 字符串</li>
<li>比较器功能：
<ul>
<li><strong>variables:lowerThan(varName, value)</strong>
(别名<em>:lessThan</em>或<em>:lt</em> ) :
<em>${execution.getVariable("varName") != null &amp;&amp;
execution.getVariable("varName") &lt; value}的简写</em></li>
<li><strong>变量：lowerThanOrEquals(varName,
value)</strong>（别名<em>:lessThanOrEquals</em>或<em>:lte</em>）：类似，但现在用于<em>&lt;
=</em></li>
<li><strong>variables:greaterThan(varName, value)</strong> (alias
<em>:gt</em> ) : 类似，但现在用于<em>&gt;</em></li>
<li><strong>variables:greaterThanOrEquals(varName, value)</strong>
(alias <em>:gte</em> ) : 类似，但现在用于<em>&gt; =</em></li>
</ul></li>
<li></li>
</ul>
<h3 id="单元测试">单元测试</h3>
<p>使用自定义资源进行单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FlowableTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBusinessProcessTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine;</span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">(ProcessEngine processEngine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processEngine = processEngine;</span><br><span class="line">        <span class="built_in">this</span>.runtimeService = processEngine.getRuntimeService();</span><br><span class="line">        <span class="built_in">this</span>.taskService = processEngine.getTaskService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment(resources = &quot;holiday-request.bpmn20.xml&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSimpleProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; employeeInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        employeeInfo.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;wangwu1028930&quot;</span>);</span><br><span class="line">        <span class="comment">//employeeInfo.put()</span></span><br><span class="line">        runtimeService.startProcessInstanceByKey(</span><br><span class="line">                <span class="string">&quot;holidayRequest&quot;</span>, employeeInfo</span><br><span class="line">        );</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">&quot;Approve or reject request&quot;</span>, task.getName());</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;approved&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        taskService.complete(task.getId(), hashMap);</span><br><span class="line">        assertEquals(<span class="number">1</span>, runtimeService</span><br><span class="line">                .createProcessInstanceQuery().count());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调试单元测试">调试单元测试</h3>
<h3 id="web应用程序中的流程引擎">Web应用程序中的流程引擎</h3>
<p>编写一个简单的ServletContextListener来初始化和销毁普通Servlet环境中的流程引擎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessEnginesServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    ProcessEngines.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    ProcessEngines.destroy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，ProcessEngines.init()将在类路径中查找flowable.cfg.xml资源文件，并为给定的配置创建一个ProcessEngine，使用下面两种方式来获取他</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngines.getDefaultProcessEngine()</span><br><span class="line"><span class="comment">//或者下面的方式</span></span><br><span class="line">ProcessEngines.getProcessEngine(<span class="string">&quot;myName&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-04-spring</title>
    <url>/2022/04/29/study/flowable/offical/04/</url>
    <content><![CDATA[<h3 id="processenginefactorybean">ProcessEngineFactoryBean</h3>
<ul>
<li><p>将ProcessEngine配置为常规的SpringBean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用transaction</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.SimpleDriverDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getHistoryService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;managementService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getManagementService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>还包括了其他的一些bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bean id=<span class="string">&quot;userBean&quot;</span> class=<span class="string">&quot;org.flowable.spring.test.UserBean&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;runtimeService&quot;</span> ref=<span class="string">&quot;runtimeService&quot;</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bean id=<span class="string">&quot;printer&quot;</span> class=<span class="string">&quot;org.flowable.spring.test.Printer&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<ul>
<li><p>使用XML资源方式类配置Spring应用程序上下文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">    <span class="string">&quot;org/flowable/examples/spring/SpringTransactionIntegrationTest-context.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>或者添加注解</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(</span></span><br><span class="line"><span class="meta"> &quot;classpath:org/flowable/spring/test/transaction/SpringTransactionIntegrationTest-context.xml&quot;)</span></span><br></pre></td></tr></table></figure></p></li>
</ul></li>
<li><p>获取服务bean并进行部署流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span></span><br><span class="line">  (RepositoryService) applicationContext.getBean(<span class="string">&quot;repositoryService&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">deploymentId</span> <span class="operator">=</span> repositoryService</span><br><span class="line">  .createDeployment()</span><br><span class="line">  .addClasspathResource(<span class="string">&quot;org/flowable/spring/test/hello.bpmn20.xml&quot;</span>)</span><br><span class="line">  .deploy()</span><br><span class="line">  .getId();</span><br></pre></td></tr></table></figure></li>
<li><p>下面看userBean类，使用了Transaction事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBean</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** injected by Spring */</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// here you can do transactional stuff in your domain model</span></span><br><span class="line">    <span class="comment">// and it will be combined in the same transaction as</span></span><br><span class="line">    <span class="comment">// the startProcessInstanceByKey to the Flowable RuntimeService</span></span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">&quot;helloProcess&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRuntimeService</span><span class="params">(RuntimeService runtimeService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.runtimeService = runtimeService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用userBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserBean</span> <span class="variable">userBean</span> <span class="operator">=</span> (UserBean) applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>);</span><br><span class="line">userBean.hello();</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="表达式">表达式</h3>
<ul>
<li><p>BPMN 流程中的所有<a
href="https://www.flowable.com/open-source/docs/bpmn/ch04-API#expressions">表达式</a>也将默认“看到”所有
Spring bean</p></li>
<li><p><strong>要完全不暴露任何 bean，只需将一个空列表作为
SpringProcessEngineConfiguration 上的“beans”属性传递。当没有设置 'beans'
属性时，上下文中的所有 Spring beans 都将可用</strong></p></li>
<li><p>如下，可以设置暴露的bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beans&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;printer&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.examples.spring.Printer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>现在的bean进行公开了，在.bpmn20.xml中可以使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">id</span>=<span class="string">&quot;definitions&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;helloProcess&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;start&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;print&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;print&quot;</span> <span class="attr">flowable:expression</span>=<span class="string">&quot;#&#123;printer.printMessage()&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;print&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;end&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Print类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>spring配置bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.examples.spring.Printer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自动资源部署">自动资源部署</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deploymentResources&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;classpath*:/org/flowable/spring/test/autodeployment/autodeploy.*.bpmn20.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="单元测试">单元测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(FlowableSpringExtension.class)</span></span><br><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringJunitJupiterTest.TestConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBusinessProcessTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@Deployment</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">simpleProcessTest</span><span class="params">()</span> &#123;</span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">&quot;simpleProcess&quot;</span>);</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().singleResult();</span><br><span class="line">    assertEquals(<span class="string">&quot;My Task&quot;</span>, task.getName());</span><br><span class="line"></span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">    assertEquals(<span class="number">0</span>, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-05-spring-boot</title>
    <url>/2022/04/29/study/flowable/offical/05/</url>
    <content><![CDATA[<h3 id="入门">入门</h3>
<p>需要两个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable.version</span>&gt;</span>6.7.2<span class="tag">&lt;/<span class="name">flowable.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flowable.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.212<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结合Spring：</p>
<p>只需将依赖项添加到类路径并使用<em><span class="citation"
data-cites="SpringBootApplication">@SpringBootApplication</span></em>注释，幕后就会发生很多事情：</p>
<ul>
<li><p>自动创建内存数据源（因为 H2 驱动程序位于类路径中）并传递给
Flowable 流程引擎配置</p></li>
<li><p>已创建并公开了 Flowable
ProcessEngine、CmmnEngine、DmnEngine、FormEngine、ContentEngine 和
IdmEngine bean</p></li>
<li><p>所有 Flowable 服务都暴露为 Spring bean</p></li>
<li><p>Spring Job Executor 已创建</p></li>
<li><p>将自动部署<em>流程</em>文件夹中的任何 BPMN 2.0
流程定义。创建一个文件夹<em>processes</em>并将一个虚拟进程定义（名为<em>one-task-process.bpmn20.xml</em>）添加到此文件夹。该文件的内容如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions</span><br><span class="line">        xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span><br><span class="line">        xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span><br><span class="line">        targetNamespace=<span class="string">&quot;Examples&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;process id=<span class="string">&quot;oneTaskProcess&quot;</span> name=<span class="string">&quot;The One Task Process&quot;</span>&gt;</span><br><span class="line">        &lt;startEvent id=<span class="string">&quot;theStart&quot;</span> /&gt;</span><br><span class="line">        &lt;sequenceFlow id=<span class="string">&quot;flow1&quot;</span> sourceRef=<span class="string">&quot;theStart&quot;</span> targetRef=<span class="string">&quot;theTask&quot;</span> /&gt;</span><br><span class="line">        &lt;userTask id=<span class="string">&quot;theTask&quot;</span> name=<span class="string">&quot;my task&quot;</span> flowable:assignee=<span class="string">&quot;kermit&quot;</span> /&gt;</span><br><span class="line">        &lt;sequenceFlow id=<span class="string">&quot;flow2&quot;</span> sourceRef=<span class="string">&quot;theTask&quot;</span> targetRef=<span class="string">&quot;theEnd&quot;</span> /&gt;</span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;theEnd&quot;</span> /&gt;</span><br><span class="line">    &lt;/process&gt;</span><br><span class="line"></span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><em>案例</em>文件夹中的任何 CMMN 1.1
案例定义都将自动部署。</p></li>
<li><p>将自动部署<em>dmn</em>文件夹中的任何 DMN 1.1 dmn 定义。</p></li>
<li><p><em>表单</em>文件夹中的任何表单定义都将自动部署。</p></li>
</ul>
<p>java代码 在项目服务启动的时候就去加载一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">init</span><span class="params">(<span class="keyword">final</span> RepositoryService repositoryService,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> RuntimeService runtimeService,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> TaskService taskService)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该bean在项目服务启动的时候就去加载一些数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//有几个流程定义</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of process definitions : &quot;</span></span><br><span class="line">                        + repositoryService.createProcessDefinitionQuery().count());</span><br><span class="line">                <span class="comment">//有多少个任务</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of tasks : &quot;</span> + taskService.createTaskQuery().count());</span><br><span class="line">                runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>);</span><br><span class="line">                <span class="comment">//开启流程后有多少个任务（+1）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of tasks after process start: &quot;</span></span><br><span class="line">                        + taskService.createTaskQuery().count());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="更改数据库">更改数据库</h3>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yml中添加配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/flowable-spring-boot?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="rest支持">Rest支持</h3>
<ul>
<li><p>web支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用Service启动流程及获取给定受让人的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">getTasks</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskService.createTaskQuery().taskAssignee(assignee).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建REST端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/process&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcessInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        myService.startProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/tasks&quot;, method= RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TaskRepresentation&gt; <span class="title function_">getTasks</span><span class="params">(<span class="meta">@RequestParam</span> String assignee)</span> &#123;</span><br><span class="line">        List&lt;Task&gt; tasks = myService.getTasks(assignee);</span><br><span class="line">        List&lt;TaskRepresentation&gt; dtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TaskRepresentation&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">            dtos.add(<span class="keyword">new</span> <span class="title class_">TaskRepresentation</span>(task.getId(), task.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dtos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TaskRepresentation</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TaskRepresentation</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用下面语句进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/tasks?assignee=kermit</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">curl -X POST  http://localhost:8080/process</span><br><span class="line"></span><br><span class="line">curl http://localhost:8080/tasks?assignee=kermit</span><br><span class="line">[&#123;&quot;id&quot;:&quot;10004&quot;,&quot;name&quot;:&quot;my task&quot;&#125;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="jpa支持">JPA支持</h4>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String username, String firstName, String lastName, Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthDate</span><span class="params">(Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>属性文件添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br></pre></td></tr></table></figure></li>
<li><p>添加Repository类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Person, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Person <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
<ul>
<li><p>添加事务</p></li>
<li><p>startProcess现在修改成：获取传入的受理人用户名，查找Person，并将PersonJPA对象作为流程变量放入流程实例中</p></li>
<li><p>在CommandLineRunner中初始化时创建用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> personRepository.findByUsername(assignee);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;person&quot;</span>, person);</span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>, variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">getTasks</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskService.createTaskQuery().taskAssignee(assignee).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createDemoUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (personRepository.findAll().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            personRepository.save(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jbarrez&quot;</span>, <span class="string">&quot;Joram&quot;</span>, <span class="string">&quot;Barrez&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            personRepository.save(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;trademakers&quot;</span>, <span class="string">&quot;Tijs&quot;</span>, <span class="string">&quot;Rademakers&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CommandRunner修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">init</span><span class="params">(<span class="keyword">final</span> MyService myService)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            myService.createDemoUsers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>RestController修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/process&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcessInstance</span><span class="params">(<span class="meta">@RequestBody</span> StartProcessRepresentation startProcessRepresentation)</span> &#123;</span><br><span class="line">        myService.startProcess(startProcessRepresentation.getAssignee());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StartProcessRepresentation</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String assignee;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAssignee</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> assignee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAssignee</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.assignee = assignee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改流程定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;theTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my task&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<ul>
<li><p>启动spring boot之后person表会有两条数据</p></li>
<li><p>启动流程实例</p>
<p>此时会把从数据库查找到的person传入流程图(变量)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;assignee&quot; : &quot;jbarrez&quot;&#125;&#x27; http://localhost:8080/process</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用id获取任务列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/tasks?assignee=1</span><br><span class="line"></span><br><span class="line">[&#123;&quot;id&quot;:&quot;12505&quot;,&quot;name&quot;:&quot;my task&quot;&#125;]</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
</ul>
<h3 id="可流动的执行器端点">可流动的执行器端点</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>zsx_flowable_design01</title>
    <url>/2022/05/23/study/flowable/zsx_design/01/</url>
    <content><![CDATA[<ul>
<li><p>模型设计完后，下面三个表有变化</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523171949603.png"
alt="image-20220523171949603" />
<figcaption aria-hidden="true">image-20220523171949603</figcaption>
</figure>
<ul>
<li>act_cio_model <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172131614.png"
alt="image-20220523172131614" /></li>
<li>act_cio_model_module_rel <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172159869.png"
alt="image-20220523172159869" /></li>
<li>act_ge_bytearray <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172239714.png"
alt="image-20220523172239714" /></li>
</ul></li>
<li><p>部署之后，四个表有变化 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172615648.png"
alt="image-20220523172615648" /></p>
<ul>
<li><p>act_cio_deployment 多了39条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172836324.png"
alt="image-20220523172836324" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172821450.png"
alt="image-20220523172821450" />
<figcaption aria-hidden="true">image-20220523172821450</figcaption>
</figure></li>
<li><p>act_ge_bytearray 多了两条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523172936205.png"
alt="image-20220523172936205" /></p></li>
<li><p>act_re_deployment 多了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523173031162.png"
alt="image-20220523173031162" /></p></li>
<li><p>act_re_procdef 多了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523173141905.png"
alt="image-20220523173141905" /></p></li>
</ul></li>
<li><p>流程开始运行</p>
<ul>
<li>下面只写上主要的几个表</li>
<li>送审时这个结点只能选一个 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523173557679.png"
alt="image-20220523173557679" /></li>
<li>流程运行时变量表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220523174011670.png"
alt="image-20220523174011670" /></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>zsx_flowable设计</tag>
      </tags>
  </entry>
  <entry>
    <title>01-08_git_尚硅谷</title>
    <url>/2022/07/20/study/git/git_sgg/01-08/</url>
    <content><![CDATA[<h1 id="概述">概述</h1>
<h2 id="课程介绍">课程介绍</h2>
<ol type="1">
<li>Git - git介绍--分布式版本控制+集中式版本控制 -
git安装--基于官网，2.31.1 windows - 基于开发案例 详细讲解常用命令 -
git分支---特性、创建、转换、合并、代码合并冲突解决 - idea集成git</li>
<li>Github
<ul>
<li>如何创建远程库</li>
<li>推送 push</li>
<li>拉取 pull</li>
<li>克隆 clone</li>
<li>ssh免密登录</li>
<li>idea github集成</li>
</ul></li>
<li>Gitee码云
<ul>
<li>码云创建远程库</li>
<li>Idea集成Gitee</li>
</ul></li>
<li>Gitlab
<ul>
<li>gitlab服务器的搭建和部署</li>
<li>idea集成gitlab</li>
</ul></li>
<li>课程目标：五个小时，熟练掌握git、github、gitee</li>
</ol>
<h2 id="官网介绍">官网介绍</h2>
<ol type="1">
<li>git是免费的开源的分布式版本控制系统</li>
<li>廉价的本地库</li>
<li>分支功能 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721213708758.png"
alt="image-20220721213708758" /></li>
<li>Everything is local</li>
</ol>
<h2 id="版本控制介绍">版本控制介绍</h2>
<ol type="1">
<li>记录文件内容变化，以便将来查阅特定版本修订记录的系统</li>
<li>如果没有git <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721213950707.png"
alt="image-20220721213950707" /></li>
<li>为什么需要版本控制（从个人开发过渡到团队合作） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721214338521.png"
alt="image-20220721214338521" /></li>
</ol>
<h2
id="分布式版本控制vs集中式版本控制">分布式版本控制VS集中式版本控制</h2>
<ol type="1">
<li>SVN，单一的集中管理的服务器，保存所有文件的修订版本。其他人都先连到这个中央服务器上获取最新处理是否冲突
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721231138140.png"
alt="image-20220721231138140" /></li>
</ol>
<ul>
<li>缺点，单点故障，如果某段时间内故障了，那么就没法提交</li>
</ul>
<ol start="2" type="1">
<li>Git，每台电脑都是代码库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721231509683.png"
alt="image-20220721231509683" />
<ul>
<li>如果远程库挂了，本地还是可以做版本控制的，只不过不能做代码推送而已</li>
<li>每个客户端保存的都是完整的项目（包括历史记录）</li>
</ul></li>
</ol>
<h2 id="发展历史">发展历史</h2>
<ol type="1">
<li>linux系统版本控制历史
<ul>
<li>1991-2002 手动合并</li>
<li>2002 BitKeeper授权Linux社区免费使用（版本控制系统）
<ul>
<li>社区将其破解</li>
</ul></li>
<li>2005 用C语言开发了一个分布式版本控制系统：Git 两周开发时间</li>
<li>2008年 GitHub上线</li>
</ul></li>
</ol>
<h2 id="工作机制和代码托管中心">工作机制和代码托管中心</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220721232308526.png"
alt="image-20220721232308526" />
<figcaption aria-hidden="true">image-20220721232308526</figcaption>
</figure>
<ol type="1">
<li><p>工作机制</p>
<ul>
<li>如果git commit
，会生成对应的历史版本，那么这里的历史版本是删不掉的</li>
<li>如果只是在工作区，或者添加到了暂存区，那么是可以恢复(删掉（操作记录）)的</li>
<li>git add (让git知道有这个文件) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723091448949.png"
alt="image-20220723091448949" />
如果只有v1,v2,v3，V3版本是删不掉的，如果要恢复成v2，只能再提交一次版本</li>
</ul></li>
<li><p>远程库-- 代码托管中心是基于网络服务器的远程代码仓库，简称为远程库
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723091726956.png"
alt="image-20220723091726956" /></p>
<ul>
<li><p>局域网 GitLab</p></li>
<li><p>互联网 GitHub Gitee 码云</p></li>
</ul></li>
</ol>
<h1 id="安装">安装</h1>
<ol type="1">
<li><p>git安装、客户端使用(windows)</p>
<ul>
<li><p>git安装位置 任意 非中文、无空格</p></li>
<li><p>选项配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092103420.png"
alt="image-20220723092103420" /></p></li>
<li><p>编辑器选择 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092214293.png"
alt="image-20220723092214293" /></p></li>
<li><p>是否修改初始化分支的名字--默认master <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092243222.png"
alt="image-20220723092243222" /></p></li>
<li><p>默认第二个，这里选择第一个，只能在git bash里面使用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092335836.png"
alt="image-20220723092335836" /></p></li>
<li><p>后台客户端协议 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092421411.png"
alt="image-20220723092421411" /></p></li>
<li><p>配置行末换行符 windows--CRLF linux--LF</p>
<p>默认，让git根据系统自动转换<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092452460.png"
alt="image-20220723092452460" /></p></li>
</ul></li>
</ol>
<ul>
<li><p>从远程拉取代码时，模式--用默认 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092620029.png"
alt="image-20220723092620029" /></p>
<ul>
<li><p>凭据管理器 记录登陆行为，不用每次登录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092645389.png"
alt="image-20220723092645389" /></p></li>
<li><p>其他配置 软链接文件 缓存 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092729653.png"
alt="image-20220723092729653" /></p></li>
<li><p>再git bash里运行第三方程序</p></li>
</ul>
<p>安装成功---视频里面是2.31 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723092855691.png"
alt="image-20220723092855691" /></p></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>09-18_git_尚硅谷</title>
    <url>/2022/07/23/study/git/git_sgg/09-18/</url>
    <content><![CDATA[<h1 id="命令">命令</h1>
<ol type="1">
<li><p>命令-设置用户签名</p>
<ul>
<li>查看 <code>git config user.name</code>
<code>git config user.email</code></li>
<li>设置 <code>git config --global user.name ly001</code>
<code>git config --global user.email xxx@xx.com</code></li>
<li>git的配置文件查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723213819948.png"
alt="image-20220723213819948" /></li>
<li>作用：区分不同操作者身份，跟后面登陆的账号没有关系</li>
</ul></li>
<li><p>初始化本地库</p>
<ul>
<li><p><code>git init</code></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723221535272.png"
alt="image-20220723221535272" /> 多出一个文件夹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723221752414.png"
alt="image-20220723221752414" /></p></li>
</ul></li>
<li><p>查看本地库状态</p>
<ul>
<li><code>git status</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220723221936215.png"
alt="image-20220723221936215" /> 默认在master分支</li>
<li>新增一个文件 <code>vim hello.txt</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724094610700.png"
alt="image-20220724094610700" /></li>
<li>此时查看本地库的状态 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724094729991.png"
alt="image-20220724094729991" /> untracketd files
未被追踪的文件，也就是这个文件还在工作区</li>
</ul></li>
<li><p>添加暂存区</p>
<ul>
<li><p><code>git add hello.txt</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724095104535.png"
alt="image-20220724095104535" /> LF 将会被替换成
CRLF，windows里面是CRLF，也就是说</p>
<blockquote>
<p>这个<code>换行符自动转换</code>会把自动把你代码里
与你当前操作系统不相同的换行的方式
转换成当前系统的换行方式（即<code>LF</code>和<code>CRLF</code>
之间的转换）</p>
</blockquote>
<p>这是因为这个hello.txt是使用<code>vm hello.txt</code>在git
bash里面添加的，如果直接在windows文件管理器添加一个文件（hello2.txt)，就会发现没有这个警告，因为他已经是CRLF了
（为了和视频保持一致，git rm --cached hello2.txt 后删除这个文件） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724100600978.png"
alt="image-20220724100600978" /></p></li>
<li><p>查看当前状态，绿色表示git已经追踪到了这个文件</p>
<p>文件已经存在于暂存区 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724095955869.png"
alt="image-20220724095955869" /></p></li>
<li><p>使用<code>git rm --cached hello.txt</code>可以将文件从暂存区删除
使用后，文件又出现在工作区了（未添加） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724100308401.png"
alt="image-20220724100308401" /></p></li>
<li></li>
</ul></li>
<li><p>提交本地库</p>
<ul>
<li><p><code>git commit -m "first commit" hello.txt</code>
会出现一些警告，以及此时提交的修改和生成的版本号（前七位） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724100937599.png"
alt="image-20220724100937599" /> <code>git status</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724101043687.png"
alt="image-20220724101043687" /></p></li>
<li><p>使用git reflog查看引用日志信息 git log 查看详细日志信息 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724101139028.png"
alt="image-20220724101139028" /></p></li>
</ul></li>
<li><p>修改命令</p>
<ul>
<li><p>前提，修改了文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724101329134.png"
alt="image-20220724101329134" /></p></li>
<li><p>git status</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724101355054.png"
alt="image-20220724101355054" />红色表示git还没有追踪到这个修改，如果此时commit
，会提示没有需要commit的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724101505483.png"
alt="image-20220724101505483" /></p></li>
<li><p>使用git add hello.txt 将文件修改添加到暂存区 之后git status <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724102125244.png"
alt="image-20220724102125244" /></p>
<ul>
<li><p>注意，这里如果提交到暂存区之后，使用git
restore是无法恢复文件的</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724102234835.png"
alt="image-20220724102234835" />
<figcaption aria-hidden="true">image-20220724102234835</figcaption>
</figure></li>
<li><p>git restore --staged <file>..." to unstage
使用这个命令丢弃这个文件的commit操作</p>
<blockquote>
<p>几个命令的区别：</p>
<ul>
<li>git restore file
的命令是丢弃你在工作区修改的内容,(修改的内容会丢失)</li>
<li>git restore --staged file 丢弃你在工作区的修改不被<a
href="https://so.csdn.net/so/search?q=commit&amp;spm=1001.2101.3001.7020">commit</a>
。但是你的修改依然在工作区。</li>
<li>git rm --cached file和git restore --staged file
效果好像一样，这里不做更进一步的分析</li>
</ul>
</blockquote></li>
</ul></li>
<li><p>回到最初，这里主要是为了看修改，如最上面，将第一行后面添加了22222</p>
<p>commit 之后的提示，删除了一行，添加了一行（修改的另一种说法） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724102949971.png"
alt="image-20220724102949971" /></p></li>
<li><p>如果，HEAD -&gt; master ，指针指向了第二个版本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724103127996.png"
alt="image-20220724103127996" /></p></li>
<li><p>这里再做第三次修改，并add 及commit <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724103303974.png"
alt="image-20220724103303974" /></p></li>
<li><p>查看工作区，永远只有最后那次修改的文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724103332836.png"
alt="image-20220724103332836" /></p></li>
</ul></li>
<li><p>版本穿梭</p>
<ul>
<li><p>git reflog和git log <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724103443297.png"
alt="image-20220724103443297" /></p></li>
<li><p>回顾：hello.txt先是5行，然后第一行加了2，之后第二行加了3</p></li>
<li><p>使用git reset --hard
版本号进行穿梭，这里多了一行，是因为我复制的时候复制粗了版本号</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724103935566.png"
alt="image-20220724103935566" />
<figcaption aria-hidden="true">image-20220724103935566</figcaption>
</figure>
<p>使用cat 查看，发现文件已经在另一个版本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104008811.png"
alt="image-20220724104008811" /></p></li>
<li><p>查看.git的一些文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104132475.png"
alt="image-20220724104132475" /> 说明目前是在master这个版本上
下面这个文件 .git/refs/heads/master 记录了指向master分支的哪个版本号
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104310287.png"
alt="image-20220724104310287" /></p></li>
<li><p>这里将文件指向最初的版本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104528829.png"
alt="image-20220724104528829" /></p>
<ul>
<li>此时查看刚才说的那个记录某个分支当前指向版本的文件，已经做了更新
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104638810.png"
alt="image-20220724104638810" /></li>
</ul></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104706066.png"
alt="image-20220724104706066" />
<figcaption aria-hidden="true">image-20220724104706066</figcaption>
</figure></li>
<li><p>再穿梭为后面的版本 git reset --hard file <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104819678.png"
alt="image-20220724104819678" /></p></li>
<li><p>图片解释 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724104910442.png"
alt="image-20220724104910442" /> master指针指向first,second,third
head永远都是指向master（当前分支，目前只有master，所以不变）</p></li>
</ul></li>
</ol>
<h1 id="分支">分支</h1>
<ol type="1">
<li><p>概述和优点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724132914166.png"
alt="image-20220724132914166" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724134235798.png"
alt="image-20220724134235798" /></p></li>
<li><p>查看&amp;创建&amp;切换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch 分支名    #创建分支</span><br><span class="line">git branch -v       #查看分支</span><br><span class="line">git checkout 分支名  #切换分支</span><br><span class="line">git merge 分支名     #把指定的分支合并到当前分支上</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看分支并显示当前分支指向的版本 git branch -v <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161017521.png"
alt="image-20220724161017521" /></p></li>
<li><p>创建分支 git branch hot-fix git branch #再次查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161127755.png"
alt="image-20220724161127755" /></p></li>
<li><p>切换分支</p>
<p>git branch hot-fix 此时修改一个文件并提交 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161340416.png"
alt="image-20220724161340416" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161444200.png"
alt="image-20220724161444200" />
查看.git/head文件，会发现现在它指向hot-fix分支 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161600603.png"
alt="image-20220724161600603" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161757944.png"
alt="image-20220724161757944" /></p></li>
</ul></li>
<li><p>合并分支（正常合并）</p>
<ul>
<li><p>切换分支 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724161934736.png"
alt="image-20220724161934736" /></p></li>
<li><p>将某分支xx合并到当前分支 git merge 分支名</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724162147318.png"
alt="image-20220724162147318" /> 如图，合并成功
以后面那个分支的修改为主</p></li>
</ul></li>
<li><p>合并分支（冲突合并）</p>
<ul>
<li><p>前提，现在master分支倒数第二行修改并添加和提交 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724162554933.png"
alt="image-20220724162554933" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724162642482.png"
alt="image-20220724162642482" /></p></li>
<li><p>此时切换到hot-fix分支 修改倒数第一行 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724162857236.png"
alt="image-20220724162857236" />
将文件从工作区添加到暂存区并提交到本地库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724163014554.png"
alt="image-20220724163014554" /></p></li>
<li><p>此时再切回master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge hot-fix</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724163154164.png"
alt="image-20220724163154164" />
<figcaption aria-hidden="true">image-20220724163154164</figcaption>
</figure></li>
<li><p>提示出错了，而且所有有异常的文件，都以下面的形式标注 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724163343835.png"
alt="image-20220724163343835" /> 按dd进行删除某一行 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724163547658.png"
alt="image-20220724163547658" /> 改完了之后，保存并提交即可 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724163849114.png"
alt="image-20220724163849114" />
切回之后查看hot-fix分支，发现这里的文件是没有变化的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724164010559.png"
alt="image-20220724164010559" /></p></li>
<li><p>原理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724164111179.png"
alt="image-20220724164111179" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724164209633.png"
alt="image-20220724164209633" /></p></li>
</ul></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>19-26_git_尚硅谷</title>
    <url>/2022/07/24/study/git/git_sgg/19-26/</url>
    <content><![CDATA[<h1 id="介绍">介绍</h1>
<p>使用代码托管中心（远程服务器） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724170726396.png"
alt="image-20220724170726396" /></p>
<ul>
<li>团队内写作 push--clone--push--- --pull <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724204533485.png"
alt="image-20220724204533485" /></li>
<li>跨团队写作 fork（到自己的远程库）---clone <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724204930503.png"
alt="image-20220724204930503" /></li>
</ul>
<h1 id="创建远程库创建别名">创建远程库&amp;创建别名</h1>
<ul>
<li>官网：https://github.com</li>
<li>现在yuebuqun注册一个账号 创建一个远程库git-demo，创建成功 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724211410556.png"
alt="image-20220724211410556" /></li>
<li>创建远程库别名 git remote -v （查看别名） 为远程库创建别名
<code>git remote add git-demo https://github.com/lwmfjc/git-demo.git</code>
别名创建成功 fetch和push都可以使用别名 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220724211655584.png"
alt="image-20220724211655584" /></li>
</ul>
<h1 id="推送本地库到远程库">推送本地库到远程库</h1>
<ul>
<li>推送master分支 切换<code>git checkout master</code></li>
<li>推送 git push git-demo master <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727202645908.png"
alt="image-20220727202645908" /></li>
</ul>
<h1 id="拉取远程库到本地库">拉取远程库到本地库</h1>
<ul>
<li><code>git pull git-demo master</code> 结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727203004350.png"
alt="image-20220727203004350" /></li>
</ul>
<h1 id="克隆远程库到本地">克隆远程库到本地</h1>
<ul>
<li>git clone xxxxxxx/git-demo.git <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727203532719.png"
alt="image-20220727203532719" />
clone之后有默认的别名，且已经初始化了本地库</li>
</ul>
<h1 id="团队内写作">团队内写作</h1>
<ul>
<li>lhc修改了git-demo下的hello.txt</li>
<li>之后进行git add hello.txt</li>
<li>git commit -m "lhc-commit " hello.txt</li>
<li>现在进行push git push origin master 出错了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727203924432.png"
alt="image-20220727203924432" /></li>
<li>使用ybq，对库进行设置，管理成员 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204017197.png"
alt="image-20220727204017197" /></li>
<li>添加成员即可 输入账号名 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204040960.png"
alt="image-20220727204040960" /></li>
<li>将邀请函 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204110304.png"
alt="image-20220727204110304" /> 发送给lhc <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204126988.png"
alt="image-20220727204126988" /></li>
<li>现在再次推送，则推送成功 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204229743.png"
alt="image-20220727204229743" /></li>
</ul>
<h1 id="团队外合作">团队外合作</h1>
<ul>
<li><p>先把别人的项目fork下来 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727205710975.png"
alt="image-20220727205710975" /></p></li>
<li><p>之后进行修改并且commit <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204508432.png"
alt="image-20220727204508432" /></p></li>
<li><p>pull request (拉取请求) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204551005.png"
alt="image-20220727204551005" /></p>
<ul>
<li><p>请求 东方不败：<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204646055.png"
alt="image-20220727204646055" /></p></li>
<li><p>岳不群：看到别人发过来的请求 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727205511903.png"
alt="image-20220727205511903" /></p>
<p>可以同意 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204751179.png"
alt="image-20220727204751179" /> 合并申请 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204859648.png"
alt="image-20220727204859648" /></p></li>
</ul></li>
</ul>
<h1 id="ssh免密登录">SSH免密登录</h1>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727204931707.png"
alt="image-20220727204931707" />
<figcaption aria-hidden="true">image-20220727204931707</figcaption>
</figure>
<ul>
<li><p>ssh免密公钥添加 删除~/.ssh 使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa  -C xxxx@xx.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次到~/.ssh 查看</span></span><br><span class="line">cat id_rsa  私钥</span><br></pre></td></tr></table></figure></li>
<li><p>把私钥复制到 账号--设置--ssh and gpgkeys</p></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220727205152327.png"
alt="image-20220727205152327" />
<figcaption aria-hidden="true">image-20220727205152327</figcaption>
</figure>
<ul>
<li>测试是否成功</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_01-06</title>
    <url>/2022/01/25/study/linux/hanshunping/01-06/</url>
    <content><![CDATA[<h2 id="基础介绍">基础介绍</h2>
<ul>
<li><p>本套课程内容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643095663069.png" /></p>
<ul>
<li>基础篇: linux入门、vm和Linux的安装、linux目录结构</li>
<li>实操篇
<ul>
<li>远程登录（xshell，xftp）、实用指令、进程管理、用户管理</li>
<li>vi和vim编辑器、定时任务调度、RPM和YUM</li>
<li>开机、重启和用户登录注销、磁盘分区及挂载、网络配置</li>
</ul></li>
</ul></li>
<li><p>linux使用的地方</p>
<ul>
<li>在linux下开发项目(需要把javaee项目部署到linux下运行)</li>
<li>linux运维工程师(服务器规划、优化、监控等)</li>
<li>linux嵌入式工程师(linux下驱动开发[c,c++])</li>
</ul></li>
<li><p>linux应用领域</p>
<ul>
<li>个人桌面</li>
<li>服务器(免费稳定高效)</li>
<li>嵌入式领域(对软件裁剪，内核最小可达几百kb等) ## linux介绍</li>
</ul></li>
<li><p>linux是一个开源免费操作系统</p></li>
<li><p>linux吉祥物<br />
tux(/tu'ks/唾可si)，没找到音标，将就一下<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643096979670.png" /></p></li>
<li><p>linux之父，linus，也是git的创作者<br />
主要发行版：<strong>Ubuntu、RedHat，Centos</strong>，Debian等<br />
RedHat和Centos使用同样的源码，但是RedHat收费</p></li>
<li><p>Linux和Unix的关系<br />
unix也是一个操作系统，贝尔实验室。做一个多用户分时操作系统，
multics，但是没完成。其中一个后来在这基础上，完成的操作系统为unix
（原本是B语言写的），后面和另一个人用unix用c语言改写了。<br />
unix源码是公开的，后面商业公司拿来包装做成自己的系统，
后面有个人提倡自由时代用户应该对源码享有读写权利而非垄断<br />
后面RichardStallman发起GNU计划（开源计划），Linus参加该计划，并共享出linux内核，于是大家在此基础上开发出各种软件。linux又称GNU/linux<br />
</p></li>
<li><p>Linux和Unix关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098018271.png" />
## VMWare安装Centos7.6 在windows中安装Linux系统<br />
</p></li>
<li><p>VM和Linux系统在pc中的关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098209668.png" /></p></li>
<li><p>安装过程中，网络模式使用NAT模式</p></li>
<li><p>选择最小安装，且选择CompatibilityLibraries和DevelopmentTools<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100381319.png" /></p></li>
<li><p>linux分区<br />
一般分为三个<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100444776.png" /><br />
一般boot1G,swap分区一般跟内存大小一致，这里是2G，所以根分区就是剩下的，也就是20-1-2=17G<br />
如图，boot，/，swap都是标准分区。且boot和/是ext4的文件格式，swap是swap的文件格式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100873342.png" /><br />
</p></li>
<li><p>修改主机名<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101039503.png" /></p></li>
<li><p>修改密码及增加除root外的普通用户</p></li>
<li><p>修改网络为固定ip(NAT模式下)</p>
<ul>
<li>先在VM里面把子网ip改了，这里改成 192.168.200.0<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101673327.png" /></li>
<li>然后改网关为192.168.200.200<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101741006.png" /></li>
<li>使用yum install -y vim 安装文本编辑工具</li>
<li>最后在linux中改配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li>
<li>其中先修改BOOTPROTO="static"</li>
<li>然后设置ip地址、网关和DNS，
下面是添加到上面的ifcfg-ens33后面，不是直接执行代码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.200.200</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=192.168.200.2</span><br></pre></td></tr></table></figure></li>
<li>使用命令重启网络<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart </span><br><span class="line"># 或者直接重启电脑 reboot</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>这里顺便装一下zsx<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure></p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_07-11</title>
    <url>/2022/05/10/study/linux/hanshunping/07-11/</url>
    <content><![CDATA[<h2 id="网络连接">网络连接</h2>
<ul>
<li>网络连接的三种模式 同一个教室的三个主机 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510204902224.png"
alt="image-20220510204902224" /> 此时三个同学可以正常通讯
<ul>
<li>桥接模式 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205004081.png"
alt="image-20220510205004081" />
这是张三的虚拟机和外部互通；但是如果这样设置，ip会不够用；</li>
<li>NAT模式 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205245256.png"
alt="image-20220510205245256" />
如图，虚拟机可以跟虚拟的网卡(192.168.100.99)互通，且通过这个虚拟网卡，及（192.168.0.50代理），与外界(192.168.0.X)互通
<strong>NAT模式，网络地址转换模式</strong>，虚拟系统和外部系统通讯，不造成IP冲突
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205620317.png"
alt="image-20220510205620317" />
注意，这里外部其他主机(除0.50和100.99)是访问不到100.88的</li>
<li>主机模式：独立的系统</li>
</ul></li>
</ul>
<h2 id="虚拟机克隆">虚拟机克隆</h2>
<ul>
<li>方式1，直接拷贝整个文件夹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210154549.png"
alt="image-20220510210154549" /></li>
<li>方式2，使用VMWare 克隆前先把克隆目标关闭
克隆虚拟机当前状态--创建完整克隆</li>
</ul>
<h2 id="虚拟机快照">虚拟机快照</h2>
<ul>
<li><p>为什么需要虚拟机快照 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210527420.png"
alt="image-20220510210527420" /></p></li>
<li><p>快照a <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210626085.png"
alt="image-20220510210626085" /> 之后创建了文件夹hello 然后拍摄快照b
之后创建了文件夹hello2 然后拍摄快照c</p></li>
<li><p>目前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210820396.png" /></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210750325.png" /></p></li>
<li><p>回到快照A <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210948723.png"
alt="image-20220510210948723" />
之后会重启，效果（两个文件夹都没有了)</p></li>
<li><p>如果恢复到B，然后再创建一个快照，就会变成 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211106691.png"
alt="image-20220510211106691" /></p></li>
</ul>
<h2 id="虚拟机迁移">虚拟机迁移</h2>
<ul>
<li>直接剪切、删除，即可 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211233012.png"
alt="image-20220510211233012" /></li>
</ul>
<h2 id="vmtools工具">vmtools工具</h2>
<ul>
<li>如下步骤，注意，这里只是在有界面的情况下进行安装 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211404957.png"
alt="image-20220510211404957" /></li>
<li>安装完毕后
<ul>
<li>在vm上面设置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211547484.png"
alt="image-20220510211547484" /></li>
<li>共享文件夹在linux中的路径 /mnt/hgfs/myshare</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_12-20</title>
    <url>/2022/05/10/study/linux/hanshunping/12-20/</url>
    <content><![CDATA[<h2 id="目录结构">目录结构</h2>
<ul>
<li><p>目录结构很重要</p>
<ul>
<li><p>windows下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522000912102.png"
alt="image-20220522000912102" /></p></li>
<li><p>linux下，从根目录开始分支 /，/root （root用户），/home
（创建的用户的目录），/bin（常用的指令），/etc（环境配置）</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522001122602.png"
alt="image-20220522001122602" />
<figcaption aria-hidden="true">image-20220522001122602</figcaption>
</figure></li>
<li><p>在linux世界里，一切皆文件</p>
<ul>
<li><p>cpu被映射成文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522001224676.png"
alt="image-20220522001224676" />
<figcaption aria-hidden="true">image-20220522001224676</figcaption>
</figure></li>
<li><p>硬盘 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522001301074.png"
alt="image-20220522001301074" /></p></li>
</ul></li>
</ul></li>
<li><p>具体的目录结构</p>
<ul>
<li><p>/bin 常用，binary的缩写，存放常用的命令
(/usr/bin、/usr/local/bin) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522075228619.png"
alt="image-20220522075228619" /></p></li>
<li><p>/sbin （/usr/sbin、/usr/local/sbin）
SuperUser，存放的是系统管理员使用的系统管理程序</p></li>
<li><p>/home 存放普通用户的主目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd jack</span><br></pre></td></tr></table></figure>
<ul>
<li>之后看该目录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522075446031.png"
alt="image-20220522075446031" /></li>
<li>删掉 <code>userdel -r jack</code> 目录消失</li>
</ul></li>
<li><p>/root 该目录为系统管理员，也称超级管理员的用户的主目录</p></li>
<li><p>/lib
系统开机所需要的最基本的动态连接共享库，其作用类似于windows里的DLL，几乎所有的应用程序都需要用到这些共享库</p></li>
<li><p>lost+found 一般为空，非法关机后会存放文件</p></li>
<li><p>/etc
系统管理所需要的配置文件和子目录，比如mysql的my.conf</p></li>
<li><p>/usr 用户的应用程序和文件，类似windows的program files</p></li>
<li><p>/boot 启动Linux时使用的核心文件（破坏则无法启动）</p></li>
<li><p><strong>/proc （不能动）</strong>
虚拟目录，系统内存的映射，访问这个目录获取系统信息</p></li>
<li><p><strong>/srv （不能动）</strong>
service的缩写，存放服务启动之后需要提取的数据</p></li>
<li><p><strong>/sys （不能动）</strong> 安装了2.6内核中新出现的文件系统
sysfs</p></li>
<li><p>/tmp 这个目录用来存放一些临时文件</p></li>
<li><p>/dev 类似windows设备管理器，将硬件映射成文件</p></li>
<li><p>/media
linux系统会自动识别一些设备，u盘、光驱，将识别的设备映射到该目录下</p></li>
<li><p>/mnt
为了让用户挂载别的文件系统，比如将外部的存储<em>挂载</em>到该目录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522081548378.png"
alt="image-20220522081548378" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522081602965.png"
alt="image-20220522081602965" /></p></li>
<li><p>/opt 给主机额外安装软件所存放的目录</p></li>
<li><p>/usr/local
给主机额外安装软件所安装的目录，一般通过编译源码方式安装的程序</p></li>
<li><p>/var 日志，不断扩充的东西 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522081810597.png"
alt="image-20220522081810597" /></p></li>
<li><p>/selinux [security-enhanced linux]
安全子系统，控制程序只能访问特定文件 (启用之后才能看到)</p></li>
</ul></li>
</ul>
<h2 id="远程登陆">远程登陆</h2>
<ul>
<li>背景
<ul>
<li>linux服务器开发小组共享</li>
<li>正式上线项目运行在公网，所以需要远程开发部署</li>
<li>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522082218860.png"
alt="image-20220522082218860" /></li>
</ul></li>
<li>软件 xshell 和xftp https://www.xshell.com/zh/free-for-home-school/
<ul>
<li>使用ifconfig 查看ip 先添加网络工具包
<code>yum install net-tools -y</code></li>
<li>使用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522082707244.png"
alt="image-20220522082707244" /></li>
</ul></li>
<li>在客户端打开cmd，并使用<code>ping</code>命令</li>
<li>xshell中配置并进行连接 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522082829668.png"
alt="image-20220522082829668" /></li>
<li>按住ctrl+鼠标滚轴可以放大字体</li>
</ul>
<h2 id="远程文件传输">远程文件传输</h2>
<ul>
<li>xtfp6 person安装</li>
<li>新建连接配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522120211846.png"
alt="image-20220522120211846" /></li>
<li>文件夹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522120249203.png"
alt="image-20220522120249203" /></li>
<li>可以在这里直接复制上传</li>
<li>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522120426746.png"
alt="image-20220522120426746" /></li>
<li>解决乱码问题 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522120511107.png"
alt="image-20220522120511107" /></li>
<li>reboot <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522120554457.png"
alt="image-20220522120554457" /></li>
</ul>
<h2 id="vim快捷键">vim快捷键</h2>
<ul>
<li><p>vi ：linux内置vi文本编辑器
vim是vi的增强版本，有丰富的字体颜色</p></li>
<li><p>常用的三种模式</p>
<ul>
<li>正常模式，使用上下左右、复制粘贴</li>
<li>插入模式 正常模式--&gt;插入模式 按下i I o O a A r R（一般用i）</li>
<li>命令行模式 插入模式--&gt;命令行 输入输入esc表示退出，然后输入:
<ul>
<li>输入wq表示保存并退出</li>
</ul></li>
</ul></li>
<li><p>编辑，重新vim Hello.java 下面，这时候按tab可以自动补全 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522121244481.png"
alt="image-20220522121244481" /></p></li>
<li><p>命令 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522121433794.png"
alt="image-20220522121433794" /></p></li>
<li><p>快捷键使用</p>
<ul>
<li><p>正常模式下</p>
<ul>
<li><p>输入yy，拷贝当前行。p进行粘贴
4yy，拷贝当前行(包括)往下4行</p></li>
<li><p>输入dd，删除当前行 4dd，删除当前行（包括）往下4行</p></li>
<li><p>定位到首行(gg)或者末行G</p></li>
<li><p>使用u，撤回刚才的输入(lalala将被撤回) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522123547550.png"
alt="image-20220522123547550" /></p></li>
<li><p>定位到20行 （20+shift+g）【其实是20+G】</p></li>
</ul></li>
<li><p>命令模式 ：切换到命令行)</p>
<ul>
<li><p>命令行模式下（：下），输入 /搜索内容</p>
<p>或者（/）下，直接输入搜索内容</p></li>
<li><p>再次输入 / ，就会清空前面的搜索</p></li>
<li><p>设置文件行号（：下） <code>set nu</code>
设置；<code>set nonu</code> 取消 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522122502460.png"
alt="image-20220522122502460" /></p></li>
</ul></li>
</ul></li>
<li><p>如果修改太多，需要先拷贝到windows下，然后再传上来</p></li>
<li><p>vim/vi 快捷键 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522123941924.png"
alt="image-20220522123941924" /></p></li>
</ul>
<h2 id="关机重启">关机重启</h2>
<ul>
<li><p>命令 halt 停止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -h now  #立刻关机</span><br><span class="line">shutdown -h 1 #给出提示并关机</span><br><span class="line">shutdown -r now #现在重启计算机</span><br><span class="line">halt #立刻关机(虚拟机好像只是把cpu关闭？)</span><br><span class="line">reboot #立刻重启</span><br><span class="line">sync #将内存的数据同步到磁盘</span><br></pre></td></tr></table></figure>
<ul>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522124227911.png"
alt="image-20220522124227911" />
<figcaption aria-hidden="true">image-20220522124227911</figcaption>
</figure></li>
<li><p><code>sync #将内存的数据同步到磁盘</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522124509158.png"
alt="image-20220522124509158" /></p>
<ul>
<li>shutdown/reboot/halt等命令都会在执行前执行sync</li>
</ul></li>
</ul></li>
</ul>
<h2 id="登录注销">登录注销</h2>
<ul>
<li><p>尽量不要用root账号登录</p></li>
<li><p>普通用户登陆后，用su - 用户名 切换成系统管理员身份 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522125607501.png"
alt="image-20220522125607501" /></p></li>
<li><p>logout 注销用户（图形页面没效果） 在运行级别3下有效 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522125622253.png"
alt="image-20220522125622253" /></p></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_21-33</title>
    <url>/2022/05/22/study/linux/hanshunping/21-27/</url>
    <content><![CDATA[<h2 id="用户管理">用户管理</h2>
<ul>
<li><p>使用<code>ssh root@192.168.200.201</code>进行服务器连接 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522180504499.png"
alt="image-20220522180504499" /></p></li>
<li><p>xshell中 ctr+shift+r 用来重新连接</p></li>
<li><p>用户解释图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522165637734.png"
alt="image-20220522165637734" /></p></li>
<li><p>添加一个用户milan，会自动创建该用户的家目录milan</p>
<ul>
<li>当登录该用户时，会自动切换到家目录下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522170347364.png"
alt="image-20220522170347364" /></li>
</ul></li>
<li><p>指定家目录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522170437591.png"
alt="image-20220522170437591" /></p></li>
<li><p>指定密码 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522170608319.png"
alt="image-20220522170608319" /></p></li>
<li><p>用milan登录，自动切换到/home/milan pwd:显示当前用户所在的目录</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522170757392.png"
alt="image-20220522170757392" />
<figcaption aria-hidden="true">image-20220522170757392</figcaption>
</figure></li>
<li><p>用户删除</p>
<ul>
<li>删除用户但保留家目录
<ul>
<li>需要用超级管理员才能删除 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522171044636.png"
alt="image-20220522171044636" />
使用<code>su -u root</code>切换到超级管理员</li>
<li>先logout然后再删除 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522171722606.png"
alt="image-20220522171722606" /></li>
</ul></li>
<li>删除用户及家目录 <code>userdel -r milan</code></li>
<li>建议保留家目录</li>
</ul></li>
<li><p>查询root用户信息</p>
<ul>
<li>使用<code>id xx</code> 查询 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522173031872.png"
alt="image-20220522173031872" /></li>
</ul></li>
<li><p>切换用户 <code>su - xx</code></p>
<ul>
<li>从权限高切换到权限低的用户不需要密码；反之需要 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522173624726.png"
alt="image-20220522173624726" /></li>
<li>使用logout（exit也行），从root用户回到jack</li>
</ul></li>
<li><p>查看当前用户 <code>who am i</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522173754140.png"
alt="image-20220522173754140" />
即使切换了用户，返回的还是root（第一次登录时的用户) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522173907316.png"
alt="image-20220522173907316" /></p></li>
<li><p>用户组（角色）</p>
<ul>
<li><p>增加、删除组</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd wudang</span><br><span class="line">groupdel wudang</span><br></pre></td></tr></table></figure></p>
<p>如果添加用户的时候没有指定组，那么会创建一个跟用户名一样的名字的组
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522180913637.png"
alt="image-20220522180913637" /> id是1002，组为king</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522181001626.png"
alt="image-20220522181001626" />
<figcaption aria-hidden="true">image-20220522181001626</figcaption>
</figure></li>
<li><p>添加用户zwj，添加组wudang，并将zwj添加到wudang组里面</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd wudang</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522181322509.png"
alt="image-20220522181322509" />
<figcaption aria-hidden="true">image-20220522181322509</figcaption>
</figure></li>
<li><p>修改用户所在组</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd mojiao</span><br><span class="line">usermod -g mojiao zwj</span><br></pre></td></tr></table></figure></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522181459120.png"
alt="image-20220522181459120" />
<figcaption aria-hidden="true">image-20220522181459120</figcaption>
</figure></li>
</ul></li>
<li><p>关于用户和组相关的文件</p>
<ul>
<li><p>/etc/passwd 每行的含义 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522181730546.png"
alt="image-20220522181730546" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522182046280.png"
alt="image-20220522182046280" />
<figcaption aria-hidden="true">image-20220522182046280</figcaption>
</figure>
<ul>
<li><p>shell 解释和翻译指令 一般用bash，还有其他，很多</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522181937954.png"
alt="image-20220522181937954" />
<figcaption aria-hidden="true">image-20220522181937954</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522182605848.png"
alt="image-20220522182605848" />
<figcaption aria-hidden="true">image-20220522182605848</figcaption>
</figure></li>
</ul></li>
<li><p>/etc/shadow 口令配置文件</p>
<p>每行的含义 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522182244186.png"
alt="image-20220522182244186" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522182201123.png"
alt="image-20220522182201123" />
<figcaption aria-hidden="true">image-20220522182201123</figcaption>
</figure></li>
<li><p>/etc/group 记录组的信息 组名：口令：组标识号：组内用户列表</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522182432698.png"
alt="image-20220522182432698" />
<figcaption aria-hidden="true">image-20220522182432698</figcaption>
</figure></li>
</ul></li>
</ul>
<h2 id="运行级别">运行级别</h2>
<ul>
<li><p>基本介绍</p>
<ul>
<li>0 关机</li>
<li>1 单用户（找回密码）</li>
<li>2 多用户状态没有网络服务</li>
<li>3 多用户状态有网络服务</li>
<li>4系统未使用保留给用户</li>
<li>5 图形界面</li>
<li>6 系统重启</li>
</ul></li>
<li><p>在图形界面输入<code>init 3</code> 会直接进入终端界面</p>
<ul>
<li>之后输入<code>init 5</code> 会重新进入图形界面</li>
</ul></li>
<li><p><code>init 0</code>会直接关机</p></li>
<li><p>指定默认级别 centosOS7之前，在/etc/inittab文件中
之后进行了简化，如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522210857114.png"
alt="image-20220522210857114" /></p></li>
<li><p>查看默认级别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl get-default</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">multi-user.target</span> </span><br></pre></td></tr></table></figure></li>
<li><p>设置默认级别</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="找回root密码">找回root密码</h2>
<ul>
<li><p>这里讲的是centos os7之后</p></li>
<li><p>重启后，立马按e</p></li>
<li><p>然后光标往下滑 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522211551545.png"
alt="image-20220522211551545" /></p>
<ul>
<li><p>在utf-8后面，加入 init=/bin/sh （进入单用户实例，注意
这里不要加入空格）</p></li>
<li><p>然后ctrl+x 表示启动</p></li>
<li><p>然后输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure></li>
<li><p>修改成功 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522212928883.png"
alt="image-20220522212928883" /></p></li>
<li><p>然后再输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /.autorelabel </span><br><span class="line">exec /sbin/init</span><br></pre></td></tr></table></figure></li>
<li><p><code>exec /sbin/init</code>之后时间比较长，等待一会，密码则生效</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522213539781.png"
alt="image-20220522213539781" />(卡住两三分钟)</p></li>
<li><p>ssh root@192.168.200.201 登录成功</p></li>
</ul></li>
</ul>
<h2 id="帮助指令">帮助指令</h2>
<ul>
<li><p>man ls <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522215502058.png"
alt="image-20220522215502058" /></p>
<ul>
<li>linux中，隐藏文件以 . 开头（以点开头）</li>
<li>输入q退出man</li>
<li>ls选项可以组合使用</li>
<li>ls -l 单列输出(use a long listing format)，信息最全 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522215644598.png"
alt="image-20220522215644598" /></li>
<li><code>ls -la</code> 单列输出，包括隐藏文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522215823025.png"
alt="image-20220522215823025" /></li>
<li><code>ls -al /root</code> 显示/root目录下的内容</li>
</ul></li>
<li><p>help 内置命令的帮助信息</p>
<ul>
<li>该命令在zsh下不能用，所以使用下面指令切换 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash #zsh切换到bash，重启后生效</span><br><span class="line">chsh -s /bin/zsh #bash切换到zsh，重启后生效</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<p><code>help cd</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220522220929771.png"
alt="image-20220522220929771" /></p>
<ul>
<li>End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_28-39</title>
    <url>/2022/05/22/study/linux/hanshunping/28-39/</url>
    <content><![CDATA[<h2 id="文件目录">文件目录</h2>
<ul>
<li><p>用来定位绝对路径或相对路径 cd ~ 用来定位家目录 cd .. 返回上一级
cd - 返回上一次目录</p></li>
<li><p>mkdir 用于创建目录 mkdir -p hello/l1/l2 多级目录创建</p></li>
<li><p>recursion 递归 rm -rf 要删除的目录 #递归删除</p></li>
<li><p>使用cp进行复制，加上 -r 进行递归复制</p></li>
<li><p>rm 删除某个文件（带提示）</p>
<ul>
<li>rm -f 删除文件（不带提示）</li>
<li>rm -rf 强制删除递归文件（夹）</li>
</ul></li>
<li><p>mv 用来重命名（移动到同一目录下）、（或者移动文件）</p></li>
<li><p>注意，下面的命令，是将hello移动到hello2下，并改名为a（而不是hello2下的a目录）
<code>mv Hello.java hello2/a</code></p>
<ul>
<li><code>mv Hello.java hello2/a/</code>
移动到hello2下的a目录下(最后有一个斜杠)</li>
</ul></li>
<li><p>移动目录</p>
<ul>
<li><p><code>mv hello2 hello1/AB</code> 或者
<code>mv hello2/ hello1/AB</code></p>
<p>或者 <code>mv hello2/ hello1/AB/</code></p>
<p>会把整个hello2文件夹（包括hello2）移动到AB下</p></li>
<li><p>同样是上面的指令，如果AB不存在，那么就会将hello2移动到hello1下，并将hello2文件夹，改名为AB</p></li>
</ul></li>
<li><p>cat 指令</p>
<ul>
<li>cat -p /etc/profile 浏览并显示文件</li>
<li>管道命令 cat -p /etc/profile | more 把前面的结果再交给more处理
（输入enter查看下一行，空格查看下一页）</li>
</ul></li>
<li><p>less指令</p>
<ul>
<li><code>less /etc/profile</code></li>
<li>less指令显示的时候，是按需加载内容，效率较高, q退出</li>
</ul></li>
<li><p>echo 输出到控制台</p>
<ul>
<li><code>echo $HOSTNAME</code> 输出环境变量</li>
</ul></li>
<li><p>head 文件前几行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -3 /etc/profile #查看文件前三行</span><br></pre></td></tr></table></figure></li>
<li><p>tail 文件后几行</p>
<ul>
<li>实时监控 <code>tail -f mydate.txt</code></li>
<li>覆盖 echo "hello" &gt; mydate.txt</li>
<li>追加 echo "hi" &gt;&gt; mydate.txt</li>
<li><code>cal &gt; mydate.txt</code> 将日志添加到文件后</li>
</ul></li>
<li><p>ln指令 <code>ln -s /root/ /home/myroot</code>
在home下创建一个软链接，名为myroot，连接到root <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625111839310.png"
alt="image-20220625111839310" /></p>
<ul>
<li>此时cd myroot，就会进入root文件夹</li>
<li>使用rm -f 删除软连接</li>
<li>动态链接库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625112225096.png"
alt="image-20220625112225096" /></li>
</ul></li>
<li><p>history 查看曾经执行过的命令 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625112304045.png"
alt="image-20220625112304045" /></p></li>
<li><p>! + 数字，执行曾经执行过的指令 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625112404167.png"
alt="image-20220625112404167" /></p></li>
</ul>
<h2 id="时间日期">时间日期</h2>
<ul>
<li>date指令-- 显示当前日期
<ul>
<li>date <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625115448968.png"
alt="image-20220625115448968" /></li>
<li>date +%Y 年份</li>
<li>date +%m 月份</li>
<li>date +%d 哪一天</li>
<li>date "+%Y-%m-%d %H:%M:%S" 年月日时分秒</li>
</ul></li>
<li>cal 2020 #2020年所有日历</li>
</ul>
<h2 id="查找指令">查找指令</h2>
<ul>
<li><p>find /home -name hello.txt 在/home目录下，按名字查找hello.txt
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625171329905.png"
alt="image-20220625171329905" /></p></li>
<li><p>find /home -user tom 按拥有者查找</p></li>
<li><p>find / -size -10M | more 查找小于10M的文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625171702139.png"
alt="image-20220625171702139" /></p></li>
<li><p>ls -lh (h,以更符合人类查看的的方式显示) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625171829876.png"
alt="image-20220625171829876" /></p></li>
<li><p>locate 搜索文件 （locate之前要使用updatedb指令创建） (先使用yum
install -y mlocate 进行安装)</p></li>
<li><p>进行查找 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625172105001.png"
alt="image-20220625172105001" /></p></li>
<li><p>which ls 查看ls在哪个目录下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625172523337.png"
alt="image-20220625172523337" /></p></li>
<li><p>grep 过滤查找，管道符，"|"
表示将前一个命令的处理结果输出传递给后面的命令处理</p>
<p>cat /etc/profile | grep 22 -n -i <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625173029491.png"
alt="image-20220625173029491" /></p></li>
</ul>
<h2 id="压缩和解压">压缩和解压</h2>
<ul>
<li>使用gzip 和 gunzip <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625174456544.png"
alt="image-20220625174456544" /></li>
<li>tar 用来压缩或者解压 压缩后的格式 .tar.gz</li>
<li>选项说明
<ul>
<li>-c 产生.tar打包文件</li>
<li>-v 显示详情信息</li>
<li>-f 指定压缩后的文件名</li>
<li>-z 打包同时压缩</li>
<li>-x 解包.tar文件</li>
</ul></li>
<li>使用
<code>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt</code></li>
<li>解压 tar -zxvf pc.tar.gz</li>
<li>解压到指定的目录 <code>tar -zxvf pc.tar.gz -C tom/</code></li>
</ul>
<h2 id="section"></h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_40-51</title>
    <url>/2022/06/25/study/linux/hanshunping/40-51/</url>
    <content><![CDATA[<h2 id="组介绍">组介绍</h2>
<ul>
<li>每个用户必定属于某个组</li>
<li>每个文件有几个概念：所有者、所在组、其他组
tom创建了hello.txt，则所有者为tom，默认所在组为tom组
除了所在组，就是其他组</li>
<li>ls -ahl （h更友好，a隐藏，l列表）</li>
<li></li>
</ul>
<h2 id="所有者">所有者</h2>
<ul>
<li>使用chown root helo.java 修改，效果如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625210209090.png"
alt="image-20220625210209090" /></li>
</ul>
<h2 id="所在组修改">所在组修改</h2>
<ul>
<li>组的创建 groupadd monster</li>
<li>创建一个用户并让他属于该组 useradd -g monster fox</li>
<li>注意逻辑，此时使用fox创建文件 passwd fox 给fox创建密码</li>
<li>如图，创建一个文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625211309539.png"
alt="image-20220625211309539" /></li>
<li>使用chgrp fruit orange.txt 修改文件的所在组 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625211606756.png"
alt="image-20220625211606756" /></li>
<li>改变某个用户所在组 usermod -g fruit fox <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220625211830725.png"
alt="image-20220625211830725" /></li>
<li>使用 cat /etc/group 查看所有的组</li>
<li>当一个用户属于多个组的时候，groups会出现多个组名</li>
</ul>
<h2 id="rwx权限">rwx权限</h2>
<p>rwxrwxrwx 第一列有十位，第0位确认文件类型
-普通文件，l是链接；d是目录；c是字符设备文件、鼠标、键盘；b块设备
1-3表示文件所有者拥有的权限；4-6是文件所在组所拥有的权限，7-9
其他组所拥有的权限</p>
<ul>
<li><p>rwx作用到文件，r代表可读可查看，w代表可修改（如果是删除权限，则必须在该文件所在的目录有写权限，才能删除），x代表可执行</p></li>
<li><p>rwx作用到目录，r表示可以读取(ls可查看目录内容)，w表示可写（可以在目录内创建、删除、重命名目录），x表示可以进入该目录</p></li>
<li><p>rwx分别用数字表示，4，2，1。当拥有所有权限，则为7</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626113838606.png"
alt="image-20220626113838606" />
<figcaption aria-hidden="true">image-20220626113838606</figcaption>
</figure>
<ul>
<li>最后面的数字，代表连接数（或者子目录数）</li>
<li>1213 文件大小（字节），如果是文件夹则显示4096</li>
<li>最后abc表示文件名，蓝色表示是目录</li>
</ul></li>
</ul>
<h2 id="修改权限">修改权限</h2>
<ul>
<li>chmod 修改权限，u：所有者，g：所有组，o：其他人，a
所有（ugo总和）</li>
<li>chmod u=rwx,g=rw,o=x 文件/目录名 这里等号表示直接给权限</li>
<li>chmod o+w 文件/目录名 这里加表示+权限</li>
<li>chmod a-x 文件/目录名</li>
<li>chmod u=rwx,g=rx,o=rx abc 给文件添加执行权限（会变成绿色的）</li>
<li>使用数字
<ul>
<li>将abc.txt文件权限修改成rwxr-xr-x使用数字实现 chmod 755 abc</li>
<li></li>
</ul></li>
</ul>
<h2 id="修改所有者和所在组">修改所有者和所在组</h2>
<ul>
<li>chown tom abc #修改文件所有者为tom</li>
<li>chown -R tom abc #修改文件夹及其所有子目录所有者为tom</li>
<li>chgrp -R fruit kkk #修改文件夹所在组为fruit</li>
</ul>
<h2 id="权限管理应用实例">权限管理应用实例</h2>
<ul>
<li><p>警察和土匪的游戏</p>
<p>前提，有police和bandit两个组，</p>
<p>jack，jerry属于警察组</p>
<p>xh，xq属于土匪组</p>
<ul>
<li><pre class="shell"><code>  groupadd police
  groupadd bandit
  useradd -g police jack
  useradd -g police jerry
  useradd -g bandit xh
  useradd -g bandit xq</code></pre></li>
</ul></li>
<li><p>chmod 640 jack.txt</p></li>
<li><p>chmod o=r,g=rw jack.txt</p></li>
<li><p>如果要对目录内操作，那么先有改目录相应权限</p>
<ul>
<li>chmod 770 jack 放开jack目录权限</li>
</ul></li>
<li></li>
</ul>
<p>题目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626135938689.png"
alt="image-20220626135938689" /></p>
<p>对一个目录不能ls(没有读权限)，但是是可以直接读写目录中的文件的（有权限的情况下）</p>
<h2 id="section"></h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>52-X</title>
    <url>/2022/06/26/study/linux/hanshunping/52-X/</url>
    <content><![CDATA[<h2 id="crond快速入门">crond快速入门</h2>
<ul>
<li><p>使用命令 crontab -e 创建一个定时任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt</span><br></pre></td></tr></table></figure></li>
<li><p>特殊符号 ，代表不连续 -破折号 表示连续 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626213003228.png"
alt="image-20220626213003228" /></p></li>
<li><p>其他 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626213032958.png"
alt="image-20220626213032958" /></p></li>
<li><p>定时调用脚本</p>
<ul>
<li><p>编辑脚本 my.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date &gt;&gt; /home/mycal</span><br><span class="line">date &gt;&gt; /home/mycal</span><br></pre></td></tr></table></figure></li>
<li><p>给脚本赋予x权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x my.sh</span><br></pre></td></tr></table></figure></li>
<li><p>crontab -e</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/1 * * * * my.sh</span><br></pre></td></tr></table></figure></li>
<li><p>数据库备份 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626213947157.png"
alt="image-20220626213947157" /></p></li>
<li><p>crontab -r 删除</p></li>
<li><p>crontab -l 列出</p></li>
<li><p>crontab -e 编辑任务</p></li>
</ul></li>
<li><p>atd 是否在运行 yum install -y atd systemctl start atd</p></li>
<li><p>job队列 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626215635347.png"
alt="image-20220626215635347" /></p></li>
<li><p>at选项 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626215716700.png"
alt="image-20220626215716700" /></p></li>
<li><p>at指定时间 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626215801620.png"
alt="image-20220626215801620" /></p></li>
<li><p>添加任务 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626215928419.png"
alt="image-20220626215928419" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626220003771.png"
alt="image-20220626220003771" /></p></li>
<li><p>at 5pm tomorrow 明天下午5点</p></li>
<li><p>at now + 2 minutes 2分钟后</p></li>
<li><p>atrm 5 删除5号</p></li>
<li><p>两分钟后执行某个脚本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626220501514.png"
alt="image-20220626220501514" /></p></li>
</ul>
<h2 id="磁盘分区">磁盘分区</h2>
<ul>
<li>分区跟文件系统的关系 (挂载) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626222050964.png"
alt="image-20220626222050964" />
<ul>
<li>将一个分区挂载到某个目录，用户进入到某个目录，就相当于访问到某个分区了</li>
</ul></li>
<li>lsblk <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626222256630.png"
alt="image-20220626222256630" /></li>
<li>linux分IDE硬盘和SCSI硬盘 目前基本是SCSI硬盘</li>
<li>sdx~ x代表abcd，~表示数字 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626222510701.png"
alt="image-20220626222510701" /></li>
<li>lsblk -f <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626222614058.png"
alt="image-20220626222614058" />
<ul>
<li>文件类型，唯一标识符</li>
</ul></li>
<li>现在挂载一个分区
<ul>
<li>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626222807308.png"
alt="image-20220626222807308" /></li>
<li>给虚拟机，添加一个硬盘 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223028438.png"
alt="image-20220626223028438" /></li>
<li>重启后，使用lsblk <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223150450.png"
alt="image-20220626223150450" /></li>
<li>进行分区
<ul>
<li>fdisk /dev/sdb <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223337715.png"
alt="image-20220626223337715" /></li>
<li>之后输入p，</li>
<li>输入分区数（这里是1）</li>
<li>最后一步，输入w ，写入分区并退出</li>
<li>查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223525243.png"
alt="image-20220626223525243" /></li>
</ul></li>
<li>将分区格式化 mkfs -t ext4 /dev/sdb1
<ul>
<li>查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223655104.png"
alt="image-20220626223655104" /></li>
</ul></li>
<li>进行挂载 mount /dev/sdb1 /newdisk/ <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626223904432.png"
alt="image-20220626223904432" /></li>
<li>umount /dev/sdb1 卸载 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626224039049.png"
alt="image-20220626224039049" /></li>
<li>用命令行挂载的指令，重启后挂载关系会消失 永久挂载：修改/etc/fstab
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626224212404.png"
alt="image-20220626224212404" />
<ul>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626224503064.png"
title="fig:" alt="image-20220626224503064" /></li>
</ul></li>
</ul></li>
<li>df -h 查看磁盘使用情况 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220626224736953.png"
alt="image-20220626224736953" /></li>
<li>du -h --max-depth=1 /opt</li>
<li>ls -l /opt | grep "^-" | wc -l 使用正则，并统计数量</li>
<li>ls -lR /opt 注意，这里加了R，将递归显示</li>
<li>使用yum install -y tree <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627211916834.png"
alt="image-20220627211916834" /></li>
</ul>
<h2 id="网络配置">网络配置</h2>
<ul>
<li><p>ifconfig 查看ip</p></li>
<li><p>网络的互通 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627214540151.png"
alt="image-20220627214540151" /></p></li>
<li><p>虚拟网络编辑器 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627214641445.png"
alt="image-20220627214641445" /></p></li>
<li><p>使用ping判断主机间是否互通</p></li>
<li><p>vi /etc/sysconfig/network-scripts/ifcfg-ens33 编辑ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;8c2741af-382a-44a6-b161-aed16a29875d&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line"></span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=192.168.200.160</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=192.168.200.2</span><br></pre></td></tr></table></figure>
<ul>
<li>注意最后五行</li>
</ul></li>
<li><p>修改hostname vim /etc/hostname</p></li>
</ul>
<h2 id="进程">进程</h2>
<ul>
<li>每一个执行的程序被称为一个进程，每一个进程都分配一个ID号-</li>
<li>每个进程都可以以前台/后台方式运行</li>
<li>一半系统服务以后台进程方式存在的</li>
<li>使用ps显示进程 ps -aux</li>
<li>一些参数解释 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627215758624.png"
alt="image-20220627215758624" /></li>
<li>使用grep过滤 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627215851994.png"
alt="image-20220627215851994" /></li>
<li>进程的父进程 ps -ef <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220040122.png"
alt="image-20220627220040122" />
<ul>
<li>由systemd生成启动其他进程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220109916.png"
alt="image-20220627220109916" /></li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220212058.png"
title="fig:" alt="image-20220627220212058" /></li>
</ul></li>
<li>子进程之间关系 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220313798.png"
alt="image-20220627220313798" /></li>
<li>进程的终止 kill / killall
<ul>
<li>killall 将子进程一起杀死 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220428882.png"
alt="image-20220627220428882" /></li>
<li>kill -9 强制终止 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220734955.png"
alt="image-20220627220734955" /></li>
<li>如果把sshd杀死，那就再也连不上了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627220924098.png"
alt="image-20220627220924098" /></li>
<li>重新启动sshd /bin/systemctl start sshd.service <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627221018337.png"
alt="image-20220627221018337" /></li>
<li>yum -y install psmisc</li>
<li>pstree -u 带上用户</li>
<li>pstree -p 带上进程号</li>
</ul></li>
</ul>
<h2 id="服务管理">服务管理</h2>
<ul>
<li>服务，本质上就是进程</li>
<li>service 服务名 start|stop|restart|reload|status</li>
<li>centos7.0之后，主要用systemctl</li>
<li>还使用service的命令 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627221640674.png"
alt="image-20220627221640674" /></li>
<li>网络连接查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627221719767.png"
alt="image-20220627221719767" /></li>
<li>服务的运行级别 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627221837794.png"
alt="image-20220627221837794" /></li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220627221921940.png"
alt="image-20220627221921940" /> systemctl set-default graphical.target
//默认进入图形化界面</li>
<li></li>
</ul>
<h2 id="rpm管理">rpm管理</h2>
<h2 id="软件包管理">软件包管理</h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>01-21 maven多模块管理_动力节点</title>
    <url>/2022/07/17/study/maven/advance_dljd/01-21/</url>
    <content><![CDATA[<h2 id="场景介绍">场景介绍</h2>
<ul>
<li>业务依赖 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717111347798.png"
alt="image-20220717111347798" /></li>
<li>多模块管理 版本管理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717111541819.png"
alt="image-20220717111541819" /></li>
</ul>
<h2 id="第1种方式">第1种方式</h2>
<h3 id="创建父工程">创建父工程</h3>
<ul>
<li><p>先创建一个空项目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717114553244.png"
alt="image-20220717114553244" /></p></li>
<li><p>在这个空项目下，创建一个module当作maven父工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717115140216.png"
alt="image-20220717115140216" /></p></li>
<li><p>结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717115232222.png"
alt="image-20220717115232222" /></p></li>
<li><p>pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>001-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     packaging 标签指定打包方式，默认为jar</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        maven父工程必须遵守以下两点要求</span></span><br><span class="line"><span class="comment">        1、packaging标签的文本内容必须设置为pom</span></span><br><span class="line"><span class="comment">        2、把src删除</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="介绍pom文件">介绍pom文件</h3>
<p>pom 项目对象模型，project object model，该文件可以子工程被继承
maven多模块管理，其实就是让它的子模块的pom文件来继承父工程的pom</p>
<h3 id="创建maven-java子工程">创建maven java子工程</h3>
<ul>
<li><p>新建一个module</p>
<p>注意路径，002在IDEA-maven的目录下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717212253387.png"
alt="image-20220717212253387" /></p></li>
<li><p>查看pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指向父工程的gav坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>001-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--相对路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../001-maven-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>002-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="创建maven-web子工程">创建maven web子工程</h3>
<ul>
<li><p>创建新模块 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220718230918949.png"
alt="image-20220718230918949" /></p></li>
<li><p>查看pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>001-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../001-maven-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>003-maven-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="修改子工程为父工程">修改子工程为父工程</h3>
<p>​ 1 父工程的pom.xml种的packaging标签的文本内容必须设置pom</p>
<p>​ 2 删除src目录</p>
<ul>
<li><p>如图，比如这里修改002-maven-java为父工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719211746353.png"
alt="image-20220719211746353" /></p></li>
<li><p>添加004为002的子工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719212412870.png"
alt="image-20220719212412870" /></p></li>
<li><p>查看pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>002-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../002-maven-java/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>004-maven-java-1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3
id="手动修改maven工程为子工程非idea中">手动修改Maven工程为子工程(非idea中)</h3>
<ul>
<li><p>这里说的是，创建子工程的时候，没有选择父工程
创建完之后的pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>005-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改（添加parent标签即可）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>001-maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../001-maven-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>005-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719214101482.png"
alt="image-20220719214101482" /></p></li>
</ul>
<h3 id="子模块继承父工程所有依赖">子模块继承父工程所有依赖</h3>
<ul>
<li><p>比如在父工程添加这块依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>如下 父工程添加的依赖，所有子模块会无条件继承</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719221547553.png"
alt="image-20220719221547553" />
<figcaption aria-hidden="true">image-20220719221547553</figcaption>
</figure></li>
</ul>
<h3 id="父工程管理依赖">父工程管理依赖</h3>
<ul>
<li><p>依赖冗余的问题 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719221717734.png"
alt="image-20220719221717734" /></p></li>
<li><p>加强管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加强管理--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>结果，依赖都没有了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719221905519.png"
alt="image-20220719221905519" /></p></li>
</ul>
<h3 id="子工程声明式继承父工程依赖">子工程声明式继承父工程依赖</h3>
<ul>
<li><p>比如002-maven-java（子模块，但又是004的父工程）需要mysql</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>效果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719222137863.png"
alt="image-20220719222137863" /></p>
<ul>
<li>子模块依赖的版本号继承父工程依赖的版本号</li>
<li>如果子模块指定以来的版本号，那就不会继承父工程依赖的版本号</li>
</ul></li>
</ul>
<h3 id="父工程管理依赖版本号">父工程管理依赖版本号</h3>
<ul>
<li><p>使用properties变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义标签名称--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--约定：通常管理依赖版本号的标签名：项目名称-字段version，</span></span><br><span class="line"><span class="comment">		项目名称.字段version--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit-version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-connector-java-version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">mysql-connector-java-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo-version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">dubbo-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加强管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-connector-java-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="回顾第1种实现方式">回顾第1种实现方式</h3>
<ul>
<li>父工程的要求</li>
<li>子工程的添加</li>
<li>子工程改为父工程</li>
<li>子工程和父工程是平级的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719224335202.png"
alt="image-20220719224335202" /></li>
<li>父工程加强管理
<code>&lt;dependencyManagement&gt;&lt;/&lt;dependencyManagement&gt;</code></li>
<li>注意，第一种方法父工程的pom.xml中，这个也应该是必须的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719231834807.png"
alt="image-20220719231834807" /></li>
</ul>
<h2 id="第2种方式">第2种方式</h2>
<h3 id="创建父工程-1">创建父工程</h3>
<ul>
<li><p>最顶层创建一个工程（父工程） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719230455080.png"
alt="image-20220719230455080" /></p></li>
<li><p>pom文件（未处理）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>目录结构(未处理) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719230730707.png"
alt="image-20220719230730707" /></li>
</ul></li>
<li><p>处理后 pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.packaging标签文本内容必须设置为pom</span></span><br><span class="line"><span class="comment">    2.删除src目录</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719231025823.png"
alt="image-20220719231025823" /></li>
</ul></li>
</ul>
<h3 id="创建子工程">创建子工程</h3>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719231137679.png"
alt="image-20220719231137679" />
<figcaption aria-hidden="true">image-20220719231137679</figcaption>
</figure>
<ul>
<li><p>子工程的pom.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;!--指向父工程--&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.bjpowernode.maven&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">        &lt;!--注意，这里不需要找pom.xml，因为该子工程和父工程的pom.xml同级--&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;maven-java-001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>父工程的pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--父工程包含的所有子模块--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.packaging标签文本内容必须设置为pom</span></span><br><span class="line"><span class="comment">    2.删除src目录</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>第二个子模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-web-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>父工程pom.xml的变化 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719232239555.png"
alt="image-20220719232239555" /></li>
</ul></li>
</ul>
<h3 id="创建子工程的子工程">创建子工程的子工程</h3>
<ul>
<li><p>父工程必须遵循</p>
<ul>
<li>packaging标签文本内容设置为pom</li>
<li>删除src目录</li>
</ul></li>
<li><p>创建子工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220719232610617.png"
alt="image-20220719232610617" /></p></li>
<li><p>maven-java-001的pom.xml查看</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指向父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意，这里不需要找pom.xml，因为该子工程和父工程的pom.xml同级--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-java-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven-java-0101<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>子模块的pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-java-001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-java-0101<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="父工程管理依赖-1">父工程管理依赖</h3>
<ul>
<li>父工程的pom文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720213456439.png"
alt="image-20220720213456439" /></li>
<li>子模块也一起继承了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720213519201.png"
alt="image-20220720213519201" /></li>
<li>父工程管理所有依赖 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720213626025.png"
alt="image-20220720213626025" /></li>
<li>如果子工程需要，则使用声明式依赖 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720213729734.png"
alt="image-20220720213729734" />
<ul>
<li>也可以自己指定版本号</li>
</ul></li>
</ul>
<h3 id="父工程管理依赖的版本号">父工程管理依赖的版本号</h3>
<ul>
<li>使用properties管理版本号，和第一种方式一样</li>
</ul>
<h3 id="子工程继承父工程编译插件">子工程继承父工程编译插件</h3>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720213929453.png"
alt="image-20220720213929453" />
<figcaption aria-hidden="true">image-20220720213929453</figcaption>
</figure>
<p>修改之后，这里为了看效果，改成1.6</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720214213184.png"
alt="image-20220720214213184" />
<figcaption aria-hidden="true">image-20220720214213184</figcaption>
</figure>
<h2 id="第3种方式">第3种方式</h2>
<p>前面两种混合使用</p>
<p>先创建一个空项目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720214447646.png"
alt="image-20220720214447646" /></p>
<p>然后假设有三个父工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720214902446.png"
alt="image-20220720214902446" /></p>
<p>然后每个父工程又都有子模块 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220720215038101.png"
alt="image-20220720215038101" /></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>maven多模块管理_动力节点</tag>
      </tags>
  </entry>
  <entry>
    <title>01-16 maven基础_动力节点</title>
    <url>/2022/07/02/study/maven/base_dljd/01-16/</url>
    <content><![CDATA[<h2 id="课程介绍">课程介绍</h2>
<ul>
<li>maven 自动化构建--&gt;开发--编译--运行-测试--打包--部署 （m ei '
ven）</li>
</ul>
<h2 id="maven的作用">maven的作用</h2>
<ul>
<li>软件是一个<strong>工程</strong></li>
<li>软件中重复的操作（开发阶段）
<ul>
<li>需求分析</li>
<li>设计阶段</li>
<li>开发阶段（编码），编译，测试</li>
<li>测试阶段（专业测试），测试报告</li>
<li>项目打包，发布，给客户安装项目</li>
</ul></li>
<li>maven
<ul>
<li>项目自动构建，清理、编译、测试、打包、安装、部署</li>
<li>管理依赖：项目中需要使用的其他资源</li>
</ul></li>
</ul>
<h2 id="maven中的概念">Maven中的概念</h2>
<ul>
<li>没有使用maven，管理jar，手动处理jar，以及jar之间的依赖</li>
<li>maven是apache 【əˈpætʃi】基金会的开源项目，使用java语法开发</li>
<li>maven是项目的自动化构建工具，管理项目依赖</li>
<li>maven中的概念
<ul>
<li>POM</li>
<li>约定的目录</li>
<li>坐标</li>
<li>依赖管理</li>
<li>仓库管理</li>
<li>生命周期</li>
<li>插件和目标</li>
<li>继承 （高级内容）</li>
<li>聚合 （高级内容）</li>
</ul></li>
</ul>
<h2 id="maven资源的获取与安装测试">Maven资源的获取与安装，测试</h2>
<ul>
<li><p>https://maven.apache.org/index.html</p>
<ul>
<li><p>各种内容 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703125536130.png"
alt="image-20220703125536130" /></p></li>
<li><p>要求 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703125601251.png"
alt="image-20220703125601251" /></p></li>
<li><p>视频用的3.6.3 ，这里下载3.8.6
（最新的，不要和电脑原配置冲突，方便学习，后续改回3.8.4）</p>
<ul>
<li><p>检查java home <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130221750.png"
alt="image-20220703130221750" /></p>
<ul>
<li>如果没有需要进行配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130338025.png"
alt="image-20220703130338025" /></li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130544132.png"
title="fig:" alt="image-20220703130544132" /></li>
</ul></li>
<li><p>将maven的bin目录配置到path环境变量下（这里使用的是下一节的方法，视频中没有用MAVEN_HOME，而是直接将maven的bin目录路径加到path中）
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130145290.png"
alt="image-20220703130145290" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130115851.png"
alt="image-20220703130115851" />
<figcaption aria-hidden="true">image-20220703130115851</figcaption>
</figure></li>
</ul></li>
</ul></li>
<li><p>maven解压后的目录结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703130727240.png"
alt="image-20220703130727240" /></p></li>
</ul>
<h2 id="另一种安装方式">另一种安装方式</h2>
<ul>
<li>确定JAVA_HOME是否有效</li>
<li>创建M2_HOME(MAVEN_HOME)，值为maven的安装目录</li>
<li>在path环境中，加入%M2_HOME%</li>
<li>测试maven安装 mvn -v</li>
</ul>
<h2 id="约定的目录结构">约定的目录结构</h2>
<ul>
<li><p>大多数人遵守的目录结构</p>
<ul>
<li><p>一个maven项目对应一个文件夹，比如Hello</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">	\src</span><br><span class="line">		\main			叫做主程序目录（完成项目功能的代码和配置文件）</span><br><span class="line">			\java		源代码（包和相关的类定义）</span><br><span class="line">			\resources  配置文件</span><br><span class="line">		\test			放置测试程序代码（开发人员自己写的测试代码）</span><br><span class="line">			\java		测试代码（junit）</span><br><span class="line">			\resources  测试程序的配置文件</span><br><span class="line">	\pom.xml			maven的配置文件</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="hello的maven项目">Hello的Maven项目</h2>
<ul>
<li><p>maven可以独立使用：创建项目、编译代码、测试程序、打包、部署等</p></li>
<li><p>和idea一起使用，实现编码、测试、打包</p></li>
<li><p>pom.xml基本模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>
<li><p>目录创建 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703160344622.png"
alt="image-20220703160344622" /></p></li>
<li><p>在main下创建一个com.bjpowernode的包，以及一个java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloMaven</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addNumber</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span>&#123;</span><br><span class="line"> 	System.out.println(<span class="string">&quot;hello maven -addNumber&quot;</span>);</span><br><span class="line"> 	<span class="keyword">return</span> n1+n2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">  	HelloMaven hello=<span class="keyword">new</span> <span class="title class_">HelloMaven</span>();</span><br><span class="line">  	<span class="type">int</span> res=hello.addNumber(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">  	System.out.println(<span class="string">&quot;在main方法中，执行hello的方法=&quot;</span>+res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在Hello目录下，进行编译 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703160827325.png"
alt="image-20220703160827325" /></p></li>
<li><p>使用<code>mvn compile</code>进行编译 第一次会下载一些东西 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703161351385.png"
alt="image-20220703161351385" /></p></li>
<li><p>查看target文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703161017403.png"
alt="image-20220703161017403" /></p></li>
<li><p>进入classes执行java程序</p>
<p><code>java com.bjpowernode.HelloMaven</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703161429075.png"
alt="image-20220703161429075" /></p></li>
</ul>
<h2 id="pom-modelversion">pom-modelVersion</h2>
<ul>
<li><p>pom--Project Object Model 项目对象模型</p></li>
<li><p>Maven把一个项目的结构和内容抽象成一个模型，在xml文件中进行声明，以方便进行构建和描述</p></li>
<li><p>pom文件解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--project是根标签，后面的是约束文件 (maven-v4_0_0.xsd)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!--pom模型版本,4.0.0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<h2
id="pom-groupidartifactidversion">pom-groupId，artifactId，version</h2>
<ul>
<li>坐标组成，groupid,artifactId,version <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703180442092.png"
alt="image-20220703180442092" /></li>
<li>作用：资源的唯一标识，maven中每个资源都是坐标，简称gav</li>
<li>groupId：组织名称，代码。公司或单位标识，常使用公司域名的倒写
<ul>
<li>如果规模大，可以是 域名倒写+大项目名称 例如百度无人车项目 ：
com.baidu.appollo</li>
</ul></li>
<li>artifactId：项目名称，如果groupId中有项目，此时当前的值就是子项目名，项目名称是唯一的</li>
<li>versionId：项目版本号，使用数字，推荐三位 例如
主版本号.次版本号.小版本号 例如 5.2.5
<ul>
<li>带快照的版本，以-SNAPSHOT结尾，即非稳定版本</li>
</ul></li>
</ul>
<h2 id="pom-gav作用">pom-gav作用</h2>
<ul>
<li>每个maven项目都有自己的gav</li>
<li>管理依赖，使用其他jar包，也用gav标识</li>
<li>坐标 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703181221145.png"
alt="image-20220703181221145" /></li>
<li>坐标值的获取 https://mvnrepository.com/ <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703181311395.png"
alt="image-20220703181311395" />
<ul>
<li>例如mysql <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703181414505.png"
alt="image-20220703181414505" /></li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703181441331.png"
title="fig:" alt="image-20220703181441331" /></li>
</ul></li>
</ul>
<h2 id="pom-依赖的使用">pom-依赖的使用</h2>
<ul>
<li><p>依赖dependency 项目中使用的其他资源（jar）
需要使用maven来表示依赖、管理依赖，通过使用dependencies、dependency和gav完成依赖的使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--maven使用gav标识，从互联网下载依赖的jar，下载到本机中，由maven管理项目使用的这些jar--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>完整</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--project是根标签，后面的是约束文件 (maven-v4_0_0.xsd)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!--pom模型版本,4.0.0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maven使用gav标识，从互联网下载依赖的jar，下载到本机中，由maven管理项目使用的这些jar--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--packaging 项目打包类型---&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="pom-打包类型">pom-打包类型</h2>
<p><packaging> 项目打包类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--project是根标签，后面的是约束文件 (maven-v4_0_0.xsd)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="comment">&lt;!--pom模型版本,4.0.0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<ul>
<li>其他 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220703182223670.png"
alt="image-20220703182223670" /></li>
</ul>
<h2 id="pom-继承和聚合">pom-继承和聚合</h2>
<ul>
<li>继承 parent</li>
<li>聚合 modules</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>maven_基础动力节点</tag>
      </tags>
  </entry>
  <entry>
    <title>17-30 maven基础_动力节点</title>
    <url>/2022/07/03/study/maven/base_dljd/17-30/</url>
    <content><![CDATA[<h2 id="本地仓库的设置">本地仓库的设置</h2>
<ul>
<li><p>远程仓库--&gt;本地仓库</p></li>
<li><p>maven仓库</p>
<ul>
<li>存放maven工具自己的jar包</li>
<li>第三方jar，比如mysql驱动</li>
<li>自己写的程序，可以打包为jar，存放到仓库</li>
</ul></li>
<li><p>分类</p>
<ul>
<li>本地仓库（本机）：位于自己计算机中，磁盘中某个目录
<ul>
<li><p>默认位置 登录操作系统的账号目录/.m2/repository C:.m2</p></li>
<li><p>可修改 比如放在d盘中</p>
<p>英[rɪˈpɒzətri] D:-maven-3.8.6 备份并编辑 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709111345399.png"
alt="image-20220709111345399" /> 改成左斜杠的方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/software/apache-maven-3.8.6/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>把之前user下的repository的文件都拷贝到
D:/software/apache-maven-3.8.6/repository 下 然后再对Hello项目进行编译
<code>mvn compile</code>
发现不会下载任何文件，且user下的repository也不会再进行下载</p></li>
<li><p>下面的资源是从maven中下载，或者用maven打包的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709112015535.png"
alt="image-20220709112015535" /></p></li>
</ul></li>
<li>pom.xml来说明某个项目需要怎么处理代码、项目结构</li>
</ul>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    				<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure></p>
<ul>
<li>mvn命令需要在pom.xml所在的目录下执行 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709112759294.png"
alt="image-20220709112759294" /></li>
</ul></li>
</ul>
<h2 id="仓库的工作方式">仓库的工作方式</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709112814643.png"
alt="image-20220709112814643" />
<figcaption aria-hidden="true">image-20220709112814643</figcaption>
</figure>
<h2 id="生命周期插件命令">生命周期插件命令</h2>
<ul>
<li>包括
清理（删除target文件，但是不处理已经install的jar）、编译（当前目录生成target目录，放置编译主程序之后生成的字节码）、测试（生成surefire-reports，保存测试结果）、报告、打包（打包主程序[编译、编译测试、测试，并按照pom.xml配置把主程序打包成jar包或war包]）、安装（把本工程打包，并按照工程坐标保存到本地仓库中）、部署(打包，保存到本地仓库，并保存到私服中，且自动把项目部署到web容器中)</li>
<li>插件：要完成构建项目的各个阶段，要使用maven的命令，执行命令的功能，是通过插件完成的
插件就是jar，一些类</li>
<li>命令：执行maven功能，通过命令发出，比如mvn
compile（编译时由相关的类来操作）</li>
</ul>
<h2 id="junit使用">junit使用</h2>
<ul>
<li><p>单元测试 junit：单元测试的工具，java中经常使用
单元，java中指的是方法，方法就是一个单元，方法是测试的最小单位</p></li>
<li><p>作用，使用junit去测试方法是否完成了要求，开发人员自测</p></li>
<li><p>使用单元测试</p>
<ul>
<li><p>加入junit的依赖（需要用他的类和方法）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12&gt;</span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在src/test/java目录中创建测试类文件，写测试代码</p>
<ul>
<li>测试类的定义，名称一般是Test+要测试的类名称</li>
<li>测试它的包名和要测试的类包名一样</li>
<li>在类中定义方法，要测试的代码</li>
<li>方法定义：public方法，没有返回值，名称自定义（建议Test+测试的方法名称）
方法没有参数</li>
<li>测试类中的方法，可以单独执行，测试类也可以单独执行</li>
<li>在该方法上面加入注解<code>@Test</code></li>
</ul></li>
<li><p>注意：mvn compile的时候，会下载3.8.2的jar包 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709170257384.png"
alt="image-20220709170257384" /></p></li>
</ul></li>
</ul>
<h2 id="创建测试类和测试方法">创建测试类和测试方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"><span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHelloMaven</span>&#123;</span><br><span class="line">	<span class="comment">//定义多个独立的测试方法，每个方法都是独立的</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAddNumber</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行了测试方法testAddNumber&quot;</span>);</span><br><span class="line">		HelloMaven hello=<span class="keyword">new</span> <span class="title class_">HelloMaven</span>();</span><br><span class="line">		<span class="type">int</span> res=hello.addNumber(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">		<span class="comment">//把计算结果res交给junit判断</span></span><br><span class="line">		<span class="comment">//期望值，实际值</span></span><br><span class="line">		Assert.assertEquals(<span class="number">30</span>,res);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相关命令">相关命令</h2>
<ul>
<li><p>mvn clean ，清理，删除以前生成的数据（删除target目录） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709165910300.png"
alt="image-20220709165910300" /></p>
<ul>
<li><p>插件及版本 maven-clean-plugin:2.5</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">d:\Users\ly\Documents\git\mavenwork\Hello&gt;mvn clean</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ch01-maven ---</span><br><span class="line">[INFO] Deleting d:\Users\ly\Documents\git\mavenwork\Hello\target</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.354 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:03:46+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>代码的编译 mvn compile：编译命令，把src/main/java
目录中的java代码编译为class文件
同时把class文件拷贝到target/classes目录，这个目录classes是存放类文件的根目录（也叫做类路径，classpath）</p>
<ul>
<li><p>编译后放到target 插件：maven-compiler-plugin:3.1 编译代码
maven-resources-plugin:2.6:resources
资源插件，作用是把src/main/resources目录中的文件拷贝到target/classes
目录中</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn compile</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\classes</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  3.164 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:20:30+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p></li>
<li><p>测试resources插件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709172307477.png"
alt="image-20220709172307477" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709172332617.png"
alt="image-20220709172332617" /></p></li>
</ul></li>
<li><p>mvn test-compile:编译命令，编译src/test/java
目录中的源文件，把生成的class拷贝到target/test-classes目录中，同时把src/test/resources目录中的文件拷贝到test-classes目录
命令执行前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709172752580.png"
alt="image-20220709172752580" /> 执行后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709172841433.png"
alt="image-20220709172841433" /></p>
<ul>
<li><p>插件 maven-resources-plugin:2.6:resources
maven-compiler-plugin:3.1:compile
maven-resources-plugin:2.6:testResources
maven-compiler-plugin:3.1:testCompile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">λ mvn test-compile</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.jar</span><br><span class="line">Downloading from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar</span><br><span class="line">Downloaded from central: https://repo.maven.apache.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar (45 kB at 24 kB/s)</span><br><span class="line">Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.12/junit-4.12.jar (315 kB at 118 kB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\test-classes</span><br><span class="line">[WARNING] /D:/Users/ly/Documents/git/mavenwork/Hello/src/test/java/com/bjpowernode/TestHelloMaven.java:[2,7]</span><br><span class="line">编码GBK的不可映射字符</span><br><span class="line">[WARNING] /D:/Users/ly/Documents/git/mavenwork/Hello/src/test/java/com/bjpowernode/TestHelloMaven.java:[8,42] 编码GBK的不可映射字符</span><br><span class="line">[WARNING] /D:/Users/ly/Documents/git/mavenwork/Hello/src/test/java/com/bjpowernode/TestHelloMaven.java:[14,29] 编码GBK的不可映射字符</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  8.085 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:28:14+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>mvn test
测试命令，执行test-classes目录的程序，测试src/main/java目录中的主程序是否符合要求
注意，这里还是会用到编译插件和资源插件，从 T E S T S 开始测试
结果Results :</p>
<p>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 测试插件
maven-surefire-plugin:2.12.4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn test</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\test-classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ch01-maven ---</span><br><span class="line">[INFO] Surefire report directory: D:\Users\ly\Documents\git\mavenwork\Hello\target\surefire-reports</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.bjpowernode.TestHelloMaven</span><br><span class="line">执行了测试方法testAddNumber</span><br><span class="line">hello maven -addNumber</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.131 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  4.630 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:32:49+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>测试报告 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709173436937.png"
alt="image-20220709173436937" /></p>
<ul>
<li><p>测试失败的情况 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709173514572.png"
alt="image-20220709173514572" /></p>
<ul>
<li><p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn test</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent![INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\test-classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ch01-maven ---</span><br><span class="line">[INFO] Surefire report directory: D:\Users\ly\Documents\git\mavenwork\Hello\target\surefire-reports</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.bjpowernode.TestHelloMaven</span><br><span class="line">执行了测试方法testAddNumber</span><br><span class="line">hello maven -addNumber</span><br><span class="line">Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.217 sec &lt;&lt;&lt; FAILURE!</span><br><span class="line">testAddNumber(com.bjpowernode.TestHelloMaven)  Time elapsed: 0.043 sec  &lt;&lt;&lt; FAILURE!</span><br><span class="line">java.lang.AssertionError: expected:&lt;60&gt; but was:&lt;30&gt;</span><br><span class="line">        at org.junit.Assert.fail(Assert.java:88)</span><br><span class="line">        at org.junit.Assert.failNotEquals(Assert.java:834)</span><br><span class="line">        at org.junit.Assert.assertEquals(Assert.java:645)</span><br><span class="line">        at org.junit.Assert.assertEquals(Assert.java:631)</span><br><span class="line">        at com.bjpowernode.TestHelloMaven.testAddNumber(TestHelloMaven.java:15)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class="line">        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class="line">        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class="line">        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</span><br><span class="line">        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</span><br><span class="line">        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class="line">        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class="line">        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class="line">        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class="line">        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br><span class="line">        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span><br><span class="line">        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)</span><br><span class="line">        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)</span><br><span class="line">        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)</span><br><span class="line">        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)</span><br><span class="line">        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)</span><br><span class="line">        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)</span><br><span class="line">        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Failed tests:   testAddNumber(com.bjpowernode.TestHelloMaven): expected:&lt;60&gt; but was:&lt;30&gt;</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 1, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  8.018 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:35:38+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project ch01-maven: There are test failures.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] Please refer to D:\Users\ly\Documents\git\mavenwork\Hello\target\surefire-reports for the individual test results.</span><br><span class="line">[ERROR] -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
<li><p>mvn package
打包，作用是把项目中的资源class文件和配置文件，都放到一个压缩包中，默认压缩文件是jar类型，web应用是war类型，扩展名jar/war
这里进行了编译、测试、打包 [INFO] Building jar:
D:-maven-1.0-SNAPSHOT.jar 打包插件 maven-jar-plugin:2.4:jar
(default-jar) @ ch01-maven
maven-jar-plugin:2.4用来执行打包，会生成jar扩展名文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn package</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\test-classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ch01-maven ---</span><br><span class="line">[INFO] Surefire report directory: D:\Users\ly\Documents\git\mavenwork\Hello\target\surefire-reports</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.bjpowernode.TestHelloMaven</span><br><span class="line">执行了测试方法testAddNumber</span><br><span class="line">hello maven -addNumber</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.135 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ ch01-maven ---</span><br><span class="line">[INFO] Building jar: D:\Users\ly\Documents\git\mavenwork\Hello\target\ch01-maven-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  5.624 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:40:44+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<ul>
<li><p>生成ch01-maven-1.0-SNAPSHOT.jar 坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打包的文件名 artifactId-version.packaging 查看jar <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709174531640.png"
alt="image-20220709174531640" /></p>
<p>打包的文件中，包括src/main目录中所有的生成的class文件和配置文件（resources下），和测试test无关</p></li>
</ul></li>
<li><p>mvn install 把生成的打包文件（jar）安装到maven仓库中
插件：maven-install-plugin-2.4</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn install</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 1 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ ch01-maven ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ ch01-maven ---</span><br><span class="line">[INFO] Surefire report directory: D:\Users\ly\Documents\git\mavenwork\Hello\target\surefire-reports</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.bjpowernode.TestHelloMaven</span><br><span class="line">执行了测试方法testAddNumber</span><br><span class="line">hello maven -addNumber</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.162 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ ch01-maven ---</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-install-plugin:2.4:install (default-install) @ ch01-maven ---</span><br><span class="line">[INFO] Installing D:\Users\ly\Documents\git\mavenwork\Hello\target\ch01-maven-1.0-SNAPSHOT.jar to D:\software\apache-maven-3.8.6\repository\com\bjpowernode\ch01-maven\1.0-SNAPSHOT\ch01-maven-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] Installing D:\Users\ly\Documents\git\mavenwork\Hello\pom.xml to D:\software\apache-maven-3.8.6\repository\com\bjpowernode\ch01-maven\1.0-SNAPSHOT\ch01-maven-1.0-SNAPSHOT.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  5.063 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:48:43+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>如上，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Installing D:\Users\ly\Documents\git\mavenwork\Hello\target\ch01-maven-1.0-SNAPSHOT.jar to D:\software\apache-maven-3.8.6\repository\com\bjpowernode\ch01-maven\1.0-SNAPSHOT\ch01-maven-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>路径 com-maven\1.0-SNAPSHOT ，如下，跟坐标有关</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--groupId出现点，则使用\（文件夹）分割</span></span><br><span class="line"><span class="comment">	artifactId 独立文件夹</span></span><br><span class="line"><span class="comment">	version 独立文件夹</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709175553540.png"
alt="image-20220709175553540" /></p></li>
<li><p>部署 mvn deploy
部署主程序（把本工程打包，按照本工程的坐标保存到本地仓库中，并且保存到私服仓库中，还会自动把项目部署到web容器中</p></li>
<li><p>以上命令是可以组合着用的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">λ mvn clean compile</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.bjpowernode:ch01-maven &gt;---------------------</span><br><span class="line">[INFO] Building ch01-maven 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ch01-maven ---</span><br><span class="line">[INFO] Deleting D:\Users\ly\Documents\git\mavenwork\Hello\target</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ ch01-maven ---</span><br><span class="line">[WARNING] Using platform encoding (GBK actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] Copying 2 resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ ch01-maven ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been set, using platform encoding GBK, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 1 source file to D:\Users\ly\Documents\git\mavenwork\Hello\target\classes</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  2.725 s</span><br><span class="line">[INFO] Finished at: 2022-07-09T17:53:36+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="配置插件">配置插件</h2>
<ul>
<li><p>常用插件设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>先看一下，目前的版本 maven-compiler-plugin:3.1:compile</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>maven_基础动力节点</tag>
      </tags>
  </entry>
  <entry>
    <title>31-43 maven基础_动力节点</title>
    <url>/2022/07/09/study/maven/base_dljd/31-43/</url>
    <content><![CDATA[<h2 id="idea中设置maven">idea中设置maven</h2>
<ul>
<li>和idea集成maven <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220709184037929.png"
alt="image-20220709184037929" /></li>
<li></li>
</ul>
<h2 id="创建普通的j2se项目">创建普通的j2se项目</h2>
<ul>
<li><p>使用idea创建空白项目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713231150543.png"
alt="image-20220713231150543" /></p></li>
<li><p>新建一个module <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713231850412.png"
alt="image-20220713231850412" /></p></li>
<li><p>使用模板创建普通java项目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713232000630.png"
alt="image-20220713232000630" /></p></li>
<li><p>输入gav <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713232134765.png"
alt="image-20220713232134765" /></p></li>
<li><p>设置maven信息 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713232207269.png"
alt="image-20220713232207269" /></p></li>
<li><p>标准的maven工程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713232439707.png"
alt="image-20220713232439707" /></p>
<ul>
<li><p>与创建网站有关，删掉即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch01-maven-j2se<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--设置网站，注释掉即可--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;name&gt;ch01-maven-j2se&lt;/name&gt;</span></span><br><span class="line"><span class="comment">  &lt;!– FIXME change it to the project&#x27;s website –&gt;</span></span><br><span class="line"><span class="comment">  &lt;url&gt;http://www.example.com&lt;/url&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span> <span class="comment">&lt;!--maven常用设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插件版本的配置，无特殊指定则删除--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="单元测试">单元测试</h2>
<ul>
<li><p>关于idea颜色 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713232946902.png"
alt="image-20220713232946902" /></p></li>
<li><p>编写java程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloMaven</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addNumber</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HelloMaven helloMaven=<span class="keyword">new</span> <span class="title class_">HelloMaven</span>();</span><br><span class="line">        <span class="type">int</span> res=helloMaven.addNumber(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;res = &quot;</span>+res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713233208694.png"
alt="image-20220713233208694" />
<figcaption aria-hidden="true">image-20220713233208694</figcaption>
</figure></li>
<li><p>测试使用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713233421209.png"
alt="image-20220713233421209" /></p></li>
</ul>
<h2 id="idea中maven工具窗口">idea中maven工具窗口</h2>
<ul>
<li><p>Maven生成的目录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713233546497.png"
alt="image-20220713233546497" /></p></li>
<li><p>使用<code>mvn clean</code>进行清理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">λ mvn clean</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------&lt; com.bjpowernode:ch01-maven-j2se &gt;-------------------</span><br><span class="line">[INFO] Building ch01-maven-j2se 1.0</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ ch01-maven-j2se ---</span><br><span class="line">[INFO] Deleting D:\Users\ly\Documents\git\mavenwork\04-project\ch01-maven-j2se\target [INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.438 s</span><br><span class="line">[INFO] Finished at: 2022-07-13T23:39:03+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li><p>窗口 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234020275.png"
alt="image-20220713234020275" /></p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234115836.png"
alt="image-20220713234115836" />
<figcaption aria-hidden="true">image-20220713234115836</figcaption>
</figure></li>
<li><p>单元测试 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234210200.png"
alt="image-20220713234210200" /></p></li>
<li><p>打包 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234248469.png"
alt="image-20220713234248469" /></p></li>
<li><p>install安装 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234334901.png"
alt="image-20220713234334901" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234400027.png"
alt="image-20220713234400027" /></p></li>
<li><p>其他 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234517215.png"
alt="image-20220713234517215" /></p></li>
<li><p>重新更新依赖项 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220713234714252.png"
alt="image-20220713234714252" /></p></li>
</ul>
<h2 id="创建web项目加入servlet依赖">创建web项目加入servlet依赖</h2>
<ul>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716111633675.png"
alt="image-20220716111633675" />
<figcaption aria-hidden="true">image-20220716111633675</figcaption>
</figure></li>
<li><p>结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716112315076.png"
alt="image-20220716112315076" /></p></li>
<li><p>创建java文件夹和资源文件夹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716112520421.png"
alt="image-20220716112520421" /></p></li>
<li><p>pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ch02-maven-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ch02-maven-web Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jsp依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>和上面进行对比</li>
</ul></li>
</ul>
<h2 id="创建servlet">创建servlet</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716180646161.png"
alt="image-20220716180646161" />
<figcaption aria-hidden="true">image-20220716180646161</figcaption>
</figure>
<ul>
<li><p>创建完之后</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>web.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="line"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.bjpowernode.controller.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><p>添加mapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span><br><span class="line"> &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.bjpowernode.controller.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
<li><p>添加jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: ly</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">7</span>/<span class="number">16</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">10</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;hello&quot;</span> &gt;访问&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.bjpowernode.controller;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;收到请求了&quot;);</span><br><span class="line">        //转发到show</span><br><span class="line">        request.getRequestDispatcher(&quot;/show.jsp&quot;)</span><br><span class="line">                .forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置tomcat并发布</p>
<p>idea出现not found for the web module. <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716183849344.png"
alt="image-20220716183849344" /></p>
<ul>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716183934847.png"
title="fig:" alt="image-20220716183934847" /></li>
</ul></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220716184050846.png"
alt="image-20220716184050846" />
<figcaption aria-hidden="true">image-20220716184050846</figcaption>
</figure>
<h2 id="复习核心的概念">复习核心的概念</h2>
<ul>
<li>约定的目录结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717084635706.png"
alt="image-20220717084635706" /></li>
<li>pom 项目对象模型，groupId,artifactId,version gav</li>
<li>仓库
<ul>
<li>本地仓库 ...../.m2/repository</li>
<li>远程仓库</li>
</ul></li>
<li>生命周期，clean，compile，test-compile，test，package，install</li>
<li>maven和idea集成
<ul>
<li>设置maven安装目录和配置文件</li>
<li>设置Runner，创建maven时速度快 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085102707.png"
alt="image-20220717085102707" /></li>
<li>使用模板创建 se和web <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085138267.png"
alt="image-20220717085138267" /></li>
</ul></li>
</ul>
<h2 id="导入模块到idea">导入模块到idea</h2>
<ul>
<li><p>导入02这个项目 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085259283.png"
alt="image-20220717085259283" /></p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085358306.png"
alt="image-20220717085358306" />
<figcaption aria-hidden="true">image-20220717085358306</figcaption>
</figure></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085416212.png"
alt="image-20220717085416212" />
<figcaption aria-hidden="true">image-20220717085416212</figcaption>
</figure></li>
<li><p>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085509110.png"
alt="image-20220717085509110" /></p></li>
<li><p>当磁盘中文件夹名字和项目名不一样时 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085628061.png"
alt="image-20220717085628061" /></p></li>
<li><p>如果导入后颜色不对，则需要右键 mark as <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717085702320.png"
alt="image-20220717085702320" /></p></li>
</ul>
<h2 id="scope依赖范围">scope依赖范围</h2>
<ul>
<li><p>scope标签</p></li>
<li><p>依赖范围：scope标签，这个依赖在项目构建的哪个阶段起作用</p>
<ul>
<li>值：compile，默认，参与构建项目的所有阶段；
test：测试，在测试阶段使用，比如执行mvn test 会使用junit
provided：提供者，项目在部署到服务器时，不需要提供这个依赖的jar，而是由服务器提供这个以来的jar包</li>
</ul></li>
<li><p>打包时只有mysql <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090458970.png"
alt="image-20220717090458970" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090436168.png"
alt="image-20220717090436168" />
<figcaption aria-hidden="true">image-20220717090436168</figcaption>
</figure></li>
<li><p>war文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090640802.png"
alt="image-20220717090640802" /></p>
<ul>
<li>给服务器，即放到tomcat的webapps中 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090754979.png"
alt="image-20220717090754979" /></li>
<li>启动tomcat之后，会自动解压 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090900826.png"
alt="image-20220717090900826" /></li>
</ul></li>
<li><p>访问 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717090923610.png"
alt="image-20220717090923610" /></p></li>
</ul>
<h2 id="自定义变量">自定义变量</h2>
<ul>
<li>properties标签，常用设置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091221438.png"
alt="image-20220717091221438" />
<ul>
<li>test报告 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091319419.png"
alt="image-20220717091319419" /></li>
</ul></li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091648938.png"
alt="image-20220717091648938" /> 这种需要将文件夹删除，然后reimport</li>
<li>全局变量，比如依赖版本号
<ul>
<li>重复的问题 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091505986.png"
alt="image-20220717091505986" /></li>
<li>在properties里面定义即可 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091750991.png"
alt="image-20220717091750991" /></li>
<li>使用全局变量 ${变量名} <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717091837955.png"
alt="image-20220717091837955" /></li>
</ul></li>
</ul>
<h2 id="处理文件的默认规则">处理文件的默认规则</h2>
<ul>
<li>使用资源插件</li>
<li>例子
<ul>
<li><p>放置三个文件</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717092936963.png"
alt="image-20220717092936963" />
<figcaption aria-hidden="true">image-20220717092936963</figcaption>
</figure></li>
<li><p>进行四个操作，会生成资源文件（src/resources）拷贝到target/classes目录下
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717093410508.png"
alt="image-20220717093410508" /></p></li>
</ul></li>
<li>如果在java下的包中放资源文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717093525542.png"
alt="image-20220717093525542" />
<ul>
<li>没有拷贝 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717093549635.png"
alt="image-20220717093549635" /></li>
<li>即maven只处理src/main/java目录下的.java文件，把这些编译成class，拷贝到target/classes目录中，不处理其他文件</li>
</ul></li>
</ul>
<h2 id="资源插件">资源插件</h2>
<p>build下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--资源插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--包括properties及xml后缀文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.txt<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不使用过滤器，*.xml已经起到过滤作用了--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220717094642979.png"
alt="image-20220717094642979" /></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>maven_基础动力节点</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus-sgg-01-11</title>
    <url>/2022/06/03/study/mybatis_plus/bl_sgg/01-11/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<ul>
<li>MyBatis-Plus是一个MyBatis的<strong>增强工具</strong>，在MyBatis的基础上<strong>只做增强不做改变</strong>，为<strong>简化开发、提高效率</strong>而生</li>
<li>这里以MySQL数据库为案例，以Idea作为IDE，使用Maven作为构建工具，使用SpringBoot完成各种功能</li>
<li>课程主要内容 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603073359351.png"
alt="image-20220603073359351" /></li>
<li>特性 润物无声、效率至上、丰富功能</li>
<li>支持的数据库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603074051884.png"
alt="image-20220603074051884" /></li>
<li>框架结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603074111318.png"
alt="image-20220603074111318" />
<ul>
<li>左边：扫描实体，从实体抽取属性猜测数据库字段</li>
<li>通过默认提供的方法使用sql语句，然后注入mybatis容器</li>
</ul></li>
</ul>
<h2 id="开发环境">开发环境</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603074238643.png"
alt="image-20220603074238643" />
<figcaption aria-hidden="true">image-20220603074238643</figcaption>
</figure>
<h2 id="测试数据库和表">测试数据库和表</h2>
<ul>
<li><p>这里创建数据库mybatis_plus</p></li>
<li><p>然后创建表user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">    id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>插入默认数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="spring-boot工程">Spring Boot工程</h2>
<p>添加依赖，并install Lombok 插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="基础配置">基础配置</h2>
<ul>
<li><p>创建spring boot启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置resources/application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置数据源各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这个时候启动会直接结束，因为我们没有使用springboot-web 包</li>
</ul></li>
<li><p>实体类的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.mybatisplus.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于get set 无参构造器 hashCode()和equals()、toString()方法重写</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>mapper的创建 mapper/UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.mybatisplus.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.ly.mybatisplus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将这个类标记成持久层组件 处理测试类中红色下划线的问题</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>设置mapper接口所在的包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.mybatisplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//扫描指定包下的mapper接口</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ly.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="测试">测试</h2>
<ul>
<li><p>测试类的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ly.mybatisplus.MybatisPlusApplication;</span><br><span class="line"><span class="keyword">import</span> com.ly.mybatisplus.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.ly.mybatisplus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可能是由于没有使用web包依赖，这里要加入classes指定启动类</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MybatisPlusApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过条件构造器查询list集合 null表示没有条件</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="加入日志功能">加入日志功能</h2>
<ul>
<li><p>配置application.yml加入日志</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li>
<li><p>效果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603081229650.png"
alt="image-20220603081229650" /></p>
<ul>
<li>如上图，查询的字段名来自于实体类属性</li>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603081319437.png"
title="fig:" alt="image-20220603081319437" /></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis-plus 尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus-sgg-12-18</title>
    <url>/2022/06/03/study/mybatis_plus/bl_sgg/12-18/</url>
    <content><![CDATA[<h2 id="basemapper">BaseMapper</h2>
<ul>
<li><p>注：使用 <code>mvn dependency:resolve -Dclassifier=sources</code>
来获得mapper源码</p></li>
<li><p>一些接口介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入一条记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 ID 删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.4.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(T entity)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除（根据ID或实体 批量删除）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idList 主键ID列表或实体列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;?&gt; idList)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 ID 修改</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity        实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 ID 查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">    List&lt;T&gt; ts = <span class="built_in">this</span>.selectList(queryWrapper);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Wrapper 条件，判断是否存在记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.selectCount(queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span> != count &amp;&amp; count &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Long <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page         分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; P <span class="title function_">selectPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; P <span class="title function_">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>BaseMapper测试</p>
<ul>
<li><p>新增</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">11</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;xx@163.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insertNum</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+insertNum);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?, ? )</span><br><span class="line">==&gt; Parameters: 1532542803866394625(Long), 小明(String), 11(Integer), xx@163.com(String)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>删除</p>
<ul>
<li><p>id删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1532542803866394625L</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: DELETE FROM user WHERE id=?</span><br><span class="line">==&gt; Parameters: 1532542803866394625(Long)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
<li><p>Map删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; hash=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hash.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Sandy&quot;</span>);</span><br><span class="line">    hash.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteByMap(hash);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: DELETE FROM user WHERE name = ? AND age = ?</span><br><span class="line">==&gt; Parameters: Sandy(String), 1234(String)</span><br><span class="line">&lt;==    Updates: 0</span><br></pre></td></tr></table></figure></li>
<li><p>批量删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Long&gt; ids = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">5L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(ids);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: DELETE FROM user WHERE id <span class="title function_">IN</span> <span class="params">( ? , ? , ? )</span></span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Long), <span class="number">2</span>(Long), <span class="number">5</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>修改</p>
<ul>
<li><p>根据id修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateById</span> <span class="params">()</span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">5L</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;email被修改了&quot;</span> );</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE user SET email=? WHERE id=?</span><br><span class="line">==&gt; Parameters: email被修改了(String), <span class="number">5</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>注意，这里不会修改另一个字段name的值</p></li>
</ul></li>
<li><p>查询</p>
<ul>
<li><p>通过id查询用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span> <span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">3</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT id,name,age,email FROM user WHERE id=?</span><br><span class="line">==&gt; Parameters: 3(Integer)</span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: 3, Tom, 28, test3@baomidou.com</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure></li>
<li><p>通过id集合查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByIds</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">5L</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span><br><span class="line">==&gt; Parameters: 1(Long), 2(Long), 5(Long)</span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: 1, Jone, 18, test1@baomidou.com</span><br><span class="line">&lt;==        Row: 2, Jack, 20, test2@baomidou.com</span><br><span class="line">&lt;==        Row: 5, Billie, 24, email被修改了</span><br><span class="line">&lt;==      Total: 3</span><br></pre></td></tr></table></figure></li>
<li><p>通过map查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectMap</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    hashMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Jon&quot;</span>);</span><br><span class="line">    hashMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(hashMap);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT id,name,age,email FROM user WHERE name = ? AND age = ?</span><br><span class="line">==&gt; Parameters: Tom(String), 18(Integer)</span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: 3, Tom, 18, test3@baomidou.com</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure></li>
<li><p>查询所有数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123; </span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT id,name,age,email FROM user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: 1, Jone, 18, test1@baomidou.com</span><br><span class="line">&lt;==        Row: 2, Jack, 20, test2@baomidou.com</span><br><span class="line">&lt;==        Row: 3, Tom, 18, test3@baomidou.com</span><br><span class="line">&lt;==        Row: 4, Sandy, 21, test4@baomidou.com</span><br><span class="line">&lt;==        Row: 5, Billie, 24, email被修改了</span><br><span class="line">&lt;==      Total: 5</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
</ul>
<h2 id="自定义功能">自定义功能</h2>
<ul>
<li><p>mapper映射文件默认位置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">classpath:/mapper/**/*.xml</span> <span class="comment">#默认位置</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603103731707.png"
alt="image-20220603103731707" />
<figcaption aria-hidden="true">image-20220603103731707</figcaption>
</figure></li>
<li><p>映射文件配置 /mapper/UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ly.mybatisplus.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMapById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select id,name,age,email from user</span><br><span class="line">        where id = #&#123;id&#125; and 1=1 </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>代码执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectCustom</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = userMapper.selectMapById(<span class="number">2L</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: select id,name,age,email from user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> ? and <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">==&gt; Parameters: <span class="number">2</span>(Long)</span><br><span class="line">&lt;==    Columns: id, name, age, email</span><br><span class="line">&lt;==        Row: <span class="number">2</span>, Jack, <span class="number">20</span>, test2<span class="meta">@baomidou</span>.com</span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="通用service接口">通用Service接口</h2>
<ul>
<li><p>和通用Mapper的方法名有区分 Service CRUD中</p>
<ul>
<li>使用get查询【mapper-select】</li>
<li>remove删除 【mapper-delete】</li>
<li>list查询集合</li>
<li>page分页</li>
</ul></li>
<li><p>IService源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顶级 Service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-06-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IService</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认批次提交数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">DEFAULT_BATCH_SIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().insert(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveBatch(entityList, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入（批量）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  插入批次数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> saveOrUpdateBatch(entityList, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  每次的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().deleteById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id      主键(类型必须与实体类型字段保持一致)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> useFill 是否启用填充(为true的情况,会将入参转换实体进行delete删除)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.4.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().deleteById(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        Assert.notEmpty(columnMap, <span class="string">&quot;error: columnMap must not be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().deleteByMap(columnMap));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体包装类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().delete(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 主键ID或实体列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;?&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().deleteBatchIds(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list    主键ID或实体列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> useFill 是否填充(为true的情况,会将入参转换实体进行delete删除)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (useFill) &#123;</span><br><span class="line">            <span class="keyword">return</span> removeBatchByIds(list, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().deleteBatchIds(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除(jdbc批量提交)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 主键ID或实体列表(主键ID类型必须与实体类型字段保持一致)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeBatchByIds(list, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除(jdbc批量提交)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list    主键ID或实体列表(主键ID类型必须与实体类型字段保持一致)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> useFill 是否启用填充(为true的情况,会将入参转换实体进行delete删除)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeBatchByIds(list, DEFAULT_BATCH_SIZE, useFill);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除(jdbc批量提交)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      主键ID或实体列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize 批次大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">int</span> batchSize)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除(jdbc批量提交)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      主键ID或实体列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize 批次大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> useFill   是否启用填充(为true的情况,会将入参转换实体进行delete删除)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeBatchByIds</span><span class="params">(Collection&lt;?&gt; list, <span class="type">int</span> batchSize, <span class="type">boolean</span> useFill)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不支持的方法!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 选择修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().updateById(entity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retBool(getBaseMapper().update(entity, updateWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updateBatchById(entityList, DEFAULT_BATCH_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID 批量更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体对象集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> batchSize  更新批次数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">getById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectBatchIds(idList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectByMap(columnMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录 &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getOne(queryWrapper, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwEx      有多个 result 是否抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper       转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">long</span> <span class="title function_">count</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">long</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlHelper.retCount(getBaseMapper().selectCount(queryWrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectList(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> page(page, Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectMaps(queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listMaps(Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listObjs(Function.identity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper 转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listObjs(Wrappers.emptyWrapper(), mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listObjs(queryWrapper, Function.identity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapper       转换函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类 &#123;<span class="doctag">@link</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getBaseMapper().selectMapsPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件翻页查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 翻页对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Wrappers#emptyWrapper()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; E <span class="title function_">pageMaps</span><span class="params">(E page)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageMaps(page, Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应 entity 的 BaseMapper</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BaseMapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BaseMapper&lt;T&gt; <span class="title function_">getBaseMapper</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 entity 的 class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> Class&lt;T&gt;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;T&gt; <span class="title function_">getEntityClass</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以下的方法使用介绍:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 一. 名称介绍</span></span><br><span class="line"><span class="comment">     * 1. 方法名带有 query 的为对数据的查询操作, 方法名带有 update 的为对数据的修改操作</span></span><br><span class="line"><span class="comment">     * 2. 方法名带有 lambda 的为内部方法入参 column 支持函数式的</span></span><br><span class="line"><span class="comment">     * 二. 支持介绍</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. 方法名带有 query 的支持以 &#123;<span class="doctag">@link</span> ChainQuery&#125; 内部的方法名结尾进行数据查询操作</span></span><br><span class="line"><span class="comment">     * 2. 方法名带有 update 的支持以 &#123;<span class="doctag">@link</span> ChainUpdate&#125; 内部的方法名为结尾进行数据修改操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 三. 使用示例,只用不带 lambda 的方法各展示一个例子,其他类推</span></span><br><span class="line"><span class="comment">     * 1. 根据条件获取一条数据: `query().eq(&quot;column&quot;, value).one()`</span></span><br><span class="line"><span class="comment">     * 2. 根据条件删除一条数据: `update().eq(&quot;column&quot;, value).remove()`</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 普通</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> QueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> QueryChainWrapper&lt;T&gt; <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.queryChain(getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 lambda 式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意：不支持 Kotlin &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LambdaQueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaQueryChain(getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 lambda 式</span></span><br><span class="line"><span class="comment">     * kotlin 使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> KtQueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> KtQueryChainWrapper&lt;T&gt; <span class="title function_">ktQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktQueryChain(getBaseMapper(), getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式查询 lambda 式</span></span><br><span class="line"><span class="comment">     * kotlin 使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> KtQueryWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> KtUpdateChainWrapper&lt;T&gt; <span class="title function_">ktUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.ktUpdateChain(getBaseMapper(), getEntityClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式更改 普通</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> UpdateWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> UpdateChainWrapper&lt;T&gt; <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.updateChain(getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链式更改 lambda 式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意：不支持 Kotlin &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> LambdaUpdateWrapper 的包装类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> LambdaUpdateChainWrapper&lt;T&gt; <span class="title function_">lambdaUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChainWrappers.lambdaUpdateChain(getBaseMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="comment">     * 此次修改主要是减少了此项业务代码的代码量（存在性验证之后的saveOrUpdate操作）</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(entity, updateWrapper) || saveOrUpdate(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IService有一个实现类：ServiceImpl</p></li>
<li><p>自定义一个业务Service接口，继承IService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>编写一个实现类，实现UserService接口，并继承ServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这样既可以使用自定义的功能，也可以使用MybatisPlus提供的功能</p></li>
</ul></li>
</ul>
<h2 id="section"></h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis-plus 尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus-sgg-19-39</title>
    <url>/2022/06/03/study/mybatis_plus/bl_sgg/19-39/</url>
    <content><![CDATA[<h2 id="通用service应用">通用Service应用</h2>
<ul>
<li><p>这里会出现 publicKey is now allowed
，在数据库连接语句后面加上这句话即可 allowPublicKeyRetrieval=true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置数据源</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment">#配置数据源各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;&amp;useSSL=false&amp;&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//List&lt;User&gt; list = userService.list();</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SQL执行语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT COUNT( * ) FROM user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: COUNT( * )</span><br><span class="line">&lt;==        Row: 5</span><br><span class="line">&lt;==      Total: 1</span><br></pre></td></tr></table></figure></li>
<li><p>批量添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batchInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;name&quot;</span>+i);</span><br><span class="line">        user.setEmail(<span class="string">&quot;email&quot;</span>+i);</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> userService.saveBatch(users);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO <span class="title function_">user</span> <span class="params">( id, name, email )</span> VALUES ( ?, ?, ? )</span><br><span class="line">==&gt; Parameters: <span class="number">1532579686881243138</span>(Long), name0(String), email0(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687124512770</span>(Long), name1(String), email1(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687128707074</span>(Long), name2(String), email2(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687128707075</span>(Long), name3(String), email3(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687132901377</span>(Long), name4(String), email4(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687137095681</span>(Long), name5(String), email5(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687137095682</span>(Long), name6(String), email6(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687141289985</span>(Long), name7(String), email7(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687145484289</span>(Long), name8(String), email8(String)</span><br><span class="line">==&gt; Parameters: <span class="number">1532579687145484290</span>(Long), name9(String), email9(String)</span><br><span class="line">result:<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意，这里是一个个的insert into
，而不是一条(单个的sql语句进行循环添加)</p></li>
</ul>
<h2 id="mybatis-plus常用注解1">MyBatis-Plus常用注解1</h2>
<ul>
<li><p>现在将mysql数据库表user名改为t_user 会提示下面的报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cause: java.sql.BatchUpdateException: Table &#x27;mybatis_plus.user&#x27; doesn&#x27;t exist</span><br></pre></td></tr></table></figure>
<p>说明mybatis plus查询的时候会去找实体类名一样的表</p></li>
<li><p>使用@TableName("t_user") 设置实体类对应的表名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改后执行成功</li>
</ul></li>
<li><p>统一添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure></li>
<li><p>指定主键名
假设现在把数据库列名和bean的属性名id改为uid,此时新增一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Field &#x27;uid&#x27; doesn&#x27;t have a default value</span><br><span class="line">; Field &#x27;uid&#x27; doesn&#x27;t have a default value; nested exception is java.sql.SQLException: Field &#x27;uid&#x27; doesn&#x27;t have a default value</span><br></pre></td></tr></table></figure>
<ul>
<li>说明此时没有为uid赋值</li>
</ul></li>
<li><p>使用@TableId告诉mybatis-plus那个字段为主键，让mybatis-plus为他赋默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long uid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO t_user ( uid, name, age ) VALUES ( ?, ?, ? )</span><br><span class="line">==&gt; Parameters: 1532582462671618050(Long), 张三(String), 18(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="tableid的value属性"><span class="citation"
data-cites="TableId的value属性">@TableId的value属性</span></h2>
<ul>
<li><p>用于指定绑定的主键的字段
假设此时将bean的主键属性名为id，数据库主键名是uid</p></li>
<li><p>此时运行，会提示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">### SQL: INSERT INTO <span class="title function_">t_user</span>  <span class="params">( id, name, age )</span>  VALUES  ( ?, ?, ? )</span><br><span class="line">### Cause: java.sql.SQLSyntaxErrorException: Unknown column <span class="string">&#x27;id&#x27;</span> in <span class="string">&#x27;field list&#x27;</span></span><br></pre></td></tr></table></figure>
<p>他会拿bean的属性来生成sql语句</p></li>
<li><p>加上@TableId(value="uid")后运行正常</p></li>
</ul>
<h2 id="tableid的value属性-1"><span class="citation"
data-cites="TableId的value属性">@TableId的value属性</span></h2>
<ul>
<li><p>```java</p>
<p>/**</p>
<ul>
<li><p>生成ID类型枚举类</p></li>
<li></li>
<li><p><span class="citation" data-cites="author">@author</span>
hubin</p></li>
<li><p><span class="citation" data-cites="since">@since</span>
2015-11-10 */ <span class="citation" data-cites="Getter">@Getter</span>
public enum IdType { /**</p>
<ul>
<li>数据库ID自增</li>
<li><p>
该类型请确保数据库设置了 ID自增 否则无效
</p>
*/ AUTO(0), /**</li>
<li>该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT) */
NONE(1), /**</li>
<li>用户输入ID</li>
<li><p>
该类型可以通过自己注册自动填充插件进行填充
</p>
*/ INPUT(2),</li>
</ul>
<p>/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */ /**</p>
<ul>
<li>分配ID (主键类型为number或string）,</li>
<li>默认实现类 {<span class="citation" data-cites="link">@link</span>
com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator}(雪花算法)</li>
<li></li>
<li><span class="citation" data-cites="since">@since</span> 3.3.0 */
ASSIGN_ID(3), /**</li>
<li>分配UUID (主键类型为 string)</li>
<li>默认实现类 {<span class="citation" data-cites="link">@link</span>
com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator}(UUID.replace("-",""))
*/ ASSIGN_UUID(4);</li>
</ul>
<p>private final int key;</p>
<p>IdType(int key) { this.key = key; } } <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  //使用自增</span><br><span class="line">  @TableId(value=&quot;uid&quot;,type = IdType.AUTO )</span><br><span class="line">      private Long id;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></p></li>
</ul></li>
<li><p>然后将数据库主键设置为自动递增</p></li>
<li><p>新增后id为6</p></li>
</ul>
<h2 id="通过全局属性设置主键生成策略">通过全局属性设置主键生成策略</h2>
<ul>
<li><p>全局配置设置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> </span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span> </span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="雪花算法">雪花算法</h2>
<ul>
<li>数据库扩展方式：主从复制、业务分库、数据库分表</li>
<li>数据库拆分：水平拆分、垂直拆分</li>
<li>水平分表相对垂直分表，会引入更多的复杂性，比如要求唯一的数据id该怎么处理
<ul>
<li>可以给每个分表都给定一个范围大小，但是这样分段大小不好取</li>
<li>可以取模，但是如果增加了机器，原来的值主键（怎么处理是个问题</li>
<li>雪花算法，由Twitter公布的分布式主键生成算法
能够保证不同表的主键的不重复性，以及相同表的主键的有序性</li>
<li>核心思想 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603182604230.png"
alt="image-20220603182604230" /></li>
<li></li>
</ul></li>
</ul>
<h2 id="mybatis-plus常用注解2">MyBatis-Plus常用注解2</h2>
<ul>
<li><p>此时数据库字段名为name，如果现在实体类的名字改为userName，那么会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO t_user  ( user_name, age )  VALUES  ( ?, ? )</span><br></pre></td></tr></table></figure>
<p>又一次证明了MyBatis-plus通过实体类属性猜测数据库表的相关字段</p>
<ul>
<li><p>使用@TableFiled来指定对应的字段名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;name&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(<span class="number">5L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;结果:&quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>sql执行语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE uid=? AND is_deleted_ly=0</span><br><span class="line">==&gt; Parameters: 5(Long)</span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: 5, Billie, 24, email被修改了, 0</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@5e048149]</span><br><span class="line">结果:User(id=5, userName=Billie, age=24, email=email被修改了, isDeletedLy=0)</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
<li><p>逻辑删除(主要是允许数据的恢复)
这里增加一个isDeletedLy字段（这里为了测试，一般是isDeleted）</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603234839526.png"
alt="image-20220603234839526" />
<figcaption aria-hidden="true">image-20220603234839526</figcaption>
</figure>
<ul>
<li><p>在User类添加下面的字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer isDeletedLy;</span><br></pre></td></tr></table></figure></li>
<li><p>逻辑删除</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteLogic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">save</span> <span class="operator">=</span> userService.removeBatchByIds(Arrays.asList(<span class="number">1L</span>,<span class="number">2L</span>,<span class="number">3L</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;结果:&quot;</span> + save);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql执行语句
<strong>注意，这里使用了is_deleted_ly=0是因为在下面的步骤加入了逻辑删除注解</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET is_deleted_ly=1 WHERE uid=? AND is_deleted_ly=0</span><br><span class="line">==&gt; Parameters: 1(Long)</span><br><span class="line">==&gt; Parameters: 2(Long)</span><br><span class="line">==&gt; Parameters: 3(Long)</span><br></pre></td></tr></table></figure></li>
<li><p>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603235258702.png"
alt="image-20220603235258702" /></p></li>
</ul></li>
</ul></li>
</ul>
<h2 id="条件构造器">条件构造器</h2>
<ul>
<li><p>结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603235853815.png"
alt="image-20220603235853815" /></p>
<ul>
<li>解释 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220603235924382.png"
alt="image-20220603235924382" /></li>
</ul></li>
<li><p>查看BaseWrapper源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;这个 Mapper 支持 id 泛型&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hubin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一条记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据实体(ID)删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.4.4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除（根据ID或实体 批量删除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表或实体列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;?&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entity        实体对象 (set 条件值,可以为 null)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 ID 查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idList 主键ID列表(不能为 null 以及 empty)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> columnMap 表字段 map 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        List&lt;T&gt; ts = <span class="built_in">this</span>.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，判断是否存在记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.selectCount(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> != count &amp;&amp; count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件（可以为 RowBounds.DEFAULT）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类（可以为 null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; P <span class="title function_">selectPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page         分页查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryWrapper 实体对象封装操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; P <span class="title function_">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Wrapper条件组装 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604110742317.png"
alt="image-20220604110742317" /></p>
<ul>
<li><p>queryWrapper测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//链式结构调用</span></span><br><span class="line">    userQueryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>, <span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>sql日志打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，这里出现了逻辑删除条件</span></span><br><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=<span class="number">0</span> AND (name LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span><br><span class="line">==&gt; Parameters: %a%(String), <span class="number">10</span>(Integer), <span class="number">30</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: <span class="number">4</span>, Sandy, <span class="number">21</span>, test4<span class="meta">@baomidou</span>.com, <span class="number">0</span></span><br><span class="line">&lt;==        Row: <span class="number">5</span>, Billiea, <span class="number">24</span>, email被修改了, <span class="number">0</span></span><br><span class="line">&lt;==      Total: <span class="number">2</span></span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@19650aa6]</span><br><span class="line">User(id=<span class="number">4</span>, userName=Sandy, age=<span class="number">21</span>, email=test4<span class="meta">@baomidou</span>.com, isDeletedLy=<span class="number">0</span>)</span><br><span class="line">User(id=<span class="number">5</span>, userName=Billiea, age=<span class="number">24</span>, email=email被修改了, isDeletedLy=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">     userQueryWrapper.orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">             .orderByAsc(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 ORDER BY age DESC,uid ASC</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: 7, 张三6, 38, test6@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 5, Billiea, 24, email被修改了, 0</span><br><span class="line">&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 6, 张三5, 18, test5@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 8, 张三a, 18, null, 0</span><br><span class="line">&lt;==      Total: 5</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@7158daf2]</span><br><span class="line">User(id=7, userName=张三6, age=38, email=test6@baomidou.com, isDeletedLy=0)</span><br><span class="line">User(id=5, userName=Billiea, age=24, email=email被修改了, isDeletedLy=0)</span><br><span class="line">User(id=4, userName=Sandy, age=21, email=test4@baomidou.com, isDeletedLy=0)</span><br><span class="line">User(id=6, userName=张三5, age=18, email=test5@baomidou.com, isDeletedLy=0)</span><br><span class="line">User(id=8, userName=张三a, age=18, email=null, isDeletedLy=0)</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>条件逻辑删除</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userQueryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">deleted</span> <span class="operator">=</span> userMapper.delete(userQueryWrapper);</span><br><span class="line">    System.out.println(deleted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET is_deleted_ly=1 WHERE is_deleted_ly=0 AND (email IS NULL)</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//(age&gt;23且用户名包含a)  或 (邮箱为null)</span></span><br><span class="line">    userQueryWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>)</span><br><span class="line">            .like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .or()</span><br><span class="line">            .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;被修改了&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">deleted</span> <span class="operator">=</span> userMapper.update(user,userQueryWrapper);</span><br><span class="line">    System.out.println(deleted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET name=? WHERE is_deleted_ly=0 AND (age &gt; ? AND name LIKE ? OR email IS NULL)</span><br><span class="line">==&gt; Parameters: 被修改了(String), 23(Integer), %a%(String)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
<li><p>条件优先级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//(age&gt;23且用户名包含a)  或 (邮箱为null)</span></span><br><span class="line">    userQueryWrapper</span><br><span class="line">            .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            <span class="comment">//and里面是一个条件构造器</span></span><br><span class="line">            .and(</span><br><span class="line">                    userQueryWrapper1 -&gt;</span><br><span class="line">                            userQueryWrapper1.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">                                    .or()</span><br><span class="line">                                    .isNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">            );</span><br><span class="line">    </span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;被修改了&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">deleted</span> <span class="operator">=</span> userMapper.update(user, userQueryWrapper);</span><br><span class="line">    System.out.println(deleted);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET name=? WHERE is_deleted_ly=0 AND (name LIKE ? AND (age &gt; ? OR email IS NULL))</span><br><span class="line">==&gt; Parameters: 被修改了(String), %a%(String), 20(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
<li><p>注意 or也有优先级的参数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604112732422.png"
alt="image-20220604112732422" /></p></li>
</ul></li>
<li><p>只查询某些字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; userQueryWrapper</span><br><span class="line">            =<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userQueryWrapper.select(<span class="string">&quot;uid&quot;</span>,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(userQueryWrapper);</span><br><span class="line">    System.out.println(maps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid,name FROM t_user WHERE is_deleted_ly=0</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: uid, name</span><br><span class="line">&lt;==        Row: 4, 被修改了</span><br><span class="line">&lt;==        Row: 5, 被修改了</span><br><span class="line">&lt;==        Row: 6, 张三5</span><br><span class="line">&lt;==        Row: 7, 张三6</span><br><span class="line">&lt;==      Total: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>子查询 假设需要完整下面的sql查询 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604113152896.png"
alt="image-20220604113152896" /></p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询id小于等于100</span></span><br><span class="line">    QueryWrapper&lt;User&gt;</span><br><span class="line">            userQueryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userQueryWrapper.inSql(<span class="string">&quot;uid&quot;</span>,</span><br><span class="line">            <span class="string">&quot;select uid from t_user where uid &lt;= 100&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 AND (uid IN (select uid from t_user where uid &lt;= 100))</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: 4, 被修改了, 21, test4@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 5, 被修改了, 24, email被修改了, 0</span><br><span class="line">&lt;==        Row: 6, 张三5, 18, test5@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 7, 张三6, 38, test6@baomidou.com, 0</span><br><span class="line">&lt;==      Total: 4</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>UpdateWrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//(age&gt;23且用户名包含a)  或 (邮箱为null)</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper=<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(userUpdateWrapper -&gt;</span><br><span class="line">                    userUpdateWrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>).or().isNotNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    updateWrapper.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小黑&quot;</span>).set(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;abc@ly.com&quot;</span>);</span><br><span class="line">    userMapper.update(<span class="literal">null</span>,updateWrapper);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET name=?,email=? WHERE is_deleted_ly=<span class="number">0</span> AND (name LIKE ? AND (age &gt; ? OR email IS NOT NULL))</span><br><span class="line">==&gt; Parameters: 小黑(String), abc<span class="meta">@ly</span>.com(String), %a%(String), <span class="number">23</span>(Integer)</span><br><span class="line">&lt;==    Updates: <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>模拟用户操作组装条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line">    String username=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    Integer ageBegin=<span class="literal">null</span>;</span><br><span class="line">    Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNotBlank(username))&#123;</span><br><span class="line">        queryWrapper.like(<span class="string">&quot;user_name&quot;</span>,username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( ageBegin!=<span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.gt(<span class="string">&quot;age&quot;</span>,ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( ageEnd!=<span class="literal">null</span>)&#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;age&quot;</span>,ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 AND (age &lt;= ?)</span><br><span class="line">==&gt; Parameters: 30(Integer)</span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: 4, 被修改了, 21, test4@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 5, 被修改了, 24, email被修改了, 0</span><br><span class="line">&lt;==        Row: 6, 张三5, 18, test5@baomidou.com, 0</span><br><span class="line">&lt;==      Total: 3</span><br></pre></td></tr></table></figure></li>
<li><p>使用condition处理条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">    String username=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    Integer ageBegin=<span class="literal">null</span>;</span><br><span class="line">    Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotBlank(username),<span class="string">&quot;name&quot;</span>,username)</span><br><span class="line">            .ge(ageBegin!=<span class="literal">null</span>,<span class="string">&quot;age&quot;</span>,ageBegin);</span><br><span class="line">    userMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 AND (name LIKE ?)</span><br><span class="line">==&gt; Parameters: %abc%(String)</span><br><span class="line">&lt;==      Total: 0</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis-plus 尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus-sgg-40-57</title>
    <url>/2022/06/04/study/mybatis_plus/bl_sgg/40-57/</url>
    <content><![CDATA[<h2 id="lambdaxxxwrapper">LambdaXxxWrapper</h2>
<ul>
<li><p>LambdaQueryWrapper主要是为了防止字段名写错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">     String username=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">     Integer ageBegin=<span class="literal">null</span>;</span><br><span class="line">     Integer ageEnd=<span class="number">30</span>;</span><br><span class="line">     LambdaQueryWrapper&lt;User&gt; queryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">     queryWrapper.like(StringUtils.isNotBlank(username),User::getUserName,username)</span><br><span class="line">             .ge(ageBegin!=<span class="literal">null</span>,User::getAge,ageBegin);</span><br><span class="line">     userMapper.selectList(queryWrapper);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 AND (name LIKE ?)</span><br><span class="line">==&gt; Parameters: %abc%(String)</span><br><span class="line">&lt;==      Total: 0</span><br></pre></td></tr></table></figure></li>
<li><p>LambdaUpdateWrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//(age&gt;23且用户名包含a)  或 (邮箱为null)</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper.like(User::getUserName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(userUpdateWrapper -&gt;</span><br><span class="line">                    userUpdateWrapper.gt(User::getAge, <span class="number">23</span>).or().isNotNull(User::getEmail));</span><br><span class="line">    updateWrapper.set(User::getUserName, <span class="string">&quot;小黑&quot;</span>).set(User::getEmail, <span class="string">&quot;abc@ly.com&quot;</span>);</span><br><span class="line">    userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_user SET name=?,email=? WHERE is_deleted_ly=<span class="number">0</span> AND (name LIKE ? AND (age &gt; ? OR email IS NOT NULL))</span><br><span class="line">==&gt; Parameters: 小黑(String), abc<span class="meta">@ly</span>.com(String), %a%(String), <span class="number">23</span>(Integer)</span><br><span class="line">&lt;==    Updates: <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="mybatis分页">MyBatis分页</h2>
<ul>
<li><p>先使用配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ly.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span> &#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">    page.setCurrent(<span class="number">2</span>);<span class="comment">//当前页页码</span></span><br><span class="line">    page.setSize(<span class="number">3</span>);<span class="comment">//每页条数</span></span><br><span class="line">    Page&lt;User&gt; userPage = userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(userPage.getRecords() + <span class="string">&quot;----\n&quot;</span></span><br><span class="line">            + userPage.getPages() + <span class="string">&quot;----\n&quot;</span></span><br><span class="line">            + userPage.getTotal() + <span class="string">&quot;---\n&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT uid AS id,name AS userName,age,email,is_deleted_ly FROM t_user WHERE is_deleted_ly=0 LIMIT ?,?</span><br><span class="line">==&gt; Parameters: 3(Long), 3(Long)</span><br><span class="line">&lt;==    Columns: id, userName, age, email, is_deleted_ly</span><br><span class="line">&lt;==        Row: 4, 被修改了, 21, test4@baomidou.com, 0</span><br><span class="line">&lt;==        Row: 5, 被修改了, 24, email被修改了, 0</span><br><span class="line">&lt;==        Row: 6, 张三5, 18, test5@baomidou.com, 0</span><br><span class="line">&lt;==      Total: 3</span><br></pre></td></tr></table></figure>
<ul>
<li><p>结果Page对象的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[User(id=4, userName=被修改了, age=21, email=test4@baomidou.com, isDeletedLy=0), User(id=5, userName=被修改了, age=24, email=email被修改了, isDeletedLy=0), User(id=6, userName=张三5, age=18, email=test5@baomidou.com, isDeletedLy=0)]----</span><br><span class="line">3----</span><br><span class="line">8---</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>自定义分页功能</p>
<ul>
<li><p>首先，设置类型别名所在的包</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> </span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ly.mybatisplus.pojo</span></span><br></pre></td></tr></table></figure></li>
<li><p>在Mapper类中编写接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过年龄查询并分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page mybatis-plus提供的，必须存在且在第一个位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;User&gt; <span class="title function_">selectPageVO</span><span class="params">(Page&lt;User&gt; page,Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意第一个参数</p></li>
<li><p>在Mapper.xml中编写语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPageVO&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select uid,name,email from t_user where age &gt; #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageCustom</span><span class="params">()</span> &#123;</span><br><span class="line">     Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">     page.setCurrent(<span class="number">3</span>);<span class="comment">//当前页页码</span></span><br><span class="line">     page.setSize(<span class="number">5</span>);<span class="comment">//每页条数</span></span><br><span class="line">     Page&lt;User&gt; userPage = userMapper.selectPageVO(page, <span class="number">12</span>);</span><br><span class="line">     System.out.println(userPage.getRecords() + <span class="string">&quot;----\n&quot;</span></span><br><span class="line">             + userPage.getPages() + <span class="string">&quot;----\n&quot;</span></span><br><span class="line">             + userPage.getTotal() + <span class="string">&quot;---\n&quot;</span>)</span><br><span class="line">     ;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>sql日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: SELECT COUNT(*) AS total FROM t_user WHERE age &gt; ?</span><br><span class="line">==&gt; Parameters: 12(Integer)</span><br><span class="line">&lt;==    Columns: total</span><br><span class="line">&lt;==        Row: 20</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">//从第10行开始（不包括第10行），取5条记录</span><br><span class="line">==&gt;  Preparing: select uid,name,email from t_user where age &gt; ? LIMIT ?,?</span><br><span class="line">==&gt; Parameters: 12(Integer), 10(Long), 5(Long)</span><br><span class="line">&lt;==    Columns: uid, name, email</span><br><span class="line">&lt;==        Row: 11, a, null</span><br><span class="line">&lt;==        Row: 12, a, null</span><br><span class="line">&lt;==        Row: 13, a, null</span><br><span class="line">&lt;==        Row: 14, a, null</span><br><span class="line">&lt;==        Row: 15, a, null</span><br><span class="line">&lt;==      Total: 5</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@706fe5c6]</span><br><span class="line">[null, null, null, null, null]----</span><br><span class="line">4----</span><br><span class="line">20---</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意上面那个sql，他会先查询条数，如果条数&lt;=0，那么就不会执行下面的数据搜索了</p></li>
</ul></li>
</ul>
<h2 id="悲观锁和乐观锁">悲观锁和乐观锁</h2>
<ul>
<li><p>场景 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604141320188.png"
alt="image-20220604141320188" /></p></li>
<li><p>乐观锁根据版本号使用 version</p></li>
<li><p>乐观锁实现流程 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604141615175.png"
alt="image-20220604141615175" /></p></li>
</ul>
<h2 id="模拟冲突">模拟冲突</h2>
<ul>
<li><p>表创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_product (</span><br><span class="line">	id BIGINT ( 20 ) NOT NULL COMMENT &#x27;主键id&#x27;,</span><br><span class="line">	NAME VARCHAR ( 30 ) null DEFAULT NULL COMMENT &#x27;商品名称&#x27;,</span><br><span class="line">	price INT ( 11 ) DEFAULT 0 COMMENT &#x27;价格&#x27;,</span><br><span class="line">	version INT ( 11 ) DEFAULT 0 COMMENT &#x27;乐观锁版本号&#x27;,</span><br><span class="line">    PRIMARY KEY ( id ) </span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>创建ProductMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604142342514.png"
alt="image-20220604142342514" /></p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testModel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//小李查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小王查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小李将商品加50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//小王将价格降低30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=?</span><br><span class="line">==&gt; Parameters: 外星人(String), <span class="number">150</span>(Integer), <span class="number">0</span>(Integer), <span class="number">1</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6325f352]</span><br><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">SqlSession</span></span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@70730db] was not registered <span class="keyword">for</span> synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@<span class="number">91831175</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@74ea46e2] will not be managed <span class="type">by</span> <span class="variable">Spring</span></span><br><span class="line"><span class="operator">=</span>=&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=?</span><br><span class="line">==&gt; Parameters: 外星人(String), <span class="number">70</span>(Integer), <span class="number">0</span>(Integer), <span class="number">1</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>//最终结果为70</p></li>
</ul>
<h2 id="乐观锁插件">乐观锁插件</h2>
<ul>
<li><p>在实体类中使用@Version注解表示乐观锁版本号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li>
<li><p>配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">    MybatisPlusInterceptor mybatisPlusInterceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="comment">//添加乐观锁插件</span></span><br><span class="line">    mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>再次运行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testModel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//小李查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小王查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小李将商品加50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//小王将价格降低30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    productMapper.updateById(productWang);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</span><br><span class="line">==&gt; Parameters: 外星人(String), 120(Integer), 1(Integer), 1(Long), 0(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2d64160c]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@33063f5b] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@356539350 wrapping com.mysql.cj.jdbc.ConnectionImpl@127a7272] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</span><br><span class="line">==&gt; Parameters: 外星人(String), 40(Integer), 1(Integer), 1(Long), 0(Integer)</span><br><span class="line">&lt;==    Updates: 0</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="优化修改流程">优化修改流程</h2>
<ul>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testModel</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//小李查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小王查询商品</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//小李将商品加50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice() + <span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//小王将价格降低30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice() - <span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//如果小王操作失败,再获取一次</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">        product.setPrice(product.getPrice() - <span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(product);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sql日志打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</span><br><span class="line">==&gt; Parameters: 外星人(String), 150(Integer), 6(Integer), 1(Long), 5(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@544e8149]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@48a0c8aa] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1637000661 wrapping com.mysql.cj.jdbc.ConnectionImpl@5f481b73] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</span><br><span class="line">==&gt; Parameters: 外星人(String), 70(Integer), 6(Integer), 1(Long), 5(Integer)</span><br><span class="line">&lt;==    Updates: 0</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@48a0c8aa]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4cbc2e3b] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@43473566 wrapping com.mysql.cj.jdbc.ConnectionImpl@5f481b73] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,price,version FROM t_product WHERE id=?</span><br><span class="line">==&gt; Parameters: 1(Long)</span><br><span class="line">&lt;==    Columns: id, name, price, version</span><br><span class="line">&lt;==        Row: 1, 外星人, 150, 6</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4cbc2e3b]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@57562473] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@2050360660 wrapping com.mysql.cj.jdbc.ConnectionImpl@5f481b73] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</span><br><span class="line">==&gt; Parameters: 外星人(String), 120(Integer), 7(Integer), 1(Long), 6(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@57562473]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="通用枚举">通用枚举</h2>
<ul>
<li><p>添加一个enum类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库增加一个sex 字段，实体类增加一个sex属性 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604163208649.png"
alt="image-20220604163208649" /></p>
<ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>进行添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEnum</span><span class="params">()</span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;enum - 测试名字&quot;</span>);</span><br><span class="line">    user.setSexEnum(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意看sql日志，有报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO t_user ( name, sex ) VALUES ( ?, ? )</span><br><span class="line">==&gt; Parameters: enum - 测试名字(String), MALE(String)</span><br><span class="line"></span><br><span class="line">### SQL: INSERT INTO t_user  ( name,    sex )  VALUES  ( ?,    ? )</span><br><span class="line">### Cause: java.sql.SQLException: Incorrect integer value: &#x27;MALE&#x27; for column &#x27;sex&#x27; at row 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>插入了非数字</p></li>
<li><p>修正，enum类添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnumValue</span> <span class="comment">//将注解所标识的属性的值设置到数据库</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>扫描通用枚举的包 application.yml中</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> </span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.ly.mybatisplus.enums</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>运行测试类并查看日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: INSERT INTO t_user ( name, sex ) VALUES ( ?, ? )</span><br><span class="line">==&gt; Parameters: enum - 测试名字(String), 1(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="代码生成器">代码生成器</h2>
<a href="/2022/05/20/study/mybatis_plus/official/hello/" title="在28%进度的地方">在28%进度的地方</a>
<ul>
<li><p>mybatis-plus 代码自动生成</p>
<ul>
<li><p>maven 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.velocity/velocity-engine-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在测试类中编写程序让其自动生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.ScriptRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 快速生成</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lanjerry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-09-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastAutoGeneratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行初始化数据库脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DATA_SOURCE_CONFIG.build().getConn();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> FastAutoGeneratorTest.class.getResourceAsStream(<span class="string">&quot;/db/schema-mysql.sql&quot;</span>);</span><br><span class="line">        <span class="type">ScriptRunner</span> <span class="variable">scriptRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptRunner</span>(conn);</span><br><span class="line">        scriptRunner.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">        scriptRunner.runScript(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSourceConfig.<span class="type">Builder</span> <span class="variable">DATA_SOURCE_CONFIG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span></span><br><span class="line">            .Builder(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus_demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;nullCatalogMeansCurrent=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 run</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        before();</span><br><span class="line">        FastAutoGenerator.create(DATA_SOURCE_CONFIG)</span><br><span class="line">                <span class="comment">// 全局配置</span></span><br><span class="line">                .globalConfig((scanner, builder) -&gt; builder.author(scanner.apply(<span class="string">&quot;请输入作者名称&quot;</span>)))</span><br><span class="line">                <span class="comment">// 包配置</span></span><br><span class="line">                .packageConfig((scanner, builder) -&gt; builder.parent(scanner.apply(<span class="string">&quot;请输入包名&quot;</span>)))</span><br><span class="line">                <span class="comment">// 策略配置</span></span><br><span class="line">                .strategyConfig((scanner, builder) -&gt; builder.addInclude(scanner.apply(<span class="string">&quot;请输入表名，多个表名用,隔开&quot;</span>)))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker</span></span><br><span class="line"><span class="comment">                   .templateEngine(new BeetlTemplateEngine())</span></span><br><span class="line"><span class="comment">                   .templateEngine(new FreemarkerTemplateEngine())</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>shang gui gu 配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604165408694.png"
alt="image-20220604165408694" /></li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604165451088.png"
alt="image-20220604165451088" />
<figcaption aria-hidden="true">image-20220604165451088</figcaption>
</figure></li>
<li></li>
</ul></li>
</ul>
<h2 id="模拟多数据源环境">模拟多数据源环境</h2>
<ul>
<li><p>新建一个mybatis-plus数据库和表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604170202852.png"
alt="image-20220604170202852" /></p></li>
<li><p>maven依赖添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/dynamic-datasource-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>前提 使用mybatis_plus中的t_product表
及mybatis_plus1中的t_product1表</p></li>
<li><p>yml配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">dynamic:</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">master</span> <span class="comment">#设置默认的数据源或者数据源组,默认值即为master</span></span><br><span class="line">      <span class="attr">strict:</span> <span class="literal">false</span> <span class="comment">#严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">master:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;&amp;useSSL=false&amp;&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span> <span class="comment"># 3.2.0开始支持SPI可省略此配置</span></span><br><span class="line">        <span class="attr">slave_1:</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf-8&amp;&amp;useSSL=false&amp;&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">          <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="comment">#slave_2:</span></span><br><span class="line">        <span class="comment">#  url: ENC(xxxxx) # 内置加密,使用请查看详细文档</span></span><br><span class="line">        <span class="comment">#  username: ENC(xxxxx)</span></span><br><span class="line">        <span class="comment">#  password: ENC(xxxxx)</span></span><br><span class="line">       <span class="comment">#   driver-class-name: com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="comment">#......省略</span></span><br><span class="line">        <span class="comment">#以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</span></span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
<ul>
<li>结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173324836.png"
alt="image-20220604173324836" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173357652.png"
alt="image-20220604173357652" /></li>
</ul></li>
</ul>
<h2 id="安装mybatisx插件">安装MyBatisX插件</h2>
<ul>
<li>插件市场 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173502957.png"
alt="image-20220604173502957" /></li>
<li>自动定位 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173533155.png"
alt="image-20220604173533155" /></li>
</ul>
<h2 id="mybatis代码快速生成">MyBatis代码快速生成</h2>
<ul>
<li><p>配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173606015.png"
alt="image-20220604173606015" /></p></li>
<li><p>url及密码配置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173630815.png"
alt="image-20220604173630815" /></p></li>
<li><p>使用 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173659189.png"
alt="image-20220604173659189" /></p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173710148.png"
alt="image-20220604173710148" />
<figcaption aria-hidden="true">image-20220604173710148</figcaption>
</figure></li>
<li><p>自动生成 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173748997.png"
alt="image-20220604173748997" /></p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220604173807772.png"
alt="image-20220604173807772" />
<figcaption aria-hidden="true">image-20220604173807772</figcaption>
</figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis-plus 尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2022/05/20/study/mybatis_plus/official/hello/</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<ul>
<li>MyBatis-Plus (opens new window)（简称 MP）是一个 MyBatis (opens new
window)的增强工具，在 MyBatis
的基础上只做增强不做改变，为简化开发、提高效率而生。</li>
</ul>
<h2 id="快速开始">快速开始</h2>
<ul>
<li><p>数据库的Schema脚本 resources/db/schema-mysql.sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">    id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">    age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line">    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">    PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><p>数据库Data脚本 resources/db/data-mysql.sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),</span><br><span class="line">(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),</span><br><span class="line">(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),</span><br><span class="line">(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),</span><br><span class="line">(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个spring boot工程（使用maven）</p>
<ul>
<li><p>父工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>springboot 相关仓库及mybatis-plus、mysql、Lombok相关仓库引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置resources/application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">sql:</span></span><br><span class="line">    <span class="attr">init:</span></span><br><span class="line">      <span class="attr">schema-locations:</span> <span class="string">classpath:db/schema-mysql.sql</span></span><br><span class="line">      <span class="attr">data-locations:</span> <span class="string">classpath:db/data-mysql.sql</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure></li>
<li><p>entity类和mapper类的处理</p>
<ul>
<li><p>entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.samples.quickstart.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.samples.quickstart.Application;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.samples.quickstart.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.samples.quickstart.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Assertions;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;Application.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">5</span>, userList.size());</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="mybatis-plus-代码自动生成">mybatis-plus 代码自动生成</h3>
<ul>
<li><p>maven 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.velocity/velocity-engine-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在测试类中编写程序让其自动生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.ScriptRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 快速生成</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lanjerry</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-09-16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastAutoGeneratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行初始化数据库脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DATA_SOURCE_CONFIG.build().getConn();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> FastAutoGeneratorTest.class.getResourceAsStream(<span class="string">&quot;/db/schema-mysql.sql&quot;</span>);</span><br><span class="line">        <span class="type">ScriptRunner</span> <span class="variable">scriptRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptRunner</span>(conn);</span><br><span class="line">        scriptRunner.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">        scriptRunner.runScript(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSourceConfig.<span class="type">Builder</span> <span class="variable">DATA_SOURCE_CONFIG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span></span><br><span class="line">            .Builder(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus_demo?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;nullCatalogMeansCurrent=true&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 run</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        before();</span><br><span class="line">        FastAutoGenerator.create(DATA_SOURCE_CONFIG)</span><br><span class="line">                <span class="comment">// 全局配置</span></span><br><span class="line">                .globalConfig((scanner, builder) -&gt; builder.author(scanner.apply(<span class="string">&quot;请输入作者名称&quot;</span>)))</span><br><span class="line">                <span class="comment">// 包配置</span></span><br><span class="line">                .packageConfig((scanner, builder) -&gt; builder.parent(scanner.apply(<span class="string">&quot;请输入包名&quot;</span>)))</span><br><span class="line">                <span class="comment">// 策略配置</span></span><br><span class="line">                .strategyConfig((scanner, builder) -&gt; builder.addInclude(scanner.apply(<span class="string">&quot;请输入表名，多个表名用,隔开&quot;</span>)))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker</span></span><br><span class="line"><span class="comment">                   .templateEngine(new BeetlTemplateEngine())</span></span><br><span class="line"><span class="comment">                   .templateEngine(new FreemarkerTemplateEngine())</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用mybats-x插件自动生成代码</p>
<ul>
<li><p>操作 <img
src="C:\Users\ztx11\AppData\Roaming\Typora\typora-user-images\image-20220526151137850.png"
alt="image-20220526151137850" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526151155505.png" />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526151232408.png"
alt="image-20220526151232408" /></p></li>
<li><p>编写controller确定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.baomidou.mybatisplus.samples.quickstart.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.baomidou.mybatisplus.samples.quickstart.entity.User&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id,name,age,</span><br><span class="line">        email</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>entity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TableName</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName(value =&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object that)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == that) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (that == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != that.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">other</span> <span class="operator">=</span> (User) that;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getId() == <span class="literal">null</span> ? other.getId() == <span class="literal">null</span> : <span class="built_in">this</span>.getId().equals(other.getId()))</span><br><span class="line">            &amp;&amp; (<span class="built_in">this</span>.getName() == <span class="literal">null</span> ? other.getName() == <span class="literal">null</span> : <span class="built_in">this</span>.getName().equals(other.getName()))</span><br><span class="line">            &amp;&amp; (<span class="built_in">this</span>.getAge() == <span class="literal">null</span> ? other.getAge() == <span class="literal">null</span> : <span class="built_in">this</span>.getAge().equals(other.getAge()))</span><br><span class="line">            &amp;&amp; (<span class="built_in">this</span>.getEmail() == <span class="literal">null</span> ? other.getEmail() == <span class="literal">null</span> : <span class="built_in">this</span>.getEmail().equals(other.getEmail()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        result = prime * result + ((getId() == <span class="literal">null</span>) ? <span class="number">0</span> : getId().hashCode());</span><br><span class="line">        result = prime * result + ((getName() == <span class="literal">null</span>) ? <span class="number">0</span> : getName().hashCode());</span><br><span class="line">        result = prime * result + ((getAge() == <span class="literal">null</span>) ? <span class="number">0</span> : getAge().hashCode());</span><br><span class="line">        result = prime * result + ((getEmail() == <span class="literal">null</span>) ? <span class="number">0</span> : getEmail().hashCode());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(getClass().getSimpleName());</span><br><span class="line">        sb.append(<span class="string">&quot; [&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Hash = &quot;</span>).append(hashCode());</span><br><span class="line">        sb.append(<span class="string">&quot;, id=&quot;</span>).append(id);</span><br><span class="line">        sb.append(<span class="string">&quot;, name=&quot;</span>).append(name);</span><br><span class="line">        sb.append(<span class="string">&quot;, age=&quot;</span>).append(age);</span><br><span class="line">        sb.append(<span class="string">&quot;, email=&quot;</span>).append(email);</span><br><span class="line">        sb.append(<span class="string">&quot;, serialVersionUID=&quot;</span>).append(serialVersionUID);</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>service接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>serviceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public interface UserMapper extends BaseMapper<span class="tag">&lt;<span class="name">User</span>&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>controller测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>测试 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526151658557.png"
alt="image-20220526151658557" /></p></li>
</ul></li>
<li><p>使用mybatis-x 插件（idea）</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526153005432.png"
alt="image-20220526153005432" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526152906823.png"
alt="image-20220526152906823" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220526152939073.png"
alt="image-20220526152939073" />
<figcaption aria-hidden="true">image-20220526152939073</figcaption>
</figure></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis-plus official</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql高阶_sgg 96-00</title>
    <url>/2022/06/15/study/mysql/bl_sgg/96-00/</url>
    <content><![CDATA[<h1 id="章节概述">章节概述</h1>
<ul>
<li><p>架构篇</p>
<ul>
<li>1-3 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615212744595.png"
alt="image-20220615212744595" /></li>
<li>4 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213049475.png"
alt="image-20220615213049475" /></li>
<li>5 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213116434.png"
alt="image-20220615213116434" /></li>
<li>6 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213214227.png"
alt="image-20220615213214227" /></li>
</ul></li>
<li><p>索引及调优篇</p>
<ul>
<li><p>01 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213343380.png"
alt="image-20220615213343380" /></p></li>
<li><p>02-03</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213548130.png"
alt="image-20220615213548130" />
<figcaption aria-hidden="true">image-20220615213548130</figcaption>
</figure></li>
<li><p>04-05</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213705843.png"
alt="image-20220615213705843" />
<figcaption aria-hidden="true">image-20220615213705843</figcaption>
</figure></li>
<li><p>06 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213812595.png"
alt="image-20220615213812595" /></p></li>
</ul></li>
<li><p>事务篇</p>
<ul>
<li>01-02 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213841661.png"
alt="image-20220615213841661" /></li>
<li>03 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213918419.png"
alt="image-20220615213918419" /></li>
<li>04 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615213941383.png"
alt="image-20220615213941383" /></li>
</ul></li>
<li><p>日志与备份篇</p>
<ul>
<li>01 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615214005636.png"
alt="image-20220615214005636" /></li>
<li>02 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615214017149.png"
alt="image-20220615214017149" /></li>
<li>03 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615214035941.png"
alt="image-20220615214035941" /></li>
</ul></li>
</ul>
<h1 id="centos环境准备">CentOS环境准备</h1>
<ul>
<li>这里主要是做了克隆，并没有讲到CentOS的安装，所以笔记不记录了</li>
</ul>
<h1 id="mysql的卸载">MySQL的卸载</h1>
<ul>
<li><p>查找当前系统已经装了哪些
<code>rpm -qa |grep mysql</code></p></li>
<li><p>查找mysql服务运行状态
<code>systemctl status mysql</code></p></li>
<li><p>停止mysql服务 <code>systemctl stop mysql</code></p></li>
<li><p>删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove mysql-community-client-plugins-8.0.29-1.el7.x86_64</span><br><span class="line">yum remove mysql-community-common-8.0.29-1.el7.x86_64</span><br></pre></td></tr></table></figure></li>
<li><p>查找带mysql名字的文件夹 <code>find / -name mysql</code></p></li>
<li><p>进行删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line">rm -rf /etc/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /etc/my.cnf</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="linux下安装mysql8.0与5.7版本">Linux下安装MySQL8.0与5.7版本</h1>
<ul>
<li><p>版本介绍 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615215503286.png"
alt="image-20220615215503286" /></p></li>
<li><p>下载地址 : https://www.mysql.com/downloads/ <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615215700151.png"
alt="image-20220615215700151" /></p>
<ul>
<li>进入 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615215748407.png"
alt="image-20220615215748407" /> 即
https://dev.mysql.com/downloads/mysql/</li>
</ul></li>
<li><p>版本选择 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615220106821.png"
alt="image-20220615220106821" /></p>
<ul>
<li><p>下载最大的那个，离线版 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615220208380.png"
alt="image-20220615220208380" /></p></li>
<li><p>下载后解压，并将下面六个放进linux中</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615230622301.png"
alt="image-20220615230622301" />
<figcaption aria-hidden="true">image-20220615230622301</figcaption>
</figure></li>
</ul></li>
<li><p>如果是5.7，则需要进入
https://downloads.mysql.com/archives/community/</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615220835226.png"
alt="image-20220615220835226" />
<figcaption aria-hidden="true">image-20220615220835226</figcaption>
</figure>
<ul>
<li>下载后解压 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615221052718.png"
alt="image-20220615221052718" /></li>
<li>拷贝进linux</li>
</ul></li>
<li><p>安装前，给/tmp临时目录权限</p>
<ul>
<li><p><code>chmod -R 777 /tmp</code></p></li>
<li><p>检查依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa |grep libaio</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#libaio-0.3.109-13.el7.x86_64</span></span></span><br><span class="line">rpm -qa |grep net-tools</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#net-tools-2.0-0.24.20131004git.el7.x86_64</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>确保目录下已经存在5（4）个文件并<strong>严格</strong>按顺序执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.29-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<ul>
<li><p>安装libs的时候，会报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error: Failed dependencies:</span><br><span class="line">	mariadb-libs is obsoleted by mysql-community-libs-8.0.29-1.el7.x86_64</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用下面命令，视频的方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove mysql-libs</span><br></pre></td></tr></table></figure></li>
<li><p>使用下面命令，卸载mariadb (这是我自己的方法)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># 查找到对应的版本 mariadb-libs-5.5.60-1.el7_5.x86_64</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># 下面卸载查找出来的版本</span></span></span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash"><span class="comment"># yum remove mariadb-libs-5.5.60-1.el7_5.x86_64</span></span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>再次执行后安装成功</p></li>
</ul></li>
</ul></li>
<li><p>服务初始化 <code>mysqld --initialize --user=mysql</code></p></li>
<li><p>查看默认生成的密码 <code>cat /var/log/mysqld.log</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615230843532.png"
alt="image-20220615230843532" /></p></li>
<li><p>判断mysql是否启动 <code>systemctl status mysqld</code></p></li>
<li><p>启动服务<code>systemctl start mysqld</code>
再次判断，发现已经启动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615231006026.png"
alt="image-20220615231006026" /></p></li>
<li><p>设置为自动启动</p>
<ul>
<li>查看当前是否开机自启动
<code>systemctl list-unit-files|grep mysqld.service</code> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615231116185.png"
alt="image-20220615231116185" /></li>
<li>如果是disable，则可以使用下面命令开机自启动
<code>systemctl enable mysqld.service</code></li>
</ul></li>
<li><p>进行登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>用刚才的密码</p>
<ul>
<li><p>使用查询，提示需要重置密码 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220615231707178.png"
alt="image-20220615231707178" /></p></li>
<li><p>密码更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">quit</span><br><span class="line"># 退出重新登录</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>5.7的安装
赋予权限并检查包，这里发现缺少了libaio，所以<code>yum install libaio</code></p></li>
</ul>
<h1
id="sqlyog实现mysql8.0和5.7的远程连接">SQLyog实现MySQL8.0和5.7的远程连接</h1>
<ul>
<li><p>sqlyog下载
https://github.com/webyog/sqlyog-community/wiki/Downloads</p></li>
<li><p>默认情况下会有连接出错 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220616000229899.png"
alt="image-20220616000229899" /></p></li>
<li><p>先测试ip及端口号 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220616000453564.png"
alt="image-20220616000453564" /></p>
<ul>
<li>此时linux端口号并没有开放
使用<code>systemctl status firewalld</code>发现防火墙开启 （active)
使用<code>systemctl stop firewalld</code>将防火墙关闭</li>
<li>开机时关闭防火墙<code>systemctl disable firewalld</code></li>
<li>此时还是报错 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220616001041497.png"
alt="image-20220616001041497" /></li>
</ul></li>
<li><p>这是由于root不允许被远程连接</p>
<ul>
<li><p>查看user表，发现只允许本地登录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220616001151783.png"
alt="image-20220616001151783" /></p></li>
<li><p>修改并更新权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host = &#x27;192.168.1.%&#x27; where user= &#x27;root&#x27;;</span><br><span class="line">#或者</span><br><span class="line">update user set host = &#x27;%&#x27; where user= &#x27;root&#x27;;</span><br><span class="line">#更新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
<li><p>之后如果出现下面的问题（视频中有，我没遇到） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220616001512943.png"
alt="image-20220616001512943" /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>
<ul>
<li>然后就可以连接了</li>
</ul></li>
<li><p>命令行进行远程连接
<code>mysql -u root -h 192.168.200.150 -P3306 -p</code></p></li>
</ul></li>
<li></li>
</ul>
<h1 id="字符集的修改与底层原理说明">字符集的修改与底层原理说明</h1>
<h1
id="比较规则_请求到响应过程中的编码与解码过程">比较规则_请求到响应过程中的编码与解码过程</h1>
<h1
id="sql大小写规范与sql_model的设置">SQL大小写规范与sql_model的设置</h1>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mysql高级篇-尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_01-05</title>
    <url>/2021/12/27/study/redis/shangguigu_BV1Rv41177Af/01-05/</url>
    <content><![CDATA[<h2 id="课程简介">课程简介</h2>
<p>NoSQL数据库简介、Redis概述与安装、常用五大数据结构、配置文件详解、发布与订阅、Redis6新数据类型、Redis与spring
boot整合、事务操作、持久化之RDB、持久化之AOF、主从复制及集群、Redis6应用问题(缓存穿透、击穿、雪崩以及分布式锁)、Redis6新增功能
## NoSQL数据库简介 * Redis属于NoSQL数据库 * 技术分为三大类 *
解决功能性问题：Java、Jsp、RDBMS、Tomcat、Linux、JDBC、SVN *
解决扩展性问题：Struts、Spring、SpringMVC、Hibernate、Mybatis *
解决性能问题：NoSQL、Java线程、Nginx、MQ、ElasticSearch *
缓存数据库的好处 * 完全在内存中，速度快，结构简单 *
作为缓存数据库：减少io的读操作<br />
* NoSQL＝Not Only SQL,不仅仅是SQL，泛指<strong>非泛型数据库</strong> *
不支持ACID(但是NoSQL支持事务) * 选超于SQL的性能 * NoSQL适用场景 *
对数据高并发的读写 * 海量数据的读写 * 对数据高可扩展性 *
NoSQL不适用的场景 * 需要事务支持 * 基于sql的结构化查询存储 *
多种NoSQL数据库介绍 * Memcache
不支持持久化，数据类型单一，一般作为辅助持久化的数据库 * Redis
支持持久化，除了k-v模式还有其他多种数据结构，一般作为辅助持久化的数据库
*
MongoDB，是文档型数据类型；k-v模型，但是对value提供了丰富的查询功能；支持二进制数据及大型对象；替代RDBMS，成为独立数据库
* 大数据时代（行式数据库、列式数据库） * 行式数据库<br />
查询某一块数据的时候效率高<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929802056.png" /><br />
* 列式数据库<br />
查询某一列统计信息快<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929838300.png" /><br />
* 其他<br />
Hbase，Cassandra，图关系数据库(比如社会关系，公共交通网等)<br />
* 小计<br />
NoSQL数据库是为提高性能而产生的非关系型数据库<br />
## Redis概述与安装<br />
* 简单概述<br />
* Redis是一个开源的kv存储系统<br />
*
相比Mencached，支持存储的数据类型更多，包括string，list，set，zset以及hash，这些类型都支持(pop、add/remove及取交并集和差集等)，操作都是原子性的<br />
* Redis数据都是缓存在内存中 *
Redis会周期性地把数据写入磁盘或修改操作写入追加的记录文件 *
能在此基础上实现master-slave(主从)同步 * Redis功能 *
配合关系型数据库做高速缓存 * Redis具有多样的数据结构存储持久化数据 *
其他部分功能<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929869759.png" /><br />
* Redis安装<br />
* 从官网中下载redis-6.xx.tar.gz包(该教程在linux中使用redis6教学) *
编译redis需要gcc环境 * 使用gcc --version查看服务器是否有gcc环境 *
如果没有需要进行安装 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y gcc</span><br><span class="line">或者</span><br><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure> * 将redis压缩文件进行解压
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6xx.tar.gz</span><br></pre></td></tr></table></figure> * 进入解压后的文件夹，并使用make命令进行编译<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure> * 如果报错了，需要先用下面命令清理，之后再进行编译
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make distclean</span><br></pre></td></tr></table></figure> * 安装redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure> *
进入/usr/local/bin目录，查看目录<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640939791651.png" />
* Redis启动 * 前台启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server </span><br></pre></td></tr></table></figure> * 后台启动 *
在刚才解压的文件夹中，拷贝出redis.conf文件(这里拷贝到/etc/目录下)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure> * 到etc中修改redis.conf文件<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br><span class="line"># 进入编辑器后使用下面命令进行搜索并回车</span><br><span class="line">/daemonize no</span><br></pre></td></tr></table></figure> 将no改为yes并保存 * 进入/usr/local/bin目录启动redis
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf </span><br></pre></td></tr></table></figure> * 查看进程，发现redis已经启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure> *
使用redis-cli 客户端连接redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">keys * </span><br></pre></td></tr></table></figure> ## 相关知识<br />
* Redis6379的由来 * 人名Merz 在九宫格对应的数字就是6379<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283251602.png" />
* Redis默认有15个库，默认数据都在数据库0中，所有库的密码都是相同的 *
Redis是单线程+多路复用技术<br />
* Redis是串行操作<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283379975.png" />
* 火车站的例子<br />
当1，2，3没有票的时候，不用一直等待买票，可以继续做自己的事情，黄牛买到票就会通知123进行取票<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283510456.png" />
* Memcached和Redis区别<br />
* Memcached支持单一数据类型，Redis支持多数据类型 *
Memcached不支持持久化<br />
* Memcached用的多线程+锁的机制，Redis用的是单线程+多路复用程序 ##
End</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_06-11</title>
    <url>/2022/01/04/study/redis/shangguigu_BV1Rv41177Af/06-11/</url>
    <content><![CDATA[<h2 id="redis针对key的基本操作">Redis针对key的基本操作</h2>
<ul>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys * #查找当前库所有库</span><br><span class="line">exists key1 #key1是否存在 1存在；0不存在</span><br><span class="line">type key2 #key2的类型</span><br><span class="line">del key3 #删除key3</span><br><span class="line">unlink key3 #删除key3(选择非阻塞删除。会先从元数据删除，而真正删除是异步删除)</span><br><span class="line">expire key1 10 #设置key1的过期时间，单位秒</span><br><span class="line">ttl key1 #获取key1的剩余存活时间，-2表示key已过期或不存在，-1表示永不过期</span><br><span class="line">select 1 #切换到1号库(redis中有15个库，默认在库1)</span><br><span class="line">dbsize #查找当前redis库中有多少个key</span><br><span class="line">flushdb #清空当前库</span><br><span class="line">flushall #清空所有库</span><br></pre></td></tr></table></figure> ## Redis中常用数据类型 ### 字符串（String）</li>
<li>String是二进制安全的，可以包含jpg图片或序列化的对象</li>
<li>一个Redis中字符串value最多可以只能是512M</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key1 value1</span><br><span class="line">get key1 </span><br><span class="line">set key1 value11 #将覆盖上一个值</span><br><span class="line">append key1 abc #在key1的值追加&quot;abc&quot;</span><br><span class="line">strlen key1 #key值的长度</span><br><span class="line">setnx key1 value #当key不存在时才设置key</span><br><span class="line">incr n1 #将n1的值加一,,如果n1不存在则会创建key n1 并改为1(0+1)</span><br><span class="line">decr n1 #将n1的值减一,如果n1不存在则会创建key n1 并改为-1(0-1)</span><br><span class="line">incrby n1 20 #将n1的值加20，其他同上</span><br><span class="line">decrby n1 20 #将n1的值减20，其他同上</span><br></pre></td></tr></table></figure></li>
<li>redis原子性<br />
incr具有原子性操作<br />
java中的i++不是原子操作<br />
</li>
<li>其他命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mset k1 v1 k2 v2</span><br><span class="line">mget k1 k2 </span><br><span class="line">msetnx k1 v1 k2 v2 #仅当所有的key都不存在时才会进行设置</span><br><span class="line">getrange name 0 3 #截断字符串[0,3]</span><br><span class="line">setrange name 3 123 #从下标[3]开始替换字符串（换成123）</span><br><span class="line">setex k1 20 v1 #设置过期时间为20s</span><br><span class="line">expire k1 30 #设置过期时间为30s</span><br><span class="line">getset k1 123 #获取旧值，并设置一个新值</span><br></pre></td></tr></table></figure></li>
<li>数据结构，SimpleDynamicString，SDS，简单动态字符串，内部结构类似Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384642245.png" /><br />
### 列表 (List)<br />
</li>
<li>单键多值<br />
</li>
<li>底层是双向链表<br />
</li>
<li>从左放 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush k1 v1 v2 v3 #从左边放(从左往右推)</span><br><span class="line">lrange k1 0 -1 #从左边取(v3 v2 v1)</span><br></pre></td></tr></table></figure></li>
<li>lpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384992243.png" /><br />
</li>
<li>从右放<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpush k2 v1 v2 v3 </span><br></pre></td></tr></table></figure></li>
<li>brpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642385552581.png" /><br />
</li>
<li>lpop/rpop<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop k2 #从左边弹出一个值</span><br><span class="line">lpop k2 2 #从左边弹出两个值，当键没有包含值时，键被删除</span><br></pre></td></tr></table></figure></li>
<li>rpoplpush<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush a a1 a2 a3</span><br><span class="line">rpush b b1 b2 b3</span><br><span class="line">rpoplpush a b #此时a:a1 a2，b:a3 b1 b2 b3</span><br></pre></td></tr></table></figure></li>
<li>lrange <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrange b 1 2 #获取b中下标[1,2]的所有值</span><br><span class="line">lrange b 1 -1 #获取所有值[1,最大下标]的所有值</span><br></pre></td></tr></table></figure></li>
<li>lindex,llen <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex b 1 #直接取第一个下标的元素</span><br><span class="line">llen b #获取列表的长度</span><br></pre></td></tr></table></figure></li>
<li>linsert <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linsert b before b2 myinsert</span><br><span class="line">linsert b after b2 myinsert</span><br><span class="line">#在某个列表的值(如果重复取第一个)的位置之前/之后插入值</span><br></pre></td></tr></table></figure> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405713546.png" /></li>
<li>lrem,lset <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem b 2 a #从b列表中，删除两个a（从左往右）</span><br><span class="line">lset b 2 AA #把下标2的值设置为AA</span><br></pre></td></tr></table></figure></li>
<li>list数据结构是一个快速列表，quicklist<br />
当元素较少的时候，会使用连续的内存存储，结构时ziplist，即压缩列表；当数据多的时候会有多个压缩列表，然后会链接到一起(使用双向指针)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405814686.png" />
### 集合(Set)</li>
<li>特点：无序，不重复<br />
</li>
<li>Set:string类型的无序集合，底层是一个value为null的hash表；添加/删除时间复杂度为O(1)</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd k1 v1 v2 v3 v2 v2 v1 #设置集合中的值</span><br><span class="line">smembers k1 #取出集合中的值</span><br><span class="line">sismember k1 v3 #k1是否存在v3，存在返回1，不存在返回0</span><br><span class="line">scard k1 #返回集合中元素的个数</span><br><span class="line">srem k1 v2 v3 #删除集合中的v2和v3</span><br><span class="line">spop k1 #从k1中随机取出一个值</span><br><span class="line">srandmember k1 2 #从k1中随机取出2个值</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smove a k a1 #从a中将a1移动到k中</span><br><span class="line">sinter a k #取a，k的交集</span><br><span class="line">sunion a k #取a，k的并集</span><br><span class="line">sdiff a k #返回两个集合的差集（从集合a中，去除存在集合k中的元素，即a-k）</span><br></pre></td></tr></table></figure></li>
<li>Set数据结构时dict字典，字典使用哈希表实现的 ### 哈希（Hash)</li>
<li>是String类型的field和value的映射表，用来存储对象,类似java中的Map&lt;String,Object&gt;<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405567709.png" /><br />
</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset user:1001 id 1 #设置(对象)user:1001的id属性值</span><br><span class="line">hset user:1001 name zhangsan </span><br><span class="line">hget user:1001 name #取出user:1001的name</span><br><span class="line">hmset user:1001 id 1 name zhangsan #批量设置（现在hset也可以批量设置了，hmset已弃用）</span><br><span class="line">hexists user:1001 id 1 #判断属性id是否存在</span><br><span class="line">hkeys user:1001 #查看hash结构中的所有filed</span><br><span class="line">hvals user:1001 #查看hash结构中所有value</span><br><span class="line">hincrby user:1001 age 2 #给hash结构的age属性值加2</span><br><span class="line">hsetnx user:1001 age 10 #给hash结构的age属性设置值为10（如果age属性不存在）</span><br></pre></td></tr></table></figure></li>
<li>hash类型数据结构，当field-value长度较短时用的是ziplist，否则使用的是hashtable
### 有序集合(ZSet)</li>
<li>与set很相似，但是是有序的</li>
<li>有序集合的所有元素（成员）都关联一个评分(score)，score用来从最低到最高方式进行排序，成员唯一但评分是重复的</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd topn 100 xiaoming 120 xiaohong 60 xiaochen #添加key并为每个成员添加评分</span><br><span class="line">zadd topn xiaoli 200 </span><br><span class="line">zrange topn 0 -1 #查找出所有成员(按排名由小到大)</span><br><span class="line">zrange topn 0 -1 withscores #从小到大查找所有成员并显示分数</span><br><span class="line">zrangebyscore topn 130 200 #查找所有在130-200的成员</span><br><span class="line">zrevrangebyscore topn 200 130 #从大到小查找所有成员（注意，从大到小时第一个值必须大于等于第二个）</span><br><span class="line">zincrby topn 15 xiaohong #给小红添加15分</span><br><span class="line">zrem topn xiaohong #删除元素</span><br><span class="line">zcount topn 10 200 #统计该集合，分数区间内的元素个数</span><br><span class="line">zrank topn xiaohong #xiaohong的排名，从0开始</span><br></pre></td></tr></table></figure></li>
<li>zset底层数据结构
<ul>
<li>hash结构<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408140352.png" /></li>
<li>跳跃表 给元素value排序，根据score的范围获取元素列表</li>
<li>对比有序链表和跳跃表
<ul>
<li>查找51元素<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408284497.png" /></li>
<li>跳跃表<br />
按图中的顺序查找，查找四次就能找到<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408430332.png" /></li>
</ul></li>
</ul></li>
<li>End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_12-17</title>
    <url>/2022/01/18/study/redis/shangguigu_BV1Rv41177Af/12-17/</url>
    <content><![CDATA[<h2 id="redis配置文件">Redis配置文件</h2>
<ul>
<li>redis中单位的设置，支持k,kb,m,mb,g,gb，且不区分大小写<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642470299824.png" /></li>
<li>include (包含其他文件，比如公共部分)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642471413477.png" /><br />
</li>
<li>bind <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 ::1 #listens on loopback IPv4 and IPv6 </span><br></pre></td></tr></table></figure>
<ul>
<li>后面这个::1，相当于ipv6版的127.0.0.1。在redis配置文件中，整句表示只允许本地网卡的某个ip连接(但是它并不能指定某个主机连接到redis中。比如本机有两个网卡，两个ip，可以限定只有其中一个ip可以连接)</li>
<li>如果注释掉了/或者bind 0.0.0.0，表示允许所有主机连接</li>
</ul></li>
<li>protected-mode <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected-mode yes </span><br></pre></td></tr></table></figure>
<ul>
<li>设置保护模式为yes，protected是redis本身的一个安全层，这个安全层在同时满足下面三个条件的时候会开启，开启后只有本机可以访问redis
<ul>
<li>protected-mode yes</li>
<li>没有bind指令(bind 0.0.0.0不属于这个条件)</li>
<li>没有设置密码 (没有设置requirepass password)<br />
</li>
</ul></li>
<li>只要上面一个条件不满足，就不会开启保护模式。换言之，只要设置了bind
0.0.0.0或者没有设置bind，且不满足上面三个条件之一，就能够进行远程访问(当然，linux/windows的6379端口要开放)</li>
</ul></li>
<li>tcp-backlog 表示未连接队列总和<br />
</li>
<li>timeout 秒为单位，时间内没操作则断开连接</li>
<li>tcp-keepalive 300 心跳检测，每隔300s检测连接是否存在</li>
<li>pidfile /var/run/redis_6379.pid 将进程号保存到文件中</li>
<li>loglevel
表示日志的级别/debug/verbose/<strong>notice</strong>/warning</li>
<li>logfile "" 设置日志的路径</li>
<li>database 16 默认有16个库</li>
<li>requirepass password 设置密码</li>
<li>maxclients 设置最大连接数</li>
<li>maxmemory 设置最大内存量，达到则会根据移除策略进行移除操作 ##
Redis的发布和订阅</li>
<li>发布订阅，pub/sub，是一种消息通信模式：发送者pub发送消息，订阅器sub接收消息</li>
<li>发布者能发布消息，订阅者可以订阅/接收消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642496809416.png" /><br />
</li>
<li>操作<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe channel1 #客户端A订阅频道 </span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publish channel1 helloly #向频道发送消息</span><br></pre></td></tr></table></figure>
此时订阅channel1频道的客户端就会接收到消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642557791117.png" />
## redis新数据类型<br />
### Bitmaps
<ul>
<li><p>进行二进制操作</p></li>
<li><p>可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做<strong>偏移量</strong><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642560262874.png" /><br />
</p></li>
<li><p>bitcount:统计字符串被设置为1的bit数，这里结果是5</p></li>
<li><p>bitcount u1 0 1 #统计字符串第0个字节到第1个字节1的bit数<br />
(1,6,11,15,19bit值为1)[也就是统计第0到第15位的1的个数]<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u1 1 1</span><br><span class="line">setbit u1 2 1</span><br><span class="line">setbit u1 5 1</span><br><span class="line">setbit u1 9 1</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u2 0 1</span><br><span class="line">setbit u2 1 1</span><br><span class="line">setbit u2 4 1</span><br><span class="line">setbit u2 9 1</span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1，u2共同位为1的个数，如上1,9都是1，所以返回2，且 bitcount
u1--u2的值为2（第1和第9位为1），其实就是<strong>u1和u2进行&amp;操作</strong><br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitop and u1-and-u2 u1 u2 </span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1或u2存在值为1的位的个数，如上结果为8-2=6，结果存在u1-or-u2中，即1，2，5，9，0，4的位
值为1(的字符串)，其实就是<strong>u1和u2进行或操作</strong><br />
</p></li>
<li><p>性能比较，假设有一亿个用户，用户id数值递增，需求是存储每个用户是否活跃。下面是使用hashMap和bitmaps的比较<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642562600909.png" /></p></li>
<li><p>bitmaps主要用来进行位操作计算 ### HyperLogLog</p></li>
</ul></li>
<li>解决基数问题<br />
从{1,3,5,5,7,8,8,7,9}找出基数：基数为5，即不重复元素的个数</li>
<li>解决方案
<ul>
<li>mysql中可以用distinct count</li>
<li>redis中可以用hash,set,bitmaps</li>
</ul></li>
<li>使用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pfadd a 1 2 3 4 3 3 3 2 1 6 7</span><br><span class="line">pfcount a #得到基数 6 </span><br><span class="line">pfadd b 1 10 7 15 #基数4</span><br><span class="line">pfmerge c a b #将a，b合并到c</span><br><span class="line">pfcount c #得到基数8</span><br></pre></td></tr></table></figure> ### GEO类型 (geographic)<br />
</li>
<li>基本命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geoadd china:city 121.47 31.43 shanghai</span><br><span class="line">geoadd china:city 166.50 29.53 chongqing 114.05 22.52  shenzhen</span><br><span class="line">geoadd china:city 16.38 39.90 beijing </span><br></pre></td></tr></table></figure></li>
<li>不支持南北极，所以有效经度在-180到180度，有效纬度从-85.05xxx度到85.05xxx度</li>
<li>获取坐标值及直线距离 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geopos china:city beijing #获取beijing经纬度</span><br><span class="line">geodist china:city beijing shenzhen km #获取beijing到shenzhen的直线距离</span><br><span class="line"># 单位有m,km,ft,mi</span><br></pre></td></tr></table></figure></li>
<li>以给定的经纬度为中心，找出某一半径内的元素<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></table></figure> ## End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_18</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/18/</url>
    <content><![CDATA[<h2 id="jedis操作redis6">Jedis操作Redis6</h2>
<ul>
<li>插曲:本地项目关联github远程库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">#-m表示强制重命名</span><br><span class="line">git branch -M main</span><br><span class="line">#使用别名</span><br><span class="line">git remote add origin git@github.com:lwmfjc/jedis_demo.git</span><br><span class="line">#用了-u之后以后可以直接用git push替代整行 </span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure></li>
<li>jedis pom依赖 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>jedis使用 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> </span><br><span class="line">        DefaultJedisClientConfig.builder()</span><br><span class="line">                .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">        <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line">        <span class="comment">//ping</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//返回所有key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;key count: &quot;</span> +</span><br><span class="line">                keys.size());</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;key--:%s---value:%s\n&quot;</span>, </span><br><span class="line">        key, jedis.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;操作list&quot;</span>);</span><br><span class="line">        <span class="comment">//操作list</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;ly-list&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;css&quot;</span>);</span><br><span class="line">        List&lt;String&gt; lrange = jedis.lrange(<span class="string">&quot;ly-list&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : lrange) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作set</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作set&quot;</span>);</span><br><span class="line">        jedis.sadd(<span class="string">&quot;ly-set&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;ly-set&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : smembers) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作hash</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作hash&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;lidian&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;sex&quot;</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; lyHash = jedis.hgetAll(<span class="string">&quot;ly-hash&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : lyHash.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + lyHash.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作zset</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作zset&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">100</span>, <span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">80</span>, <span class="string">&quot;xiaoli&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">90</span>, <span class="string">&quot;xiaochen&quot;</span>);</span><br><span class="line">        List&lt;String&gt; person = jedis.zrange(<span class="string">&quot;person&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : person) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束操作</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_19-A</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/19-A/</url>
    <content><![CDATA[<h2 id="验证码模拟">验证码模拟</h2>
<ul>
<li>首先需要一个MyRedis单例类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyRedis单例类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJedis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jedis myJedis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果是空则进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//由于synchronized同步是在条件判断内，所以同步</span></span><br><span class="line">            <span class="comment">//并不会一直都执行，增加了效率</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyJedis.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置密码</span></span><br><span class="line">                    DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> DefaultJedisClientConfig.builder()</span><br><span class="line">                            .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">                    <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">                    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">redis</span>.clients.jedis.Jedis(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> jedis;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myJedis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>p1-</title>
    <url>/2022/05/04/study/yixue/yi-jing-za-shuo/p1-/</url>
    <content><![CDATA[<h2 id="敲门砖">敲门砖</h2>
<ul>
<li>有人说"《易经》是经典中之经典，哲学中之哲学，智慧中之智慧"，这是站在本位文化的立场来推崇《易经》的看法。</li>
<li>在这里先要使大家知道怎样去读《易经》这部书，先从怎样去认识它、怎样去了解它开始。这里提供的仅仅是一块敲门砖而已</li>
</ul>
<h2 id="洁净精微">洁净精微</h2>
<ul>
<li>《礼记》的《五经解》中，提到《易经》这门学问时说：“洁净精微，易教也。”
<ul>
<li>洁净，包括了宗教、哲学的含义，也就是说学了《易经》，他的心理、思想、情绪无论在任何情况下，都会非常宁静，澄洁。</li>
<li>精微，则是科学的，无比的细密精确，所以学易的人，要头脑非常冷静</li>
</ul></li>
<li>”闲坐小窗读周易，不知春去已多时“</li>
<li>《五经解》中说《易经》的流弊：”其失也，贼“：读了易经的人，如不走正路，旁门左道，就贼头贼脑，拿来造反</li>
<li>虞世南：不读《易》不可为将相</li>
</ul>
<h2 id="三易">三易</h2>
<ul>
<li>《周易》是周文王在羑里[yǒu
lǐ]坐牢的时候，研究《易经》的心得记录</li>
<li>一切中国的文化，都源于《易经》</li>
<li>还有另外两种《易经》，为《连山易》和《归藏易》( <strong>guī
cáng/zang 四声，没查到，好像读音都有，暂取cang 二声</strong>)</li>
<li></li>
</ul>
<h2 id="易经的三原则">易经的三原则</h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>《易经杂说》-南怀瑾</tag>
      </tags>
  </entry>
</search>
