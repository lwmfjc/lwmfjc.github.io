<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>20220416</title>
    <url>/2022/04/16/life/20220416/</url>
    <content><![CDATA[<p>最近几天吃饭，经常听到一首很嗨的歌。旋律很轻快，其实本来也就一听而过，可能是耳闻目染次数多了，好奇心上来了，查了下歌词。</p>
<p>听这首歌期间我居然联想了很多，果然是老emo了。不知道怎么回事，我这种与世无争的心态，听完后居然也让我幻想了一下这歌描述的爱情模样。我又突然想到，如今社会上离婚率居高不下，也许与网络信息的传输有密切关联。如果是古代，嫁错人或者娶错人，大家也都都认了，有什么小打小闹都互相包含。而如今，生活压力不断增大，加上网络上爆炸式（至少效果是）的宣传爱情，对比显著，很让人一着魔就陷进去，就摒弃几年甚至十几年的夫妻之情，去追求所谓的真爱、自由。</p>
<p>每个人对自己的过往，或多或少都会不甘。如果这种不甘自己没有办法化解，那么就会在某一刻爆发。每个人都应该，也必定会为自己曾经的所作所为负责。不要懵懵懂懂地进入(现代)婚姻，这样对自己和它人都极其不负责。
爆炸式的信息接收会激发你所有的冲动与不甘。</p>
<iframe src="//player.bilibili.com/player.html?aid=211411097&amp;bvid=BV1aa411y7u9&amp;cid=505755578&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">
</iframe>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>test1</title>
    <url>/2021/12/24/test/test1/</url>
    <content><![CDATA[<p>随便加点内容，注意，上面空了一行</p>
<h3 id="测试">测试</h3>
<h2 id="图片测试">图片测试</h2>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>test2</title>
    <url>/2021/12/24/test/test2/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String hello=<span class="string">&quot;ly&quot;</span>; </span><br><span class="line">System.out.println(<span class="string">&quot;Helo World&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>2021年最后一个周日</title>
    <url>/2021/12/26/life/20211226/20121226/</url>
    <content><![CDATA[<h2 id="装宽带">装宽带</h2>
<p>太晚了，不想写了-
-。简单写几个字吧，满心期待的装了宽带，但是并没有我想像的那么快乐。反而打了两把游戏更难过了，难过的是浪费了时间也什么都没得到
## 图书馆<br />
下午跑去图书馆收获倒是挺多，可能是我不太熟悉，对于书架上的书没有太大的感触。但是环境真的太棒了，很安静，感觉多发出点声音我都会觉得不好意思，大家都很自觉。也许对经常网上都能找到电子书看(程序员的事怎么能是盗呢)的人帮助不会特别大，但对于很大一部分人绝对帮助特别大，包括学生、老年人、还有一些文学类书籍阅读者等等(我一直认为文学类的一定要纸质的看起来才有味道~)<br />
当然，从图书馆回来我又打了两把游戏 o_O，dota2 yyds!!
打完日常卸载，哈哈</p>
<p>每次去图书馆我都会想起那句话，<code>"一个国家为其年轻人所提供的教育，决定了这个国家未来的样子"</code>。<br />
希望能多办点这样的图书馆，大家都能少点浮躁，多点沉淀；虽然我并不是热心公益人士，但我还是希望咱们国家的人民都生活的越来越好。不要辜负我们曾经受过的苦难。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>git使用ssh连不上</title>
    <url>/2022/04/22/problem/git/01/</url>
    <content><![CDATA[<ul>
<li><p>处理方式 在系统的host文件中，添加ip指定</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.4 github.com</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>git问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/01a/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>正确文件结构</title>
    <url>/2021/12/27/problem/hugo/correct/</url>
    <content><![CDATA[<p>正确文件结构，测试下面图片能显示<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876199450.png" /></p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>problem_temp2</title>
    <url>/2021/12/27/problem/hugo/indexa/</url>
    <content><![CDATA[<p>02.a<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/b.png" /></p>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo踩坑</title>
    <url>/2021/12/27/problem/hugo/p1/</url>
    <content><![CDATA[<ul>
<li>对于访问文件资源
<ul>
<li>hugo的文件夹名不能以-结尾。<br />
</li>
<li>一个文件夹(比如这里是hugo文件夹)中，其中的index.md文件中引用图片时，是以index.md所在文件夹(也就是hugo文件夹)为根目录访问图片；而其中的01a.md文件中引用图片时，是以和该文件同级的01a文件夹(也就是hugo/01a/)为根目录，访问图片<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875951876.png" /></li>
</ul></li>
<li>当一个文件夹下存在index.md文件时，其他文件(代表的文章)不显示在网站的文章列表<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640875552500.png" /></li>
<li>为了某些文件预览功能，我建议使用下面的文件夹结构处理文章及资源<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640876339569.png" /></li>
</ul>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>hugo问题</tag>
      </tags>
  </entry>
  <entry>
    <title>问题01</title>
    <url>/2022/05/14/problem/idea/01/</url>
    <content><![CDATA[<h2 id="cannot-download-sources">Cannot download sources</h2>
<p>在maven项目(根目录)下执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn dependency:resolve -Dclassifier=sources</span><br></pre></td></tr></table></figure>
<p>会开始下载，有控制台输出，结束后再点即可</p>
<h2 id="预留">预留</h2>
]]></content>
      <categories>
        <category>问题</category>
      </categories>
      <tags>
        <tag>idea问题</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.1.1-1.1.5</title>
    <url>/2022/02/21/study/algorithm/algorithhms_4th/1.1.1-1.1.5/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="java程序的基本结构">Java程序的基本结构</h3>
<ul>
<li>本书学习算法的方法：用Java编程语言编写的程序来实现算法(相比用自然语言有很多优势)</li>
<li>劣势：编程语言特定，使算法的思想和实现细节变得困难(所以本书尽量使用大部分语言都必须的语法)</li>
<li>把描述和实现算法所用到的语言特性、软件库和操作系统特定总称为基础编程模型</li>
<li>Java程序的基本结构
<ul>
<li><p>一段Java程序或者是一个静态方法库，或者定义了一个数据类型，需要用到的语法</p>
<ul>
<li>原始数据类型(在计算机中精确地定义整数浮点数布尔值等)</li>
<li>语句(创建变量并赋值，控制运行流程或引发副作用来进行计算，包括声明、赋值、条件、循环、调用和返回)</li>
<li>数组(多个同种数据类型值的集合)</li>
<li>静态方法(封装并重用代码)</li>
<li>字符串(一连串的字符，内置一些对他们的操作)</li>
<li>标准输入/输出(是程序与外界联系的桥梁)</li>
<li>数据抽象(数据抽象封装和重用代码，可以定义非原始数据类型，进而面向对象编程)</li>
</ul></li>
<li><p>把这种输入命令执行程序的环境称为 虚拟终端</p></li>
<li><p>要执行一条Java程序，需要先用javac命令编译，然后用java命令运行，比如下面的文件，需要使用命令</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac BinarySearch.java</span><br><span class="line">java BinarySearch </span><br></pre></td></tr></table></figure></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434867646.png" /><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645434894479.png" /></p></li>
</ul></li>
</ul>
<h3 id="原始数据类型与表达式">原始数据类型与表达式</h3>
<ul>
<li>数据类型就是一组数据和其所能进行的操作的集合</li>
<li>Java中最基础的数据类型(整型int，双精度实数类型double,布尔值boolean,字符型char)</li>
<li>Java程序控制用标识符命名的变量</li>
<li>对于原始类型，用标识符引用变量，+-*/指定操作，用字面量来表示值(如1或3.14),用表达式表示对值的操作(
表达式:(x+2.334)/2 )</li>
<li>只要能够指定值域和在此值域上的操作，就能定义一个数据类型(很像数学上函数的定义)</li>
<li>+-*/是被重载过的</li>
<li>运算产生的数据的数据类型和参与运算的数据的数据类型是相同的(5/3=1,5.0/3.0=1.6667等)</li>
<li>如下图(图歪了亿点点..) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645435436655.png" /><br />
</li>
<li>表达式</li>
<li>表达式具有优先级，Java使用的是中缀表达式(一个字面量紧接运算符，然后是另一个字面量)。逻辑运算中优先级
! &amp;&amp; || ,运算符中 * / % 高于+ -
。括号能改变这些规则。代码中尽量使用括号消除对优先级的依赖</li>
<li>类型转换
<ul>
<li>数值会自动提升为高级数据类型，如1+2.5 1会被先转为double
1.0，值也为double的3.5</li>
<li>强转(把类型名放在括号里讲其转换为括号中的类型)
讲高级数据类型转为低级可能会导致精度的缺失，尽量少使用</li>
</ul></li>
<li>比较
<ul>
<li>==、!=、&lt;、&lt;=、&gt;、&gt;=，这些运算符称为
混合类型运算符，因为结果是布尔型而不是参与比较的数据类型</li>
<li>结果是布尔型的表达式称为布尔表达式</li>
</ul></li>
<li>其他原始类型(int为32位，double为64位)
<ul>
<li>long,64位整数</li>
<li>short,16位整数</li>
<li>char,16位字符</li>
<li>byte,8位整数</li>
<li>32位单精度实数,float ### 语句</li>
</ul></li>
<li>语句用来创建和操作变量、对变量赋值并控制操作的执行流程</li>
<li>包括声明语句、赋值语句、条件语句、循环语句、调用和返回语句</li>
<li>声明：让一个变量名和一个类型在编译时关联起来</li>
<li>赋值：将(由一个表达式定义的)某个数据类型额值和一个变量关联起来</li>
<li>条件语句： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure></li>
<li>循环语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(&lt;boolean expression&gt;) &#123; &lt;block statement&gt; &#125;</span><br></pre></td></tr></table></figure> 其中循环语句中的代码段称为循环体</li>
<li>break与continue语句
<ul>
<li>break，立即退出循环</li>
<li>continue，立即开始下一轮循环 ### 简便记法</li>
<li>声明并初始化</li>
<li>隐式赋值
<ul>
<li>++i;--i</li>
<li>i/=2;i+=1</li>
</ul></li>
<li>单语句代码段(省略if/while代码段的花括号)</li>
<li>for语句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(&lt;initialize&gt;;&lt;boolean expression&gt;;&lt;increment&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;block statements&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这段代码等价于后面的 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;initialize&gt;;</span><br><span class="line">while(&lt;boolean expression&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  &lt;block statments&gt;</span><br><span class="line">  &lt;increment&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>java语句总结<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493111378.png" />
### 数组</li>
</ul></li>
<li>数组能够存储相同类型的多个数据</li>
<li>N个数组的数组编号为0至N-1；这种数组在Java中称为一维数组</li>
<li>创建并初始化数组
<ul>
<li>需要三个步骤，声明数组名字和类型，创建数组，初始化数组元素</li>
<li>声明并初始化一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493370383.png" /></li>
<li>简化写法<br />
double[] a = new double[N];</li>
<li>使用数组(访问的索引小于0或者大于N-1时会抛出ArrayIndexOutOfBoundsException)</li>
<li>典型的数组处理代码<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493720043.png" /></li>
</ul></li>
<li>起别名
<ul>
<li>下面的情况并没有将数组新复制一份，而是a，b指向了同一个数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645493897849.png" /></li>
</ul></li>
<li>二维数组
<ul>
<li>Java中二维数组就是一堆数组的数组</li>
<li>二维数组可以是参差不齐，比如a[0]=new double[5],a[1]=new
double[6]之类</li>
<li>二维数组的创建及初始化 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">double[][] a;</span><br><span class="line">a = new double[M][N];</span><br><span class="line">for (int i = 0; i &lt; M; i++)</span><br><span class="line">    for (int j = 0; j &lt; N; j++)</span><br><span class="line">        a[i][j] = 0.0;</span><br></pre></td></tr></table></figure></li>
<li>精简后的代码 double[][] a=new double[M][N];</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.1.6-1.1.11</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.1.6-1.1.11/</url>
    <content><![CDATA[<h2 id="基础编程模型">基础编程模型</h2>
<h3 id="静态方法">静态方法</h3>
<ul>
<li>本书中所有的Java程序要么是数据类型的定义，要么是一个静态方法库</li>
<li>当讨论静态方法和实体方法共有的属性时，我们会使用不加定语的方法一词</li>
<li>方法需要参数(某种数据类型的值)并根据参数计算出某种数据类型的返回值(例如数学函数的结果)或者产生某种副作用(例如打印一个值)</li>
<li>静态方法由签名(public static
以及函数的返回值,方法名及一串参数)和函数体组成</li>
<li>调用静态方法(写出方法名并在后面的括号中列出数值)</li>
<li>方法的性质
<ul>
<li>方法的参数按值传递，方法中使用的参数变量能够引用调用者的参数并改变其内容(只是不能改变<strong><em>原数组变量</em></strong>本身)</li>
<li>方法名可以被重载</li>
<li>方法只能返回一个值，但能包含多个返回语句</li>
<li>方法可以产生副作用</li>
</ul></li>
<li>递归：方法可以调用自己
可以使用数学归纳法证明所解释算法的正确性,编写递归重要的三点
<ul>
<li>递归总有一个最简单的情况(方法第一条总包含return的条件语句)</li>
<li>递归调用总是去尝试解决一个规模更小的子问题</li>
<li>递归调用的父问题和尝试解决的子问题之间不应该由交集
如下图中，两个子问题各自操作的数组部分是不同的<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645498373138.png" /></li>
</ul></li>
<li>基础编程模型
<ul>
<li>静态方法库是定义在一个Java类中的一组静态方法</li>
<li>Java开发的基本模式是编写一个静态方法库(包含一个main()方法)类完成一个任务<br />
</li>
<li>在本书中，当我们提到用于执行一项人物的Java程序时，我们指的就是用这种模式开发的代码(还包括对数据类型的定义)</li>
</ul></li>
<li>模块化编程
<ul>
<li>通过静态方法库实现了模块化编程<br />
</li>
<li>一个库中的静态方法也能够调用另一个库中定义的静态方法</li>
</ul></li>
<li>单元测试
<ul>
<li>Java编程最佳实践之一就是每个静态方法库中都包含一个main()函数来测试库中所有的方法</li>
<li>本书中使用main()来说明模块的功能并将测试用例留作练习</li>
</ul></li>
<li>外部库
<ul>
<li>系统标准库 java.lang.*:包括Math库;String和StringBuilder库</li>
<li>导入的系统库 java.util.Arrays</li>
<li>本书中其他库</li>
<li>本书使用了作者开发的标准库Std* ### API</li>
</ul></li>
<li>模块化编程重要组成部分，记录库方法的用法并供其他人参考的文档</li>
<li>会统一使用应用程序编程接口API的方法列出每个库方法、签名及简述</li>
<li>用例(调用另一个库中的方法的程序)，实现(实现了某个API方法的Java代码)</li>
<li>作者自己的两个库，一个扩展Math.random(),一个支持各种统计
<ul>
<li>随机静态方法库(StdRandom)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499238258.png" /></li>
<li>数据分析方法库(StdStats)的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499266972.png" /></li>
<li>StdRandom库中的静态方法的实现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499387538.png" /></li>
</ul></li>
<li>编写自己的库
<ul>
<li>编写用例，实现中将计算过程分解</li>
<li>明确静态方法库和与之对应的API</li>
<li>实现API和一个能够对方法进行独立测试的main()函数</li>
<li>API的目的是将调用和实现分离 ### 字符串</li>
</ul></li>
<li>字符串拼接，使用 +</li>
<li>类型转换(将用户从键盘输入的内容转换成相应数据类型的值以及将各种数据类型的值转换成能够在屏幕上显示的值)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645499613030.png" /></li>
<li>如果数字跟在+后面，那么会将数据类型的值自动转换为字符串</li>
<li>命令行参数
<ul>
<li>Java中字符串的存在，使程序能够接收到从命令行传递来的信息</li>
<li>当输入命令java和一个库名及一系列字符串后，Java系统会调用库的main()方法并将后面的一系列字符串变成一个数组作为参数传递给它
### 输入输出</li>
</ul></li>
<li>Java程序可以从<strong><em>命令行参数</em></strong>或者一个名为<strong><em>标准输入流</em></strong>的抽象字符流中获得输入，并将输出写入另一个名为标准输出流的字符流中</li>
<li>默认情况下，命令行参数、标准输入和标准输出是和应用程序绑定的，而应用程序是由能够接受命令输入的操作系统或是开发环境所支持</li>
<li>使用终端来指代这个应用程序提供的供输入和显示的窗口,如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500007895.png" /></li>
<li>命令和参数
<ul>
<li>终端窗口包含一个提示符，通过它我们能够向操作系统输入命令和参数</li>
<li>操作系统常用命令<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500167245.png" /></li>
</ul></li>
<li>标准输出
<ul>
<li>StdOut库的作用是支持标准输出</li>
<li>标准输出库的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500444820.png" /></li>
<li>格式化输出
字符%并紧跟一个字符表示的转换代码(包括d,f和s)。%和转换代码之间可以插入证书表示值的宽度，且转换后会在字符串左边添加空格以达到需要的宽度。负数表示空格从右边加</li>
<li>宽度后用小数点及数值可以指定精度(或String字符串所截取的长度)</li>
<li>格式中转换代码和对应参数的数据类型必须匹配 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500484321.png" /></li>
</ul></li>
<li>标准输入
<ul>
<li>StdIn库从标准输入流中获取数据，然后将标准输出定向到终端窗口</li>
<li>标准输入流最重要的特点，这些值会在程序读取后消失</li>
<li>例子<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500902261.png" /></li>
<li>标准输入库中的静态方法API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645500946918.png" /></li>
</ul></li>
<li>重定向和管道
<ul>
<li>将标准输出重定向到一个文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 &gt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>从文件而不是终端应用程序中读取数据 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java Average &lt; data.txt</span><br></pre></td></tr></table></figure></li>
<li>将一个程序的输出重定向为另一个程序的输入，叫做管道<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java RandomSeq 1000 100.0 200.0 | java Average</span><br></pre></td></tr></table></figure>
<ul>
<li>突破了我们能够处理的输入输出流的长度限制<br />
</li>
<li>即使计算机没有足够的空间来存储十亿个数，</li>
<li>我们仍然可以将例子中的1000 换成1 000 000 000
（当然我们还是需要一些时间来处理它们）。当RandomSeq 调用StdOut.println()
时，它就向输出流的末尾添加了一个字符串；当Average 调用StdIn.readInt()
时，它就从输入流的开头删除了一个字符串。这些动作发生的实际顺序取决于操作系统</li>
</ul></li>
<li>命令行的重定向及管道<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645501458419.png" /></li>
</ul></li>
<li>基于文件的输入输出</li>
<li>In和Out库提供了一些静态方法,来实现向文件中写入或从文件中读取一个原始数据类型的数组的抽象</li>
<li>用于读取和写入数组的静态方法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508058593.png" /></li>
<li>标准绘图库(基本方法和控制方法)--这里跳过 ### 二分查找</li>
<li>如图，在终端接收需要判断的数字，如果不存在于白名单(文件中的int数组)中则输出</li>
<li>开发用例以及使用测试文件(数组长度很大的白名单)</li>
<li>模拟实际情况来展示当前算法的必要性，比如
<ul>
<li>将客户的账号保存在一个文件中，我们称它为白名单；</li>
<li>从标准输入中得到每笔交易的账号；</li>
<li>使用这个测试用例在标准输出中打印所有与任何客户无关的账号，公司很可能拒绝此类交易。
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645508356801.png" /></li>
</ul></li>
<li>使用顺序查找<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static int rank(int key, int[] a)</span><br><span class="line">&#123;</span><br><span class="line">  for (int i = 0; i &lt; a.length; i++)</span><br><span class="line">    if (a[i] == key) return i;</span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>当处理大量输入的时候，顺序查找的效率极其低 ### 展望</li>
<li>下一节，鼓励使用数据抽象，或称面向对象编程，而不是操作预定义的数据类型的静态方法</li>
<li>使用数据抽象的好处
<ul>
<li>复用性</li>
<li>链式数据结构比数组更灵活</li>
<li>可以准确地定义锁面对的算法问题 ### 1.1 End</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.2.1-1.2.5</title>
    <url>/2022/02/22/study/algorithm/algorithhms_4th/1.2.1-1.2.5/</url>
    <content><![CDATA[<h2 id="数据抽象">数据抽象</h2>
<p><strong><em>数据类型</em></strong>指的是一组值和一组对这些值的操作的集合<br />
* 定义和使用数据类型的过程，也被称为数据抽象 *
Java编程的基础是使用class关键字构造被称为<strong><em>引用类型</em></strong>的数据类型，也称面向对象编程
* 定义自己的数据类型来抽象任意对象 *
抽象数据类型（ADT）是一种能够对使用者隐藏数据表示的数据类型 *
抽象数据类型将数据和函数的实现相关联，将数据的表示方式隐藏起来 *
抽象数据类型使用时，关注API描述的操作上而不会去关心数据的表示；实现抽象数据类型时，关注数据本身并将实现对数据的各种操作
* 研究同一个问题的不同算法的主要原因是他们的性能不同</p>
<h3 id="使用抽象数据类型">使用抽象数据类型</h3>
<ul>
<li>使用一种数据类型并不一定非得知道它是如何实现的</li>
<li>使用Counter(计数器)的简单数据类型的程序，操作有
<ul>
<li>创建对象并初始化为0</li>
<li>当前值加1</li>
<li>获取当前值</li>
</ul></li>
<li>场景，用于电子计票</li>
<li>抽象数据类型的API(应用程序编程接口)
<ul>
<li>API用来说明抽象数据类型的行为</li>
<li>将列出所有构造函数和实例方法(即操作)</li>
</ul></li>
<li>计算器的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645622786940.png" /></li>
<li>继承的方法
<ul>
<li>所有数据类型都会继承toString()方法</li>
<li>Java会在用+运算符将任意数据类型的值和String值连接时调用toString()</li>
<li>默认实现：返回该数据类型值的内存地址</li>
</ul></li>
<li>用例代码
<ul>
<li>可以在用例代码中，声明变量、创建对象来保存数据类型的值并允许通过实例方法来操作它们</li>
</ul></li>
<li>对象
<ul>
<li>对象是能够承载数据类型的值的实体</li>
<li>对象三大特性：状态、标识和行为
<ul>
<li>状态：数据类型中的值</li>
<li>标识：在内存中的地址</li>
<li>行为：数据类型的操作</li>
</ul></li>
<li>Java使用"引用类型"和原始数据类型区别</li>
</ul></li>
<li>创建对象
<ul>
<li>每种数据类型中的值都存储于一个对象中</li>
<li>构造函数总是返回他的数据类型的对象的引用</li>
<li>使用new()，会为新的对象分配内存空间，调用构造函数初始化对象中的值，返回该对象的一个引用</li>
</ul></li>
<li>抽象数据类型向用例隐藏了值的表示细节</li>
<li>实例方法：参数按值传递</li>
<li>方法每次触发都和一个对象相关</li>
<li>静态方法的主要作用是实现函数；非静态(实例)方法的主要作用是实现数据类型的操作</li>
<li>使用对象<br />
开发某种数据类型的用例
<ul>
<li>声明该类型的变量，以引用对象</li>
<li>使用new触发能够创建该类型的对象的一个构造函数</li>
<li>使用变量名调用实例方法</li>
</ul></li>
<li>赋值语句(对象赋值)
<ul>
<li>别名：两个变量同时指向同一个对象</li>
</ul></li>
<li>将对象作为参数
<ul>
<li>Java将参数值的一个副本从调用端传递给了方法，这种方式称为按值传递</li>
<li>当使用引用类型作为参数时我们创建的都是别名，这种约定会传递引用的值(复制引用)，也就是传递对象的引用</li>
<li>虽然无法改变原始的引用(将原变量指向另一个Counter对象)，但能够改变该对象的值</li>
</ul></li>
<li>将对象作为返回值
<ul>
<li>由于Java只由一个返回值，有了对象实际上就能返回多个值</li>
</ul></li>
<li>数组也是对象
<ul>
<li>将数组传递给一个方法或是将一个数组变量放在赋值语句的右侧时，我们都是在创建数组引用的一个副本，而非数组的副本</li>
</ul></li>
<li>对象的数组<br />
创建一个对象的数组
<ul>
<li>使用方括号语法调用数组的构造函数创建数组</li>
<li>对于每个数组元素调用它的构造函数创建相应的对象<br />
如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1645625875287.png" /></li>
</ul></li>
<li>运用数据抽象的思想编写代码(定义和使用数据类型，将数据类型的值封装在对象中)的方式称为面向对象编程</li>
<li>总结
<ul>
<li>数据类型指的是一组值和一组对值的操作的集合</li>
<li>我们会在数据类型的Java类中编写用理</li>
<li>对象是能够存储任意该数据类型的值的实体</li>
<li>对象有三个关键性质：状态、标识和行为</li>
</ul></li>
</ul>
<h3 id="抽象数据类型举例">抽象数据类型举例</h3>
<ul>
<li>本书中将会用到或开发的所有数据类型
<ul>
<li>java.lang.*</li>
<li>Java标准库中的抽象数据类型，需要import，比如java.io、java.net等</li>
<li>I/O处理嘞抽象数据类型,StdIn和StdOut</li>
<li>面向数据类抽象数据类型，计算机和和信息处理</li>
<li>集合类抽象数据类型，主要是为了简化对同一类型的一组数据的操作，包括Bag、Stack和Queue，PQ(优先队列)、ST(符号表)、SET(集合)</li>
<li>面向操作的抽象数据类型(用来分析各种算法)</li>
<li>图算法相关的抽象数据类型，用来封装各种图的表示的面向数据的抽象数据类型，和一些提供图的处理算法的面向操作的抽象数据类型</li>
</ul></li>
<li>几何对象(画图(图形)的)[跳过]</li>
<li>信息处理
<ul>
<li>抽象数据类型是组织信息的一种自然方式</li>
<li>定义和真实世界中的物体相对应的对象</li>
</ul></li>
<li>字符串
<ul>
<li>java的String</li>
<li>一个String值是一串可以由索引访问的char值</li>
<li>有了String类型可以写出清晰干净的用例代码而无需关心字符串的表示方式</li>
</ul></li>
</ul>
<h3 id="抽象数据类型的实现">抽象数据类型的实现</h3>
<ul>
<li>使用Java的类(class)实现抽象数据类型并将所有代码放入一个和类名相同并带有.java扩展名的文件</li>
<li>如下图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917949340.png" /></li>
<li>实例变量<br />
用来定义数据类型的值(每个对象的状态)<br />
</li>
<li>构造函数
<ul>
<li>每个Java类都至少有一个构造函数以创建一个对象的标识</li>
<li>每个构造函数将创建一个对象并向调用者返回一个该对象的引用<br />
</li>
</ul></li>
<li>实例方法
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917973220.png" /></li>
</ul></li>
<li>作用域
<ul>
<li>参数变量、局部变量、实例变量</li>
<li>范围(如图)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917991340.png" /></li>
</ul></li>
<li>API、用例与实现
<ul>
<li>我们要学习的每个抽象数据类型的实现，都会是一个含有若干私有实例变量、构造函数、实例方法和一个测试用例的Java类</li>
<li>用例和实现分离(一般将用例独立成含有静态方法main()的类)</li>
<li>做法如下
<ul>
<li>定义一份API，APi的作用是将使用和实现分离，以实现模块化编程</li>
<li>用一个Java类<strong>实现</strong>API的定义</li>
<li>实现多个测试用例来验证前两步做出的设计决定</li>
</ul></li>
<li>例子如下
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647917905216.png" /></li>
<li>典型用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918040166.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918079248.png" /></li>
<li>使用方法(执行程序)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647918109793.png" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="更多抽象数据类型的实现">更多抽象数据类型的实现</h3>
<ul>
<li>日期
<ul>
<li>两种实现方式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647919855792.png" /></li>
<li>本书反复出现的主题，即理解各种实现对空间和时间的需求<br />
</li>
</ul></li>
<li>维护多个实现
<ul>
<li>比较同一份API的两种实现在同一个用例中的性能表现，需要下面非正式的命名约定
<ul>
<li>使用前缀的描述性修饰符，比如BasicDate和SmallDate,以及是否合法的SmartDate</li>
<li>适合大多数用力的需求的实现，比如Date</li>
</ul></li>
</ul></li>
<li>累加器</li>
</ul>
<h3 id="数据类型的设计">数据类型的设计</h3>
<ul>
<li>抽象数据类型是一种向用例隐藏内部表示的数据类型
<ul>
<li>封装(数据封装)<br />
</li>
<li>设计APi<br />
</li>
</ul></li>
<li>算法与抽象数据类型
<ul>
<li>能够准确地说明一个算法的目的及其他程序应该如何使用该算法</li>
<li>每个Java程序都是一组静态方法和(或)一种数据类型的实现的集合</li>
</ul></li>
<li>本书中关注的是抽象数据类型的实现中的操作和向用例隐藏其中的数据表示</li>
<li>例子，将二分法封装
<ul>
<li>API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926825727.png" /></li>
<li>典型的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926860564.png" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647926913576.png" /></li>
</ul></li>
<li>接口继承
<ul>
<li>Java语言为定义对象之间的关系提供了支持，称为接口</li>
<li>接口继承使得我们的程序能够通过调用接口中的方法操作实现该接口的任意类型的对象<br />
</li>
</ul></li>
<li>本书中使用到的接口<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927204860.png" /></li>
<li>继承
<ul>
<li>由Object类继承得到的方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927291658.png" /></li>
<li>继承toString()并自定义</li>
<li>封装类型(内置的引用类型，包括Boolean、Byte、Character、Double、Float、Integer、Long和Short)</li>
</ul></li>
<li>等价性
<ul>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927424380.png" /></li>
<li>例子，在Date中重写equals<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1647927476357.png" /></li>
</ul></li>
<li>内存管理<br />
Java具有自动内存管理，通过记录孤儿对象并将它们的内存释放到内存池中</li>
<li>不可变性<br />
使用final保证数据不可变<br />
使用final修饰的引用类型，不能再引用(指向)其他对象，但对象本身的值可改变<br />
</li>
<li>契约式设计
<ul>
<li>Java语言能够在程序运行时检测程序状态</li>
<li>异常(Exception)+断言(Assertion)</li>
</ul></li>
<li>异常与错误<br />
允许抛出异常或抛出错误<br />
</li>
<li>断言<br />
程序不应该依赖断言</li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.3.1.1-1.3.2.5</title>
    <url>/2022/03/22/study/algorithm/algorithhms_4th/1.3.1.1-1.3.2.5/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<ul>
<li>数据类型的值就是一组对象的集合，所有操作都是关于添加、删除或是访问集合中的对象<br />
</li>
<li>本章将学习三种数据类型：背包Bag、队列Queue、栈Stack
<ul>
<li>对集合中的对象的表示方式直接影响各种操作的效率<br />
</li>
<li>介绍泛型和迭代<br />
</li>
<li>介绍并说明链式数据结构的重要性(链表)</li>
</ul></li>
</ul>
<h3 id="api">API</h3>
<ul>
<li>泛型可迭代的基础集合数据类型的API
<ul>
<li>背包<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406152057569.png"
alt="image-20220406152057569" /></li>
<li>队列(先进先出FIFO)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153613674.png"
alt="image-20220406153613674" /></li>
<li>下压(后进先出,LIFO)栈 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153640138.png"
alt="image-20220406153640138" /></li>
</ul></li>
<li>泛型
<ul>
<li>泛型，参数化类型<br />
</li>
<li>在每份API 中，类名后的<Item> 记号将Item
定义为一个类型参数，它是一个象征性的占位符，表示的是用例将会使用的某种具体数据类型<br />
</li>
</ul></li>
<li>自动装箱
<ul>
<li>用来处理原始类型<br />
</li>
<li>Boolean、Byte、Character、Double、Float、Integer、Long 和Short
分别对应着boolean、byte、char、double、float、int、long 和short<br />
</li>
<li>自动将一个原始数据类型转换为一个封装类型称为自动装箱，自动将一个封装类型转换为一个原始数据类型被称为自动拆箱<br />
</li>
</ul></li>
<li>可迭代的集合类型
<ul>
<li>迭代访问集合中的所有元素<br />
</li>
</ul></li>
<li>背包是一种不支持从中删除元素的集合数据类型--帮助用例收集元素并迭代遍历所有收集到的元素（<strong>无序遍历</strong>）
<ul>
<li>典型用例，计算标准差<br />
<img src="./1.3.1.1-1.3.2.5/1648014765406.png" /></li>
</ul></li>
<li>先进先出队列
<ul>
<li>是一种基于先进先出(FIFO)策略的集合类型<br />
</li>
<li>使用队列的主要原因：集合保存元素的同时保存它们的相对顺序<br />
</li>
<li>如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153751756.png"
alt="image-20220406153751756" /></li>
<li>Queue用例(先进先出)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406153829692.png"
alt="image-20220406153829692" /></li>
</ul></li>
<li>下压栈
<ul>
<li>简称栈，是一种基于后进先出LIFO策略的集合类型<br />
</li>
<li>比如，收邮件等，如图<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154449201.png"
alt="image-20220406154449201" /></li>
<li>Stack的用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406154510301.png"
alt="image-20220406154510301" /></li>
</ul></li>
<li>用栈解决算数表达式的问题<br />
（双栈算数表达式求值算法）<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155021820.png"
alt="image-20220406155021820" /></li>
</ul>
<h3 id="集合类数据类型的实现">集合类数据类型的实现</h3>
<ul>
<li><p>定容栈，表示容量固定的字符串栈的抽象数据类型</p>
<ul>
<li><p>只能处理String值，支持push和pop</p></li>
<li><p>抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155522256.png"
alt="image-20220406155522256" /></p></li>
<li><p>测试用例</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155637243.png"
alt="image-20220406155637243" />
<figcaption aria-hidden="true">image-20220406155637243</figcaption>
</figure></li>
<li><p>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155712507.png"
alt="image-20220406155712507" /></p></li>
<li><p>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406155728513.png"
alt="image-20220406155728513" /></p></li>
</ul></li>
<li><p>泛型</p>
<ul>
<li><code>public class FixedCapacityStack&lt;Item&gt;</code></li>
<li>由于不允许直接创建泛型数组，所以 <del>a =new Item[cap]</del>
不允许，应该改为<br />
a=(Item[])new Object[cap];<br />
</li>
<li>泛型定容栈的抽象数据类型<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160905236.png"
alt="image-20220406160905236" /></li>
<li>测试用例<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160932941.png"
alt="image-20220406160932941" /></li>
<li>使用方法<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406160957117.png"
alt="image-20220406160957117" /></li>
<li>数据类型的实现<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161022669.png"
alt="image-20220406161022669" /></li>
</ul></li>
<li><p>调整数组大小</p>
<ul>
<li>N为当前元素的数量<br />
使用resize创建新的数组<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161247788.png"
alt="image-20220406161247788" /></li>
<li>当元素满了的时候进行扩容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161332720.png"
alt="image-20220406161332720" /></li>
<li>当元素过少(1/4)的时候，进行减半<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406161408973.png"
alt="image-20220406161408973" /></li>
</ul></li>
<li><p>对象游离</p>
<ul>
<li><p>Java的垃圾回收策略是回收所有无法被访问的对象的内存</p></li>
<li><p>示例中，被弹出的元素不再需要，但由于数组中的引用仍然让它可以继续存在（垃圾回收器无法回收），这种情况（保存了一个不需要的对象的引用）称为游离，避免游离的做法就是将数组元素设为null</p></li>
</ul></li>
<li><p>迭代</p>
<ul>
<li><p>foreach和while<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406162432642.png"
alt="image-20220406162432642" /></p>
<ul>
<li>集合数据类型必须实现iterator()并返回Iterator对象</li>
<li>Iterator类必须包括两个方法,hasNext()和next()</li>
</ul></li>
<li><p>让类继承Iterable<Item>使类可迭代 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163317535.png"
alt="image-20220406163317535" /></p></li>
<li><p>使用一个嵌套类<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220406163515174.png"
alt="image-20220406163515174" /></p></li>
<li><p>下压栈的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResizingArrayStack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span>		Item[] a = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];      <span class="comment">/* 栈元素 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	<span class="variable">N</span> <span class="operator">=</span> <span class="number">0</span>;                                  <span class="comment">/* 元素数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N == <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(N);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">( <span class="type">int</span> max )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将栈移动到一个大小为max 的新数组 */</span></span><br><span class="line">		Item[] temp = (Item[]) <span class="keyword">new</span> <span class="title class_">Object</span>[max];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">			temp[i] = a[i];</span><br><span class="line">		a = temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">( Item item )</span></span><br><span class="line">	&#123;       <span class="comment">/* 将元素添加到栈顶 */</span></span><br><span class="line">		<span class="keyword">if</span> ( N == a.length )</span><br><span class="line">			resize( <span class="number">2</span> * a.length );</span><br><span class="line">		a[N++] = item;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;                       <span class="comment">/* 从栈顶删除元素 */</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> a[--N];</span><br><span class="line">		a[N] = <span class="literal">null</span>;    <span class="comment">/* 避免对象游离（请见1.3.2.4 节） */</span></span><br><span class="line">		<span class="keyword">if</span> ( N &gt; <span class="number">0</span> &amp;&amp; N == a.length / <span class="number">4</span> )</span><br><span class="line">			resize( a.length / <span class="number">2</span> );</span><br><span class="line">		<span class="keyword">return</span>(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>(<span class="keyword">new</span> <span class="title class_">ReverseArrayIterator</span>() );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ReverseArrayIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;       <span class="comment">/* 支持后进先出的迭代 */</span></span><br><span class="line">		<span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N;</span><br><span class="line">		<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(i &gt; <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>(a[--i]);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书1.3.3.1-1.3.4</title>
    <url>/2022/04/06/study/algorithm/algorithhms_4th/1.3.3.1-1.3.4/</url>
    <content><![CDATA[<h2 id="背包队列和栈">背包、队列和栈</h2>
<h3 id="链表">链表</h3>
<ul>
<li><p>链表是一种递归的数据结构，它或者为空(null)，或者是一个指向一个结点（node）的引用，该节点含有一个泛型的元素和一个指向另一条链表的引用。
#### 结点记录</p></li>
<li><p>使用嵌套类定义结点的抽象数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Item item;</span><br><span class="line">	Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>该类没有其它任何方法，且会在代码中直接引用实例变量，这种类型的变量称为记录</li>
</ul></li>
</ul>
<h4 id="构造链表">构造链表</h4>
<ul>
<li>需要一个Node类型的变量，保证它的值是null或者指向另一个Node对象的next域指向了另一个链表</li>
<li>如下图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407091501353.png"
alt="image-20220407091501353" /></li>
<li>链表表示的是一列元素</li>
<li>链式结构在本书中的可视化表示
长方形表示对象；实例变量的值写在长方形中；用指向被引用对象的箭头表示引用关系</li>
<li>术语<strong>链接</strong>表示对结点的引用</li>
</ul>
<h4 id="在表头插入结点">在表头插入结点</h4>
<ul>
<li><p>在首结点为first 的给定链表开头插入字符串not，我们先将first
保存在oldfirst 中， 然后将一个新结点赋予first，并将它的item
域设为not，next 域设为oldfirst</p></li>
<li><p>时间复杂度为O(1)</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407092921756.png"
alt="image-20220407092921756" /></p></li>
</ul>
<h4 id="从表头删除结点">从表头删除结点</h4>
<ul>
<li><p>将first指向first.next</p></li>
<li><p>原先的结点称为孤儿，Java的内存管理系统最终将回收它所占用的内存</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407093000788.png"
alt="image-20220407093000788" /></p></li>
</ul>
<h4 id="在表尾插入结点">在表尾插入结点</h4>
<ul>
<li><p>每个修改链表的操作都需要增加检查是否要修改该变量（以及做出相应修改）的代码</p></li>
<li><p>例如，当删除链表首结点时可能改变指向链表的尾结点的引用，因为链表中只有一个结点时它既是首结点又是尾结点</p></li>
<li><p>如图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407094045245.png"
alt="image-20220407094045245" /></p></li>
</ul>
<h4 id="其他位置的插入和删除操作">其他位置的插入和删除操作</h4>
<p>删除指定结点；在指定节点插入新结点</p>
<ul>
<li>需要将链表尾结点的前一个节点中的链接（它指向的是last）值改为null</li>
<li>为了找到指向last的结点，需要遍历链表，时间复杂度为O(n)</li>
<li>实现任意插入和删除操作的标准解决方案是<strong>双向链表</strong></li>
</ul>
<h4 id="遍历">遍历</h4>
<ul>
<li><p>将x初始化为链表首结点，然后通过x.item访问和x相关联的元素，并将x设为x.next来访问链表中的下一个结点，知道x=null(没有下一个结点了，到达链表结尾)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理x.item</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="栈的实现">栈的实现</h4>
<ul>
<li><p>使用链表实现栈</p></li>
<li><p>将栈保存为一条链表，栈的顶部即为表头，实例变量first
指向栈顶。这样，当使用push() 压入一个元素时，我们会按照1.3.3.3
节所讨论的代码将该元素添加在表头；当使用pop()
删除一个元素时，我们会按照1.3.3.4
节讨论的代码将该元素从表头删除。要实现size() 方法，我们用实例变量N
保存元素的个数，在压入元素时将N 加1，在弹出元素时将N
减1。要实现isEmpty() 方法，只需检查first 是否为null（或者可以检查N
是否为0）</p></li>
<li><p>实现上述几个操作的时间复杂度为O(1)</p></li>
<li><p>下压堆栈（链表的实现）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 栈顶（最近添加的元素）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或：N == 0</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向栈顶添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">pop</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从栈顶删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见本节前面部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试用例(pop()之前测试用例做了判断)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个栈并根据StdIn中的指示压入或弹出字符串</span></span><br><span class="line">	Stack&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		s.push(item); <span class="keyword">else</span> <span class="keyword">if</span> (!s.isEmpty()) StdOut.print(s.pop() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + s.size() + <span class="string">&quot; left on stack)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="队列的实现">队列的实现</h4>
<ul>
<li><p>这里维护了first和last两个变量</p></li>
<li><p>Queue实现使用的数据结构和Stack都是链表，但实现了不同的添加和删除元素的算法，所以前者是先入先出，后者是后进先出</p></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 创建一个队列并操作字符串入列或出列</span></span><br><span class="line">	Queue&lt;String&gt; q = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;String&gt;();</span><br><span class="line">	<span class="keyword">while</span> (!StdIn.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">item</span> <span class="operator">=</span> StdIn.readString();</span><br><span class="line">		<span class="keyword">if</span> (!item.equals(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">		q.enqueue(item); <span class="keyword">else</span> <span class="keyword">if</span> (!q.isEmpty()) StdOut.print(q.dequeue() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	StdOut.println(<span class="string">&quot;(&quot;</span> + q.size() + <span class="string">&quot; left on queue)&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Queue的实现</p>
<ul>
<li>如下，enqueue()需要额外考虑first，dequeue()需要额外考虑last
<ul>
<li>如果原队列没有结点，那么增加后last指向了新的元素，应该把first也指向新元素</li>
<li>如果原对队列只有一个元素，那么删除后first确实指向null，而last没有更新，所以需要下面的判断手动更新</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 指向最早添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> Node last;</span><br><span class="line">	<span class="comment">// 指向最近添加的结点的链接</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">	<span class="comment">// 队列中的元素数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 定义了结点的嵌套类</span></span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">return</span> <span class="variable">first</span> <span class="operator">=</span>= <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 或： N == 0.</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> N;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 向表尾添加元素</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">		last = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		last.item = item;</span><br><span class="line">		last.next = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) first = last; <span class="keyword">else</span> oldlast.next = last;</span><br><span class="line">		N++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Item <span class="title function_">dequeue</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从表头删除元素</span></span><br><span class="line">		<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> first.item;</span><br><span class="line">		first = first.next;</span><br><span class="line">		<span class="keyword">if</span> (isEmpty()) last = <span class="literal">null</span>;</span><br><span class="line">		N--;</span><br><span class="line">		<span class="keyword">return</span> item;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// iterator() 的实现请见算法1.4</span></span><br><span class="line">	<span class="comment">// 测试用例main() 的实现请见前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在结构化数据集时，链表是数组的一种重要替代方法</p></li>
</ul>
<h4 id="背包的实现">背包的实现</h4>
<ul>
<li><p>只需要将Stack中的push()改为add()即可，并去掉pop()</p></li>
<li><p>下面添加了Iterator实现类，以及iterator()具体方法
其中，嵌套类ListIterator
维护了一个实例变量current来记录链表的当前结点。hasNext()
方法会检测current 是否为null，next() 方法会保存当前元素的引用，将current
变量指向链表中的下个结点并返回所保存的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bag</span>&lt;Item&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;Item&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Node first;</span><br><span class="line">	<span class="comment">// 链表的首结点</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">	&#123;</span><br><span class="line">		Item item;</span><br><span class="line">		Node next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Item item)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 和Stack 的push() 方法完全相同</span></span><br><span class="line">		<span class="type">Node</span> <span class="variable">oldfirst</span> <span class="operator">=</span> first;</span><br><span class="line">		first = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">		first.item = item;</span><br><span class="line">		first.next = oldfirst;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title function_">iterator</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;Item&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">		<span class="keyword">public</span> Boolean <span class="title function_">hasNext</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> current != <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> Item <span class="title function_">next</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> current.item;</span><br><span class="line">			current = current.next;</span><br><span class="line">			<span class="keyword">return</span> item;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="综述">综述</h3>
<ul>
<li>学习了支持泛型和迭代的背包、队列和栈</li>
<li>现在拥有两种表示对象集合的方式，即数组和链表---&gt;顺序存储和链式存储
<ul>
<li>各种含有多个链接的数据结构，如二叉树的数据结构，由<strong>含有两个链接的节点</strong>组成</li>
<li><strong>复合型</strong>的数据结构：背包存储栈，队列存储数组等，例如用数组的背包表示<strong>图</strong></li>
</ul></li>
<li>基础数据结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105102346.png"
alt="image-20220407105102346" /></li>
<li>研究新领域时，按以下步骤识别并使用数据抽象解决问题
<ul>
<li>定义API</li>
<li>根据应用场景开发<strong>用例代码</strong></li>
<li>描述数据结构（一组值的表示），并在API所对应的抽象数据类型的实现中根据它定义类的实例变量</li>
<li>描述算法（实现一组操作的方式），实现类的实例方法</li>
<li>分析算法的性能特点</li>
</ul></li>
<li>本书的数据结构举例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407105552258.png"
alt="image-20220407105552258" /></li>
</ul>
<h3 id="end">End</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.4.1-1.4.10</title>
    <url>/2022/04/07/study/algorithm/algorithhms_4th/1.4.1-1.4.10/</url>
    <content><![CDATA[<h2 id="算法分析">算法分析</h2>
<p>使用<strong>数学分析</strong>为算法成本建立简洁的模型，并使用实验数据验证这些模型</p>
<h3 id="科学方法">科学方法</h3>
<ul>
<li>观察、假设、预测、观察并核实预测、反复确认预测和观察</li>
<li>原则：实验可重现</li>
</ul>
<h3 id="观察">观察</h3>
<ul>
<li><p>计算性任务的困难程度可以用<strong>问题的规模</strong>来衡量</p></li>
<li><p>问题规模可以是输入的大小或某个命令行参数的值</p></li>
<li><p>研究问题规模和运行时间的关系</p></li>
<li><p>使用计时器得到大概的运行时间 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113311126.png"
alt="image-20220407113311126" /></p>
<ul>
<li><p>典型用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            a[i] = StdRandom.uniform(-<span class="number">1000000</span>, <span class="number">1000000</span>);</span><br><span class="line">        <span class="type">Stopwatch</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stopwatch</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> ThreeSum.count(a);</span><br><span class="line">        <span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timer.elapsedTime();</span><br><span class="line">        StdOut.println(cnt + <span class="string">&quot; triples &quot;</span> + time + <span class="string">&quot; seconds&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407113407342.png"
alt="image-20220407113407342" /></p></li>
<li><p>数据类型的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stopwatch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stopwatch</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">elapsedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (now - start) / <span class="number">1000.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="数学模型">数学模型</h3>
<ul>
<li><p>程序运行的总时间主要和两点有关：执行每条语句的耗时；执行每条语句的频率</p></li>
<li><p>定义：我们用~f(N) 表示所有随着N 的增大除以f(N) 的结果趋近于1
的函数。我们用g(N) ~ f(N) 表示g(N)/f(N) 随着N 的增大趋近于1。
即使用曰等号忽略较小的项</p></li>
<li><p><span class="math display">\[
f(N)=N^b(logN)^c
\]</span></p>
<p>将f(N)称为g(N)的增长的数量级</p></li>
<li><p>常见的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170444747.png"
alt="image-20220407170444747" /></p></li>
<li><p>本书用性质表示需要用实验验证的猜想</p>
<ul>
<li><p>ThreeSum分析
执行最频繁的指令决定了程序执行的总时间--我们将这些指令称为程序的<strong>内循环</strong></p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170842908.png"
alt="image-20220407170842908" />
<figcaption aria-hidden="true">image-20220407170842908</figcaption>
</figure></li>
<li><p>程序运行时间的分析 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220407170938405.png"
alt="image-20220407170938405" /></p></li>
<li><p>算法的分析
ThreeSum的运行时间增长数量级为N^3，与在哪台机器无关</p></li>
<li><p>成本模型
3-sum的成本模型：数组的访问次数（访问数组元素的次数，无论读写）</p></li>
<li><p>总结-得到运行时间的数学模型所需的步骤</p>
<ul>
<li>确定输入模型，定义问题的规模</li>
<li>识别内循环</li>
<li>根据内循环中的操作确定成本模型</li>
<li>对于给定的输入，判断这些操作的执行效率</li>
</ul></li>
</ul></li>
</ul>
<h3 id="增长数量级的分类">增长数量级的分类</h3>
<ul>
<li>成长增长的数量级一般都是问题规模N的若干函数之一，如下表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408091530468.png"
alt="image-20220408091530468" />
<ul>
<li>常数级别表示运行时间不依赖于N</li>
<li>对数级别，经典例子是<strong>二分查找</strong></li>
<li>线性级别（常见的for循环）</li>
<li>线性对数级别 ，其中，对数的底数和增长的数量级无关</li>
<li>平方级别，一般指两个嵌套的for循环</li>
<li>立方级别，一般含有三个嵌套的for循环</li>
<li>指数级别</li>
</ul></li>
<li>问题规模（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092436213.png"
alt="image-20220408092436213" /></li>
<li>典型的增长数量级函数（图） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092500239.png"
alt="image-20220408092500239" /></li>
<li>典型的增长数量级函数 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408092659849.png"
alt="image-20220408092659849" /></li>
<li>在某个成本模型下可以提出精确的命题
比如，归并排序所需的比较次数在<span
class="math inline">\(1/2NlgN\)</span>~<span
class="math inline">\(NlgN\)</span>之间
，即归并排序所需的运行时间的增长数量级是线性对数的，也就是：归并排序是线性对数的</li>
</ul>
<h3 id="设计更快的算法">设计更快的算法</h3>
<ul>
<li><p>前提，目前已知归并排序是线性对数级别的，二分查找是对数级别的</p></li>
<li><p>将3-sum问题简化为2-sum问题，即找出一个输入文件中所有和为0的整数对的数量，为了简化问题，题设所有整数均不相同</p>
<ul>
<li><p>可以使用双层循环，以<strong>平方级别</strong>来解决</p></li>
<li><p>改进后的算法，当且仅当-a[i]存在于数组中且a[i]非零时，a[i]存在于某个和为0的整数对之中</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoSumFast</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为0的整数对的数目</span></span><br><span class="line">			Arrays.sort(a);</span><br><span class="line">			<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">			<span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">				<span class="keyword">if</span> (BinarySearch.rank(-a[i], a) &gt; i)</span><br><span class="line">					cnt++;</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">			<span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">			StdOut.println(count(a));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>3-sum问题的快速算法</p>
<ul>
<li><p>当且仅当-(a[i]+a[j])在数组中,且不是a[i]也不是a[j]时，整数对(a[i]和a[j])为某个和为0的三元组的一部分</p></li>
<li><p>总运行时间和<span
class="math inline">\(N^2logN\)</span>成正比</p></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeSumFast</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] a)</span> &#123; <span class="comment">// 计算和为０的三元组的数目</span></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">                <span class="keyword">if</span> (BinarySearch.rank(-a[i] - a[j], a) &gt; j) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = In.readInts(args[<span class="number">0</span>]);</span><br><span class="line">        StdOut.println(count(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>下界</p>
<ul>
<li><p>为算法在最坏情况下的运行时间给出一个下界的思
想是非常有意义的</p></li>
<li><p>运行时间的总结</p>
<p>图1 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095417424.png"
alt="image-20220408095417424" /> 图2 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408095509262.png"
alt="image-20220408095509262" /></p></li>
<li><p>实现并分析该问题的一种简单解法，我们称之为<strong>暴力算法</strong></p></li>
<li><p>算法的改进，能降低算法所需的运行时间的增长数量级</p></li>
</ul></li>
</ul></li>
</ul>
<h3 id="倍率实验">倍率实验</h3>
<ul>
<li><p>翻倍后运行时间，与没翻倍时的运行时间成正比</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublingRatio</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">timeTrial</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">		<span class="comment">// 参见DoublingTest（请见1.4.2.3 节实验程序）</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="type">double</span> <span class="variable">prev</span> <span class="operator">=</span> timeTrial(<span class="number">125</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">250</span>; <span class="literal">true</span>; N += N)</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> timeTrial(N);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%6d %7.1f &quot;</span>, N, time);</span><br><span class="line">			StdOut.printf(<span class="string">&quot;%5.1fn&quot;</span>, time/prev);</span><br><span class="line">			prev = time;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>试验结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112657967.png"
alt="image-20220408112657967" /></li>
<li>预测 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112708320.png"
alt="image-20220408112708320" /></li>
<li>倍率定理（没看懂，不管） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408112746465.png"
alt="image-20220408112746465" />
<ul>
<li>评估它解决大型问题的可行性</li>
<li>评估使用更快的计算机所产生的价值</li>
</ul></li>
</ul></li>
</ul>
<h3 id="注意事项">注意事项</h3>
<ul>
<li>大常数，<span class="math inline">\(c = 10^3或10^6\)</span></li>
<li>非决定性的内循环</li>
<li>指令时间</li>
<li>系统因素</li>
<li>不分伯仲（相同任务在不同场景效率不一样）</li>
<li>对输入的强烈依赖</li>
<li>多个问题参量</li>
</ul>
<h3 id="处理对于输入的依赖">处理对于输入的依赖</h3>
<ul>
<li>输入模型，例如假设ThreeSum的所有输入均为随机int值，可能不切实际</li>
<li>输入的分析，需要数学几千</li>
<li>对最坏情况下的性能保证
<ul>
<li>命题（这里只针对之前的代码） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113444176.png"
alt="image-20220408113444176" /></li>
</ul></li>
<li>对计划算法，有时候对输入需要进行打乱</li>
<li>操作序列</li>
<li>均摊分析 通过记录所有操作的总成本并除以操作总数来将成本均摊</li>
</ul>
<h3 id="内存">内存</h3>
<ul>
<li>Java的内存分配系统</li>
<li>原始数据类型的常见内存、需求 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408113805644.png"
alt="image-20220408113805644" />
这里漏了，short也是2字节。总结boolean、byte 1字节；char、short
2字节；int、float 4字节；long、double 8字节</li>
<li>对象（跳过）
<ul>
<li><p>要知道一个对象所使用的内存量，需要将所有实例变量使用的内存与内存本身的开销（一般是16字节）</p></li>
<li><p>一般内存的使用都会被填充为<strong>8字节的倍数</strong>（注意，说的是64位计算机中的机器字）</p></li>
<li><p><strong>引用</strong>存储需要8字节</p></li>
<li><p>典型对象的内存需求 例如第一个，16+4=20；20+4 = 24为8的倍数</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114020688.png"
alt="image-20220408114020688" />
<figcaption aria-hidden="true">image-20220408114020688</figcaption>
</figure></li>
<li><p>链表，嵌套的非静态（内部）类，如<strong>上面的Node，需要额外的8字节</strong>（用于外部类的引用）</p></li>
<li><p>数组 int值、double值、对象和数组的数组对内存的典型需求
比如一个原始数据类型的数组，需要24字节的头信息（16字节的对象开销，4字节用于保存长度[数组长度]，以及4填充字节，再加上保存值需要的内存）
Date对象需要的：一个含有N 个Date 对象（请见表1.2.12）的数 组需要使用24
字节（数组开销）加上8N 字节（所有引用）加上每个对象的32 字节，总共（24
+40N）字节 【这里说的是需要，和本身存储是两回事】</p></li>
<li><figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408114325192.png"
alt="image-20220408114325192" />
<figcaption aria-hidden="true">image-20220408114325192</figcaption>
</figure></li>
<li><p>字符串对象</p>
<blockquote>
<p>String 的标准实现含有4 个实例变量：一个指向字符数组的引用（8
字节）和三 个int 值（各4 字节）。第一个int
值描述的是字符数组中的偏移量，第二个int
值是一个计数器（字符串的长度）。按照图1.4.10
中所示的实例变量名，对象所表示的字符串由value[offset]到value[offset +
count - 1] 中的字符组成。String 对象中的第三个int
值是一个散列值，它在某些情况下可以节省一些计算，我们现在可以忽略它。因此，每个String
对象总共会使用40字节（16 字节表示对象，三个int 实例变量各需4
字节，加上数组引用的8 字节和4 个填充字节）</p>
</blockquote></li>
<li><p>字符串的值和子字符串</p>
<ul>
<li>一个长度为N 的String 对象一般需要使用40 字节（String
对象本身）加上（24+2N）字节（字符数组），总共（64+2N）字节</li>
<li>Java 对字符串的表示希望能够避免复制字符串中的字符</li>
<li>一个子字符串所需的额外内存是一个常数，构造一个子字符串所需的时间也是常数</li>
<li>关于子字符串 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220408151726265.png"
alt="image-20220408151726265" /></li>
</ul></li>
</ul></li>
</ul>
<h3 id="展望">展望</h3>
<ul>
<li>最重要的是代码正确，其次才是性能</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 1.5.1-1.5.3</title>
    <url>/2022/04/09/study/algorithm/algorithhms_4th/1.5.1-1.5.3/</url>
    <content><![CDATA[<h2 id="案例研究union-find-算法">案例研究：union-find 算法</h2>
<ul>
<li>设计和分析算法的基本方法
<ul>
<li>优秀的算法能解决实际问题</li>
<li>高效的算法也可以很简单</li>
<li>理解某个实现的性能特点是一项有趣的挑战</li>
<li>在解决同一个问题的多种算法间选择，科学方法是一种重要工具</li>
<li>迭代式改进能让算法效率越来越高</li>
</ul></li>
</ul>
<h3 id="动态连通性">动态连通性</h3>
<ul>
<li>从输入中读取整数对p
q，如果已知的所有整数对都不能说明p,q相连，就打印出pq</li>
<li>网络：整个程序能够判定是否需要在pq之间架设一条新的连接才能进行通信</li>
<li>变量名等价性（即指向同一个对象的多个引用）</li>
<li>数学集合：在处理一个整数对pq时，我们是在判断它们是否属于相同的集合</li>
<li>本节中，将对象称为<strong>触点</strong>，整数对称为<strong>连接</strong>，等价类称为<strong>连通分量</strong>或是<strong>简称分量</strong></li>
<li>连通性
问题只要求我们的程序能够判别给定的整数对pq是否相连，并没有要求给两者之间的通路上的所有连接</li>
<li>union-find算法的API<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413001331923.png"
alt="image-20220413001331923" /></li>
<li>数据结构和算法的设计影响到算法的效率</li>
</ul>
<h3 id="实现">实现</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[]	id;</span><br><span class="line">	<span class="comment">/* 分量id（以触点作为索引） */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>	count;</span><br><span class="line">	<span class="comment">/* 分量数量 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">UF</span><span class="params">( <span class="type">int</span> N )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 初始化分量id数组 */</span></span><br><span class="line">		count	= N;</span><br><span class="line">		id	= <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++ )</span><br><span class="line">					id[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(count);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">return</span>(find( p ) == find( q ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">( <span class="type">int</span> p )</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">( <span class="type">int</span> p, <span class="type">int</span> q )</span></span><br><span class="line">	<span class="comment">/* 请见1.5.2.1节用例（quick-find）、1.5.2.3节用例（quick-union）和算法1.5（加权quick-union） */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">/* 解决由StdIn得到的动态连通性问题 */</span></span><br><span class="line">		<span class="type">int</span>	<span class="variable">N</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">		<span class="comment">/* 读取触点数量 */</span></span><br><span class="line">		<span class="type">UF</span>	<span class="variable">uf</span>	<span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>( N );</span><br><span class="line">		<span class="comment">/* 初始化N个分量 */</span></span><br><span class="line">		<span class="keyword">while</span> ( !StdIn.isEmpty() )</span><br><span class="line">				&#123;</span><br><span class="line">			<span class="type">int</span>	<span class="variable">p</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="type">int</span>	<span class="variable">q</span>	<span class="operator">=</span> StdIn.readint();</span><br><span class="line">			<span class="comment">/* 读取整数对 */</span></span><br><span class="line">			<span class="keyword">if</span> ( uf.connected( p, q ) )</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">/* 如果已经连通则忽略 */</span></span><br><span class="line">			uf.union( p, q );</span><br><span class="line">			<span class="comment">/* 归并分量 */</span></span><br><span class="line">			StdOut.println( p + <span class="string">&quot; &quot;</span> + q );</span><br><span class="line">			<span class="comment">/* 打印连接 */</span></span><br><span class="line">		&#125;</span><br><span class="line">		StdOut.println( uf.count() + <span class="string">&quot;components&quot;</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>union-find的成本模型：union-find
API的各种算法，统计的是<strong>数组的访问次数</strong>，不论读写</p>
<ul>
<li><p>以下有三种实现</p>
<ul>
<li><p>且仅当id[p] 等于id[q] 时p 和q 是连通的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q归并到相同的分量中</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pID</span> <span class="operator">=</span> find(p);mi</span><br><span class="line">	<span class="type">int</span> <span class="variable">qID</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="comment">// 如果p和q已经在相同的分量之中则不需要采取任何行动</span></span><br><span class="line">	<span class="keyword">if</span> (pID == qID) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 将p的分量重命名为q的名称</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; id.length; i++)</span><br><span class="line">	<span class="keyword">if</span> (id[i] == pID) id[i] = qID;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>命题F：在quick-find 算法中，每次find()
调用只需要访问数组一次，而归并两个分量的union()
操作访问数组的次数在(N+3) 到(2N+1) 之间。<br />
证明：由代码马上可以知道，每次connected() 调用都会检查id[]
数组中的两个元素是否相等，即会调用两次find() 方法。归并两个分量的union()
操作会调用两次find()，检查id[] 数组中的全部N 个元素并改变它们中1 到N-1
个元素的值。</p>
</blockquote>
<blockquote>
<p>假设我们使用quick-find
算法来解决动态连通性问题并且最后只得到了一个连通分量，那么这至少需要调用N-1
次union()，即至少(N+3)(N-1) ～ N2
次数组访问——我们马上可以猜想动态连通性的quick-find 算法是平方级别的</p>
</blockquote></li>
<li><p>以触点作为索引的id[]数组，每个触点所对应的id[]元素都是同一个分量中的另一个触点的名称
如下图： <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413222744695.png"
alt="image-20220413222744695" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 找出分量的名称</span></span><br><span class="line">	<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 将p和q的根节点统一</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pRoot</span> <span class="operator">=</span> find(p);</span><br><span class="line">	<span class="type">int</span> <span class="variable">qRoot</span> <span class="operator">=</span> find(q);</span><br><span class="line">	<span class="keyword">if</span> (pRoot == qRoot) <span class="keyword">return</span>;</span><br><span class="line">	id[pRoot] = qRoot;</span><br><span class="line">	count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union算法的最坏情况 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223324173.png"
alt="image-20220413223324173" /></p></li>
<li><p>加权quick-union算法（减少树的高度）
用一个数组来表示各个节点对应的分量的大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightedQuickUnionUF</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] id;</span><br><span class="line">	<span class="comment">// 父链接数组（由触点索引）</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span>[] sz;</span><br><span class="line">	<span class="comment">// （由触点索引的）各个根节点所对应的分量的大小</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">	<span class="comment">// 连通分量的数量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">WeightedQuickUnionUF</span><span class="params">(<span class="type">int</span> N)</span></span><br><span class="line">	&#123;</span><br><span class="line">		count = N;</span><br><span class="line">		id = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) id[i] = i;</span><br><span class="line">		sz = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) sz[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> Boolean <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> p)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 跟随链接找到根节点</span></span><br><span class="line">		<span class="keyword">while</span> (p != id[p]) p = id[p];</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> find(p);</span><br><span class="line">		<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> find(q);</span><br><span class="line">		<span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">// 将小树的根节点连接到大树的根节点</span></span><br><span class="line">		<span class="keyword">if</span> (sz[i] &lt; sz[j]) &#123;</span><br><span class="line">			id[i] = j;</span><br><span class="line">			sz[j] += sz[i];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			id[j] = i;</span><br><span class="line">			sz[i] += sz[j];</span><br><span class="line">		&#125;</span><br><span class="line">		count--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>quick-union 算法与加权quick-union 算法的对比（100 个触点，88
次union() 操作） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223710124.png"
alt="image-20220413223710124" /></p></li>
</ul></li>
<li><p>所有操作的总成本 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220413223824910.png"
alt="image-20220413223824910" /></p></li>
</ul>
<h3 id="展望">展望</h3>
<p>研究问题的步骤</p>
<ul>
<li>完整而详细地定义问题，找出解决问题所必需的基本抽象操作并定义一份
API。</li>
<li>简洁地实现一种初级算法，给出一个精心组织的开发用例并使用实际数据作为输入。</li>
<li>当实现所能解决的问题的最大规模达不到期望时决定改进还是放弃。</li>
<li>逐步改进实现，通过经验性分析或（和）数学分析验证改进后的效果。</li>
<li>用更高层次的抽象表示数据结构或算法来设计更高级的改进版本。</li>
<li>如果可能尽量为最坏情况下的性能提供保证，但在处理普通数据时也要有良好的性能。</li>
<li>在适当的时候将更细致的深入研究留给有经验的研究者并继续解决下一个问题。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.1.1</title>
    <url>/2022/04/13/study/algorithm/algorithhms_4th/2.1.1/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<p>排序就是将一组对象按照某种逻辑顺序重新排序的过程</p>
<ul>
<li>对排序算法的分析有助于理解本书中比较算法性能的方法</li>
<li>类似技术能解决其他类型问题</li>
<li>排序算法常常是我们解决其他问题的第一步</li>
</ul>
<h2 id="初级排序算法">初级排序算法</h2>
<ul>
<li>熟悉术语及技巧</li>
<li>某些情况下初级算法更有效</li>
<li>有助于改进复杂算法的效率</li>
</ul>
<h3 id="游戏规则">游戏规则</h3>
<ul>
<li><p>主要关注重新排序<strong>数组元素</strong>的算法，每个元素都会有一个<strong>主键</strong></p></li>
<li><p>排序后索引较大的主键大于索引较小的主键</p></li>
<li><p>一般情况下排序算法通过两个方法操作数据，less()进行比较，exch()进行交换</p></li>
<li><p>排序算法类的模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* 请见算法2.1、算法2.2、算法2.3、算法2.4、算法2.5或算法2.7*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title function_">less</span><span class="params">(Comparable v, Comparable w)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(Comparable[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">Comparable</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">		a[i] = a[j];</span><br><span class="line">		a[j] = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 在单行中打印数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">		StdOut.print(a[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">		StdOut.println();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isSorted</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 测试数组元素是否有序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; a.length; i++)</span><br><span class="line">		<span class="keyword">if</span> (less(a[i], a[i-<span class="number">1</span>])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]</span></span><br><span class="line"><span class="params">	args)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 从标准输入读取字符串，将它们排序并输出</span></span><br><span class="line">		String[] a = In.readStrings();</span><br><span class="line">		sort(a);</span><br><span class="line">		<span class="keyword">assert</span> <span class="title function_">isSorted</span><span class="params">(a)</span>;</span><br><span class="line">		show(a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more tiny.txt</span></span><br><span class="line">S O R T E X A M P L E</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; tiny.txt</span></span><br><span class="line">A E E L M O P R S T X</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">more words3.txt</span></span><br><span class="line">bed bug dad yes zoo ... all bad yet</span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash">java Example &lt; words.txt</span></span><br><span class="line">all bad bed bug dad ... yes yet zoo</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用assert验证</p></li>
<li><p>排序成本模型：在研究排序算法时，我们需要计算比较和交换的数量。对于不交换元素的算法，我们会比较访问数组的次数</p></li>
<li><p>额外内存开销和运行时间同等重要，排序算法分为</p>
<ul>
<li>除了函数调用需要的栈和固定数目的实例变量之外，无需额外内存的<strong>原地排序算法</strong></li>
<li>需要额外内存空间来存储另一份数组副本的<strong>其他排序算法</strong></li>
</ul></li>
<li><p>数据类型</p>
<ul>
<li><p>排序模板适用于任何实现了Comparable接口的数据类型</p></li>
<li><p>对于自己的数据类型，实现Comparable接口即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Date&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> day;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> month;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> year;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> m, <span class="type">int</span> y)</span></span><br><span class="line">	&#123;</span><br><span class="line">		day = d;</span><br><span class="line">		month = m;</span><br><span class="line">		year = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">day</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> day;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">month</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> month;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">year</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> year;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Date that)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &gt; that.year ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.year &lt; that.year ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &gt; that.month) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.month &lt; that.month) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &gt; that.day ) <span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.day &lt; that.day ) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> month + <span class="string">&quot;/&quot;</span> + day + <span class="string">&quot;/&quot;</span> + year;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>compareTo()必须实现<strong>全序关系</strong>
<ul>
<li>自反性，反对称性及传递性</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>经典算法，包括选择排序、插入排序、希尔排序、归并排序、快速排序和堆排序</p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>算法红皮书 2.1.2-</title>
    <url>/2022/04/23/study/algorithm/algorithhms_4th/2.1.2-/</url>
    <content><![CDATA[<h1 id="排序">排序</h1>
<h2 id="初级排序算法">初级排序算法</h2>
<h3 id="选择排序">选择排序</h3>
<ul>
<li><p>命题A。对于长度为N 的数组，选择排序需要大约N2/2 次比较和N
次交换。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Selection</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 将a[]按升序排列</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">		<span class="comment">// 数组长度</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 将a[i]和a[i+1..N]中最小的元素交换</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">			<span class="comment">// 最小元素的索引</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; N; j++)</span><br><span class="line">			<span class="keyword">if</span> (less(a[j], a[min])) min = j;</span><br><span class="line">			exch(a, i, min);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// less()、exch()、isSorted()和main()方法见“排序算法类模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>特点</p>
<ul>
<li>运行时间与输入无关，即输入数据的初始状态（比如是否已排序好等等）不影响排序时间</li>
<li>数据移动是最少的（只使用了N次交换，交换次数和数组的大小是线性关系</li>
</ul></li>
</ul>
<h3 id="插入排序">插入排序</h3>
<ul>
<li><p>命题B。对于随机排列的长度为N
且主键不重复的数组，平均情况下插入排序需要～ N2/4 次比较以及～ N2/4
次交换。最坏情况下需要～ N2/2 次比较和～ N2/2
次交换，最好情况下需要N-1次比较和0 次交换。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="comment">//将下表为 n-1的数，依次和n-2,n-3一直到0比较，</span></span><br><span class="line">        <span class="comment">//所以第二层for只走到1，因为0前面没有值</span></span><br><span class="line">        <span class="comment">//如果比前面的值小，就进行交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当倒置的数量很小时，插入排序比本章中的其他任何算法都快</p></li>
<li><blockquote>
<p>命题C。插入排序需要的交换操作和数组中倒置的数量相同，需要的比较次数大于等于倒置的数量，小于等于倒置的数量加上数组的大小再减一。</p>
</blockquote></li>
<li><blockquote>
<p>性质D。对于随机排序的无重复主键的数组，插入排序和选择排序的运行时间是平方级别的，两者之比应该是一个较小的常数</p>
</blockquote></li>
</ul>
<h3 id="希尔排序">希尔排序</h3>
<ul>
<li><p>希尔排序的思想是使数组中任意间隔为h的元素都是有序的，这样的数组称为h有序数组，一个h有序数组就是h个互相独立的有序数组编制在一起组成的数组</p></li>
<li><p>算法2.3 的实现使用了序列1/2（3k-1），从N/3
开始递减至1。我们把这个序列称为递增序列</p></li>
<li><p>详述</p></li>
<li><p>实现希尔排序的一种方法是对于每个h，用插入排序将h
个子数组独立地排序。但因为子数组是相互独立的，一个更简单的方法是在h-
子数组中将每个元素交换到比它大的元素之前去（将比它大的元素向右移动一格）。只需要在插入排序的代码中将移动元素的距离由1
改为h
即可。这样，希尔排序的实现就转化为了一个类似于插入排序但使用不同增量的过程。</p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 将a[]按升序排列</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">		<span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (h &lt; N/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">		<span class="comment">// 1, 4, 13, 40, 121, 364, 1093, ...</span></span><br><span class="line">		<span class="keyword">while</span> (h &gt;= <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 将数组变为h有序</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; N; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// 将a[i]插入到a[i-h], a[i-2*h], a[i-3*h]... 之中</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h)</span><br><span class="line">				exch(a, j, j-h);</span><br><span class="line">			&#125;</span><br><span class="line">			h = h/<span class="number">3</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// less()、exch()、isSorted()和main()方法见“排序算法类模板”</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过提升速度来解决其他方式无法解决的问题是研究算法的设计和性能的主要原因之一</p></li>
</ul>
<h2 id="归并排序">归并排序</h2>
<p>归并排序最吸引人的性质是它能够保证将任意长度为N的数组排序所需时间和NlogN成正比，主要缺点是他所需的额外空间和N成正比</p>
<ul>
<li>归并排序示意图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426112820116.png"
alt="image-20220426112820116" /></li>
</ul>
<h3 id="自顶向下的归并排序">自顶向下的归并排序</h3>
<ul>
<li><p>原地归并的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里有一个前提，就是a[i..mid]是有序的，</span></span><br><span class="line"><span class="comment"> * a[mid..hi]是有序的</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(Comparable[] a,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> lo, <span class="type">int</span> mid, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//先在辅助数组赋上需要的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最坏情况下这里时需要比较hi-lo+1次的，也就是数组长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">            <span class="comment">//说明i(左边）比较完了，直接拿右边的值放进去</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) &#123;</span><br><span class="line">            <span class="comment">//说明j(右边)比较完了，直接拿左边的值放进去</span></span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">            <span class="comment">//左右都还有值的情况下，取出最小的值放进去</span></span><br><span class="line">            a[k] = aux[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[k] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>递归进行归并排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//保证左边有序</span></span><br><span class="line">        sort(a, lo, mid);</span><br><span class="line">        <span class="comment">//保证右边有序</span></span><br><span class="line">        sort(a, mid + <span class="number">1</span>, hi);</span><br><span class="line">        <span class="comment">//归并数组有序的两部分</span></span><br><span class="line">        merge(a, lo, mid, hi);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>辅助数组的一次性初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">        aux = <span class="keyword">new</span> <span class="title class_">Comparable</span>[a.length];<span class="comment">//辅助数组，一次性分配空间</span></span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自顶向下的归并排序的调用轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426111242973.png"
alt="image-20220426111242973" /></p></li>
<li><p>N=16时归并排序中子数组的依赖树 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426140310539.png"
alt="image-20220426140310539" /></p></li>
<li><p>每个结点都表示一个sort() 方法通过merge()
方法归并而成的子数组。这棵树正好有n 层。对于0 到n-1
之间的任意k，自顶向下的第k 层有2^k 个子数组，每个数组的长度为 <span
class="math inline">\(2^{(n-k)}\)</span>，归并最多需要<span
class="math inline">\(2^{(n-k)}\)</span>次比较。因此每层的比较次数为$
2^k * 2 ^ {( n - 1 )} = 2 ^ n $ ，n层总共为 <span
class="math inline">\(n*2^n = lg N * (2 ^ { lg N}) = lg N *
N\)</span></p></li>
<li><blockquote>
<p>命题F。对于长度为N 的任意数组，自顶向下的归并排序需要(1/2)N lgN 至N
lgN 次比较。</p>
<p>注：因为归并所需要的比较次数最少为N/2</p>
</blockquote></li>
<li><blockquote>
<p>命题G。对于长度为N
的任意数组，自顶向下的归并排序最多需要访问数组6NlgN 次。
证明。每次归并最多需要访问数组6N 次（2N 次用来复制，2N
次用来将排好序的元素移动回去，另外最多比较2N 次），根据命题F
即可得到这个命题的结果。</p>
</blockquote></li>
</ul>
<h3 id="自底向上的归并排序">自底向上的归并排序</h3>
<p>递归实现的归并排序时算法设计中<strong>分治思想</strong>
的典型应用<br />
自底向上的归并排序的可视轨迹</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220426153552531.png" /></p>
<ul>
<li><p>源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> a.length;</span><br><span class="line">       aux = <span class="keyword">new</span> <span class="title class_">Comparable</span>[N];</span><br><span class="line">       <span class="comment">//每次合并的子数组长度翻倍</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> <span class="number">1</span>; sz &lt; N; sz = sz + sz) &#123;</span><br><span class="line">           <span class="comment">//lo:子数组索引 </span></span><br><span class="line">           <span class="comment">//边界问题， 假设是N为2^n，则倒数第二个数组的元素的下标，一定在倒数第一个元素下标(n-sz)之前</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>; lo &lt; N - sz; lo += sz + sz) &#123;</span><br><span class="line">               <span class="comment">//循环合并一个个的小数组</span></span><br><span class="line">               merge(a, lo, lo + sz - <span class="number">1</span>, Math.min(lo + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>子数组的大小sz的初始值为1，每次加倍</p></li>
<li><p>最后一个子数组的大小只有在数组大小是sz的偶数倍的时候才会等于sz（否则比sz小)</p></li>
<li><blockquote>
<p>命题H。对于长度为N 的任意数组，自底向上的归并排序需要1/2NlgN 至NlgN
次比较，最多访问数组6NlgN 次。</p>
</blockquote></li>
<li><blockquote>
<p>自底向上的归并排序比较适合用链表组织的数据。想象一下将链表先按大小为1
的子链表进行排序，然后是大小为2 的子链表，然后是大小为4
的子链表等。这种方法只需要重新组织链表链接就能将链表原地排序（不需要创建任何新的链表结点）</p>
</blockquote></li>
<li><p>归并排序告诉我们，当能够用其中一种方法解决一个问题时，都应该试试另一种，可以像Merge.sort()那样化整为零（然后递归地解决）问题，或者像MergeBU.sort()那样循序渐进的解决问题</p></li>
<li><blockquote>
<p>命题I。没有任何基于比较的算法能够保证使用少于lg（N!）～ NlgN
次比较将长度为N 的数组排序</p>
</blockquote></li>
<li><blockquote>
<p>命题J。归并排序是一种渐进最优的基于比较排序的算法。</p>
</blockquote></li>
</ul></li>
</ul>
<h2 id="快速排序">快速排序</h2>
<p>快速排序是应用最广泛的排序算法</p>
<h3 id="基本算法">基本算法</h3>
<ul>
<li><p>是一种分治的排序算法，将一个数组分成两个子数组，将两部分独立的排序</p></li>
<li><p>归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将两个数组排序；快速排序将数组排序的方式是当两个子数组都有序时整个数组也都有序了</p></li>
<li><p>归并排序：递归调用发生在处理数组之前；快速排序：递归调用发生在处理数组之后</p></li>
<li><p>归并排序中数组被分为两半；快速排序中切分取决于数组内容</p></li>
<li><p>快速排序示意图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503184109136.png"
alt="image-20220503184109136" /></p></li>
<li><p>递归代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparable[] a,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> partition(a, lo, hi); <span class="comment">//切分</span></span><br><span class="line">        sort(a, lo, j - <span class="number">1</span>); <span class="comment">/// 将左半部分a[lo .. j-1]排序</span></span><br><span class="line">        sort(a, j + <span class="number">1</span>, hi);<span class="comment">//将右半部分a[j+1..hi]排序</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>快速排序递归的将子数组a[lo..hi]排序，先用partition()方法将a[j]放到一个合适的位置，然后再用递归调用将其他位置的元素排序
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503184859350.png"
alt="image-20220503184859350" /></p></li>
<li><p>切分后使得数组满足三个条件</p>
<ul>
<li>对于某个j，a[j]已经排定</li>
<li>a[lo]到a[j-1]的所有元素都不大于a[j]</li>
<li>a[j+1]的所有元素都不小于a[j]</li>
</ul></li>
<li><p>归纳法证明数组有序：</p>
<blockquote>
<p>如果左子数组和右子数组都是有序的，那么由左子数组（有序且没有任何元素大于切分元素）、切分元素和右子数组（有序且没有任何元素小于切分元素）组成的结果数组也一定是有序的</p>
</blockquote></li>
</ul></li>
<li><blockquote>
<p>一般策略是先随意地取a[lo]
作为切分元素，即那个将会被排定的元素，然后我们从数组的左端开始向右扫描直到找到一个大于等于它的元素，再从数组的右端开始向左扫描直到找到一个小于等于它的元素。这两个元素显然是没有排定的，因此我们交换它们的位置。如此继续，我们就可以保证左指针i
的左侧元素都不大于切分元素，右指针j
的右侧元素都不小于切分元素。当两个指针相遇时，我们只需要将切分元素a[lo]
和左子数组最右侧的元素（a[j]）交换然后返回j 即可</p>
</blockquote></li>
<li><p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(Comparable[] a, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo, j = hi + <span class="number">1</span>; <span class="comment">//左右扫描指针</span></span><br><span class="line">    <span class="type">Comparable</span> <span class="variable">v</span> <span class="operator">=</span> a[lo]; <span class="comment">//切分元素</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//从左往右扫描，如果找到了大于等于v值的数，就退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右往左扫描，如果找到了小于等于v值得数，就退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[--j], v)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;<span class="comment">//如果i，j相遇则退出循环</span></span><br><span class="line">        <span class="comment">//将左边大于等于v值的数与右边小于等于v值的数交换</span></span><br><span class="line">        exch(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面的遍历结束后，a[lo+1...j]和a[i..hi]都已经分别有序</span></span><br><span class="line">    <span class="comment">//且a[j]&lt;=a[i]&lt;=a[lo]，所以应该交换a[lo]和a[j](而不是a[i)，因为</span></span><br><span class="line">    <span class="comment">//a[i]有可能大于a[lo]</span></span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="comment">//返回a[lo]被交换的位置</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切分轨迹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220503190908482.png"
alt="image-20220503190908482" /></p></li>
<li></li>
</ul>
<h3 id="性能特点">性能特点</h3>
<h3 id="算法改进">算法改进</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>01-flowable基础</title>
    <url>/2022/05/14/study/flowable/boge_blbl/01-base/</url>
    <content><![CDATA[<h2 id="flowable介绍">Flowable介绍</h2>
<ul>
<li><p>flowable的历史</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514094153736.png"
alt="image-20220514094153736" />
<figcaption aria-hidden="true">image-20220514094153736</figcaption>
</figure></li>
<li><p>flowable是BPNM的一个基于java的软件实现，不仅包括BPMN，还有DMN决策表和CMMNCase管理引擎，并且有自己的用户管理、微服务API等</p></li>
</ul>
<h2 id="获取engine对象">获取Engine对象</h2>
<ul>
<li><p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.flowable/flowable-engine --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置并获取ProcessEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngineConfiguration configuration=</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>();</span><br><span class="line">        <span class="comment">//配置</span></span><br><span class="line">        configuration.setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        configuration.setJdbcUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        configuration.setJdbcPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//nullCatalogMeansCurrent=true 设置为只查当前连接的schema库</span></span><br><span class="line">        configuration.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable-learn?&quot;</span> +</span><br><span class="line">                <span class="string">&quot;useUnicode=true&amp;characterEncoding=utf-8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;allowMultiQueries=true&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class="line">        <span class="comment">//如果数据库中表结构不存在则新建</span></span><br><span class="line">        configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">        <span class="comment">//构建ProcessEngine</span></span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="日志和表结构介绍">日志和表结构介绍</h2>
<ul>
<li><p>添加slf4j依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-reload4j --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-reload4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加log配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">DEBUG, CA</span></span><br><span class="line"><span class="attr">log4j.appender.CA</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout.ConversionPattern</span> = <span class="string">%d&#123;hh:mm:ss,SSS&#125; &#123;%t&#125; %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此时再次启动就会看到一堆日志</li>
</ul></li>
<li><p>表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514102041305.png"
alt="image-20220514102041305" /></p></li>
</ul>
<h2 id="流程定义文件解析">流程定义文件解析</h2>
<ul>
<li><p>先通过流程绘制器绘制流程</p></li>
<li><p>案例（官网，请假流程） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514102241579.png"
alt="image-20220514102241579" /></p>
<ul>
<li><p>设计好流程之后，流程数据保存在holiday-request.bpmn20.xml文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--id process key--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holidayRequest&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sequenceFlow表示的是线条箭头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;同意或者拒绝请假&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--条件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span>  <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--条件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--发送一个邮件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Send out rejection email&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="部署流程-代码实现">部署流程-代码实现</h2>
<ul>
<li><p>使用@bofore 处理测试中繁琐的配置操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    configuration =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>();</span><br><span class="line">    <span class="comment">//配置</span></span><br><span class="line">    configuration.setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">    configuration.setJdbcUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    configuration.setJdbcPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="comment">//nullCatalogMeansCurrent=true 设置为只查当前连接的schema库</span></span><br><span class="line">    configuration.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable-learn?&quot;</span> +</span><br><span class="line">            <span class="string">&quot;useUnicode=true&amp;characterEncoding=utf-8&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;allowMultiQueries=true&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span>);</span><br><span class="line">    <span class="comment">//如果数据库中表结构不存在则新建</span></span><br><span class="line">    configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ProcessEngine提供的几个服务 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514103435244.png"
alt="image-20220514103435244" /></p></li>
<li><p>流程部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy(); </span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId()); </span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表结构 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514104106140.png"
alt="image-20220514104106140" /></p></li>
</ul>
<h2 id="查询和删除操作">查询和删除操作</h2>
<ul>
<li><p>查询已经部署的流程定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程定义及部署的查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeployQuery</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    RepositoryService repositoryService=processEngine.getRepositoryService();</span><br><span class="line">    <span class="comment">//流程部署查询</span></span><br><span class="line">    <span class="comment">//这里只部署了一个流程定义</span></span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeploymentQuery()</span><br><span class="line">            .deploymentId(<span class="string">&quot;1&quot;</span>).singleResult();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署时的名称:&quot;</span>+deployment.getName());</span><br><span class="line">    <span class="comment">//流程定义查询器</span></span><br><span class="line">    <span class="type">ProcessDefinitionQuery</span> <span class="variable">processDefinitionQuery</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery();</span><br><span class="line">    <span class="comment">//查询到的流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> processDefinitionQuery.deploymentId(<span class="string">&quot;1&quot;</span>).singleResult();</span><br><span class="line">  </span><br><span class="line">    System.out.println(<span class="string">&quot;部署id:&quot;</span>+processDefinition.getDeploymentId());</span><br><span class="line">    System.out.println(<span class="string">&quot;定义名:&quot;</span>+processDefinition.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;描述:&quot;</span>+processDefinition.getDescription());</span><br><span class="line">    System.out.println(<span class="string">&quot;定义id:&quot;</span>+processDefinition.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>删除流程定义</p>
<ul>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDeploy</span><span class="params">()</span>&#123;</span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">        RepositoryService repositoryService=processEngine.</span><br><span class="line">                getRepositoryService();</span><br><span class="line">        <span class="comment">//注意：第一个参数时部署id</span></span><br><span class="line">        <span class="comment">//后面那个参数表示级联删除，如果流程启动了会同时删除任务。</span></span><br><span class="line">        repositoryService.deleteDeployment(<span class="string">&quot;2501&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下面三个表的数据都会被删除 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514105321078.png"
alt="image-20220514105321078" /></p></li>
</ul></li>
</ul>
<h2 id="启动流程实例">启动流程实例</h2>
<ul>
<li><p>由于刚才将部署删除了，所以这里再运行testDeploy()重新部署上</p></li>
<li><p>这里通过流程定义key（xml中的id）启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>,<span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(<span class="string">&quot;holidayRequest&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span>+holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span>+holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span>+holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>三个表 act_ru_variable act_ru_task arc_ru_execution</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514111442166.png"
alt="image-20220514111442166" />
<figcaption aria-hidden="true">image-20220514111442166</figcaption>
</figure></li>
</ul>
<h2 id="查询任务">查询任务</h2>
<ul>
<li><p>这里先指定一下每个任务的候选人，修改xml文件中userTask的节点属性</p>
<ul>
<li><p>修改前先删除一下之前部署的流程图(还是上面的代码)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 流程删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteDeploy</span><span class="params">()</span>&#123;</span><br><span class="line">        ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">        RepositoryService repositoryService=processEngine.</span><br><span class="line">                getRepositoryService();</span><br><span class="line">        <span class="comment">//注意：第一个参数时部署id</span></span><br><span class="line">        <span class="comment">//后面那个参数表示级联删除，true表示如果流程启动了会同时删除任务。</span></span><br><span class="line">        repositoryService.deleteDeployment(<span class="string">&quot;2501&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里用false参数测试，会提示失败，运行中的流程不允许删除。将第二个参数改为true即可级联删除<br />
删除后可以发现下面几个表数据全部清空了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112055940.png"
alt="image-20220514112055940" /></p></li>
<li><p>然后修改xml定义文件并运行testDeploy()重新部署</p>
<ul>
<li><p>定义修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;同意或者拒绝请假&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里增加了assignee属性值--&gt;</span>        </span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>运行流程 testRunProcess()</p>
<ul>
<li>运行后节点会跳到给zhangsan的那个任务，查看数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112605263.png"
alt="image-20220514112605263" /></li>
<li>流程变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514112655133.png"
alt="image-20220514112655133" /></li>
</ul></li>
<li><p>查询任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试任务查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryTask</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="comment">//通过流程定义查询任务</span></span><br><span class="line">    List&lt;Task&gt; list = taskService.createTaskQuery().processDefinitionKey(<span class="string">&quot;holidayRequest&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span> (Task task:list)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务对应的流程定义id&quot;</span>+task.getProcessDefinitionId());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务名&quot;</span>+task.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务处理人&quot;</span>+task.getAssignee());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务描述&quot;</span>+task.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;任务id&quot;</span>+task.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="处理任务">处理任务</h2>
<ul>
<li><p>流程图定义的分析
任务A处理后，根据处理结果（这里是拒绝），会走向任务D，然后任务D是一个Service，且通过java的委托对象，自动实现操作</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514115334229.png"
alt="image-20220514115334229" />
<figcaption aria-hidden="true">image-20220514115334229</figcaption>
</figure></li>
<li><p>到了D那个节点，这里指定了一个自定义的java类处理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514115513100.png"
alt="image-20220514115513100" /></p>
<ul>
<li><p>代码配置，注意类名和xml中的一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.JavaDelegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendRejectionMail</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是一个flowable中的触发器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegateExecution</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution delegateExecution)</span> &#123;</span><br><span class="line">        <span class="comment">//触发执行的逻辑 按照我们在流程中的定义给被拒绝的员工发送通知邮件</span></span><br><span class="line">        System.out.println(<span class="string">&quot;不好意思，你的请假申请被拒绝了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>任务的完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleteTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">        <span class="comment">//查找出张三在这个流程定义中的任务</span></span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().processDefinitionKey(<span class="string">&quot;holidayRequest&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">//创建流程变量</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;approved&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//完成任务</span></span><br><span class="line">        taskService.complete(task.getId(), map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台 <img
src="C:\Users\ly\AppData\Roaming\Typora\typora-user-images\image-20220514120154300.png"
alt="image-20220514120154300" /></li>
<li>数据库 下面几个表的数据都被清空了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514120320988.png"
alt="image-20220514120320988" /></li>
</ul></li>
</ul>
<h2 id="历史任务的完成">历史任务的完成</h2>
<ul>
<li><p>Flowable流程引擎可以自动存储所有流程实例的审计数据或历史数据</p></li>
<li><p>先查看一下刚才用的流程定义的id <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514120756973.png"
alt="image-20220514120756973" /></p></li>
<li><p>历史信息查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHistory</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=configuration.buildProcessEngine();</span><br><span class="line">    HistoryService historyService=processEngine.getHistoryService();</span><br><span class="line">    List&lt;HistoricActivityInstance&gt; list = historyService.createHistoricActivityInstanceQuery()</span><br><span class="line">            .processDefinitionId(<span class="string">&quot;holidayRequest:1:7503&quot;</span>)</span><br><span class="line">            .finished() <span class="comment">//查询已经完成的</span></span><br><span class="line">            .orderByHistoricActivityInstanceEndTime().asc() <span class="comment">//指定排序字段和升降序</span></span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(HistoricActivityInstance history:list)&#123;</span><br><span class="line">        <span class="comment">//注意,和视频不一样的地方，history表还记录了流程箭头流向的那个节点</span></span><br><span class="line">        <span class="comment">//_flow_</span></span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">&quot;活动名--&quot;</span>+history.getActivityName()+</span><br><span class="line">                        <span class="string">&quot;处理人--&quot;</span>+history.getAssignee()+</span><br><span class="line">                        <span class="string">&quot;活动id--&quot;</span>+history.getActivityId()+</span><br><span class="line">                <span class="string">&quot;处理时长--&quot;</span>+history.getDurationInMillis()+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不一样的地方，在旧版本时没有的 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121509725.png"
alt="image-20220514121509725" /></p></li>
</ul>
<h2 id="流程设计器">流程设计器</h2>
<ul>
<li><p>有eclipse流程设计器，和flowable流程设计器</p></li>
<li><p>使用eclipse的设计，会生成一个bar文件，代码稍微有点不同
接收一个ZipInputStream</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514122035548.png"
alt="image-20220514122035548" />
<figcaption aria-hidden="true">image-20220514122035548</figcaption>
</figure></li>
</ul>
<h2 id="flowableui">FlowableUI</h2>
<ul>
<li>使用flowable官方提供的包，里面有一个war，直接用命令 java -jar
xx.war启动即可</li>
<li>这个应用分成四个模块 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121818052.png"
alt="image-20220514121818052" /></li>
<li>流程图的绘制及用户分配 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514121906621.png"
alt="image-20220514121906621" /></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_1</title>
    <url>/2022/05/14/study/flowable/boge_blbl/02-advance_1/</url>
    <content><![CDATA[<h2 id="表结构">表结构</h2>
<ul>
<li><p>尽量通过API动数据</p></li>
<li><p>ACT_RE：repository，包含流程定义和流程静态资源</p></li>
<li><p>ACT_RU:
runtime，包含流程实例、任务、变量等，流程结束会删除</p></li>
<li><p>ACT_HI:
history，包含历史数据，比如历史流程实例、变量、任务等</p></li>
<li><p>ACT_GE: general，通用数据</p></li>
<li><p>ACT_ID:
identity，组织机构。包含标识的信息，如用户、用户组等等</p></li>
<li><p>具体的</p>
<ul>
<li><p>流程历史记录</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220723828.png"
alt="image-20220514220723828" />
<figcaption aria-hidden="true">image-20220514220723828</figcaption>
</figure></li>
<li><p>流程定义表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220740732.png"
alt="image-20220514220740732" /></p></li>
<li><p>运行实例表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220808753.png"
alt="image-20220514220808753" /></p></li>
<li><p>用户用户组表</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220856033.png"
alt="image-20220514220856033" />
<figcaption aria-hidden="true">image-20220514220856033</figcaption>
</figure></li>
</ul></li>
<li><p>源码中的体现 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514220933558.png"
alt="image-20220514220933558" /></p></li>
</ul>
<h2 id="默认的配置文件加载">默认的配置文件加载</h2>
<ul>
<li><p>对于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">defaultProcessEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">getDefaultProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getProcessEngine(NAME_DEFAULT); <span class="comment">//NAME_DEFAULT = &quot;default&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">getProcessEngine</span><span class="params">(String processEngineName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> processEngines.get(processEngineName);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;部分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes all process engines that can be found on the classpath for resources &lt;code&gt;flowable.cfg.xml&lt;/code&gt; (plain Flowable style configuration) and for resources</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;flowable-context.xml&lt;/code&gt; (Spring style configuration).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isInitialized()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (processEngines == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Create new map to store process-engines if current map is null</span></span><br><span class="line">                processEngines = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectUtil.getClassLoader();</span><br><span class="line">            Enumeration&lt;URL&gt; resources = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources = classLoader.getResources(<span class="string">&quot;flowable.cfg.xml&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableIllegalArgumentException</span>(<span class="string">&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot;</span> + System.getProperty(<span class="string">&quot;java.class.path&quot;</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//后面还有，每帖出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>注意这行<code>classLoader.getResources("flowable.cfg.xml");</code>
需要在resources根目录下放这么一个文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/flow1?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>allowMultiQueries=true<span class="symbol">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--异步执行器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>新建数据库flow1，运行测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processEngine2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">defaultProcessEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    System.out.println(defaultProcessEngine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时数据库已经有表</p></li>
</ul>
<h2 id="加载自定义名称的配置文件">加载自定义名称的配置文件</h2>
<ul>
<li><p>把刚才的数据库清空，将flowable的配置文件放到目录custom/lycfg.xml中
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514225700704.png"
alt="image-20220514225700704" /></p></li>
<li><p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processEngine03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(<span class="string">&quot;custom/lycfg.xml&quot;</span>);</span><br><span class="line">        System.out.println(configuration);</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">        System.out.println(processEngine);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="processengine源码查看">ProcessEngine源码查看</h2>
<ul>
<li><p>源码追溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.buildProcessEngine()</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="type">ProcessEngineImpl</span> <span class="variable">processEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessEngineImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----&gt;ProcessEngineImpl.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessEngineImpl</span> <span class="keyword">implements</span> <span class="title class_">ProcessEngine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(ProcessEngineImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> RepositoryService repositoryService;</span><br><span class="line">    <span class="keyword">protected</span> RuntimeService runtimeService;</span><br><span class="line">    <span class="keyword">protected</span> HistoryService historicDataService;</span><br><span class="line">    <span class="keyword">protected</span> IdentityService identityService;</span><br><span class="line">    <span class="keyword">protected</span> TaskService taskService;</span><br><span class="line">    <span class="keyword">protected</span> FormService formService;</span><br><span class="line">    <span class="keyword">protected</span> ManagementService managementService;</span><br><span class="line">    <span class="keyword">protected</span> DynamicBpmnService dynamicBpmnService;</span><br><span class="line">    <span class="keyword">protected</span> ProcessMigrationService processInstanceMigrationService;</span><br><span class="line">    <span class="keyword">protected</span> AsyncExecutor asyncExecutor;</span><br><span class="line">    <span class="keyword">protected</span> AsyncExecutor asyncHistoryExecutor;</span><br><span class="line">    <span class="keyword">protected</span> CommandExecutor commandExecutor;</span><br><span class="line">    <span class="keyword">protected</span> Map&lt;Class&lt;?&gt;, SessionFactory&gt; sessionFactories;</span><br><span class="line">    <span class="keyword">protected</span> TransactionContextFactory transactionContextFactory;</span><br><span class="line">    <span class="keyword">protected</span> ProcessEngineConfigurationImpl processEngineConfiguration;</span><br><span class="line">    <span class="comment">//这里通过ProcessEngineConfigurationImpl获取各种对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessEngineImpl</span><span class="params">(ProcessEngineConfigurationImpl processEngineConfiguration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processEngineConfiguration = processEngineConfiguration;</span><br><span class="line">        <span class="built_in">this</span>.name = processEngineConfiguration.getEngineName();</span><br><span class="line">        <span class="built_in">this</span>.repositoryService = processEngineConfiguration.getRepositoryService();</span><br><span class="line">        <span class="built_in">this</span>.runtimeService = processEngineConfiguration.getRuntimeService();</span><br><span class="line">        <span class="built_in">this</span>.historicDataService = processEngineConfiguration.getHistoryService();</span><br><span class="line">        <span class="built_in">this</span>.identityService = processEngineConfiguration.getIdentityService();</span><br><span class="line">        <span class="built_in">this</span>.taskService = processEngineConfiguration.getTaskService();</span><br><span class="line">        <span class="built_in">this</span>.formService = processEngineConfiguration.getFormService();</span><br><span class="line">        <span class="built_in">this</span>.managementService = processEngineConfiguration.getManagementService();</span><br><span class="line">        <span class="built_in">this</span>.dynamicBpmnService = processEngineConfiguration.getDynamicBpmnService();</span><br><span class="line">        <span class="built_in">this</span>.processInstanceMigrationService = processEngineConfiguration.getProcessMigrationService();</span><br><span class="line">        <span class="built_in">this</span>.asyncExecutor = processEngineConfiguration.getAsyncExecutor();</span><br><span class="line">        <span class="built_in">this</span>.asyncHistoryExecutor = processEngineConfiguration.getAsyncHistoryExecutor();</span><br><span class="line">        <span class="built_in">this</span>.commandExecutor = processEngineConfiguration.getCommandExecutor();</span><br><span class="line">        <span class="built_in">this</span>.sessionFactories = processEngineConfiguration.getSessionFactories();</span><br><span class="line">        <span class="built_in">this</span>.transactionContextFactory = processEngineConfiguration.getTransactionContextFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----&gt;ProcessEngine.class 获取各个service服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProcessEngine</span> <span class="keyword">extends</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** the version of the flowable library */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">VERSION</span> <span class="operator">=</span> FlowableVersions.CURRENT_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Starts the execuctors (async and async history), if they are configured to be auto-activated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startExecutors</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    RepositoryService <span class="title function_">getRepositoryService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    RuntimeService <span class="title function_">getRuntimeService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    FormService <span class="title function_">getFormService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    TaskService <span class="title function_">getTaskService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    HistoryService <span class="title function_">getHistoryService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    IdentityService <span class="title function_">getIdentityService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ManagementService <span class="title function_">getManagementService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    DynamicBpmnService <span class="title function_">getDynamicBpmnService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ProcessMigrationService <span class="title function_">getProcessMigrationService</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ProcessEngineConfiguration <span class="title function_">getProcessEngineConfiguration</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2
id="processengineconfiguration中的init方法">ProcessEngineConfiguration中的init方法</h2>
<ul>
<li><p>源码追溯</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.buildProcessEngine()</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.class</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="type">ProcessEngineImpl</span> <span class="variable">processEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessEngineImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---&gt;ProcessEngineConfigurationImpl.init();</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        initEngineConfigurations();</span><br><span class="line">        initConfigurators();</span><br><span class="line">        configuratorsBeforeInit();</span><br><span class="line">        initClock();</span><br><span class="line">        initObjectMapper();</span><br><span class="line">        initProcessDiagramGenerator();</span><br><span class="line">        initCommandContextFactory();</span><br><span class="line">        initTransactionContextFactory();</span><br><span class="line">        initCommandExecutors();</span><br><span class="line">        initIdGenerator();</span><br><span class="line">        initHistoryLevel();</span><br><span class="line">        initFunctionDelegates();</span><br><span class="line">        initAstFunctionCreators();</span><br><span class="line">        initDelegateInterceptor();</span><br><span class="line">        initBeans();</span><br><span class="line">        initExpressionManager();</span><br><span class="line">        initAgendaFactory();</span><br><span class="line">        <span class="comment">//关系型数据库</span></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">            initDataSource();<span class="comment">//下面拿这个举例1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            initNonRelationalDataSource();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase || usingSchemaMgmt) &#123;</span><br><span class="line">            initSchemaManager();</span><br><span class="line">            initSchemaManagementCommand();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        configureVariableServiceConfiguration();</span><br><span class="line">        configureJobServiceConfiguration();</span><br><span class="line"></span><br><span class="line">        initHelpers();</span><br><span class="line">        initVariableTypes();</span><br><span class="line">        initFormEngines();</span><br><span class="line">        initFormTypes();</span><br><span class="line">        initScriptingEngines();</span><br><span class="line">        initBusinessCalendarManager();</span><br><span class="line">        initServices();</span><br><span class="line">        initWsdlImporterFactory();</span><br><span class="line">        initBehaviorFactory();</span><br><span class="line">        initListenerFactory();</span><br><span class="line">        initBpmnParser();</span><br><span class="line">        initProcessDefinitionCache();</span><br><span class="line">        initProcessDefinitionInfoCache();</span><br><span class="line">        initAppResourceCache();</span><br><span class="line">        initKnowledgeBaseCache();</span><br><span class="line">        initJobHandlers();</span><br><span class="line">        initHistoryJobHandlers();</span><br><span class="line"></span><br><span class="line">        initTransactionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (usingRelationalDatabase) &#123;</span><br><span class="line">            initSqlSessionFactory();<span class="comment">//下面拿这个举例2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        initSessionFactories();</span><br><span class="line">        <span class="comment">//相关表结构操作</span></span><br><span class="line">        initDataManagers(); <span class="comment">//下面拿这个举例2</span></span><br><span class="line">        initEntityManagers();</span><br><span class="line">        initCandidateManager();</span><br><span class="line">        initVariableAggregator();</span><br><span class="line">        initHistoryManager();</span><br><span class="line">        initChangeTenantIdManager();</span><br><span class="line">        initDynamicStateManager();</span><br><span class="line">        initProcessInstanceMigrationValidationManager();</span><br><span class="line">        initIdentityLinkInterceptor();</span><br><span class="line">        initJpa();</span><br><span class="line">        initDeployers();</span><br><span class="line">        initEventHandlers();</span><br><span class="line">        initFailedJobCommandFactory();</span><br><span class="line">        initEventDispatcher();</span><br><span class="line">        initProcessValidator();</span><br><span class="line">        initFormFieldHandler();</span><br><span class="line">        initDatabaseEventLogging();</span><br><span class="line">        initFlowable5CompatibilityHandler();</span><br><span class="line">        initVariableServiceConfiguration(); <span class="comment">//流程变量</span></span><br><span class="line">        initIdentityLinkServiceConfiguration();</span><br><span class="line">        initEntityLinkServiceConfiguration();</span><br><span class="line">        initEventSubscriptionServiceConfiguration();</span><br><span class="line">        initTaskServiceConfiguration();</span><br><span class="line">        initJobServiceConfiguration();</span><br><span class="line">        initBatchServiceConfiguration();</span><br><span class="line">        initAsyncExecutor();</span><br><span class="line">        initAsyncHistoryExecutor();</span><br><span class="line"></span><br><span class="line">        configuratorsAfterInit();</span><br><span class="line">        afterInitTaskServiceConfiguration();</span><br><span class="line">        afterInitEventRegistryEventBusConsumer();</span><br><span class="line">        </span><br><span class="line">        initHistoryCleaningManager();</span><br><span class="line">        initLocalizationManagers();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//---&gt;AbstractEngineConfiguration </span></span><br><span class="line"><span class="comment">//----&gt;AbstractEngineConfiguration.initDataSrouce()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title function_">getDefaultDatabaseTypeMappings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">databaseTypeMappings</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;H2&quot;</span>, DATABASE_TYPE_H2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;HSQL Database Engine&quot;</span>, DATABASE_TYPE_HSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;MySQL&quot;</span>, DATABASE_TYPE_MYSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;MariaDB&quot;</span>, DATABASE_TYPE_MYSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;Oracle&quot;</span>, DATABASE_TYPE_ORACLE);</span><br><span class="line">        databaseTypeMappings.setProperty(PRODUCT_NAME_POSTGRES, DATABASE_TYPE_POSTGRES);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;Microsoft SQL Server&quot;</span>, DATABASE_TYPE_MSSQL);</span><br><span class="line">        databaseTypeMappings.setProperty(DATABASE_TYPE_DB2, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/NT&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/NT64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDP&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUX390&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXX8664&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXZ64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXPPC64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/LINUXPPC64LE&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/400 SQL&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/6000&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDB iSeries&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/AIX64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/HPUX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/HP64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/SUN&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/SUN64&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/PTX&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2/2&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(<span class="string">&quot;DB2 UDB AS400&quot;</span>, DATABASE_TYPE_DB2);</span><br><span class="line">        databaseTypeMappings.setProperty(PRODUCT_NAME_CRDB, DATABASE_TYPE_COCKROACHDB);</span><br><span class="line">        <span class="keyword">return</span> databaseTypeMappings;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//initDataSource();</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSourceJndiName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dataSource = (DataSource) <span class="keyword">new</span> <span class="title class_">InitialContext</span>().lookup(dataSourceJndiName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;couldn&#x27;t lookup datasource from &quot;</span> + dataSourceJndiName + <span class="string">&quot;: &quot;</span> + e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jdbcUrl != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((jdbcDriver == <span class="literal">null</span>) || (jdbcUsername == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;DataSource or JDBC properties have to be specified in a process engine configuration&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                logger.debug(<span class="string">&quot;initializing datasource to db: &#123;&#125;&quot;</span>, jdbcUrl);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Configuring Datasource with following properties (omitted password for security)&quot;</span>);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource driver : &#123;&#125;&quot;</span>, jdbcDriver);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource url : &#123;&#125;&quot;</span>, jdbcUrl);</span><br><span class="line">                    logger.info(<span class="string">&quot;datasource user name : &#123;&#125;&quot;</span>, jdbcUsername);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">PooledDataSource</span> <span class="variable">pooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(<span class="built_in">this</span>.getClass().getClassLoader(), jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxActiveConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumActiveConnections(jdbcMaxActiveConnections);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxIdleConnections &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumIdleConnections(jdbcMaxIdleConnections);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxCheckoutTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolMaximumCheckoutTime(jdbcMaxCheckoutTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcMaxWaitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setPoolTimeToWait(jdbcMaxWaitTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcPingEnabled) &#123;</span><br><span class="line">                    pooledDataSource.setPoolPingEnabled(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (jdbcPingQuery != <span class="literal">null</span>) &#123;</span><br><span class="line">                        pooledDataSource.setPoolPingQuery(jdbcPingQuery);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pooledDataSource.setPoolPingConnectionsNotUsedFor(jdbcPingConnectionNotUsedFor);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jdbcDefaultTransactionIsolationLevel &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    pooledDataSource.setDefaultTransactionIsolationLevel(jdbcDefaultTransactionIsolationLevel);</span><br><span class="line">                &#125;</span><br><span class="line">                dataSource = pooledDataSource;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (databaseType == <span class="literal">null</span>) &#123;</span><br><span class="line">            initDatabaseType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//initSqlSessionFactory();</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取MyBatis配置文件信息</span></span><br><span class="line">                inputStream = getMyBatisXmlConfigurationStream();</span><br><span class="line"></span><br><span class="line">                <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>(<span class="string">&quot;default&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">                <span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">                properties.put(<span class="string">&quot;prefix&quot;</span>, databaseTablePrefix);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">wildcardEscapeClause</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> ((databaseWildcardEscapeCharacter != <span class="literal">null</span>) &amp;&amp; (databaseWildcardEscapeCharacter.length() != <span class="number">0</span>)) &#123;</span><br><span class="line">                    wildcardEscapeClause = <span class="string">&quot; escape &#x27;&quot;</span> + databaseWildcardEscapeCharacter + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                properties.put(<span class="string">&quot;wildcardEscapeClause&quot;</span>, wildcardEscapeClause);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// set default properties</span></span><br><span class="line">                properties.put(<span class="string">&quot;limitBefore&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitAfter&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitBetween&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitBeforeNativeQuery&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;limitAfterNativeQuery&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;blobType&quot;</span>, <span class="string">&quot;BLOB&quot;</span>);</span><br><span class="line">                properties.put(<span class="string">&quot;boolValue&quot;</span>, <span class="string">&quot;TRUE&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (databaseType != <span class="literal">null</span>) &#123;</span><br><span class="line">                    properties.load(getResourceAsStream(pathToEngineDbProperties()));</span><br><span class="line">                &#125;</span><br><span class="line">              </span><br><span class="line">                <span class="comment">//Mybatis相关的配置</span></span><br><span class="line">                <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> initMybatisConfiguration(environment, reader, properties);</span><br><span class="line">                sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(configuration);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableException</span>(<span class="string">&quot;Error while building ibatis SqlSessionFactory: &quot;</span> + e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtil.closeSilently(inputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//ProcessEngineConfigurationImpl.getMyBatisXmlConfigurationStream();</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getMyBatisXmlConfigurationStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getResourceAsStream(mybatisMappingFile);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//代码往上翻</span></span><br><span class="line">  <span class="comment">//构造器中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProcessEngineConfigurationImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        mybatisMappingFile = DEFAULT_MYBATIS_MAPPING_FILE;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//其中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_MYBATIS_MAPPING_FILE</span> <span class="operator">=</span> <span class="string">&quot;org/flowable/db/mapping/mappings.xml&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>查找映射文件 mappings.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;ByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;VariableByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;JobByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRefTypeHandler&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;BatchByteArrayRefTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;ByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;VariableByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;JobByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;BatchByteArrayRefTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.flowable.common.engine.impl.persistence.entity.ByteArrayRef&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/ChangeTenantBpmn.xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Attachment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Comment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/DeadLetterJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Deployment.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Execution.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ActivityInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricActivityInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricDetail.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/HistoricProcessInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/variable/service/db/mapping/entity/HistoricVariableInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/HistoricTaskInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/HistoricTaskLogEntry.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/identitylink/service/db/mapping/entity/HistoricIdentityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/entitylink/service/db/mapping/entity/HistoricEntityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/HistoryJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/identitylink/service/db/mapping/entity/IdentityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/entitylink/service/db/mapping/entity/EntityLink.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/Job.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Model.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ProcessDefinition.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/ProcessDefinitionInfo.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/Property.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/ByteArray.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/common.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/Resource.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/SuspendedJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/ExternalWorkerJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/common/db/mapping/entity/TableData.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/task/service/db/mapping/entity/Task.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/job/service/db/mapping/entity/TimerJob.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/variable/service/db/mapping/entity/VariableInstance.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/eventsubscription/service/db/mapping/entity/EventSubscription.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/db/mapping/entity/EventLogEntry.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/batch/service/db/mapping/entity/Batch.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/flowable/batch/service/db/mapping/entity/BatchPart.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ProcessEnginConfigurationImpl.init()中的代码</span></span><br><span class="line">initDataManagers(); <span class="comment">//下面拿这个举例3</span></span><br><span class="line"><span class="comment">//-&gt;&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initDataManagers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.initDataManagers();</span><br><span class="line">        <span class="keyword">if</span> (attachmentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            attachmentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisAttachmentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (commentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            commentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisCommentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deploymentDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//下面拿这个查看</span></span><br><span class="line">            deploymentDataManager = <span class="keyword">new</span> <span class="title class_">MybatisDeploymentDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (eventLogEntryDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            eventLogEntryDataManager = <span class="keyword">new</span> <span class="title class_">MybatisEventLogEntryDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (executionDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            executionDataManager = <span class="keyword">new</span> <span class="title class_">MybatisExecutionDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dbSqlSessionFactory != <span class="literal">null</span> &amp;&amp; executionDataManager <span class="keyword">instanceof</span> AbstractDataManager) &#123;</span><br><span class="line">            dbSqlSessionFactory.addLogicalEntityClassMapping(<span class="string">&quot;execution&quot;</span>, ((AbstractDataManager) executionDataManager).getManagedEntityClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicActivityInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicActivityInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricActivityInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (activityInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            activityInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisActivityInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicDetailDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicDetailDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricDetailDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (historicProcessInstanceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            historicProcessInstanceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisHistoricProcessInstanceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modelDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            modelDataManager = <span class="keyword">new</span> <span class="title class_">MybatisModelDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (processDefinitionDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            processDefinitionDataManager = <span class="keyword">new</span> <span class="title class_">MybatisProcessDefinitionDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (processDefinitionInfoDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            processDefinitionInfoDataManager = <span class="keyword">new</span> <span class="title class_">MybatisProcessDefinitionInfoDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resourceDataManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            resourceDataManager = <span class="keyword">new</span> <span class="title class_">MybatisResourceDataManager</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//--&gt;MybatisDeploymentDataManager，这个类相当于mybatis中的mapper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisDeploymentDataManager</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessDataManager</span>&lt;DeploymentEntity&gt; <span class="keyword">implements</span> <span class="title class_">DeploymentDataManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MybatisDeploymentDataManager</span><span class="params">(ProcessEngineConfigurationImpl processEngineConfiguration)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(processEngineConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">DeploymentEntity</span>&gt; getManagedEntityClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> DeploymentEntityImpl.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DeploymentEntity <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DeploymentEntityImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">findDeploymentCountByQueryCriteria</span><span class="params">(DeploymentQueryImpl deploymentQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) getDbSqlSession().selectOne(<span class="string">&quot;selectDeploymentCountByQueryCriteria&quot;</span>, deploymentQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Deployment&gt; <span class="title function_">findDeploymentsByQueryCriteria</span><span class="params">(DeploymentQueryImpl deploymentQuery)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;selectDeploymentsByQueryCriteria&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().selectList(query, deploymentQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getDeploymentResourceNames</span><span class="params">(String deploymentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().getSqlSession().selectList(<span class="string">&quot;selectResourceNamesByDeploymentId&quot;</span>, deploymentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Deployment&gt; <span class="title function_">findDeploymentsByNativeQuery</span><span class="params">(Map&lt;String, Object&gt; parameterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getDbSqlSession().selectListWithRawParameter(<span class="string">&quot;selectDeploymentByNativeQuery&quot;</span>, parameterMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">findDeploymentCountByNativeQuery</span><span class="params">(Map&lt;String, Object&gt; parameterMap)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Long) getDbSqlSession().selectOne(<span class="string">&quot;selectDeploymentCountByNativeQuery&quot;</span>, parameterMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="processengine各种方法对比">ProcessEngine各种方法对比</h2>
<ul>
<li>ProcessEngines.getDefaultProcessEngine();的方式</li>
</ul>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line"> * Initializes all process engines that can be found on the classpath for resources &lt;code&gt;flowable.cfg.xml&lt;/code&gt; (plain Flowable style configuration) and for resources</span><br><span class="line"> * &lt;code&gt;flowable-context.xml&lt;/code&gt; (Spring style configuration).</span><br><span class="line"> */</span><br><span class="line">public static synchronized void init() &#123;</span><br><span class="line">    if (!isInitialized()) &#123;</span><br><span class="line">        if (processEngines == null) &#123;</span><br><span class="line">            // Create new map to store process-engines if current map is null</span><br><span class="line">            processEngines = new HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader classLoader = ReflectUtil.getClassLoader();</span><br><span class="line">        Enumeration&lt;URL&gt; resources = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            resources = classLoader.getResources(&quot;flowable.cfg.xml&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new FlowableIllegalArgumentException(&quot;problem retrieving flowable.cfg.xml resources on the classpath: &quot; + System.getProperty(&quot;java.class.path&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Remove duplicated configuration URL&#x27;s using set. Some</span><br><span class="line">        // classloaders may return identical URL&#x27;s twice, causing duplicate</span><br><span class="line">        // startups</span><br><span class="line">        Set&lt;URL&gt; configUrls = new HashSet&lt;&gt;();</span><br><span class="line">        while (resources.hasMoreElements()) &#123;</span><br><span class="line">            configUrls.add(resources.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        for (URL resource : configUrls) &#123;</span><br><span class="line">            LOGGER.info(&quot;Initializing process engine using configuration &#x27;&#123;&#125;&#x27;&quot;, resource);</span><br><span class="line">            initProcessEngineFromResource(resource); //注意这个</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            resources = classLoader.getResources(&quot;flowable-context.xml&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new FlowableIllegalArgumentException(&quot;problem retrieving flowable-context.xml resources on the classpath: &quot; + System.getProperty(&quot;java.class.path&quot;), e);</span><br><span class="line">        &#125;</span><br><span class="line">        while (resources.hasMoreElements()) &#123;</span><br><span class="line">            URL resource = resources.nextElement();</span><br><span class="line">            LOGGER.info(&quot;Initializing process engine using Spring configuration &#x27;&#123;&#125;&#x27;&quot;, resource);</span><br><span class="line">            initProcessEngineFromSpringResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setInitialized(true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        LOGGER.info(&quot;Process engines already initialized&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以通过Spring配置文件的方式</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initProcessEngineFromResource(resource); <span class="comment">//注意这个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> EngineInfo <span class="title function_">initProcessEngineFromResource</span><span class="params">(URL resourceUrl)</span> &#123;</span><br><span class="line">        <span class="type">EngineInfo</span> <span class="variable">processEngineInfo</span> <span class="operator">=</span> processEngineInfosByResourceUrl.get(resourceUrl.toString());</span><br><span class="line">        <span class="comment">// if there is an existing process engine info</span></span><br><span class="line">        <span class="keyword">if</span> (processEngineInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// remove that process engine from the member fields</span></span><br><span class="line">            processEngineInfos.remove(processEngineInfo);</span><br><span class="line">            <span class="keyword">if</span> (processEngineInfo.getException() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">processEngineName</span> <span class="operator">=</span> processEngineInfo.getName();</span><br><span class="line">                processEngines.remove(processEngineName);</span><br><span class="line">                processEngineInfosByName.remove(processEngineName);</span><br><span class="line">            &#125;</span><br><span class="line">            processEngineInfosByResourceUrl.remove(processEngineInfo.getResourceUrl());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceUrlString</span> <span class="operator">=</span> resourceUrl.toString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;initializing process engine for resource &#123;&#125;&quot;</span>, resourceUrl);</span><br><span class="line">            <span class="comment">//注意这个</span></span><br><span class="line">            <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> buildProcessEngine(resourceUrl);</span><br><span class="line">            <span class="type">String</span> <span class="variable">processEngineName</span> <span class="operator">=</span> processEngine.getName();</span><br><span class="line">            LOGGER.info(<span class="string">&quot;initialised process engine &#123;&#125;&quot;</span>, processEngineName);</span><br><span class="line">            processEngineInfo = <span class="keyword">new</span> <span class="title class_">EngineInfo</span>(processEngineName, resourceUrlString, <span class="literal">null</span>);</span><br><span class="line">            processEngines.put(processEngineName, processEngine);</span><br><span class="line">            processEngineInfosByName.put(processEngineName, processEngineInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">&quot;Exception while initializing process engine: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">            processEngineInfo = <span class="keyword">new</span> <span class="title class_">EngineInfo</span>(<span class="literal">null</span>, resourceUrlString, ExceptionUtils.getStackTrace(e));</span><br><span class="line">        &#125;</span><br><span class="line">        processEngineInfosByResourceUrl.put(resourceUrlString, processEngineInfo);</span><br><span class="line">        processEngineInfos.add(processEngineInfo);</span><br><span class="line">        <span class="keyword">return</span> processEngineInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">buildProcessEngine(resourceUrl);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProcessEngine <span class="title function_">buildProcessEngine</span><span class="params">(URL resource)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = resource.openStream();</span><br><span class="line">            <span class="type">ProcessEngineConfiguration</span> <span class="variable">processEngineConfiguration</span> <span class="operator">=</span> ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream);</span><br><span class="line">            <span class="keyword">return</span> processEngineConfiguration.buildProcessEngine();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowableIllegalArgumentException</span>(<span class="string">&quot;couldn&#x27;t open resource stream: &quot;</span> + e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtil.closeSilently(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_2</title>
    <url>/2022/05/14/study/flowable/boge_blbl/02-advance_2/</url>
    <content><![CDATA[<h2 id="service服务接口">Service服务接口</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514233449225.png"
alt="image-20220514233449225" />
<figcaption aria-hidden="true">image-20220514233449225</figcaption>
</figure>
<ul>
<li>各个Service类 RepositoryService 资源管理类，流程定义、部署、文件
RuntimeService 流程运行管理类，运行过程中（执行） TaskService 任务管理类
HistoryService 历史管理类 ManagerService 引擎管理类</li>
</ul>
<h2 id="flowable图标">Flowable图标</h2>
<p>BPMN2.0定义的一些图标</p>
<ul>
<li>时间</li>
</ul>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514233856102.png"
alt="image-20220514233856102" />
<figcaption aria-hidden="true">image-20220514233856102</figcaption>
</figure>
<ul>
<li>活动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514234008644.png"
alt="image-20220514234008644" /></li>
<li>网关 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514234018899.png"
alt="image-20220514234018899" /></li>
<li></li>
</ul>
<h2 id="流程部署深入解析">流程部署深入解析</h2>
<ul>
<li><p>使用eclipse打包部署(没有eclipse环境，所以这里只有截图)
将两个流程，打包为bar文件，然后放到项目resources文件夹中 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235033874.png"
alt="image-20220514235033874" /><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235051403.png"
alt="image-20220514235051403" /></p></li>
<li><p>这里是为了测试一次部署多个流程（定义，图） 代码如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235134845.png"
alt="image-20220514235134845" /></p></li>
<li><p>部署完成后查看表结构</p>
<ul>
<li><p>act_re_procdef</p>
<p>部署id一样 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235300573.png"
alt="image-20220514235300573" /></p></li>
<li><p>act_re_deployment <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235344635.png"
alt="image-20220514235344635" /></p></li>
<li><p>结论：部署和定义是1对多的关系</p></li>
</ul></li>
<li><p>每次部署所涉及到的资源文件 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235449058.png"
alt="image-20220514235449058" /></p></li>
<li><p>涉及到的三张表</p>
<ul>
<li><p>act_ge_bytearray <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220514235610659.png"
alt="image-20220514235610659" /></p></li>
<li><p>act_re_procdef category--&gt;xml中的namespace
name--&gt;定义时起的名称 key_---&gt;xml中定义的id
resource_name---&gt;xml文件名称 dgrm_resource_name--&gt;生成图片名称
suspension_state --&gt; 是否被挂起</p>
<p>tenant_id -- &gt;谁部署的流程</p></li>
<li><p>act_re_deployment name_部署名</p></li>
</ul></li>
<li><p>代码 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000033931.png"
alt="image-20220515000033931" /></p></li>
<li><p>主要源码 DeployCmd.class <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000146834.png"
alt="image-20220515000146834" /></p></li>
<li><p>DeploymentEntityManagerImpl.java <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000232452.png"
alt="image-20220515000232452" /></p></li>
<li><p>insert()方法 插入并执行资源 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000308747.png"
alt="image-20220515000308747" /> 点开里面的insert方法 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000330794.png"
alt="image-20220515000330794" /></p></li>
<li><p>AbstractDataManger.insert() <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515000405402.png"
alt="image-20220515000405402" /></p></li>
<li><p>回到test类，deploy()方法最终就是完成了表结构的数据的操作（通过Mybatis）</p></li>
</ul>
<h2 id="流程的挂起和激活">流程的挂起和激活</h2>
<ul>
<li><p>xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span><br><span class="line">             xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">             xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="line">             xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span><br><span class="line">             xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span><br><span class="line">             xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span><br><span class="line">             xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span><br><span class="line">             typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span><br><span class="line">             expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span><br><span class="line">             targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--id process key--&gt;</span><br><span class="line">    &lt;process id=<span class="string">&quot;holidayRequest&quot;</span> name=<span class="string">&quot;请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;startEvent id=<span class="string">&quot;startEvent&quot;</span>/&gt;</span><br><span class="line">        &lt;!--sequenceFlow表示的是线条箭头--&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;startEvent&quot;</span> targetRef=<span class="string">&quot;approveTask&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;userTask id=<span class="string">&quot;approveTask&quot;</span> name=<span class="string">&quot;同意或者拒绝请假&quot;</span> flowable:assignee=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;approveTask&quot;</span> targetRef=<span class="string">&quot;decision&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--网关--&gt;</span><br><span class="line">        &lt;exclusiveGateway id=<span class="string">&quot;decision&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;decision&quot;</span> targetRef=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span><br><span class="line">            &lt;!--条件--&gt;</span><br><span class="line">            &lt;conditionExpression xsi:type=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            &lt;/conditionExpression&gt;</span><br><span class="line">        &lt;/sequenceFlow&gt;</span><br><span class="line">        &lt;sequenceFlow  sourceRef=<span class="string">&quot;decision&quot;</span> targetRef=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span><br><span class="line">            &lt;!--条件--&gt;</span><br><span class="line">            &lt;conditionExpression xsi:type=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            &lt;/conditionExpression&gt;</span><br><span class="line">        &lt;/sequenceFlow&gt;</span><br><span class="line"></span><br><span class="line">        &lt;serviceTask id=<span class="string">&quot;externalSystemCall&quot;</span> name=<span class="string">&quot;Enter holidays in external system&quot;</span></span><br><span class="line">                     flowable:class=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;externalSystemCall&quot;</span> targetRef=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;userTask id=<span class="string">&quot;holidayApprovedTask&quot;</span> name=<span class="string">&quot;Holiday approved&quot;</span> flowable:assignee=<span class="string">&quot;lisi&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;holidayApprovedTask&quot;</span> targetRef=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--发送一个邮件--&gt;</span><br><span class="line">        &lt;serviceTask id=<span class="string">&quot;sendRejectionMail&quot;</span> name=<span class="string">&quot;Send out rejection email&quot;</span></span><br><span class="line">                     flowable:class=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span><br><span class="line">        &lt;sequenceFlow sourceRef=<span class="string">&quot;sendRejectionMail&quot;</span> targetRef=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/process&gt;</span><br><span class="line"></span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure>
<p>部署的流程默认情况下为激活，如果不想使用该定义的流程，那么可以挂起该流程，当然该流程定义下边所有的流程实例全部暂停。</p></li>
<li><p>流程定义被定义为挂起，该流程定义将不允许启动新的流程实例，且该流程定义下所有的流程实例将被全部挂起暂停执行</p></li>
<li><p>表结构
act_re_procdef表中的SUSPENSION_STATE字段来表示1激活，2挂起</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515075535507.png"
alt="image-20220515075535507" />
<figcaption aria-hidden="true">image-20220515075535507</figcaption>
</figure></li>
<li><p>挂起流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSuspend</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="comment">//找到流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.</span><br><span class="line">            createProcessDefinitionQuery().processDefinitionId(<span class="string">&quot;holidayRequest:1:7503&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//当前流程定义的状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">suspended</span> <span class="operator">=</span> processDefinition.isSuspended();</span><br><span class="line">    <span class="keyword">if</span> (suspended) &#123;</span><br><span class="line">        <span class="comment">//如果挂起则激活</span></span><br><span class="line">        System.out.println(<span class="string">&quot;激活流程(定义)&quot;</span> + processDefinition.getId() + <span class="string">&quot;name:&quot;</span> + processDefinition</span><br><span class="line">                .getName());</span><br><span class="line">        repositoryService.activateProcessDefinitionById(processDefinition.getId());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果激活则挂起</span></span><br><span class="line">        System.out.println(<span class="string">&quot;挂起流程(定义)&quot;</span> + processDefinition.getId() + <span class="string">&quot;name:&quot;</span> + processDefinition</span><br><span class="line">                .getName());</span><br><span class="line">        repositoryService.suspendProcessDefinitionById(processDefinition.getId());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515080404847.png"
alt="image-20220515080404847" /></p></li>
<li><p>如果这时启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();<span class="comment">//configuration.buildProcessEngine();</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceByKey(</span><br><span class="line">            <span class="string">&quot;holidayRequest&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span> + holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span> + holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>则会出现异常报错信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">org.flowable.common.engine.api.FlowableException: Cannot start process instance. Process definition 请假流程 (id = holidayRequest:1:7503) is suspended</span><br></pre></td></tr></table></figure></li>
<li><p>此时再运行一次testSuspend()，将流程定义激活，此时数据库act_re_procdef表中的SUSPENSION_STATE字段值为1
再运行testRunProcess()，流程正常启动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515081034659.png"
alt="image-20220515081034659" /></p></li>
</ul>
<h2 id="启动流程的原理">启动流程的原理</h2>
<ul>
<li><p>流程启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();<span class="comment">//configuration.buildProcessEngine();</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;ly05150817部署的请假流程&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    <span class="comment">//通过部署id查找流程定义</span></span><br><span class="line">    <span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery().</span><br><span class="line">            deploymentId(deploy.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">  </span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    <span class="comment">//这边模拟表单数据(表单数据有多种处理方式，这只是其中一种)</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;nrOfHolidays&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;工作累了想出去玩&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">holidayRequest</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            processDefinition.getId(), <span class="string">&quot;order1000&quot;</span>, map);</span><br><span class="line">    System.out.println(<span class="string">&quot;流程定义的id:&quot;</span> + holidayRequest.getProcessDefinitionId());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前活跃id:&quot;</span> + holidayRequest.getActivityId());</span><br><span class="line">    System.out.println(<span class="string">&quot;流程运行id:&quot;</span> + holidayRequest.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>涉及到的表：(HI中也有对应的表)</p>
<ul>
<li><p>ACT_RU_EXECUTION 运行时流程执行实例
当启动一个实例的时候，这里会有两个流程执行</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084231981.png"
alt="image-20220515084231981" />
<figcaption aria-hidden="true">image-20220515084231981</figcaption>
</figure></li>
<li><p>ACT_RU_IDENTITYLINK 运行时用户关系信息</p>
<ul>
<li><p>记录流程实例当前所处的节点</p></li>
<li><p>数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084517415.png"
alt="image-20220515084517415" /></p></li>
<li><p>有几种任务处理人的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdentityLinkType</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSIGNEE</span> <span class="operator">=</span> <span class="string">&quot;assignee&quot;</span>; <span class="comment">//指派</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CANDIDATE</span> <span class="operator">=</span> <span class="string">&quot;candidate&quot;</span>;<span class="comment">//候选</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OWNER</span> <span class="operator">=</span> <span class="string">&quot;owner&quot;</span>;<span class="comment">//拥有者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STARTER</span> <span class="operator">=</span> <span class="string">&quot;starter&quot;</span>;<span class="comment">//启动者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARTICIPANT</span> <span class="operator">=</span> <span class="string">&quot;participant&quot;</span>;<span class="comment">//参与者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REACTIVATOR</span> <span class="operator">=</span> <span class="string">&quot;reactivator&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>ACT_RU_TASK 运行时任务表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084822445.png"
alt="image-20220515084822445" /></p></li>
<li><p>ACT_RU_VARIABLE 运行时变量表</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515084910997.png"
alt="image-20220515084910997" />
<figcaption aria-hidden="true">image-20220515084910997</figcaption>
</figure></li>
</ul></li>
</ul>
<h2 id="处理流程的原理">处理流程的原理</h2>
<ul>
<li><p>流程处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleted</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//获取当前流程实例绑定的流程变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> processVariables.get(key);</span><br><span class="line">        System.out.println(<span class="string">&quot;key:&quot;</span>+key+<span class="string">&quot;--value:&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    processVariables.put(<span class="string">&quot;approved&quot;</span>,<span class="literal">true</span>);<span class="comment">//同意</span></span><br><span class="line">    processVariables.put(<span class="string">&quot;description&quot;</span>,<span class="string">&quot;我被修改了&quot;</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>这里用的是之前的xml，所以应该给一个服务监听类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallExternalSystemDelegate</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您的请求通过了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>任务处理后，这里添加了一个变量，且修改了变量description <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091219370.png"
alt="image-20220515091219370" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091248276.png"
alt="image-20220515091248276" /></p>
<ul>
<li>可以通过流程变量，它可以在整个流程过程中流转的[注意，这里流程结束后流程变量会不存在的，但是act_hi_variinst里面可以看到流程变量实例]
//我感觉应该用表单替代</li>
</ul></li>
<li><p>act_ru_task和act_ru_identitylink</p>
<ul>
<li>两者区别
<ul>
<li><strong>ACT _ RU _
IDENTITYLINK</strong>：此表存储有关用户或组的数据及其与（流程/案例/等）实例相关的角色。该表也被其他需要身份链接的引擎使用。【显示全部，包括已完成】</li>
<li><strong>ACT _ RU _
TASK</strong>：此表包含一个正在运行的实例的每个未完成用户任务的条目。然后在查询用户的任务列表时使用此表。【这里只显示运行中】</li>
</ul></li>
<li>act_ru_task 记录当前实例所运行的当前节点的信息 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091649172.png"
alt="image-20220515091649172" /></li>
<li>act_ru_identitylink <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091833571.png"
alt="image-20220515091833571" /></li>
</ul></li>
<li><p>act_ru_execution这个表的数据不会有变动 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515091928802.png"
alt="image-20220515091928802" /></p></li>
</ul>
<h2 id="流程结束的原理">流程结束的原理</h2>
<ul>
<li><p>流程走完</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompleted1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">                .processInstanceId(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">                .taskAssignee(<span class="string">&quot;lisi&quot;</span>)</span><br><span class="line">                .singleResult();</span><br><span class="line">        <span class="comment">//获取当前流程实例绑定的流程变量</span></span><br><span class="line">        Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">        Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> processVariables.get(key);</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span> + key + <span class="string">&quot;--value:&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            processVariables.put(&quot;approved&quot;,true);//拒绝</span></span><br><span class="line"><span class="comment">            processVariables.put(&quot;description&quot;,&quot;我被修改了&quot;);*/</span></span><br><span class="line">        taskService.complete(task.getId(), processVariables);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时跟流程相关的数据都会被清空掉 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093046925.png"
alt="image-20220515093046925" /></p></li>
<li><p>历史数据</p>
<ul>
<li><p>变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093214154.png"
alt="image-20220515093214154" /></p></li>
<li><p>任务流转历史 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093316108.png"
alt="image-20220515093316108" /></p></li>
<li><p>流程实例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093350660.png"
alt="image-20220515093350660" /></p></li>
<li><p>涉及到的用户 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093451995.png"
alt="image-20220515093451995" /></p></li>
<li><p>流程活动</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515093538334.png"
alt="image-20220515093538334" />
<figcaption aria-hidden="true">image-20220515093538334</figcaption>
</figure></li>
<li></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_3</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_3/</url>
    <content><![CDATA[<h2 id="任务分配-uel表达式">任务分配-uel表达式</h2>
<p>通过变量指定来进行分配</p>
<ul>
<li><p>首先绘制流程图（定义） <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100239983.png"
alt="image-20220515100239983" /></p>
<ul>
<li>变量处理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100603738.png"
alt="image-20220515100603738" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515100629221.png"
alt="image-20220515100629221" /></li>
</ul></li>
<li><p>之后将xml文件导出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> exporter=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> exporterVersion=<span class="string">&quot;6.7.2&quot;</span>&gt;</span><br><span class="line">  &lt;process id=<span class="string">&quot;holiday-new&quot;</span> name=<span class="string">&quot;新请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;documentation&gt;<span class="keyword">new</span>-description&lt;/documentation&gt;</span><br><span class="line">    &lt;startEvent id=<span class="string">&quot;startEvent1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;&lt;/startEvent&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> name=<span class="string">&quot;创建请假流程&quot;</span> flowable:assignee=<span class="string">&quot;$&#123;assignee0&#125;&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> name=<span class="string">&quot;审批请假流程&quot;</span> flowable:assignee=<span class="string">&quot;$&#123;assignee1&#125;&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;modeler:initiator-can-complete xmlns:modeler=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;&lt;![CDATA[<span class="literal">false</span>]]&gt;&lt;/modeler:initiator-can-complete&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> sourceRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> targetRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;endEvent id=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/endEvent&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> sourceRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> targetRef=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> sourceRef=<span class="string">&quot;startEvent1&quot;</span> targetRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;bpmndi:BPMNDiagram id=<span class="string">&quot;BPMNDiagram_holiday-new&quot;</span>&gt;</span><br><span class="line">    &lt;bpmndi:BPMNPlane bpmnElement=<span class="string">&quot;holiday-new&quot;</span> id=<span class="string">&quot;BPMNPlane_holiday-new&quot;</span>&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;startEvent1&quot;</span> id=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;30.0&quot;</span> width=<span class="string">&quot;30.0&quot;</span> x=<span class="string">&quot;100.0&quot;</span> y=<span class="string">&quot;145.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> id=<span class="string">&quot;BPMNShape_sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;225.0&quot;</span> y=<span class="string">&quot;120.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> id=<span class="string">&quot;BPMNShape_sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;370.0&quot;</span> y=<span class="string">&quot;120.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span> id=<span class="string">&quot;BPMNShape_sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;28.0&quot;</span> width=<span class="string">&quot;28.0&quot;</span> x=<span class="string">&quot;555.0&quot;</span> y=<span class="string">&quot;146.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;14.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;14.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;469.94999999997356&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;555.0&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> flowable:sourceDockerX=<span class="string">&quot;15.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;15.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;129.94999928606217&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;224.99999999995185&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;324.9499999999907&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;369.9999999999807&quot;</span> y=<span class="string">&quot;160.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">    &lt;/bpmndi:BPMNPlane&gt;</span><br><span class="line">  &lt;/bpmndi:BPMNDiagram&gt;</span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>流程定义的部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;新请假流程.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程的启动（在流程启动时就已经处理好了各个节点的处理人）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess2</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="comment">//启动流程时，发起人就已经设置好了</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(<span class="string">&quot;holiday-new:1:4&quot;</span>,variables);</span><br><span class="line">    System.out.println(processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看数据库表数据</p>
<ul>
<li><p>act_ru_variable</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101806631.png"
alt="image-20220515101806631" /><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101906703.png"
alt="image-20220515101906703" /></p></li>
<li><p>act_ru_task <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515101840975.png"
alt="image-20220515101840975" /></p></li>
</ul></li>
<li><p>让张三完成处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时观察task和identity这两张表</p>
<p>任务变成了李四，而identity多了张三的记录<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515102508734.png"
alt="image-20220515102508734" /></p></li>
</ul></li>
</ul>
<h2 id="任务分配-监听器分配">任务分配-监听器分配</h2>
<ul>
<li><p>首先，java代码中，自定义一个监听器
【注意，这里给任务分配assignee是在create中分配才是有用的】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.TaskListener;</span><br><span class="line"><span class="keyword">import</span> org.flowable.task.service.delegate.DelegateTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTaskListener</span> <span class="keyword">implements</span> <span class="title class_">TaskListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器触发的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delegateTask</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(DelegateTask delegateTask)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;MyTaskListener触发：&quot;</span>+delegateTask</span><br><span class="line">                .getName());</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;创建请假流程&quot;</span>.equals(delegateTask.getName())</span><br><span class="line">        &amp;&amp;<span class="string">&quot;create&quot;</span>.equals(delegateTask.getEventName()))&#123;</span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            delegateTask.setAssignee(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>两个节点走的是同一个监听器</p></li>
<li><p>xml定义中任务监听器的配置(两个节点都配置了) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515103504436.png"
alt="image-20220515103504436" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> xmlns:bpmndi=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> xmlns:omgdc=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> xmlns:omgdi=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> typeLanguage=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> expressionLanguage=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> targetNamespace=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> exporter=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> exporterVersion=<span class="string">&quot;6.7.2&quot;</span>&gt;</span><br><span class="line">  &lt;process id=<span class="string">&quot;holiday-new&quot;</span> name=<span class="string">&quot;新请假流程&quot;</span> isExecutable=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;documentation&gt;<span class="keyword">new</span>-description&lt;/documentation&gt;</span><br><span class="line">    &lt;startEvent id=<span class="string">&quot;startEvent1&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;&lt;/startEvent&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> name=<span class="string">&quot;创建请假流程&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;flowable:taskListener event=<span class="string">&quot;create&quot;</span> class=<span class="string">&quot;org.flowable.listener.MyTaskListener&quot;</span>&gt;&lt;/flowable:taskListener&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;userTask id=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> name=<span class="string">&quot;审批请假流程&quot;</span> flowable:formFieldValidation=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">      &lt;extensionElements&gt;</span><br><span class="line">        &lt;flowable:taskListener event=<span class="string">&quot;create&quot;</span> class=<span class="string">&quot;org.flowable.listener.MyTaskListener&quot;</span>&gt;&lt;/flowable:taskListener&gt;</span><br><span class="line">      &lt;/extensionElements&gt;</span><br><span class="line">    &lt;/userTask&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> sourceRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> targetRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> sourceRef=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> targetRef=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;sequenceFlow id=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> sourceRef=<span class="string">&quot;startEvent1&quot;</span> targetRef=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;&lt;/sequenceFlow&gt;</span><br><span class="line">    &lt;endEvent id=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;&lt;/endEvent&gt;</span><br><span class="line">  &lt;/process&gt;</span><br><span class="line">  &lt;bpmndi:BPMNDiagram id=<span class="string">&quot;BPMNDiagram_holiday-new&quot;</span>&gt;</span><br><span class="line">    &lt;bpmndi:BPMNPlane bpmnElement=<span class="string">&quot;holiday-new&quot;</span> id=<span class="string">&quot;BPMNPlane_holiday-new&quot;</span>&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;startEvent1&quot;</span> id=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;30.0&quot;</span> width=<span class="string">&quot;30.0&quot;</span> x=<span class="string">&quot;100.0&quot;</span> y=<span class="string">&quot;115.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span> id=<span class="string">&quot;BPMNShape_sid-8D901410-5BD7-4EED-B988-5E40D12298C7&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;195.0&quot;</span> y=<span class="string">&quot;90.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span> id=<span class="string">&quot;BPMNShape_sid-5EB8F68B-7876-42AF-98E1-FCA27F99D8CE&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;80.0&quot;</span> width=<span class="string">&quot;100.0&quot;</span> x=<span class="string">&quot;370.0&quot;</span> y=<span class="string">&quot;90.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNShape bpmnElement=<span class="string">&quot;sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span> id=<span class="string">&quot;BPMNShape_sid-15CAD0D3-7F8B-404C-9346-A8D2A456D47B&quot;</span>&gt;</span><br><span class="line">        &lt;omgdc:Bounds height=<span class="string">&quot;28.0&quot;</span> width=<span class="string">&quot;28.0&quot;</span> x=<span class="string">&quot;570.0&quot;</span> y=<span class="string">&quot;116.0&quot;</span>&gt;&lt;/omgdc:Bounds&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNShape&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-001CA567-6169-4F8A-A0E5-010721D52508&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;14.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;14.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;469.9499999999809&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;570.0&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-0A4A52F2-ECF6-44B2-AA41-F926AA7F5932&quot;</span> flowable:sourceDockerX=<span class="string">&quot;15.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;15.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;129.94999891869114&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;195.0&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">      &lt;bpmndi:BPMNEdge bpmnElement=<span class="string">&quot;sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> id=<span class="string">&quot;BPMNEdge_sid-631EFFB0-795A-4777-B49E-CF7D015BFF15&quot;</span> flowable:sourceDockerX=<span class="string">&quot;50.0&quot;</span> flowable:sourceDockerY=<span class="string">&quot;40.0&quot;</span> flowable:targetDockerX=<span class="string">&quot;50.0&quot;</span> flowable:targetDockerY=<span class="string">&quot;40.0&quot;</span>&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;294.95000000000005&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">        &lt;omgdi:waypoint x=<span class="string">&quot;369.99999999993753&quot;</span> y=<span class="string">&quot;130.0&quot;</span>&gt;&lt;/omgdi:waypoint&gt;</span><br><span class="line">      &lt;/bpmndi:BPMNEdge&gt;</span><br><span class="line">    &lt;/bpmndi:BPMNPlane&gt;</span><br><span class="line">  &lt;/bpmndi:BPMNDiagram&gt;</span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>之后将流程再重新部署一遍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> configuration.buildProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;新请假流程.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请求流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRunProcess3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-new:1:4&quot;</span>);</span><br><span class="line">    System.out.println(processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>控制台查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104113169.png"
alt="image-20220515104113169" /></p></li>
<li><p>数据库查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104240526.png"
alt="image-20220515104240526" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104248454.png"
alt="image-20220515104248454" /></p></li>
<li><p>让小明处理任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().taskAssignee(<span class="string">&quot;小明&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库查看 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515104524706.png"
alt="image-20220515104524706" /></p></li>
</ul>
<h2 id="流程变量">流程变量</h2>
<ul>
<li><p>全局变量（跟流程有关）和局部变量（跟task有关）</p></li>
<li><p>一个流程定义，可以运行多个流程实例； <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105403272.png"
alt="image-20220515105403272" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105511486.png"
alt="image-20220515105511486" /> 当用到子流程时，就会出现一对多的关系
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515105549313.png"
alt="image-20220515105549313" /></p></li>
<li><p>全局变量被重复赋值时后面会覆盖前面</p></li>
<li><p>流程图的创建 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515110130347.png"
alt="image-20220515110130347" /> 这里还设置了条件，详见xm文件
sequenceFlow.conditionExpression 属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;evection&quot;</span> <span class="attr">name</span>=<span class="string">&quot;出差申请单&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>出差申请单<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建出差申请单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee0&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee1&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee2&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">name</span>=<span class="string">&quot;财务审批</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;assignee3&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_evection&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;evection&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_evection&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;75.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-BFB6D699-D3B5-4C6C-A0F2-00584EAAF207&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-D10C4F45-B429-4E24-B474-5354F1661645&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;320.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-35AB278B-E16D-4CEC-98B1-FBB139FB5AC1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;50.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4C26DA5C-A4CC-48A5-ABA9-853E82FC2413&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;210.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B3A1D5D4-E1FD-4599-A482-762C7C617844&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;236.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-EE410204-0433-4FE6-A958-48585A2A7B4B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.9499984899576&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-752CE2F2-40EC-4140-AF60-BEACD06D43A7&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;274.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;320.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B12793A8-FC65-408C-81AD-EC81FEEF6E46&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;419.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;124.0085106382979&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;215.95744680851067&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-6C0130A8-E078-486B-9B6E-D8C14BBCD8EF&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;654.9499999998701&quot;</span> <span class="attr">y</span>=<span class="string">&quot;250.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;250.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-BE043A23-0F38-4ED9-A0D1-F4C2F7908A50&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;129.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;605.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;210.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-F85B2D44-1B42-4748-AB35-123C7CCD2F75&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;419.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;555.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>流程进行部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程的部署</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取ProcessEngine对象</span></span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//获取服务(repository，流程定义)</span></span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;出差申请单.bpmn20.xml&quot;</span>)</span><br><span class="line">            .name(<span class="string">&quot;请假流程&quot;</span>) <span class="comment">//流程名</span></span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署id&quot;</span> + deploy.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;部署名&quot;</span> + deploy.getName());</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>流程运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流程实例的定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;assignee0&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee1&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee2&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;assignee3&quot;</span>,<span class="string">&quot;赵财务&quot;</span>);</span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.</span><br><span class="line">            startProcessInstanceById(<span class="string">&quot;evection:1:4&quot;</span>, variables);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>//这时候节点走到张三了，让张三处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String,Object&gt; processVariables=task.getProcessVariables();</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下面修改num的值，修改之前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515113105628.png"
alt="image-20220515113105628" /></p>
<ul>
<li><p>全局变量的查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine(); </span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables() <span class="comment">//注意，这个一定要加的不然获取不到全局变量</span></span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//这里只能获取到任务的局部变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet1 = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet1)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables() <span class="comment">//注意，这个一定要加的不然获取不到全局变量</span></span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<p>按照视频的说法，这里错了，应该是会多了5条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515120415965.png"
alt="image-20220515120415965" /></p></li>
</ul></li>
<li><p>局部变量的再次测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//流程还没开始运行的情况下，取到的是全局变量</span></span><br><span class="line">    Map&lt;String, Object&gt; processVariables = task.getProcessVariables();</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--start&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keySet = processVariables.keySet();</span><br><span class="line">    <span class="keyword">for</span>(String key:keySet)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;key--&quot;</span>+key+<span class="string">&quot;value--&quot;</span>+processVariables.get(key));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前流程变量--end&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    Map&lt;String,Object&gt; varUpdate=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varUpdate.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    taskService.setVariables(task.getId(),varUpdate);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515120817587.png"
alt="image-20220515120817587" /></li>
<li>修改后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515121223413.png"
alt="image-20220515121223413" />
<ul>
<li>结果表明这是批量增加/修改，而不是覆盖</li>
</ul></li>
</ul></li>
<li><p>当前数据库的数据 1个局部变量num，5个全局变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515121439233.png"
alt="image-20220515121439233" /></p></li>
<li><p>接下来在张三节点设置一个局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    Map&lt;String,Object&gt; processVariables=task.getProcessVariables();</span><br><span class="line">    processVariables.put(<span class="string">&quot;num&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    taskService.complete(task.getId(),processVariables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看数据库表，发现num已经被修改成2</li>
</ul></li>
<li><p>这时李四设置了一个局部变量num=6</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables2</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult(); </span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">6</span>);</span><br><span class="line">    Map&lt;String,Object&gt; varUpdate=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varUpdate.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;嘿嘿&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),varUpdate);</span></span><br><span class="line">    taskService.setVariablesLocal(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仅仅多了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515122216621.png"
alt="image-20220515122216621" /></p></li>
<li><p>修改全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateVariables3</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; varLocalInsert=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;num&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    varLocalInsert.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a被修改了&quot;</span>);</span><br><span class="line">    <span class="comment">//这里测试会不会把全局变量全部覆盖</span></span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),varUpdate);</span></span><br><span class="line">    taskService.setVariables(task.getId(),varLocalInsert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果如下，<strong>当局部变量和全局变量的名称一样时，只能修改局部变量</strong>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515122635345.png"
alt="image-20220515122635345" /></p></li>
<li><p>让李四完成审批
这里存在局部变量num=18，且完成时设置了局部变量20</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.complete(task.getId(),map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意，这里全局变量被改成20了，局部变量被删除了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515123339736.png"
alt="image-20220515123339736" /> 走到了总经理审批</p></li>
<li><p>再测试 将数据清空，重新部署并运行流程</p>
<p>现在在赵四节点，局部变量为 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515124117180.png"
alt="image-20220515124117180" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行完之后，局部变量变成20了，但是流程走不下去
稍作更改，添加一个全局变量(但是由于存在局部变量a，所以这里全局变量没设置成功)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">    Map&lt;String,Object&gt; map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map1.put(<span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    taskService.setVariables(task.getId(),map1);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>现在只能通过在complete中设置，来使得全局变量生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete4</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span>+task.getId());</span><br><span class="line">    Map&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    taskService.setVariablesLocal(task.getId(),map);</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; map1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map1.put(<span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//taskService.setVariables(task.getId(),map1);</span></span><br><span class="line">    taskService.complete(task.getId(),map1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果，全局变量设置成功，且任务流转到了财务那 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515124802205.png"
alt="image-20220515124802205" /></li>
</ul></li>
<li><p>再测试</p>
<ul>
<li><p>在存在局部变量num=2的情况下执行下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  	</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span> + task.getId());</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>, <span class="number">15</span>);</span><br><span class="line">    taskService.setVariables(task.getId(), map);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">    <span class="comment">/*Map&lt;String,Object&gt; map1=new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">    map1.put(&quot;num&quot;,1);</span></span><br><span class="line"><span class="comment">    taskService.complete(task.getId(),map1);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会提示报错，Unknown property used in expression: ${num &gt;= 3}</p>
<p>//说明线条中查找的是全局变量</p></li>
<li><p>在不存在局部变量num的情况下执行上面代码，会走总经理审批（num&gt;3)</p></li>
<li><p>在complete中加上map参数，验证明线条查找的是全局变量的值，complete带上variables会设置全局变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .includeProcessVariables()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    System.out.println(<span class="string">&quot;taskId&quot;</span> + task.getId());</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;num&quot;</span>, <span class="number">15</span>);</span><br><span class="line">   <span class="comment">// taskService.setVariables(task.getId(), map);</span></span><br><span class="line">    taskService.complete(task.getId(),map);</span><br><span class="line">    <span class="comment">/*Map&lt;String,Object&gt; map1=new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">    map1.put(&quot;num&quot;,1);</span></span><br><span class="line"><span class="comment">    taskService.complete(task.getId(),map1);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515130825823.png"
alt="image-20220515130825823" /></li>
</ul></li>
<li><p>act_hi_varinst 里面看得到局部变量</p></li>
</ul></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_4</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_4/</url>
    <content><![CDATA[<h2 id="候选人">候选人</h2>
<ul>
<li><p>流程图设计</p>
<ul>
<li>总体 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515143002689.png"
alt="image-20220515143002689" /></li>
<li>具体 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515142952857.png"
alt="image-20220515142952857" /></li>
</ul></li>
<li><p>部署并启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().name(<span class="string">&quot;ly画的请假流程-候选人&quot;</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请假流程-候选人.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//设置候选人</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;candidate1&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;candidate2&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;candidate3&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//获取流程运行服务</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    <span class="comment">//运行流程</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-candidate:1:4&quot;</span>,variables);</span><br><span class="line">    System.out.println(<span class="string">&quot;processInstance--&quot;</span>+processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库表数据</p>
<ul>
<li>处理人为空 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144843249.png"
alt="image-20220515144843249" /></li>
<li>变量 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144901217.png"
alt="image-20220515144901217" /></li>
<li>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515144943769.png"
alt="image-20220515144943769" /></li>
</ul></li>
<li><p>实际，作为登录用户如果是张三/李四或者王五，那它可以查看它自己是候选人的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询候选任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskCandidateUser(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(Task task:tasks)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id--&quot;</span>+task.getId()+<span class="string">&quot;--&quot;</span>+task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>拾取任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拾取任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">claimTaskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskCandidateUser(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="comment">//拾取任务</span></span><br><span class="line">        taskService.claim(task.getId(),<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;拾取任务成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515145820087.png"
alt="image-20220515145820087" /></li>
<li>此时查询李四候选任务，就查询不到了</li>
</ul></li>
<li><p>归还任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拾取任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unclaimTaskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        <span class="comment">//归还任务</span></span><br><span class="line">        taskService.unclaim(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;归还任务成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150149037.png"
alt="image-20220515150149037" /></li>
<li>此时用李四，拾取成功 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150352270.png"
alt="image-20220515150352270" /></li>
</ul></li>
<li><p>任务交接(委托)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务交接(委托)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskCandidate</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    TaskService taskService=engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task != <span class="literal">null</span> )&#123;</span><br><span class="line">        taskService.setAssignee(task.getId(),<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;任务交接给赵六&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结果 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150637180.png"
alt="image-20220515150637180" /></li>
</ul></li>
<li><p>完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;5001&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;赵六&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时任务给wz了 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515150842118.png"
alt="image-20220515150842118" /></p></li>
</ul>
<h2 id="候选人组">候选人组</h2>
<ul>
<li><p>当候选人很多的情况下，可以分组。（先创建组，然后将用户放到组中）</p></li>
<li><p>维护用户和组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createUser</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;李飞&quot;</span>);</span><br><span class="line">    user1.setFirstName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    user1.setLastName(<span class="string">&quot;fei&quot;</span>);</span><br><span class="line">    identityService.saveUser(user1);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;灯标&quot;</span>);</span><br><span class="line">    user2.setFirstName(<span class="string">&quot;deng&quot;</span>);</span><br><span class="line">    user2.setLastName(<span class="string">&quot;biao&quot;</span>);</span><br><span class="line">    identityService.saveUser(user2);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> identityService.newUser(<span class="string">&quot;田家&quot;</span>);</span><br><span class="line">    user3.setFirstName(<span class="string">&quot;tian&quot;</span>);</span><br><span class="line">    user3.setLastName(<span class="string">&quot;jia&quot;</span>);</span><br><span class="line">    identityService.saveUser(user3);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group1</span> <span class="operator">=</span> identityService.newGroup(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    group1.setName(<span class="string">&quot;销售部&quot;</span>);</span><br><span class="line">    group1.setType(<span class="string">&quot;typ1&quot;</span>);</span><br><span class="line">    identityService.saveGroup(group1);</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group2</span> <span class="operator">=</span> identityService.newGroup(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">    group2.setName(<span class="string">&quot;开发部&quot;</span>);</span><br><span class="line">    group2.setType(<span class="string">&quot;typ2&quot;</span>);</span><br><span class="line">    identityService.saveGroup(group2);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    <span class="comment">//找到组</span></span><br><span class="line">    <span class="type">Group</span> <span class="variable">group1</span> <span class="operator">=</span> identityService.createGroupQuery().groupId(<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="comment">//找到所有用户</span></span><br><span class="line">    List&lt;User&gt; list = identityService.createUserQuery().list();</span><br><span class="line">    <span class="keyword">for</span>(User user:list)&#123;</span><br><span class="line">        identityService.createMembership(user.getId(),group1.getId());</span><br><span class="line">  </span><br><span class="line">        System.out.println(user.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>表结构</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152203278.png"
alt="image-20220515152203278" />
<figcaption aria-hidden="true">image-20220515152203278</figcaption>
</figure>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152221653.png"
alt="image-20220515152221653" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152232911.png"
alt="image-20220515152232911" /></p></li>
</ul></li>
<li><p>应用，创建流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152724439.png"
alt="image-20220515152724439" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515152756047.png"
alt="image-20220515152756047" /></p></li>
<li><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-group&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请求流程-候选人组&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:candidateGroups</span>=<span class="string">&quot;$&#123;g1&#125;&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B4CAA6EE-47C0-4C51-AB0F-7A347AA88CF9&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;165.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-C3C15BE2-2D50-4178-AD36-D6BAC5C47526&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-BF42EC91-584D-4C19-8EC0-9658CD948CDE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;510.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;164.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-9821E7E5-DB4A-4BE5-95C7-2721E98D6BD6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;264.94999999998356&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;330.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-FAA16FF3-BFC5-49AA-8BB5-7DF1918F67FF&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.94340692927761&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.55019845363262&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;164.99999999999906&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.4985&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-6F5E54EF-5767-4E22-8AC7-322C7E332B6B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;429.9499999999989&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.04062499999998&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;510.0021426561354&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.70839534661596&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署并启动流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine processEngine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment().name(<span class="string">&quot;ly画的请假流程-候选人&quot;</span>)</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请求流程-候选人组.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runProcess</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="comment">//实际开发，应该按下面代码让用户选</span></span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> engine.getIdentityService();</span><br><span class="line">    List&lt;Group&gt; list = identityService.createGroupQuery().list();</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取流程运行服务</span></span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//设置候选人</span></span><br><span class="line">    Map&lt;String,Object&gt; variables=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;g1&quot;</span>,<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    <span class="comment">//运行流程</span></span><br><span class="line">    <span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.</span><br><span class="line">            startProcessInstanceById(</span><br><span class="line">            <span class="string">&quot;holiday-group:1:25004&quot;</span>,variables);</span><br><span class="line">    System.out.println(<span class="string">&quot;processInstance--&quot;</span>+processInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515153509046.png"
alt="image-20220515153509046" /> variables <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515153549630.png"
alt="image-20220515153549630" /></p></li>
<li><p>查找当前用户所在组的任务，并拾取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询候选组任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryCandidateGroup</span><span class="params">()</span>&#123;</span><br><span class="line">    String userId=<span class="string">&quot;灯标&quot;</span>;</span><br><span class="line">    ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> processEngine.getIdentityService();</span><br><span class="line">    <span class="type">Group</span> <span class="variable">group</span> <span class="operator">=</span> identityService.createGroupQuery().</span><br><span class="line">            groupMember(userId)</span><br><span class="line">            .singleResult();</span><br><span class="line">    System.out.println(<span class="string">&quot;灯标组id&quot;</span>+group.getId());</span><br><span class="line">  </span><br><span class="line">    TaskService taskService=processEngine.getTaskService();</span><br><span class="line">    List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskCandidateGroup(group.getId())</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span>(Task task:tasks)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id--&quot;</span>+task.getId()+<span class="string">&quot;--&quot;</span>+task.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskCandidateGroup(group.getId())</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拾取任务--&quot;</span>+task.getId()</span><br><span class="line">        +<span class="string">&quot;任务名--&quot;</span>+task.getName());</span><br><span class="line">        taskService.claim(task.getId(),userId);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库数据 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515154857421.png"
alt="image-20220515154857421" /></li>
</ul></li>
<li><p>完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .processInstanceId(<span class="string">&quot;27501&quot;</span>)</span><br><span class="line">            .taskAssignee(<span class="string">&quot;灯标&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    <span class="keyword">if</span>(task!=<span class="literal">null</span>)&#123;</span><br><span class="line">        taskService.complete(task.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;完成任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="section"></h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>02-flowable进阶_5</title>
    <url>/2022/05/15/study/flowable/boge_blbl/02-advance_5/</url>
    <content><![CDATA[<h2 id="网关">网关</h2>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515155359395.png"
alt="image-20220515155359395" />
<figcaption aria-hidden="true">image-20220515155359395</figcaption>
</figure>
<h3 id="排他网关">排他网关</h3>
<p>会按照所有出口顺序流定义的顺序对它们进行计算，选择第一个条件计算为true的顺序流（<strong>当没有设置条件时，认为顺序流为true</strong>）继续流程</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515155535107.png"
alt="image-20220515155535107" />
<figcaption aria-hidden="true">image-20220515155535107</figcaption>
</figure>
<ul>
<li><p>排他网关的绘制 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515161442209.png"
alt="image-20220515161442209" /> xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-exclusive&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程-排他网关&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wangwu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">name</span>=<span class="string">&quot;部门经理审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事审批&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhaoliu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&gt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&lt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-exclusive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-exclusive&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-exclusive&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-3D5ED4D4-97F5-4FFD-B160-F00566ECC55E&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;150.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-5B2117E6-D341-49F2-85B2-336CA836C7D8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;315.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;155.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-08A6CB64-C9BB-4342-852D-444A75315BDE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;420.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-EA98D0C3-E41D-4DEB-8933-91A1B7301ABE&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;405.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-24F73F7F-EB61-484F-A494-686E194D0118&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;630.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-8BA0B88C-BA4F-446D-B5E7-6BF0830B1DC8&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;504.95000000000005&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;680.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;680.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-4DB25720-11C8-401E-BB4C-83BB25510B2E&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;155.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;404.99999999996083&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-33A73370-751D-413F-9306-39DEAA674DB6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;59.94725673598754&quot;</span> <span class="attr">y</span>=<span class="string">&quot;177.70973069236373&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;150.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.96677419354836&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-D1B1F6E0-EA7F-4FF7-AD0C-5D43DBCEBFD2&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;249.95000000000002&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.18431734317343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;315.42592592592536&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.42592592592592&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E748F81F-B0B2-4C34-B993-FBAA2BCD0995&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;519.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;629.9999999998776&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-928C6C6F-57F1-40F2-BE0F-1A9FF3E6E9E4&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;194.43942522321433&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;335.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;420.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine= ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;请假流程-排他网关.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署成功:&quot;</span>+deploy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    runtimeService.startProcessInstanceById</span><br><span class="line">            (<span class="string">&quot;holiday-exclusive:1:4&quot;</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据库 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515161800379.png"
alt="image-20220515161800379" /></li>
</ul></li>
<li><p>张三完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>//接下来会走到部门经理审批</p></li>
<li><p>此时再ran一个num为4的实例，然后张三完成，此时会走到总经理审批</p>
<ul>
<li><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162344557.png"
title="fig:" alt="image-20220515162344557" /></li>
</ul></li>
<li><p>注意，如果这里num设置为3，则会报错 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162412014.png"
alt="image-20220515162412014" /></p></li>
<li><p>两者区别 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515162512860.png"
alt="image-20220515162512860" />
如果上面的分支都不满足条件，那么会直接异常结束
//如果使用排他网关，如果条件都不满足，流程和任务都还在，只是代码抛异常
//如果两个都满足，那么会找出先定义的线走</p></li>
</ul>
<h3 id="并行网关">并行网关</h3>
<ul>
<li><p>绘制流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163112903.png"
alt="image-20220515163112903" /></p></li>
<li><p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-parr-key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;请假流程-并行网关&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>holiday-parr-descr<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;技术经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;lisi&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">name</span>=<span class="string">&quot;项目经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wangwu&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parallelGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">parallelGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;zjl&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-parr-key&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-parr-key&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-parr-key&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-47EAD72A-932E-4850-9218-08A7335CEEDD&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;175.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;138.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-8B323A3D-F6DA-4D38-9CAE-D4CDA1031343&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;387.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-AEFBD42F-2A10-4630-8E56-EDBD35CC95B1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;495.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-8FB84D20-C946-4988-B4C4-16FFD899AF63&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;495.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-B25B9926-873F-46F5-9D62-D155462C1665&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;695.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-143837B7-0687-4268-B381-BA2442E39097&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;795.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-5ACFE3BE-E094-43A9-85C5-7D438EFE5A97&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;840.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-4255A9F7-39A1-46D3-AF14-DBEFF17AE911&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;847.586690647482&quot;</span> <span class="attr">y</span>=<span class="string">&quot;139.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;853.095383523332&quot;</span> <span class="attr">y</span>=<span class="string">&quot;225.02614923910227&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-8B72154F-6D29-47F8-A81C-A070F82B95F9&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.9499984899576&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;174.9999999999917&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-49DBB929-7488-471A-B79C-6BBFF4C810E0&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;404.70744680851067&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.2843450479233&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;395.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;82.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;494.9999999999998&quot;</span> <span class="attr">y</span>=<span class="string">&quot;84.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-2F49B59A-6860-4101-8156-84780094E6FE&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;182.43746693121696&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;239.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;840.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;239.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-DCF940BC-05D4-4260-8C50-A4C6E291DEA3&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;407.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;182.44067421259845&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;407.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;494.9999999999674&quot;</span> <span class="attr">y</span>=<span class="string">&quot;265.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A5253FCB-3D23-483F-A511-197811F656D6&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;143.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;715.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;90.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;795.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;96.13899613899613&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-5F0BF3BD-BC7C-4AA0-AF87-F679C8EEB40B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;274.9499999999998&quot;</span> <span class="attr">y</span>=<span class="string">&quot;173.87912087912088&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;388.52284263959393&quot;</span> <span class="attr">y</span>=<span class="string">&quot;164.5190355329949&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-18DF81F2-2B7F-4CC7-AD70-8A878FC7B125&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;594.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;107.91823529411766&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;701.273276904474&quot;</span> <span class="attr">y</span>=<span class="string">&quot;156.70967741935485&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B00C2DDD-8A30-4BA0-A2F8-69185D8506F5&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;594.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;235.23460410557183&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;702.9632352941177&quot;</span> <span class="attr">y</span>=<span class="string">&quot;170.94457720588235&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>并行网关的条件会被忽略 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163308541.png"
alt="image-20220515163308541" /></p></li>
<li><p>代码测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部署并运行</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">        <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">                .addClasspathResource(<span class="string">&quot;请假流程-并行网关.bpmn20.xml&quot;</span>)</span><br><span class="line">                .deploy();</span><br><span class="line">        System.out.println(<span class="string">&quot;部署成功:&quot;</span> + deploy.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">        <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        runtimeService.startProcessInstanceById</span><br><span class="line">                (<span class="string">&quot;holiday-parr-key:1:12504&quot;</span>, variables);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时任务停留在zhangsan <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163545652.png"
alt="image-20220515163545652" /></p></li>
<li><p>让zhangsan完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;15001&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看表数据(一个任务包含多个执行实例) <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515163747247.png"
alt="image-20220515163747247" /></p></li>
<li><p>让王五和李四进行审批
查看数据库，wangwu审批后，act_ru_task就少了一条记录 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164011925.png"
alt="image-20220515164011925" /></p></li>
<li><p>此时走到总经理节点 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164102982.png"
alt="image-20220515164102982" /></p></li>
<li><p>图解 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164127110.png"
alt="image-20220515164127110" /></p></li>
</ul>
<h3 id="包容网关">包容网关</h3>
<ul>
<li><p>包容网关可以选择多于一条顺序流。即固定几条必走，其他几条走条件</p></li>
<li><p>流程图 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515164830895.png"
alt="image-20220515164830895" /> xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span> <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span> <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span> <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span> <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span> <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span> <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span> <span class="attr">exporter</span>=<span class="string">&quot;Flowable Open Source Modeler&quot;</span> <span class="attr">exporterVersion</span>=<span class="string">&quot;6.7.2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holiday-inclusive&quot;</span> <span class="attr">name</span>=<span class="string">&quot;holiday-inclusive-name&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">documentation</span>&gt;</span>holiday-inclusive-desc<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;创建请假单&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i0&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">name</span>=<span class="string">&quot;项目经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i1&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">name</span>=<span class="string">&quot;人事&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i2&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">name</span>=<span class="string">&quot;技术经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;i3&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">exclusiveGateway</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">name</span>=<span class="string">&quot;总经理&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;wz&quot;</span> <span class="attr">flowable:formFieldValidation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">modeler:initiator-can-complete</span> <span class="attr">xmlns:modeler</span>=<span class="string">&quot;http://flowable.org/modeler&quot;</span>&gt;</span>&lt;![CDATA[false]]&gt;<span class="tag">&lt;/<span class="name">modeler:initiator-can-complete</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">endEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&gt;3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &lt;= 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num &gt; 3&#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>&lt;![CDATA[$&#123;num&lt;=3 &#125;]]&gt;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bpmndi:BPMNDiagram</span> <span class="attr">id</span>=<span class="string">&quot;BPMNDiagram_holiday-inclusive&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bpmndi:BPMNPlane</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;holiday-inclusive&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNPlane_holiday-inclusive&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;startEvent1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_startEvent1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;163.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-6C2C29AA-C1D2-4B09-A542-ED194A13F5F2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;195.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;135.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-46FAF12A-7430-4AFA-AABB-99B2D875C9CD&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;366.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-9AD9C288-F114-4AC6-9366-A09A786B068E&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;451.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;30.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-764DC717-439D-425E-83FF-D81BD08A2562&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;450.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;120.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-AC8D2717-5BCD-4C5B-81BB-2FF66CFFC615&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;465.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;255.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-6449A9C8-B7A3-44EE-BEDF-154AF323B1A8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;656.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;137.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-65D4D76B-AD2B-4AE9-8E78-7B8C33BD9E55&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;750.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;137.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-4B834200-7995-453B-BC08-AF93C9F29FCF&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;80.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;855.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;60.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNShape</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNShape_sid-7296D067-FF72-49F9-B416-2452640A0FBC&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdc:Bounds</span> <span class="attr">height</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;28.0&quot;</span> <span class="attr">x</span>=<span class="string">&quot;900.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;240.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdc:Bounds</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNShape</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-681E9C5D-AD4B-45DD-BF12-E2CD5304ADFB&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;549.9499999999988&quot;</span> <span class="attr">y</span>=<span class="string">&quot;159.14772727272728&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;656.3351955307262&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.33435754189946&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-CCD38C3B-C06F-4646-B979-F65C0CA26321&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;294.94999999999993&quot;</span> <span class="attr">y</span>=<span class="string">&quot;171.45390070921985&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;367.32450331125824&quot;</span> <span class="attr">y</span>=<span class="string">&quot;166.32119205298014&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-AD0571E9-839D-4F1F-89ED-05BE60F841FD&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;907.3347402597402&quot;</span> <span class="attr">y</span>=<span class="string">&quot;139.95&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;913.1831773972388&quot;</span> <span class="attr">y</span>=<span class="string">&quot;240.02104379436742&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A6760B6A-B74F-4D35-93C2-6653751F8873&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;22.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;7.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;775.8406515580737&quot;</span> <span class="attr">y</span>=<span class="string">&quot;142.87818696883852&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;855.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;116.58716981132078&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-B8DE143C-4636-4F2C-99C9-8949E23B0042&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;405.4272235576724&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;428.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;165.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;428.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;449.99999999999346&quot;</span> <span class="attr">y</span>=<span class="string">&quot;160.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-422FC4A8-B667-4271-9CB3-A1D2CFEFC5E1&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;695.4399309245483&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;750.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;157.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-97A0DAB9-564D-4A62-92A4-26C7056CD347&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;14.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;14.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;770.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;176.44111163227018&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;770.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;264.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;900.033302364888&quot;</span> <span class="attr">y</span>=<span class="string">&quot;254.96981315483313&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-A52331B4-3769-46D8-AAC1-C34214C729BD&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;550.95&quot;</span> <span class="attr">y</span>=<span class="string">&quot;94.83228571428573&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;662.6257153758107&quot;</span> <span class="attr">y</span>=<span class="string">&quot;150.3587786259542&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E808AF78-E258-4997-B4FE-C393D8EBA3B9&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;145.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;451.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;70.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-CAD92170-984F-49E0-BB6D-589B11F7FB8B&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;15.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;129.94999191137833&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;162.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;178.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;162.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;194.99999999998522&quot;</span> <span class="attr">y</span>=<span class="string">&quot;175.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-E4AD02E7-A69A-4684-9A00-DE9B11711348&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;20.5&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;40.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;184.4426890432099&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;386.5&quot;</span> <span class="attr">y</span>=<span class="string">&quot;295.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;465.0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;295.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bpmndi:BPMNEdge</span> <span class="attr">bpmnElement</span>=<span class="string">&quot;sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">id</span>=<span class="string">&quot;BPMNEdge_sid-78E79754-E64A-4ADE-A9BB-F9B224D3A5A0&quot;</span> <span class="attr">flowable:sourceDockerX</span>=<span class="string">&quot;50.0&quot;</span> <span class="attr">flowable:sourceDockerY</span>=<span class="string">&quot;40.0&quot;</span> <span class="attr">flowable:targetDockerX</span>=<span class="string">&quot;20.0&quot;</span> <span class="attr">flowable:targetDockerY</span>=<span class="string">&quot;20.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;561.6083333333333&quot;</span> <span class="attr">y</span>=<span class="string">&quot;255.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">omgdi:waypoint</span> <span class="attr">x</span>=<span class="string">&quot;665.2307692307692&quot;</span> <span class="attr">y</span>=<span class="string">&quot;166.20769230769233&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">omgdi:waypoint</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bpmndi:BPMNEdge</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bpmndi:BPMNPlane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bpmndi:BPMNDiagram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>部署并运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deploy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> engine.getRepositoryService();</span><br><span class="line">    <span class="type">Deployment</span> <span class="variable">deploy</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">            .addClasspathResource(<span class="string">&quot;holiday-inclusive-name.bpmn20.xml&quot;</span>)</span><br><span class="line">            .deploy();</span><br><span class="line">    System.out.println(<span class="string">&quot;部署成功:&quot;</span> + deploy.getId());</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ProcessEngine</span> <span class="variable">engine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> engine.getRuntimeService();</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    variables.put(<span class="string">&quot;num&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    runtimeService.startProcessInstanceById</span><br><span class="line">            (<span class="string">&quot;holiday-inclusive:1:4&quot;</span>, variables);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>i0完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;i0&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>看数据，默认走人事和项目经理 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165318571.png"
alt="image-20220515165318571" /></p></li>
<li><p>i1,i2所在任务执行完后，会发现走总经理 i1走完之后 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165402581.png"
alt="image-20220515165402581" /></p>
<ul>
<li><p>i2走的时候，把num设为1，直接结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskComplete</span><span class="params">()</span>&#123;</span><br><span class="line">    ProcessEngine engine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">    <span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> engine.getTaskService();</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery()</span><br><span class="line">            .taskAssignee(<span class="string">&quot;i2&quot;</span>)</span><br><span class="line">            .processInstanceId(<span class="string">&quot;2501&quot;</span>)</span><br><span class="line">            .singleResult();</span><br><span class="line">    taskService.setVariable(task.getId(),</span><br><span class="line">            <span class="string">&quot;num&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li></li>
</ul>
<h3 id="事件网关">事件网关</h3>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220515165548361.png"
alt="image-20220515165548361" />
<figcaption aria-hidden="true">image-20220515165548361</figcaption>
</figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable_波哥_b站</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-01-GettingStarted</title>
    <url>/2022/04/27/study/flowable/offical/01/</url>
    <content><![CDATA[<h2 id="入门">入门</h2>
<h3 id="什么是流动性">什么是流动性</h3>
<blockquote>
<p>Flowable 是一个用 Java 编写的轻量级业务流程引擎。Flowable
流程引擎允许您部署 BPMN 2.0 流程定义（用于定义流程的行业 XML
标准）、创建这些流程定义的流程实例、运行查询、访问活动或历史流程实例和相关数据等等。</p>
</blockquote>
<blockquote>
<p>可以使用 Flowable REST API 通过 HTTP 进行通信。还有几个 Flowable
应用程序（Flowable Modeler、Flowable Admin、Flowable IDM 和 Flowable
Task）提供开箱即用的示例 UI，用于处理流程和任务。</p>
</blockquote>
<h3 id="flowable和activiti">Flowable和Activiti</h3>
<p>Flowable是Activiti的一个分支</p>
<h3 id="构建命令行命令">构建命令行命令</h3>
<h4 id="创建流程引擎">创建流程引擎</h4>
<p>请假流程如下</p>
<ul>
<li>员工要求休假数次</li>
<li>经理批准或拒绝请求</li>
<li>之后将模拟再某个外部系统中注册请求，并向员工发送一封包含结果的邮件</li>
</ul>
<p>创建一个空的Mave项目，并添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.176<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--当版本号&gt;=8.0.22时会报date转字符串的错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加一个带有Main方法的类</p>
<p>这里实例化一个<strong>ProcessEngine</strong>实例，一般只需要实例化一次，是通过<strong>ProcessEngineConfiguration</strong>创建的，用来配置和调整流程引擎的配置</p>
<ul>
<li><em>ProcessEngineConfiguration</em>也可以使用配置 XML 文件创建</li>
<li><em>ProcessEngineConfiguration</em>需要的最低配置是与数据库的 JDBC
连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.ProcessEngineConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HolidayRequest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里改用mysql，注意后面的nullCatalogMeansCurrent=true</span></span><br><span class="line">        <span class="comment">//注意，pom需要添加mysql驱动依赖</span></span><br><span class="line">        <span class="type">ProcessEngineConfiguration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandaloneProcessEngineConfiguration</span>()</span><br><span class="line">                .setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/flowable_official?useUnicode=true&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true&quot;</span></span><br><span class="line">                        +<span class="string">&quot;&amp;nullCatalogMeansCurrent=true&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .setJdbcUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">                .setJdbcPassword(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .setJdbcDriver(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class="line">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">        <span class="comment">/* //这是官网，用的h2</span></span><br><span class="line"><span class="comment">        ProcessEngineConfiguration cfg = new StandaloneProcessEngineConfiguration()</span></span><br><span class="line"><span class="comment">                .setJdbcUrl(&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=-1&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcUsername(&quot;sa&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcPassword(&quot;&quot;)</span></span><br><span class="line"><span class="comment">                .setJdbcDriver(&quot;org.h2.Driver&quot;)</span></span><br><span class="line"><span class="comment">                .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> cfg.buildProcessEngine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行后会出现slf4j的警告，添加依赖并编写配置文件即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG, CA</span></span><br><span class="line"><span class="attr">log4j.appender.CA</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CA.layout.ConversionPattern</span>=<span class="string">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br></pre></td></tr></table></figure>
<p>重运行程序无警告</p>
<p>会自动往mysql添加一些表及数据</p>
<h4 id="部署流程定义">部署流程定义</h4>
<p>flowable 引擎希望以 BPMN 2.0
格式定义流程，这是一种在行业中被广泛接受的 XML
标准。Flowable术语称之为<strong>流程定义</strong>
（可以理解成许多执行的蓝图），从流程定义中可以启动许多<strong>流程实例</strong></p>
<p>流程定义了请假假期所涉及的不同步骤，而一个流程实例与一位特定员工的假期请相匹配。</p>
<blockquote>
<p>BPMN 2.0 存储为
XML，但它也有一个可视化部分：它以标准方式定义每个不同的步骤类型（人工任务、自动服务调用等）如何表示，以及如何将这些不同的步骤连接到彼此。通过这种方式，BPMN
2.0 标准允许技术人员和业务人员以双方都理解的方式就业务流程进行交流。</p>
</blockquote>
<p>我们将使用的流程定义</p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428092931927.png" /></p>
<ul>
<li>假设该过程是通过提供一些信息开始的</li>
<li>左边的圆圈称为<strong>开始事件</strong></li>
<li>第一个矩形是<strong>用户任务</strong>（经理必须执行，批准或拒绝）</li>
<li>根据经理决定，<strong>专用网关</strong>
（带有十字菱形）会将流程实例路由到批准或拒绝路径</li>
<li>如果获得批准，必须在某个外部系统中注册请求，然后再次为原始员工执行用户任务，通知他们该决定</li>
<li>如果被拒绝，则会向员工发送一封电子邮件，通知他们这一点</li>
</ul>
<p>此类流程定义使用可视化建模工具建模，例如Flowable
Designer（Eclipse）或FlowableModeler（Web应用程序）</p>
<ul>
<li><p>BPMN 2.0 及其概念
下面的holiday-request.bmpn20.xm文件放在src/main/resouces中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:bpmndi</span>=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdc</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DC&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:omgdi</span>=<span class="string">&quot;http://www.omg.org/spec/DD/20100524/DI&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:flowable</span>=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">typeLanguage</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">expressionLanguage</span>=<span class="string">&quot;http://www.w3.org/1999/XPath&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.flowable.org/processdef&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;holidayRequest&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday Request&quot;</span> <span class="attr">isExecutable</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;startEvent&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;startEvent&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveTask&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Approve or reject request&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">&quot;decision&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向，下面有两个分支--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向approved--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;externalSystemCall&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向!approved--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;decision&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span></span><br><span class="line">                &lt;![CDATA[</span><br><span class="line">          $&#123;!approved&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户任务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--服务任务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Send out rejection email&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.SendRejectionMail&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--线条指向--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">sourceRef</span>=<span class="string">&quot;sendRejectionMail&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支2结束--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;approveEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--分支2结束--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;rejectEnd&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>解释</p>
<ul>
<li>该文件与BPMN2.0标准规范完全兼容</li>
<li>每个步骤（活动
activity），都有一个id属性，在XML中，该属性提供唯一标识符
name属性为可选的名称，增加了可视化图表的可读性</li>
<li>活动通过<strong>顺序流(sequenceFlow)</strong>连接，即可视图中的定向箭头。执行流程实例时，执行将从开始事件流向下一个活动，且遵循顺序流</li>
<li>离开<em>专有网关</em>的<em>序列流</em>（带有 X
的菱形）显然是特殊的：两者都有一个以<em>表达式</em>形式定义的<em>条件</em>（见第
25 和 32
行）。当流程实例执行到达此<em>gateway</em>时，将评估<em>条件</em>并采用第一个解析为<em>true</em>的条件。这就是这里<em>独有</em>的含义：只选择一个。如果需要不同的路由行为，当然也可以使用其他类型的网关
<ul>
<li>表达式以<span
class="math inline">\({approved}的形式，是\)</span>{approved ==
true}的简写</li>
<li>approved称为过程变量，他与流程实例一起存储（持久数据为，在流程实例的声明周期内使用），意味着必须在流程实例的某个时间点（提交经理用户任务时，即结点<userTask id="approveTask" />[Flowable术语，完成])设置此流程变量）</li>
</ul></li>
</ul></li>
<li><p>部署流程
使用RepositoryService，它可以从ProcessEngine对象中检索，通过传递XML文件的位置并调用deploy()方法来执行它来创建一个新的Deployment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"><span class="comment">//部署流程</span></span><br><span class="line"><span class="type">Deployment</span> <span class="variable">deployment</span> <span class="operator">=</span> repositoryService.createDeployment()</span><br><span class="line">  .addClasspathResource(<span class="string">&quot;holiday-request.bpmn20.xml&quot;</span>)</span><br><span class="line">  .deploy();</span><br><span class="line">        <span class="comment">//打印部署id</span></span><br><span class="line">System.out.println(<span class="string">&quot;Found deployment id : &quot;</span> + deployment.getId());</span><br></pre></td></tr></table></figure>
<p>每次部署的id存在act_re_deployment表中 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428103748269.png" /></p></li>
<li><p>通过API查询来验证引擎是否知道流程定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessDefinition</span> <span class="variable">processDefinition</span> <span class="operator">=</span> repositoryService.createProcessDefinitionQuery()</span><br><span class="line">  .deploymentId(deployment.getId())</span><br><span class="line">  .singleResult();</span><br><span class="line">System.out.println(<span class="string">&quot;Found process definition : &quot;</span> + processDefinition.getName());</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul></li>
</ul>
<h4 id="启动流程实例">启动流程实例</h4>
<p>现在已经将流程定义部署到流程引擎中了，所以可以将此<strong>流程定义</strong>作为“蓝图”来启动流程实例</p>
<p>启动前提供一些<em>初始流程变量</em>
，通常，当流程自动触发时，将通过呈现给用户的表单或者通过REST
API获得这些信息，本例为保持简单使用java.util.Scanner在命令中简单输入一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner= <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Who are you?&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">employee</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;How many holidays do you want to request?&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">nrOfHolidays</span> <span class="operator">=</span> Integer.valueOf(scanner.nextLine());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Why do you need them?&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></table></figure>
<p>接下来，通过RuntimeService启动一个流程实例，流程实例使用key启动，此键与BPMN2.0
XML文件中设置的id属性匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">variables.put(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">variables.put(<span class="string">&quot;nrOfHolidays&quot;</span>, nrOfHolidays);</span><br><span class="line">variables.put(<span class="string">&quot;description&quot;</span>, description);</span><br><span class="line"><span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span></span><br><span class="line">  runtimeService.startProcessInstanceByKey(<span class="string">&quot;holidayRequest&quot;</span>, variables);</span><br></pre></td></tr></table></figure>
<ul>
<li>流程实例启动时，会创建一个<strong>执行(execution)</strong>并将其放入<strong>start
event启动事件</strong>中。之后，此<strong>执行(execution)</strong>遵守<strong>user
task 用户任务</strong>的<strong>序列流 sequence
flow</strong>以供经理批准并执行<strong>用户任务user
task</strong>行为</li>
<li>此行为将在数据库中创建一个任务，稍后可以使用查询找到该任务</li>
<li>用户任务处于<em>等待状态</em>，引擎将停止进一步执行任何操作，返回
API 调用</li>
</ul>
<h4 id="支线交易性-sidetrack-transactionality">支线：交易性 (Sidetrack:
transactionality)</h4>
<ul>
<li>当您进行 Flowable API
调用时，默认情况下，一切都是同步<strong>synchronous</strong>的，并且是同一事务的一部分。这意味着，当方法调用返回时，将启动并提交事务。</li>
<li>当一个流程实例启动时，从流程实例启动到下一个<em>等待状态</em>会有<strong>一个数据库事务</strong>。在本例中，这是第一个用户任务。当引擎到达这个用户任务时，状态被持久化到数据库中并且事务被提交并且API调用返回</li>
<li>在 Flowable
中，当继续一个流程实例时，总会有一个数据库事务从前一个<em>等待状态</em>转到下一个<em>等待状态</em>。</li>
<li></li>
</ul>
<h4 id="查询和完成任务">查询和完成任务</h4>
<ul>
<li><p>为用户任务配置分配</p>
<ul>
<li><p>[第一个任务进入"经理"组]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;approveTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Approve or reject request&quot;</span> <span class="attr">flowable:candidateGroups</span>=<span class="string">&quot;managers&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>第二个任务的<em>受让人assignee</em>属性
基于我们在流程实例启动时传递的流程变量的动态分配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;holidayApprovedTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Holiday approved&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;employee&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>查询并返回"managers"组的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateGroup(<span class="string">&quot;managers&quot;</span>).list();</span><br><span class="line">System.out.println(<span class="string">&quot;You have &quot;</span> + tasks.size() + <span class="string">&quot; tasks:&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;tasks.size(); i++) &#123;</span><br><span class="line">  System.out.println((i+<span class="number">1</span>) + <span class="string">&quot;) &quot;</span> + tasks.get(i).getName());<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428132839571.png"
alt="image-20220428132839571" />
<figcaption aria-hidden="true">image-20220428132839571</figcaption>
</figure>
<p>有三个是因为启动了三个实例</p></li>
<li><p>获取特定的流程实例变量，并在屏幕上显示实际请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Which task would you like to complete?&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">taskIndex</span> <span class="operator">=</span> Integer.valueOf(scanner.nextLine());</span><br><span class="line"><span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> tasks.get(taskIndex - <span class="number">1</span>);</span><br><span class="line">Map&lt;String, Object&gt; processVariables = taskService.getVariables(task.getId());</span><br><span class="line">System.out.println(processVariables.get(<span class="string">&quot;employee&quot;</span>) + <span class="string">&quot; wants &quot;</span> +</span><br><span class="line">    processVariables.get(<span class="string">&quot;nrOfHolidays&quot;</span>) + <span class="string">&quot; of holidays. Do you approve this?&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>设置variables让经理批准</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">approved</span> <span class="operator">=</span> scanner.nextLine().toLowerCase().equals(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">variables.put(<span class="string">&quot;approved&quot;</span>, approved);</span><br><span class="line"><span class="comment">//经理完成任务</span></span><br><span class="line">taskService.complete(task.getId(), variables);</span><br></pre></td></tr></table></figure>
<p><span
class="math inline">\(\color{red}该任务现已完成，并且基于&quot;approved&quot;流程变量选择离开专用网关的两条路径之一\)</span></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428133646782.png" /></p></li>
</ul></li>
</ul>
<h4 id="编写javadelegate">编写JavaDelegate</h4>
<ul>
<li><p>实现在请求被批准时将执行的自动逻辑，在BPMN2.0
XML中，这是一个<strong>服务任务</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;externalSystemCall&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Enter holidays in external system&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flowable:class</span>=<span class="string">&quot;org.flowable.CallExternalSystemDelegate&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里指定了具体实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.flowable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.DelegateExecution;</span><br><span class="line"><span class="keyword">import</span> org.flowable.engine.delegate.JavaDelegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallExternalSystemDelegate</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Calling the external system for employee &quot;</span></span><br><span class="line">            + execution.getVariable(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当<strong>执行execution</strong>到达<strong>service
tast服务任务</strong>时，BPMN 2.0 XML中引用的类被实例化并被调用</p></li>
<li><p>运行，发现自定义逻辑确实已执行</p></li>
</ul>
<h4 id="处理历史数据">处理历史数据</h4>
<p>Flowable引擎会自动存储所有流程实例的<strong>审计数据audit
data</strong> 或<strong>历史数据historical data</strong></p>
<p>下面，显示一直在执行的流程实例的持续时间，从ProcessEngine获取HistoryService并创建历史活动查询。这里添加了过滤--1
仅针对一个特定流程实例的活动 --2 只有已经完成的活动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line">List&lt;HistoricActivityInstance&gt; activities =</span><br><span class="line">  historyService.createHistoricActivityInstanceQuery()</span><br><span class="line">   .processInstanceId(processInstance.getId())</span><br><span class="line">   .finished()</span><br><span class="line">   .orderByHistoricActivityInstanceEndTime().asc()</span><br><span class="line">   .list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (HistoricActivityInstance activity : activities) &#123;</span><br><span class="line">  System.out.println(activity.getActivityId() + <span class="string">&quot; took &quot;</span></span><br><span class="line">    + activity.getDurationInMillis() + <span class="string">&quot; milliseconds&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结论">结论</h4>
<p>本教程介绍了各种 Flowable 和 BPMN 2.0
概念和术语，同时还演示了如何以编程方式使用 Flowable API。</p>
<h3 id="flowable-rest-api入门">Flowable REST API入门</h3>
<h4 id="设置rest应用程序">设置REST应用程序</h4>
<p>使用flowable-rest.war , java -jar flowable-rest.war</p>
<p>测试是否运行成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test http://localhost:8080/flowable-rest/service/management/engine</span><br></pre></td></tr></table></figure>
<h4 id="部署流程定义-1">部署流程定义</h4>
<ul>
<li><p>先切到该文件夹下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220428220759415.png" /></p></li>
<li><p>使用下面命令启动flowable-rest</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar flowable-rest.war</span><br></pre></td></tr></table></figure></li>
<li><p>部署流程定义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -F &quot;file=@holiday-request.bpmn20.xml&quot; http://localhost:8080/flowable-rest/service/repository/deployments</span><br></pre></td></tr></table></figure></li>
<li><p>查看流程是否部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test http://localhost:8080/flowable-rest/service/repository/process-definitions</span><br></pre></td></tr></table></figure>
<ul>
<li>将返回一个列表，列表每个元素是当前部署到引擎的所有流程定义</li>
</ul></li>
</ul>
<h4 id="启动流程实例-1">启动流程实例</h4>
<ul>
<li><p>命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;processDefinitionKey&quot;:&quot;holidayRequest&quot;, &quot;variables&quot;: [ &#123; &quot;name&quot;:&quot;employee&quot;, &quot;value&quot;: &quot;John Doe&quot; &#125;, &#123; &quot;name&quot;:&quot;nrOfHolidays&quot;, &quot;value&quot;: 7 &#125;]&#125;&#x27; http://localhost:8080/flowable-rest/service/runtime/process-instances</span><br></pre></td></tr></table></figure>
<p>windows中会报错...估计是没转义啥的原因 将返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;43&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:8080/flowable-rest/service/runtime/process-instances/43&quot;</span><span class="punctuation">,</span><span class="attr">&quot;businessKey&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;suspended&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span><span class="attr">&quot;ended&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">,</span><span class="attr">&quot;processDefinitionId&quot;</span><span class="punctuation">:</span><span class="string">&quot;holidayRequest:1:42&quot;</span><span class="punctuation">,</span><span class="attr">&quot;processDefinitionUrl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://localhost:8080/flowable-rest/service/repository/process-definitions/holidayRequest:1:42&quot;</span><span class="punctuation">,</span><span class="attr">&quot;activityId&quot;</span><span class="punctuation">:</span><span class="keyword">null</span><span class="punctuation">,</span><span class="attr">&quot;variables&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;tenantId&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;completed&quot;</span><span class="punctuation">:</span><span class="keyword">false</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="任务列表和完成任务">任务列表和完成任务</h4>
<ul>
<li><p>获取manager经理组的所有任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;candidateGroup&quot; : &quot;managers&quot; &#125;&#x27; http://localhost:8080/flowable-rest/service/query/tasks</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用命令完成一个任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --user rest-admin:test -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123; &quot;action&quot; : &quot;complete&quot;, &quot;variables&quot; : [ &#123; &quot;name&quot; : &quot;approved&quot;, &quot;value&quot; : true&#125; ]  &#125;&#x27; http://localhost:8080/flowable-rest/service/runtime/tasks/25</span><br></pre></td></tr></table></figure>
<ul>
<li><p>这里会报下面的错</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;Internal server error&quot;</span><span class="punctuation">,</span><span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span><span class="string">&quot;couldn&#x27;t instantiate class org.flowable.CallExternalSystemDelegate&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>解决办法</p>
<blockquote>
<p>这意味着引擎找不到服务任务中引用的 CallExternalSystemDelegate
类。为了解决这个问题，需要将该类放在应用程序的类路径中（这将需要重新启动）。按照本节所述创建类，将其打包为JAR，并将其放在Tomcat的webapps文件夹下的flowable-rest文件夹的WEB-INF/lib文件夹中。</p>
</blockquote></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-02-Configuration</title>
    <url>/2022/04/29/study/flowable/offical/02/</url>
    <content><![CDATA[<h3 id="创建流程引擎">创建流程引擎</h3>
<p>Flowable 流程引擎通过一个名为 flowable.cfg.xml 的 XML
文件进行配置</p>
<ul>
<li><p>现在类路径下放置floable.cfg.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcDriver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcPassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mailServerHost&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mail.my-corp.com&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mailServerPort&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5025&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后使用静态方法进行获取ProcessEngine</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br></pre></td></tr></table></figure></li>
<li><p>还有其他配置，这里不一一列举，详见文档地址
https://www.flowable.com/open-source/docs/bpmn/ch03-Configuration</p></li>
<li><p>大致目录如下 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220429095214773.png"
alt="image-20220429095214773" /> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220429095245768.png"
alt="image-20220429095245768" /></p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-03-api</title>
    <url>/2022/04/29/study/flowable/offical/03/</url>
    <content><![CDATA[<h3 id="流程引擎api和服务">流程引擎API和服务</h3>
<p>引擎API是与Flowable交互的常见方式，主要起点是ProcessEngine，可以通过配置（Configuration章节）中描述的多种方式创建。</p>
<p>从ProcessEngine获取包含工作流/BPM方法的各种服务。ProcessEngine和服务对象是线程安全的</p>
<figure>
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/api.services.png"
alt="api.services" />
<figcaption aria-hidden="true">api.services</figcaption>
</figure>
<p>下面是通过processEngine获取各种服务的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessEngine</span> <span class="variable">processEngine</span> <span class="operator">=</span> ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line"><span class="type">RuntimeService</span> <span class="variable">runtimeService</span> <span class="operator">=</span> processEngine.getRuntimeService();</span><br><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span> processEngine.getRepositoryService();</span><br><span class="line"><span class="type">TaskService</span> <span class="variable">taskService</span> <span class="operator">=</span> processEngine.getTaskService();</span><br><span class="line"><span class="type">ManagementService</span> <span class="variable">managementService</span> <span class="operator">=</span> processEngine.getManagementService();</span><br><span class="line"><span class="type">IdentityService</span> <span class="variable">identityService</span> <span class="operator">=</span> processEngine.getIdentityService();</span><br><span class="line"><span class="type">HistoryService</span> <span class="variable">historyService</span> <span class="operator">=</span> processEngine.getHistoryService();</span><br><span class="line"><span class="type">FormService</span> <span class="variable">formService</span> <span class="operator">=</span> processEngine.getFormService();</span><br><span class="line"><span class="type">DynamicBpmnService</span> <span class="variable">dynamicBpmnService</span> <span class="operator">=</span> processEngine.getDynamicBpmnService();</span><br></pre></td></tr></table></figure>
<p>ProcessEngines.getDefaultProcessEngine()在第一次调用时初始化并构建流程引擎，然后返回相同的流程引擎</p>
<p>ProcessEngines类将扫描所有flowable.cfg.xml和flowable-context.xml文件。</p>
<blockquote>
<p>对于所有 flowable.cfg.xml 文件，流程引擎将以典型的 Flowable
方式构建：ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine()。</p>
<p>对于所有 flowable-context.xml 文件，流程引擎将以 Spring
方式构建：首先创建 Spring
应用程序上下文，然后从该应用程序上下文中获取流程引擎。</p>
</blockquote>
<blockquote>
<p>The <strong>RepositoryService</strong> is probably the first service
needed when working with the Flowable engine.</p>
</blockquote>
<p>该服务<strong>(RepositoryService)</strong>提供用于管理和操作部署<strong>deployments</strong>和流程定义的操作</p>
<ul>
<li>查询引擎已知的部署和流程定义</li>
<li>暂停和激活作为一个整体或特定流程定义的部署。挂起意味着不能对它们执行进一步的操作，而激活则相反并再次启用操作</li>
<li>检索各种资源，例如引擎自动生成的部署或流程图中包含的文件</li>
<li>检索流程定义的 POJO 版本，该版本可用于使用 Java 而不是 XML
来内省流程</li>
</ul>
<p>RepositoryService主要是关于静态信息（不会改变的数据，或者至少不会改变太多），而RuntimeService处理启动流程定义的<em>新流程实例</em></p>
<ul>
<li><p>流程定义定义了流程中不同步骤的结构和行为，流程实例是此类流程定义的一次执行</p></li>
<li><p>对于每个流程定义，通常有许多实例同时运行</p></li>
<li><p>Runtime也用于检索和存储<strong>流程变量</strong></p></li>
<li><p>Runtimeservice还可以用来查询流程实例和执行(executions)</p>
<blockquote>
<p>Executions are a representation of the 'token' concept of BPMN 2.0.
执行是指向流程实例当前所在位置的指针</p>
</blockquote></li>
<li><p>只要流程实例正在等待外部触发器并且流程需要继续，就会使用
RuntimeService</p></li>
<li><p>流程实例可以有各种等待状态，并且该服务包含各种操作以向实例发出“信号”，即接收到外部触发器并且流程实例可以继续</p></li>
</ul>
<p>需要由系统的人类用户执行的任务是BPM引擎（如Floable）的核心，围绕任务的所有内容都在TaskService中进行分组</p>
<ul>
<li>查询分配给用户或组的任务</li>
<li>创建新的独立任务（与流程实例无关）</li>
<li>任务被分配给哪个用户或哪些用户，以及让这些用户以某种方式参与该任务</li>
<li>要求并完成一项任务，声明意味着某人决定成为该任务的受让人<strong>assignee</strong></li>
</ul>
<p>IdentityService支持组和用户的管理（创建、更新、删除、查询）</p>
<p>FormService是可选服务，引入了启动表单（<strong>start
form</strong>）和任务表单(<strong>a task form</strong>)的概念</p>
<blockquote>
<p><strong>HistoryService</strong>公开了 Flowable
引擎收集的所有历史数据。在执行流程时，引擎可以保留很多数据（这是可配置的），例如流程实例的启动时间，谁做了哪些任务，完成任务花了多长时间，每个流程实例中遵循的路径，等等。</p>
</blockquote>
<p>使用Flowable
编写自定义应用程序时，通常不需要<strong>ManagementService
。</strong>它允许检索有关数据库表和表元数据的信息。此外，它还公开了作业的查询功能和管理操作</p>
<p><strong>DynamicBpmnService</strong>可用于更改流程定义的一部分，而无需重新部署它。例如，您可以更改流程定义中用户任务的受理人定义，或更改服务任务的类名。</p>
<h3 id="异常策略">异常策略</h3>
<p>Flowable 中的基本异常是 org.flowable.engine.FlowableException</p>
<p>Flowable的一些异常子类</p>
<ul>
<li>FlowableWrongDbException：当 Flowable
引擎发现数据库架构版本和引擎版本不匹配时抛出。</li>
<li>FlowableOptimisticLockingException：当并发访问同一数据条目导致数据存储发生乐观锁定时抛出。</li>
<li>FlowableClassLoadingException：当请求加载的类未找到或加载时发生错误时抛出（例如
JavaDelegates、TaskListeners ......）。</li>
<li>FlowableObjectNotFoundException：当请求或操作的对象不存在时抛出。</li>
<li>FlowableIllegalArgumentException：异常表明在 Flowable API
调用中提供了非法参数，在引擎配置中配置了非法值，或者提供了非法值，或者在流程定义中使用了非法值。</li>
<li>FlowableTaskAlreadyClaimedException：当任务已被声明时抛出，当
taskService.claim(...) 被调用时</li>
</ul>
<h3 id="查询接口">查询接口</h3>
<p>引擎查询数据有两种方式：the query API and native queries</p>
<ul>
<li><p>queryAPi允许使用fluent API编写完全类型安全的查询，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">    .taskAssignee(<span class="string">&quot;kermit&quot;</span>)</span><br><span class="line">    .processVariableValueEquals(<span class="string">&quot;orderId&quot;</span>, <span class="string">&quot;0815&quot;</span>)</span><br><span class="line">    .orderByDueDate().asc()</span><br><span class="line">    .list();</span><br></pre></td></tr></table></figure></li>
<li><p>native queries
（返回类型由您使用的查询对象定义，数据映射到正确的对象[比如任务、流程实例、执行等，且您必须使用在数据库中定义的表明和列名]）。如下，可以通过api检索表名等，使依赖关系尽可能小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createNativeTaskQuery()</span><br><span class="line">  .sql(<span class="string">&quot;SELECT count(*) FROM &quot;</span> + managementService.getTableName(Task.class) +</span><br><span class="line">      <span class="string">&quot; T WHERE T.NAME_ = #&#123;taskName&#125;&quot;</span>)</span><br><span class="line">  .parameter(<span class="string">&quot;taskName&quot;</span>, <span class="string">&quot;gonzoTask&quot;</span>)</span><br><span class="line">  .list();</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> taskService.createNativeTaskQuery()</span><br><span class="line">  .sql(<span class="string">&quot;SELECT count(*) FROM &quot;</span> + managementService.getTableName(Task.class) + <span class="string">&quot; T1, &quot;</span> +</span><br><span class="line">      managementService.getTableName(VariableInstanceEntity.class) + <span class="string">&quot; V1 WHERE V1.TASK_ID_ = T1.ID_&quot;</span>)</span><br><span class="line">  .count();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="变量">变量</h3>
<ul>
<li><p>每个流程实例都需要并使用数据来执行其组成的步骤。在 Flowable
中，这些数据称为<em>变量</em>，存储在数据库中</p></li>
<li><p>流程实例可以有变量（称为<em>流程变量</em>），也可以有<em>执</em>行（指向流程处于活动状态的特定指针）。用户任务也可以有变量，变量存储在ACT_RU_VARIABLE数据库表中</p></li>
<li><p>所有<em>startProcessInstanceXXX</em>方法都有一个可选参数，用于在创建和启动流程实例时提供变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessInstance <span class="title function_">startProcessInstanceByKey</span><span class="params">(String processDefinitionKey, Map&lt;String, Object&gt; variables)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>可以在流程执行期间添加变量。例如，（<em>RuntimeService</em>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setVariable</span><span class="params">(String executionId, String variableName, Object value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariableLocal</span><span class="params">(String executionId, String variableName, Object value)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariables</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariablesLocal</span><span class="params">(String executionId, Map&lt;String, ? extends Object&gt; variables)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>检索变量
<em>TaskService</em>上存在类似的方法。这意味着任务（如执行）可以具有仅在任务期间“活动”的局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(String executionId)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariablesLocal</span><span class="params">(String executionId)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariablesLocal</span><span class="params">(String executionId, Collection&lt;String&gt; variableNames)</span>;</span><br><span class="line">Object <span class="title function_">getVariable</span><span class="params">(String executionId, String variableName)</span>;</span><br><span class="line">&lt;T&gt; T <span class="title function_">getVariable</span><span class="params">(String executionId, String variableName, Class&lt;T&gt; variableClass)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>当前<strong><em>执行</em></strong>或<strong><em>任务</em></strong>对象是可用的，它可以用于变量设置和/或检索</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution.getVariables();</span><br><span class="line">execution.getVariables(Collection&lt;String&gt; variableNames);</span><br><span class="line">execution.getVariable(String variableName);</span><br><span class="line"></span><br><span class="line">execution.setVariables(Map&lt;String, object&gt; variables);</span><br><span class="line">execution.setVariable(String variableName, Object value);</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>在执行上述任何调用时，所有</strong>变量都会在后台从数据库中获取。这意味着，如果您有
10
个变量，但只能通过<em>getVariable("myVariable")</em>获得一个，那么在幕后将获取并缓存其他
9 个</p></li>
<li><p>接上述，可以设置是否缓存所有变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getVariables</span><span class="params">(Collection&lt;String&gt; variableNames, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br><span class="line">Object <span class="title function_">getVariable</span><span class="params">(String variableName, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setVariable</span><span class="params">(String variableName, Object value, <span class="type">boolean</span> fetchAllVariables)</span>;</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="瞬态变量">瞬态变量</h3>
<p>瞬态变量是行为类似于常规变量但不持久的变量。通常，瞬态变量用于高级用例</p>
<ul>
<li>对于瞬态变量，根本没有存储历史记录。</li>
<li>与<em>常规</em>变量一样，瞬态变量在设置时放在<em>最高父</em>级。这意味着在执行时设置变量时，瞬态变量实际上存储在流程实例执行中。与常规变量一样，如果在特定执行或任务上设置变量，则存在方法的<em>局部变体。</em></li>
<li>只能在流程定义中的下一个“等待状态”之前访问瞬态变量。在那之后，他们就走了。在这里，等待状态是指流程实例中它被持久化到数据存储中的点。请注意，在此定义中，<em>异步</em>活动也是“等待状态”！</li>
<li>瞬态变量只能由<em>setTransientVariable(name,
value)</em>设置，但调用<em>getVariable(name)</em>时也会返回瞬态变量（也存在一个<em>getTransientVariable(name)</em>，它只检查瞬态变量）。这样做的原因是使表达式的编写变得容易，并且使用变量的现有逻辑适用于这两种类型。</li>
<li>瞬态变量会<em>隐藏</em>同名的持久变量。这意味着当在流程实例上同时设置持久变量和瞬态变量并<em>调用
getVariable("someVariable")</em>时，将返回瞬态变量值。</li>
</ul>
<p>可以在大多数地方设置和获取瞬态变量</p>
<ul>
<li><p>关于<em>JavaDelegate</em>实现中的<em>DelegateExecution</em></p></li>
<li><p>关于<em>ExecutionListener</em>实现中的DelegateExecution<em>和</em>关于<em>TaskListener</em>实现的<em>DelegateTask</em></p></li>
<li><p><em>通过执行</em>对象在脚本任务中</p></li>
<li><p>通过运行时服务启动流程实例时</p></li>
<li><p>完成任务时</p></li>
<li><p>调用<em>runtimeService.trigger</em>方法时</p></li>
<li><p>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariable</span><span class="params">(String variableName, Object variableValue)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariableLocal</span><span class="params">(String variableName, Object variableValue)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariables</span><span class="params">(Map&lt;String, Object&gt; transientVariables)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setTransientVariablesLocal</span><span class="params">(Map&lt;String, Object&gt; transientVariables)</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">getTransientVariable</span><span class="params">(String variableName)</span>;</span><br><span class="line">Object <span class="title function_">getTransientVariableLocal</span><span class="params">(String variableName)</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getTransientVariables</span><span class="params">()</span>;</span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getTransientVariablesLocal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeTransientVariable</span><span class="params">(String variableName)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeTransientVariableLocal</span><span class="params">(String variableName)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>典型示例 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/api.transient.variable.example.png"
alt="api.transient.variable.example" /></p></li>
<li><p>瞬态变量传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessInstance</span> <span class="variable">processInstance</span> <span class="operator">=</span> runtimeService.createProcessInstanceBuilder()</span><br><span class="line">       .processDefinitionKey(<span class="string">&quot;someKey&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam01&quot;</span>, <span class="string">&quot;A&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam02&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">       .transientVariable(<span class="string">&quot;configParam03&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">       .start();</span><br></pre></td></tr></table></figure>
<ul>
<li><p>获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FetchDataServiceTask</span> <span class="keyword">implements</span> <span class="title class_">JavaDelegate</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(DelegateExecution execution)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">configParam01</span> <span class="operator">=</span> (String) execution.getVariable(configParam01);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="type">RestResponse</span> <span class="variable">restResponse</span> <span class="operator">=</span> executeRestCall();</span><br><span class="line">    execution.setTransientVariable(<span class="string">&quot;response&quot;</span>, restResponse.getBody());</span><br><span class="line">    execution.setTransientVariable(<span class="string">&quot;status&quot;</span>, restResponse.getStatus());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>离开独占网关的序列流的条件不知道使用的是持久变量还是瞬态变量（在本例中为<em>状态</em>瞬态变量）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">&quot;tFormalExpression&quot;</span>&gt;</span>$&#123;status == 200&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="表达式">表达式</h3>
<p>Flowable使用UEL进行表达式解析，UEL代表统一表达式语言，是EE6规范的一部分。两种类型的表达式（值表达式和方法表达式），都可以在需要表达式的地方使用</p>
<ul>
<li><p>值表达式，解析为一个值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;myVar&#125;</span><br><span class="line">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方法表达式：调用带或不带参数的方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$&#123;printer.print()&#125;</span><br><span class="line">$&#123;myBean.addNewOrder(&#x27;orderName&#x27;)&#125;</span><br><span class="line">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表达式函数">表达式函数</h3>
<p>一些开箱即用的函数</p>
<ul>
<li><strong>variables:get(varName)</strong>：检索变量的值。与直接在表达式中写变量名的主要区别在于，当变量不存在时，使用这个函数不会抛出异常。例如，如果<em>myVariable</em>不存在，<em><span
class="math inline">\({myVariable ==
&quot;hello&quot;}*会抛出异常，但*\)</span>{var:get(myVariable) ==
'hello'}</em>会正常工作。</li>
<li><strong>variables:getOrDefault(varName,
defaultValue)</strong>：类似于<em>get</em>，但可以选择提供默认值，当变量未设置或值为<em>null</em>时返回。</li>
<li><strong>variables:exists(varName)</strong>
：如果变量具有非空值，则返回<em>true 。</em></li>
<li><strong>variables:isEmpty(varName)</strong> (alias <em>:empty</em> )
: 检查变量值是否不为空。根据变量类型，行为如下：
<ul>
<li>对于字符串变量，如果变量是空字符串，则认为该变量为空。</li>
<li>对于 java.util.Collection 变量，如果集合没有元素，则返回<em>true
。</em></li>
<li>对于 ArrayNode 变量，如果没有元素则返回<em>true</em></li>
<li>如果变量为<em>null</em>，则始终返回<em>true</em></li>
</ul></li>
<li><strong>variables:isNotEmpty(varName)</strong> (alias <em>:
notEmpty) :</em> <em>isEmpty</em>的逆运算。</li>
<li><strong>variables:equals(varName,
value)</strong>（别名<em>:eq</em>）：检查变量是否等于给定值。这是表达式的简写函数，否则将被写为<em>${execution.getVariable("varName")
!= null &amp;&amp; execution.getVariable("varName") == value}</em>。
<ul>
<li>如果变量值为 null，则返回 false（除非与 null 比较）。</li>
</ul></li>
<li><strong>variables:notEquals(varName, value)</strong>（别名<em>:ne
）：</em> <em>equals</em>的反向比较。</li>
<li><strong>variables:contains(varName, value1, value2,
...)</strong>：检查提供的<strong>所有</strong>值是否包含在变量中。根据变量类型，行为如下：
<ul>
<li>对于字符串变量，传递的值用作需要成为变量一部分的子字符串</li>
<li>对于 java.util.Collection
变量，所有传递的值都需要是集合的一个元素（正则<em>包含</em>语义）。</li>
<li>对于 ArrayNode 变量：支持检查 arraynode
是否包含作为变量类型支持的类型的 JsonNode</li>
<li>当变量值为 null 时，在所有情况下都返回
false。当变量值不为null，且实例类型不是上述类型之一时，会返回false。</li>
</ul></li>
<li><strong>variables:containsAny(varName, value1, value2,
...)</strong>：类似于<em>contains</em>函数，但如果<strong>任何</strong>（而非全部）传递的值包含在变量中，则将返回<em>true
。</em></li>
<li><strong>variables:base64(varName)</strong>：将二进制或字符串变量转换为
Base64 字符串</li>
<li>比较器功能：
<ul>
<li><strong>variables:lowerThan(varName, value)</strong>
(别名<em>:lessThan</em>或<em>:lt</em> ) :
<em>${execution.getVariable("varName") != null &amp;&amp;
execution.getVariable("varName") &lt; value}的简写</em></li>
<li><strong>变量：lowerThanOrEquals(varName,
value)</strong>（别名<em>:lessThanOrEquals</em>或<em>:lte</em>）：类似，但现在用于<em>&lt;
=</em></li>
<li><strong>variables:greaterThan(varName, value)</strong> (alias
<em>:gt</em> ) : 类似，但现在用于<em>&gt;</em></li>
<li><strong>variables:greaterThanOrEquals(varName, value)</strong>
(alias <em>:gte</em> ) : 类似，但现在用于<em>&gt; =</em></li>
</ul></li>
<li></li>
</ul>
<h3 id="单元测试">单元测试</h3>
<p>使用自定义资源进行单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@FlowableTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBusinessProcessTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine;</span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">(ProcessEngine processEngine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processEngine = processEngine;</span><br><span class="line">        <span class="built_in">this</span>.runtimeService = processEngine.getRuntimeService();</span><br><span class="line">        <span class="built_in">this</span>.taskService = processEngine.getTaskService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Deployment(resources = &quot;holiday-request.bpmn20.xml&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSimpleProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; employeeInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        employeeInfo.put(<span class="string">&quot;employee&quot;</span>, <span class="string">&quot;wangwu1028930&quot;</span>);</span><br><span class="line">        <span class="comment">//employeeInfo.put()</span></span><br><span class="line">        runtimeService.startProcessInstanceByKey(</span><br><span class="line">                <span class="string">&quot;holidayRequest&quot;</span>, employeeInfo</span><br><span class="line">        );</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().singleResult();</span><br><span class="line">        assertEquals(<span class="string">&quot;Approve or reject request&quot;</span>, task.getName());</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;approved&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        taskService.complete(task.getId(), hashMap);</span><br><span class="line">        assertEquals(<span class="number">1</span>, runtimeService</span><br><span class="line">                .createProcessInstanceQuery().count());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调试单元测试">调试单元测试</h3>
<h3 id="web应用程序中的流程引擎">Web应用程序中的流程引擎</h3>
<p>编写一个简单的ServletContextListener来初始化和销毁普通Servlet环境中的流程引擎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessEnginesServletContextListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    ProcessEngines.init();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">    ProcessEngines.destroy();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，ProcessEngines.init()将在类路径中查找flowable.cfg.xml资源文件，并为给定的配置创建一个ProcessEngine，使用下面两种方式来获取他</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProcessEngines.getDefaultProcessEngine()</span><br><span class="line"><span class="comment">//或者下面的方式</span></span><br><span class="line">ProcessEngines.getProcessEngine(<span class="string">&quot;myName&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-04-spring</title>
    <url>/2022/04/29/study/flowable/offical/04/</url>
    <content><![CDATA[<h3 id="processenginefactorybean">ProcessEngineFactoryBean</h3>
<ul>
<li><p>将ProcessEngine配置为常规的SpringBean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用transaction</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.SimpleDriverDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.h2.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:h2:mem:flowable;DB_CLOSE_DELAY=1000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sa&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;asyncExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getHistoryService&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;managementService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getManagementService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>还包括了其他的一些bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bean id=<span class="string">&quot;userBean&quot;</span> class=<span class="string">&quot;org.flowable.spring.test.UserBean&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;runtimeService&quot;</span> ref=<span class="string">&quot;runtimeService&quot;</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bean id=<span class="string">&quot;printer&quot;</span> class=<span class="string">&quot;org.flowable.spring.test.Printer&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>使用</p>
<ul>
<li><p>使用XML资源方式类配置Spring应用程序上下文</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPathXmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">    <span class="string">&quot;org/flowable/examples/spring/SpringTransactionIntegrationTest-context.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><p>或者添加注解</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(</span></span><br><span class="line"><span class="meta"> &quot;classpath:org/flowable/spring/test/transaction/SpringTransactionIntegrationTest-context.xml&quot;)</span></span><br></pre></td></tr></table></figure></p></li>
</ul></li>
<li><p>获取服务bean并进行部署流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RepositoryService</span> <span class="variable">repositoryService</span> <span class="operator">=</span></span><br><span class="line">  (RepositoryService) applicationContext.getBean(<span class="string">&quot;repositoryService&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">deploymentId</span> <span class="operator">=</span> repositoryService</span><br><span class="line">  .createDeployment()</span><br><span class="line">  .addClasspathResource(<span class="string">&quot;org/flowable/spring/test/hello.bpmn20.xml&quot;</span>)</span><br><span class="line">  .deploy()</span><br><span class="line">  .getId();</span><br></pre></td></tr></table></figure></li>
<li><p>下面看userBean类，使用了Transaction事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBean</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** injected by Spring */</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// here you can do transactional stuff in your domain model</span></span><br><span class="line">    <span class="comment">// and it will be combined in the same transaction as</span></span><br><span class="line">    <span class="comment">// the startProcessInstanceByKey to the Flowable RuntimeService</span></span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">&quot;helloProcess&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRuntimeService</span><span class="params">(RuntimeService runtimeService)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.runtimeService = runtimeService;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用userBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserBean</span> <span class="variable">userBean</span> <span class="operator">=</span> (UserBean) applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>);</span><br><span class="line">userBean.hello();</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h3 id="表达式">表达式</h3>
<ul>
<li><p>BPMN 流程中的所有<a
href="https://www.flowable.com/open-source/docs/bpmn/ch04-API#expressions">表达式</a>也将默认“看到”所有
Spring bean</p></li>
<li><p><strong>要完全不暴露任何 bean，只需将一个空列表作为
SpringProcessEngineConfiguration 上的“beans”属性传递。当没有设置 'beans'
属性时，上下文中的所有 Spring beans 都将可用</strong></p></li>
<li><p>如下，可以设置暴露的bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beans&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;printer&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.examples.spring.Printer&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>现在的bean进行公开了，在.bpmn20.xml中可以使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">id</span>=<span class="string">&quot;definitions&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">&quot;helloProcess&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow1&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;start&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;print&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">&quot;print&quot;</span> <span class="attr">flowable:expression</span>=<span class="string">&quot;#&#123;printer.printMessage()&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">&quot;flow2&quot;</span> <span class="attr">sourceRef</span>=<span class="string">&quot;print&quot;</span> <span class="attr">targetRef</span>=<span class="string">&quot;end&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Print类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>spring配置bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;printer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.examples.spring.Printer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自动资源部署">自动资源部署</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.SpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deploymentResources&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;classpath*:/org/flowable/spring/test/autodeployment/autodeploy.*.bpmn20.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.flowable.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="单元测试">单元测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExtendWith(FlowableSpringExtension.class)</span></span><br><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringJunitJupiterTest.TestConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBusinessProcessTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@Deployment</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">simpleProcessTest</span><span class="params">()</span> &#123;</span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">&quot;simpleProcess&quot;</span>);</span><br><span class="line">    <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.createTaskQuery().singleResult();</span><br><span class="line">    assertEquals(<span class="string">&quot;My Task&quot;</span>, task.getName());</span><br><span class="line"></span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">    assertEquals(<span class="number">0</span>, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>Flowable-05-spring-boot</title>
    <url>/2022/04/29/study/flowable/offical/05/</url>
    <content><![CDATA[<h3 id="入门">入门</h3>
<p>需要两个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">flowable.version</span>&gt;</span>6.7.2<span class="tag">&lt;/<span class="name">flowable.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.flowable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flowable-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;flowable.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.212<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结合Spring：</p>
<p>只需将依赖项添加到类路径并使用<em><span class="citation"
data-cites="SpringBootApplication">@SpringBootApplication</span></em>注释，幕后就会发生很多事情：</p>
<ul>
<li><p>自动创建内存数据源（因为 H2 驱动程序位于类路径中）并传递给
Flowable 流程引擎配置</p></li>
<li><p>已创建并公开了 Flowable
ProcessEngine、CmmnEngine、DmnEngine、FormEngine、ContentEngine 和
IdmEngine bean</p></li>
<li><p>所有 Flowable 服务都暴露为 Spring bean</p></li>
<li><p>Spring Job Executor 已创建</p></li>
<li><p>将自动部署<em>流程</em>文件夹中的任何 BPMN 2.0
流程定义。创建一个文件夹<em>processes</em>并将一个虚拟进程定义（名为<em>one-task-process.bpmn20.xml</em>）添加到此文件夹。该文件的内容如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;definitions</span><br><span class="line">        xmlns=<span class="string">&quot;http://www.omg.org/spec/BPMN/20100524/MODEL&quot;</span></span><br><span class="line">        xmlns:flowable=<span class="string">&quot;http://flowable.org/bpmn&quot;</span></span><br><span class="line">        targetNamespace=<span class="string">&quot;Examples&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;process id=<span class="string">&quot;oneTaskProcess&quot;</span> name=<span class="string">&quot;The One Task Process&quot;</span>&gt;</span><br><span class="line">        &lt;startEvent id=<span class="string">&quot;theStart&quot;</span> /&gt;</span><br><span class="line">        &lt;sequenceFlow id=<span class="string">&quot;flow1&quot;</span> sourceRef=<span class="string">&quot;theStart&quot;</span> targetRef=<span class="string">&quot;theTask&quot;</span> /&gt;</span><br><span class="line">        &lt;userTask id=<span class="string">&quot;theTask&quot;</span> name=<span class="string">&quot;my task&quot;</span> flowable:assignee=<span class="string">&quot;kermit&quot;</span> /&gt;</span><br><span class="line">        &lt;sequenceFlow id=<span class="string">&quot;flow2&quot;</span> sourceRef=<span class="string">&quot;theTask&quot;</span> targetRef=<span class="string">&quot;theEnd&quot;</span> /&gt;</span><br><span class="line">        &lt;endEvent id=<span class="string">&quot;theEnd&quot;</span> /&gt;</span><br><span class="line">    &lt;/process&gt;</span><br><span class="line"></span><br><span class="line">&lt;/definitions&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><em>案例</em>文件夹中的任何 CMMN 1.1
案例定义都将自动部署。</p></li>
<li><p>将自动部署<em>dmn</em>文件夹中的任何 DMN 1.1 dmn 定义。</p></li>
<li><p><em>表单</em>文件夹中的任何表单定义都将自动部署。</p></li>
</ul>
<p>java代码 在项目服务启动的时候就去加载一些数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommandLineRunner <span class="title function_">init</span><span class="params">(<span class="keyword">final</span> RepositoryService repositoryService,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> RuntimeService runtimeService,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> TaskService taskService)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该bean在项目服务启动的时候就去加载一些数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//有几个流程定义</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of process definitions : &quot;</span></span><br><span class="line">                        + repositoryService.createProcessDefinitionQuery().count());</span><br><span class="line">                <span class="comment">//有多少个任务</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of tasks : &quot;</span> + taskService.createTaskQuery().count());</span><br><span class="line">                runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>);</span><br><span class="line">                <span class="comment">//开启流程后有多少个任务（+1）</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Number of tasks after process start: &quot;</span></span><br><span class="line">                        + taskService.createTaskQuery().count());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="更改数据库">更改数据库</h3>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yml中添加配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/flowable-spring-boot?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;nullCatalogMeansCurrent=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="rest支持">Rest支持</h3>
<ul>
<li><p>web支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>使用Service启动流程及获取给定受让人的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">getTasks</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskService.createTaskQuery().taskAssignee(assignee).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建REST端点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/process&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcessInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        myService.startProcess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/tasks&quot;, method= RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TaskRepresentation&gt; <span class="title function_">getTasks</span><span class="params">(<span class="meta">@RequestParam</span> String assignee)</span> &#123;</span><br><span class="line">        List&lt;Task&gt; tasks = myService.getTasks(assignee);</span><br><span class="line">        List&lt;TaskRepresentation&gt; dtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TaskRepresentation&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">            dtos.add(<span class="keyword">new</span> <span class="title class_">TaskRepresentation</span>(task.getId(), task.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dtos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TaskRepresentation</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TaskRepresentation</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用下面语句进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/tasks?assignee=kermit</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">curl -X POST  http://localhost:8080/process</span><br><span class="line"></span><br><span class="line">curl http://localhost:8080/tasks?assignee=kermit</span><br><span class="line">[&#123;&quot;id&quot;:&quot;10004&quot;,&quot;name&quot;:&quot;my task&quot;&#125;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="jpa支持">JPA支持</h4>
<ul>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建一个实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String username, String firstName, String lastName, Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastName</span><span class="params">(String lastName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthDate</span><span class="params">(Date birthDate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthDate = birthDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>属性文件添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br></pre></td></tr></table></figure></li>
<li><p>添加Repository类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Person, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Person <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
<ul>
<li><p>添加事务</p></li>
<li><p>startProcess现在修改成：获取传入的受理人用户名，查找Person，并将PersonJPA对象作为流程变量放入流程实例中</p></li>
<li><p>在CommandLineRunner中初始化时创建用户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository personRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcess</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> personRepository.findByUsername(assignee);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        variables.put(<span class="string">&quot;person&quot;</span>, person);</span><br><span class="line">        runtimeService.startProcessInstanceByKey(<span class="string">&quot;oneTaskProcess&quot;</span>, variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">getTasks</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskService.createTaskQuery().taskAssignee(assignee).list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createDemoUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (personRepository.findAll().size() == <span class="number">0</span>) &#123;</span><br><span class="line">            personRepository.save(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;jbarrez&quot;</span>, <span class="string">&quot;Joram&quot;</span>, <span class="string">&quot;Barrez&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            personRepository.save(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;trademakers&quot;</span>, <span class="string">&quot;Tijs&quot;</span>, <span class="string">&quot;Rademakers&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>CommandRunner修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CommandLineRunner <span class="title function_">init</span><span class="params">(<span class="keyword">final</span> MyService myService)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandLineRunner</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            myService.createDemoUsers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>RestController修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/process&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startProcessInstance</span><span class="params">(<span class="meta">@RequestBody</span> StartProcessRepresentation startProcessRepresentation)</span> &#123;</span><br><span class="line">        myService.startProcess(startProcessRepresentation.getAssignee());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StartProcessRepresentation</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String assignee;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAssignee</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> assignee;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAssignee</span><span class="params">(String assignee)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.assignee = assignee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改流程定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">&quot;theTask&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my task&quot;</span> <span class="attr">flowable:assignee</span>=<span class="string">&quot;$&#123;person.id&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<ul>
<li><p>启动spring boot之后person表会有两条数据</p></li>
<li><p>启动流程实例</p>
<p>此时会把从数据库查找到的person传入流程图(变量)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;&quot;assignee&quot; : &quot;jbarrez&quot;&#125;&#x27; http://localhost:8080/process</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>使用id获取任务列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/tasks?assignee=1</span><br><span class="line"></span><br><span class="line">[&#123;&quot;id&quot;:&quot;12505&quot;,&quot;name&quot;:&quot;my task&quot;&#125;]</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul></li>
</ul>
<h3 id="可流动的执行器端点">可流动的执行器端点</h3>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>flowable官方</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_01-06</title>
    <url>/2022/01/25/study/linux/hanshunping/01-06/</url>
    <content><![CDATA[<h2 id="基础介绍">基础介绍</h2>
<ul>
<li><p>本套课程内容<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643095663069.png" /></p>
<ul>
<li>基础篇: linux入门、vm和Linux的安装、linux目录结构</li>
<li>实操篇
<ul>
<li>远程登录（xshell，xftp）、实用指令、进程管理、用户管理</li>
<li>vi和vim编辑器、定时任务调度、RPM和YUM</li>
<li>开机、重启和用户登录注销、磁盘分区及挂载、网络配置</li>
</ul></li>
</ul></li>
<li><p>linux使用的地方</p>
<ul>
<li>在linux下开发项目(需要把javaee项目部署到linux下运行)</li>
<li>linux运维工程师(服务器规划、优化、监控等)</li>
<li>linux嵌入式工程师(linux下驱动开发[c,c++])</li>
</ul></li>
<li><p>linux应用领域</p>
<ul>
<li>个人桌面</li>
<li>服务器(免费稳定高效)</li>
<li>嵌入式领域(对软件裁剪，内核最小可达几百kb等) ## linux介绍</li>
</ul></li>
<li><p>linux是一个开源免费操作系统</p></li>
<li><p>linux吉祥物<br />
tux(/tu'ks/唾可si)，没找到音标，将就一下<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643096979670.png" /></p></li>
<li><p>linux之父，linus，也是git的创作者<br />
主要发行版：<strong>Ubuntu、RedHat，Centos</strong>，Debian等<br />
RedHat和Centos使用同样的源码，但是RedHat收费</p></li>
<li><p>Linux和Unix的关系<br />
unix也是一个操作系统，贝尔实验室。做一个多用户分时操作系统，
multics，但是没完成。其中一个后来在这基础上，完成的操作系统为unix
（原本是B语言写的），后面和另一个人用unix用c语言改写了。<br />
unix源码是公开的，后面商业公司拿来包装做成自己的系统，
后面有个人提倡自由时代用户应该对源码享有读写权利而非垄断<br />
后面RichardStallman发起GNU计划（开源计划），Linus参加该计划，并共享出linux内核，于是大家在此基础上开发出各种软件。linux又称GNU/linux<br />
</p></li>
<li><p>Linux和Unix关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098018271.png" />
## VMWare安装Centos7.6 在windows中安装Linux系统<br />
</p></li>
<li><p>VM和Linux系统在pc中的关系<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643098209668.png" /></p></li>
<li><p>安装过程中，网络模式使用NAT模式</p></li>
<li><p>选择最小安装，且选择CompatibilityLibraries和DevelopmentTools<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100381319.png" /></p></li>
<li><p>linux分区<br />
一般分为三个<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100444776.png" /><br />
一般boot1G,swap分区一般跟内存大小一致，这里是2G，所以根分区就是剩下的，也就是20-1-2=17G<br />
如图，boot，/，swap都是标准分区。且boot和/是ext4的文件格式，swap是swap的文件格式<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643100873342.png" /><br />
</p></li>
<li><p>修改主机名<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101039503.png" /></p></li>
<li><p>修改密码及增加除root外的普通用户</p></li>
<li><p>修改网络为固定ip(NAT模式下)</p>
<ul>
<li>先在VM里面把子网ip改了，这里改成 192.168.200.0<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101673327.png" /></li>
<li>然后改网关为192.168.200.200<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1643101741006.png" /></li>
<li>使用yum install -y vim 安装文本编辑工具</li>
<li>最后在linux中改配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li>
<li>其中先修改BOOTPROTO="static"</li>
<li>然后设置ip地址、网关和DNS，
下面是添加到上面的ifcfg-ens33后面，不是直接执行代码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPADDR=192.168.200.200</span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line">DNS1=192.168.200.2</span><br></pre></td></tr></table></figure></li>
<li>使用命令重启网络<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart </span><br><span class="line"># 或者直接重启电脑 reboot</span><br></pre></td></tr></table></figure></li>
</ul></li>
<li><p>这里顺便装一下zsx<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure></p></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_07-11</title>
    <url>/2022/05/10/study/linux/hanshunping/07-11/</url>
    <content><![CDATA[<h2 id="网络连接">网络连接</h2>
<ul>
<li>网络连接的三种模式 同一个教室的三个主机 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510204902224.png"
alt="image-20220510204902224" /> 此时三个同学可以正常通讯
<ul>
<li>桥接模式 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205004081.png"
alt="image-20220510205004081" />
这是张三的虚拟机和外部互通；但是如果这样设置，ip会不够用；</li>
<li>NAT模式 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205245256.png"
alt="image-20220510205245256" />
如图，虚拟机可以跟虚拟的网卡(192.168.100.99)互通，且通过这个虚拟网卡，及（192.168.0.50代理），与外界(192.168.0.X)互通
<strong>NAT模式，网络地址转换模式</strong>，虚拟系统和外部系统通讯，不造成IP冲突
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510205620317.png"
alt="image-20220510205620317" />
注意，这里外部其他主机(除0.50和100.99)是访问不到100.88的</li>
<li>主机模式：独立的系统</li>
</ul></li>
</ul>
<h2 id="虚拟机克隆">虚拟机克隆</h2>
<ul>
<li>方式1，直接拷贝整个文件夹 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210154549.png"
alt="image-20220510210154549" /></li>
<li>方式2，使用VMWare 克隆前先把克隆目标关闭
克隆虚拟机当前状态--创建完整克隆</li>
</ul>
<h2 id="虚拟机快照">虚拟机快照</h2>
<ul>
<li><p>为什么需要虚拟机快照 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210527420.png"
alt="image-20220510210527420" /></p></li>
<li><p>快照a <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210626085.png"
alt="image-20220510210626085" /> 之后创建了文件夹hello 然后拍摄快照b
之后创建了文件夹hello2 然后拍摄快照c</p></li>
<li><p>目前 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210820396.png" /></p>
<p><img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210750325.png" /></p></li>
<li><p>回到快照A <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510210948723.png"
alt="image-20220510210948723" />
之后会重启，效果（两个文件夹都没有了)</p></li>
<li><p>如果恢复到B，然后再创建一个快照，就会变成 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211106691.png"
alt="image-20220510211106691" /></p></li>
</ul>
<h2 id="虚拟机迁移">虚拟机迁移</h2>
<ul>
<li>直接剪切、删除，即可 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211233012.png"
alt="image-20220510211233012" /></li>
</ul>
<h2 id="vmtools工具">vmtools工具</h2>
<ul>
<li>如下步骤，注意，这里只是在有界面的情况下进行安装 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211404957.png"
alt="image-20220510211404957" /></li>
<li>安装完毕后
<ul>
<li>在vm上面设置 <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/image-20220510211547484.png"
alt="image-20220510211547484" /></li>
<li>共享文件夹在linux中的路径 /mnt/hgfs/myshare</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux_韩老师</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_韩老师_12-20</title>
    <url>/2022/05/10/study/linux/hanshunping/12-20/</url>
    <content><![CDATA[<h2 id="目录结构">目录结构</h2>
<h2 id="远程登陆">远程登陆</h2>
<h2 id="远程文件传输">远程文件传输</h2>
<h2 id="vim快捷键">vim快捷键</h2>
<h2 id="关机重启">关机重启</h2>
<h2 id="登录注销">登录注销</h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>算法红皮书(第四版)</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_01-05</title>
    <url>/2021/12/27/study/redis/shangguigu_BV1Rv41177Af/01-05/</url>
    <content><![CDATA[<h2 id="课程简介">课程简介</h2>
<p>NoSQL数据库简介、Redis概述与安装、常用五大数据结构、配置文件详解、发布与订阅、Redis6新数据类型、Redis与spring
boot整合、事务操作、持久化之RDB、持久化之AOF、主从复制及集群、Redis6应用问题(缓存穿透、击穿、雪崩以及分布式锁)、Redis6新增功能
## NoSQL数据库简介 * Redis属于NoSQL数据库 * 技术分为三大类 *
解决功能性问题：Java、Jsp、RDBMS、Tomcat、Linux、JDBC、SVN *
解决扩展性问题：Struts、Spring、SpringMVC、Hibernate、Mybatis *
解决性能问题：NoSQL、Java线程、Nginx、MQ、ElasticSearch *
缓存数据库的好处 * 完全在内存中，速度快，结构简单 *
作为缓存数据库：减少io的读操作<br />
* NoSQL＝Not Only SQL,不仅仅是SQL，泛指<strong>非泛型数据库</strong> *
不支持ACID(但是NoSQL支持事务) * 选超于SQL的性能 * NoSQL适用场景 *
对数据高并发的读写 * 海量数据的读写 * 对数据高可扩展性 *
NoSQL不适用的场景 * 需要事务支持 * 基于sql的结构化查询存储 *
多种NoSQL数据库介绍 * Memcache
不支持持久化，数据类型单一，一般作为辅助持久化的数据库 * Redis
支持持久化，除了k-v模式还有其他多种数据结构，一般作为辅助持久化的数据库
*
MongoDB，是文档型数据类型；k-v模型，但是对value提供了丰富的查询功能；支持二进制数据及大型对象；替代RDBMS，成为独立数据库
* 大数据时代（行式数据库、列式数据库） * 行式数据库<br />
查询某一块数据的时候效率高<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929802056.png" /><br />
* 列式数据库<br />
查询某一列统计信息快<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929838300.png" /><br />
* 其他<br />
Hbase，Cassandra，图关系数据库(比如社会关系，公共交通网等)<br />
* 小计<br />
NoSQL数据库是为提高性能而产生的非关系型数据库<br />
## Redis概述与安装<br />
* 简单概述<br />
* Redis是一个开源的kv存储系统<br />
*
相比Mencached，支持存储的数据类型更多，包括string，list，set，zset以及hash，这些类型都支持(pop、add/remove及取交并集和差集等)，操作都是原子性的<br />
* Redis数据都是缓存在内存中 *
Redis会周期性地把数据写入磁盘或修改操作写入追加的记录文件 *
能在此基础上实现master-slave(主从)同步 * Redis功能 *
配合关系型数据库做高速缓存 * Redis具有多样的数据结构存储持久化数据 *
其他部分功能<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640929869759.png" /><br />
* Redis安装<br />
* 从官网中下载redis-6.xx.tar.gz包(该教程在linux中使用redis6教学) *
编译redis需要gcc环境 * 使用gcc --version查看服务器是否有gcc环境 *
如果没有需要进行安装 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install -y gcc</span><br><span class="line">或者</span><br><span class="line">yum install -y gcc</span><br></pre></td></tr></table></figure> * 将redis压缩文件进行解压
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6xx.tar.gz</span><br></pre></td></tr></table></figure> * 进入解压后的文件夹，并使用make命令进行编译<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure> * 如果报错了，需要先用下面命令清理，之后再进行编译
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make distclean</span><br></pre></td></tr></table></figure> * 安装redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure> *
进入/usr/local/bin目录，查看目录<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1640939791651.png" />
* Redis启动 * 前台启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server </span><br></pre></td></tr></table></figure> * 后台启动 *
在刚才解压的文件夹中，拷贝出redis.conf文件(这里拷贝到/etc/目录下)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf /etc/redis.conf</span><br></pre></td></tr></table></figure> * 到etc中修改redis.conf文件<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/redis.conf</span><br><span class="line"># 进入编辑器后使用下面命令进行搜索并回车</span><br><span class="line">/daemonize no</span><br></pre></td></tr></table></figure> 将no改为yes并保存 * 进入/usr/local/bin目录启动redis
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf </span><br></pre></td></tr></table></figure> * 查看进程，发现redis已经启动 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure> *
使用redis-cli 客户端连接redis <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">keys * </span><br></pre></td></tr></table></figure> ## 相关知识<br />
* Redis6379的由来 * 人名Merz 在九宫格对应的数字就是6379<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283251602.png" />
* Redis默认有15个库，默认数据都在数据库0中，所有库的密码都是相同的 *
Redis是单线程+多路复用技术<br />
* Redis是串行操作<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283379975.png" />
* 火车站的例子<br />
当1，2，3没有票的时候，不用一直等待买票，可以继续做自己的事情，黄牛买到票就会通知123进行取票<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1641283510456.png" />
* Memcached和Redis区别<br />
* Memcached支持单一数据类型，Redis支持多数据类型 *
Memcached不支持持久化<br />
* Memcached用的多线程+锁的机制，Redis用的是单线程+多路复用程序 ##
End</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_06-11</title>
    <url>/2022/01/04/study/redis/shangguigu_BV1Rv41177Af/06-11/</url>
    <content><![CDATA[<h2 id="redis针对key的基本操作">Redis针对key的基本操作</h2>
<ul>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys * #查找当前库所有库</span><br><span class="line">exists key1 #key1是否存在 1存在；0不存在</span><br><span class="line">type key2 #key2的类型</span><br><span class="line">del key3 #删除key3</span><br><span class="line">unlink key3 #删除key3(选择非阻塞删除。会先从元数据删除，而真正删除是异步删除)</span><br><span class="line">expire key1 10 #设置key1的过期时间，单位秒</span><br><span class="line">ttl key1 #获取key1的剩余存活时间，-2表示key已过期或不存在，-1表示永不过期</span><br><span class="line">select 1 #切换到1号库(redis中有15个库，默认在库1)</span><br><span class="line">dbsize #查找当前redis库中有多少个key</span><br><span class="line">flushdb #清空当前库</span><br><span class="line">flushall #清空所有库</span><br></pre></td></tr></table></figure> ## Redis中常用数据类型 ### 字符串（String）</li>
<li>String是二进制安全的，可以包含jpg图片或序列化的对象</li>
<li>一个Redis中字符串value最多可以只能是512M</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key1 value1</span><br><span class="line">get key1 </span><br><span class="line">set key1 value11 #将覆盖上一个值</span><br><span class="line">append key1 abc #在key1的值追加&quot;abc&quot;</span><br><span class="line">strlen key1 #key值的长度</span><br><span class="line">setnx key1 value #当key不存在时才设置key</span><br><span class="line">incr n1 #将n1的值加一,,如果n1不存在则会创建key n1 并改为1(0+1)</span><br><span class="line">decr n1 #将n1的值减一,如果n1不存在则会创建key n1 并改为-1(0-1)</span><br><span class="line">incrby n1 20 #将n1的值加20，其他同上</span><br><span class="line">decrby n1 20 #将n1的值减20，其他同上</span><br></pre></td></tr></table></figure></li>
<li>redis原子性<br />
incr具有原子性操作<br />
java中的i++不是原子操作<br />
</li>
<li>其他命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mset k1 v1 k2 v2</span><br><span class="line">mget k1 k2 </span><br><span class="line">msetnx k1 v1 k2 v2 #仅当所有的key都不存在时才会进行设置</span><br><span class="line">getrange name 0 3 #截断字符串[0,3]</span><br><span class="line">setrange name 3 123 #从下标[3]开始替换字符串（换成123）</span><br><span class="line">setex k1 20 v1 #设置过期时间为20s</span><br><span class="line">expire k1 30 #设置过期时间为30s</span><br><span class="line">getset k1 123 #获取旧值，并设置一个新值</span><br></pre></td></tr></table></figure></li>
<li>数据结构，SimpleDynamicString，SDS，简单动态字符串，内部结构类似Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384642245.png" /><br />
### 列表 (List)<br />
</li>
<li>单键多值<br />
</li>
<li>底层是双向链表<br />
</li>
<li>从左放 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush k1 v1 v2 v3 #从左边放(从左往右推)</span><br><span class="line">lrange k1 0 -1 #从左边取(v3 v2 v1)</span><br></pre></td></tr></table></figure></li>
<li>lpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642384992243.png" /><br />
</li>
<li>从右放<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpush k2 v1 v2 v3 </span><br></pre></td></tr></table></figure></li>
<li>brpush:<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642385552581.png" /><br />
</li>
<li>lpop/rpop<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop k2 #从左边弹出一个值</span><br><span class="line">lpop k2 2 #从左边弹出两个值，当键没有包含值时，键被删除</span><br></pre></td></tr></table></figure></li>
<li>rpoplpush<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush a a1 a2 a3</span><br><span class="line">rpush b b1 b2 b3</span><br><span class="line">rpoplpush a b #此时a:a1 a2，b:a3 b1 b2 b3</span><br></pre></td></tr></table></figure></li>
<li>lrange <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrange b 1 2 #获取b中下标[1,2]的所有值</span><br><span class="line">lrange b 1 -1 #获取所有值[1,最大下标]的所有值</span><br></pre></td></tr></table></figure></li>
<li>lindex,llen <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex b 1 #直接取第一个下标的元素</span><br><span class="line">llen b #获取列表的长度</span><br></pre></td></tr></table></figure></li>
<li>linsert <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linsert b before b2 myinsert</span><br><span class="line">linsert b after b2 myinsert</span><br><span class="line">#在某个列表的值(如果重复取第一个)的位置之前/之后插入值</span><br></pre></td></tr></table></figure> <img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405713546.png" /></li>
<li>lrem,lset <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem b 2 a #从b列表中，删除两个a（从左往右）</span><br><span class="line">lset b 2 AA #把下标2的值设置为AA</span><br></pre></td></tr></table></figure></li>
<li>list数据结构是一个快速列表，quicklist<br />
当元素较少的时候，会使用连续的内存存储，结构时ziplist，即压缩列表；当数据多的时候会有多个压缩列表，然后会链接到一起(使用双向指针)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405814686.png" />
### 集合(Set)</li>
<li>特点：无序，不重复<br />
</li>
<li>Set:string类型的无序集合，底层是一个value为null的hash表；添加/删除时间复杂度为O(1)</li>
<li>常用命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd k1 v1 v2 v3 v2 v2 v1 #设置集合中的值</span><br><span class="line">smembers k1 #取出集合中的值</span><br><span class="line">sismember k1 v3 #k1是否存在v3，存在返回1，不存在返回0</span><br><span class="line">scard k1 #返回集合中元素的个数</span><br><span class="line">srem k1 v2 v3 #删除集合中的v2和v3</span><br><span class="line">spop k1 #从k1中随机取出一个值</span><br><span class="line">srandmember k1 2 #从k1中随机取出2个值</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smove a k a1 #从a中将a1移动到k中</span><br><span class="line">sinter a k #取a，k的交集</span><br><span class="line">sunion a k #取a，k的并集</span><br><span class="line">sdiff a k #返回两个集合的差集（从集合a中，去除存在集合k中的元素，即a-k）</span><br></pre></td></tr></table></figure></li>
<li>Set数据结构时dict字典，字典使用哈希表实现的 ### 哈希（Hash)</li>
<li>是String类型的field和value的映射表，用来存储对象,类似java中的Map&lt;String,Object&gt;<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642405567709.png" /><br />
</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset user:1001 id 1 #设置(对象)user:1001的id属性值</span><br><span class="line">hset user:1001 name zhangsan </span><br><span class="line">hget user:1001 name #取出user:1001的name</span><br><span class="line">hmset user:1001 id 1 name zhangsan #批量设置（现在hset也可以批量设置了，hmset已弃用）</span><br><span class="line">hexists user:1001 id 1 #判断属性id是否存在</span><br><span class="line">hkeys user:1001 #查看hash结构中的所有filed</span><br><span class="line">hvals user:1001 #查看hash结构中所有value</span><br><span class="line">hincrby user:1001 age 2 #给hash结构的age属性值加2</span><br><span class="line">hsetnx user:1001 age 10 #给hash结构的age属性设置值为10（如果age属性不存在）</span><br></pre></td></tr></table></figure></li>
<li>hash类型数据结构，当field-value长度较短时用的是ziplist，否则使用的是hashtable
### 有序集合(ZSet)</li>
<li>与set很相似，但是是有序的</li>
<li>有序集合的所有元素（成员）都关联一个评分(score)，score用来从最低到最高方式进行排序，成员唯一但评分是重复的</li>
<li>常用命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd topn 100 xiaoming 120 xiaohong 60 xiaochen #添加key并为每个成员添加评分</span><br><span class="line">zadd topn xiaoli 200 </span><br><span class="line">zrange topn 0 -1 #查找出所有成员(按排名由小到大)</span><br><span class="line">zrange topn 0 -1 withscores #从小到大查找所有成员并显示分数</span><br><span class="line">zrangebyscore topn 130 200 #查找所有在130-200的成员</span><br><span class="line">zrevrangebyscore topn 200 130 #从大到小查找所有成员（注意，从大到小时第一个值必须大于等于第二个）</span><br><span class="line">zincrby topn 15 xiaohong #给小红添加15分</span><br><span class="line">zrem topn xiaohong #删除元素</span><br><span class="line">zcount topn 10 200 #统计该集合，分数区间内的元素个数</span><br><span class="line">zrank topn xiaohong #xiaohong的排名，从0开始</span><br></pre></td></tr></table></figure></li>
<li>zset底层数据结构
<ul>
<li>hash结构<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408140352.png" /></li>
<li>跳跃表 给元素value排序，根据score的范围获取元素列表</li>
<li>对比有序链表和跳跃表
<ul>
<li>查找51元素<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408284497.png" /></li>
<li>跳跃表<br />
按图中的顺序查找，查找四次就能找到<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642408430332.png" /></li>
</ul></li>
</ul></li>
<li>End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_12-17</title>
    <url>/2022/01/18/study/redis/shangguigu_BV1Rv41177Af/12-17/</url>
    <content><![CDATA[<h2 id="redis配置文件">Redis配置文件</h2>
<ul>
<li>redis中单位的设置，支持k,kb,m,mb,g,gb，且不区分大小写<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642470299824.png" /></li>
<li>include (包含其他文件，比如公共部分)<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642471413477.png" /><br />
</li>
<li>bind <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 127.0.0.1 ::1 #listens on loopback IPv4 and IPv6 </span><br></pre></td></tr></table></figure>
<ul>
<li>后面这个::1，相当于ipv6版的127.0.0.1。在redis配置文件中，整句表示只允许本地网卡的某个ip连接(但是它并不能指定某个主机连接到redis中。比如本机有两个网卡，两个ip，可以限定只有其中一个ip可以连接)</li>
<li>如果注释掉了/或者bind 0.0.0.0，表示允许所有主机连接</li>
</ul></li>
<li>protected-mode <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected-mode yes </span><br></pre></td></tr></table></figure>
<ul>
<li>设置保护模式为yes，protected是redis本身的一个安全层，这个安全层在同时满足下面三个条件的时候会开启，开启后只有本机可以访问redis
<ul>
<li>protected-mode yes</li>
<li>没有bind指令(bind 0.0.0.0不属于这个条件)</li>
<li>没有设置密码 (没有设置requirepass password)<br />
</li>
</ul></li>
<li>只要上面一个条件不满足，就不会开启保护模式。换言之，只要设置了bind
0.0.0.0或者没有设置bind，且不满足上面三个条件之一，就能够进行远程访问(当然，linux/windows的6379端口要开放)</li>
</ul></li>
<li>tcp-backlog 表示未连接队列总和<br />
</li>
<li>timeout 秒为单位，时间内没操作则断开连接</li>
<li>tcp-keepalive 300 心跳检测，每隔300s检测连接是否存在</li>
<li>pidfile /var/run/redis_6379.pid 将进程号保存到文件中</li>
<li>loglevel
表示日志的级别/debug/verbose/<strong>notice</strong>/warning</li>
<li>logfile "" 设置日志的路径</li>
<li>database 16 默认有16个库</li>
<li>requirepass password 设置密码</li>
<li>maxclients 设置最大连接数</li>
<li>maxmemory 设置最大内存量，达到则会根据移除策略进行移除操作 ##
Redis的发布和订阅</li>
<li>发布订阅，pub/sub，是一种消息通信模式：发送者pub发送消息，订阅器sub接收消息</li>
<li>发布者能发布消息，订阅者可以订阅/接收消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642496809416.png" /><br />
</li>
<li>操作<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe channel1 #客户端A订阅频道 </span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publish channel1 helloly #向频道发送消息</span><br></pre></td></tr></table></figure>
此时订阅channel1频道的客户端就会接收到消息<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642557791117.png" />
## redis新数据类型<br />
### Bitmaps
<ul>
<li><p>进行二进制操作</p></li>
<li><p>可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做<strong>偏移量</strong><br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642560262874.png" /><br />
</p></li>
<li><p>bitcount:统计字符串被设置为1的bit数，这里结果是5</p></li>
<li><p>bitcount u1 0 1 #统计字符串第0个字节到第1个字节1的bit数<br />
(1,6,11,15,19bit值为1)[也就是统计第0到第15位的1的个数]<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u1 1 1</span><br><span class="line">setbit u1 2 1</span><br><span class="line">setbit u1 5 1</span><br><span class="line">setbit u1 9 1</span><br></pre></td></tr></table></figure></p>
<p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setbit u2 0 1</span><br><span class="line">setbit u2 1 1</span><br><span class="line">setbit u2 4 1</span><br><span class="line">setbit u2 9 1</span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1，u2共同位为1的个数，如上1,9都是1，所以返回2，且 bitcount
u1--u2的值为2（第1和第9位为1），其实就是<strong>u1和u2进行&amp;操作</strong><br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bitop and u1-and-u2 u1 u2 </span><br></pre></td></tr></table></figure></p></li>
<li><p>获取u1或u2存在值为1的位的个数，如上结果为8-2=6，结果存在u1-or-u2中，即1，2，5，9，0，4的位
值为1(的字符串)，其实就是<strong>u1和u2进行或操作</strong><br />
</p></li>
<li><p>性能比较，假设有一亿个用户，用户id数值递增，需求是存储每个用户是否活跃。下面是使用hashMap和bitmaps的比较<br />
<img
src="https://raw.githubusercontent.com/lwmfjc/lwmfjc.github.io.resource/main/img/1642562600909.png" /></p></li>
<li><p>bitmaps主要用来进行位操作计算 ### HyperLogLog</p></li>
</ul></li>
<li>解决基数问题<br />
从{1,3,5,5,7,8,8,7,9}找出基数：基数为5，即不重复元素的个数</li>
<li>解决方案
<ul>
<li>mysql中可以用distinct count</li>
<li>redis中可以用hash,set,bitmaps</li>
</ul></li>
<li>使用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pfadd a 1 2 3 4 3 3 3 2 1 6 7</span><br><span class="line">pfcount a #得到基数 6 </span><br><span class="line">pfadd b 1 10 7 15 #基数4</span><br><span class="line">pfmerge c a b #将a，b合并到c</span><br><span class="line">pfcount c #得到基数8</span><br></pre></td></tr></table></figure> ### GEO类型 (geographic)<br />
</li>
<li>基本命令<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geoadd china:city 121.47 31.43 shanghai</span><br><span class="line">geoadd china:city 166.50 29.53 chongqing 114.05 22.52  shenzhen</span><br><span class="line">geoadd china:city 16.38 39.90 beijing </span><br></pre></td></tr></table></figure></li>
<li>不支持南北极，所以有效经度在-180到180度，有效纬度从-85.05xxx度到85.05xxx度</li>
<li>获取坐标值及直线距离 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">geopos china:city beijing #获取beijing经纬度</span><br><span class="line">geodist china:city beijing shenzhen km #获取beijing到shenzhen的直线距离</span><br><span class="line"># 单位有m,km,ft,mi</span><br></pre></td></tr></table></figure></li>
<li>以给定的经纬度为中心，找出某一半径内的元素<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">georadius china:city 110 30 1000 km</span><br></pre></td></tr></table></figure> ## End</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_18</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/18/</url>
    <content><![CDATA[<h2 id="jedis操作redis6">Jedis操作Redis6</h2>
<ul>
<li>插曲:本地项目关联github远程库 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">#-m表示强制重命名</span><br><span class="line">git branch -M main</span><br><span class="line">#使用别名</span><br><span class="line">git remote add origin git@github.com:lwmfjc/jedis_demo.git</span><br><span class="line">#用了-u之后以后可以直接用git push替代整行 </span><br><span class="line">git push -u origin main </span><br></pre></td></tr></table></figure></li>
<li>jedis pom依赖 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>jedis使用 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置密码</span></span><br><span class="line">        DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> </span><br><span class="line">        DefaultJedisClientConfig.builder()</span><br><span class="line">                .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">        <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line">        <span class="comment">//ping</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//返回所有key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;key count: &quot;</span> +</span><br><span class="line">                keys.size());</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;key--:%s---value:%s\n&quot;</span>, </span><br><span class="line">        key, jedis.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;操作list&quot;</span>);</span><br><span class="line">        <span class="comment">//操作list</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;ly-list&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;css&quot;</span>);</span><br><span class="line">        List&lt;String&gt; lrange = jedis.lrange(<span class="string">&quot;ly-list&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : lrange) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作set</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作set&quot;</span>);</span><br><span class="line">        jedis.sadd(<span class="string">&quot;ly-set&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;ly-set&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : smembers) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;value:&quot;</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作hash</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作hash&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;lidian&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;30&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;ly-hash&quot;</span>, <span class="string">&quot;sex&quot;</span>, <span class="string">&quot;man&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; lyHash = jedis.hgetAll(<span class="string">&quot;ly-hash&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : lyHash.keySet()) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + lyHash.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//操作zset</span></span><br><span class="line">        System.out.println(<span class="string">&quot;操作zset&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">100</span>, <span class="string">&quot;xiaohong&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">80</span>, <span class="string">&quot;xiaoli&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;person&quot;</span>, <span class="number">90</span>, <span class="string">&quot;xiaochen&quot;</span>);</span><br><span class="line">        List&lt;String&gt; person = jedis.zrange(<span class="string">&quot;person&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : person) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束操作</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_尚硅谷_19-A</title>
    <url>/2022/01/19/study/redis/shangguigu_BV1Rv41177Af/19-A/</url>
    <content><![CDATA[<h2 id="验证码模拟">验证码模拟</h2>
<ul>
<li>首先需要一个MyRedis单例类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyRedis单例类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJedis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Jedis myJedis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果是空则进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//由于synchronized同步是在条件判断内，所以同步</span></span><br><span class="line">            <span class="comment">//并不会一直都执行，增加了效率</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyJedis.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (myJedis == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//设置密码</span></span><br><span class="line">                    DefaultJedisClientConfig.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> DefaultJedisClientConfig.builder()</span><br><span class="line">                            .password(<span class="string">&quot;hello.lwm&quot;</span>);</span><br><span class="line">                    <span class="type">DefaultJedisClientConfig</span> <span class="variable">config</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">                    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">redis</span>.clients.jedis.Jedis(<span class="string">&quot;192.168.200.200&quot;</span>, <span class="number">6379</span>, config);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> jedis;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myJedis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>redis_尚硅谷</tag>
      </tags>
  </entry>
  <entry>
    <title>p1-</title>
    <url>/2022/05/04/study/yixue/yi-jing-za-shuo/p1-/</url>
    <content><![CDATA[<h2 id="敲门砖">敲门砖</h2>
<ul>
<li>有人说"《易经》是经典中之经典，哲学中之哲学，智慧中之智慧"，这是站在本位文化的立场来推崇《易经》的看法。</li>
<li>在这里先要使大家知道怎样去读《易经》这部书，先从怎样去认识它、怎样去了解它开始。这里提供的仅仅是一块敲门砖而已</li>
</ul>
<h2 id="洁净精微">洁净精微</h2>
<ul>
<li>《礼记》的《五经解》中，提到《易经》这门学问时说：“洁净精微，易教也。”
<ul>
<li>洁净，包括了宗教、哲学的含义，也就是说学了《易经》，他的心理、思想、情绪无论在任何情况下，都会非常宁静，澄洁。</li>
<li>精微，则是科学的，无比的细密精确，所以学易的人，要头脑非常冷静</li>
</ul></li>
<li>”闲坐小窗读周易，不知春去已多时“</li>
<li>《五经解》中说《易经》的流弊：”其失也，贼“：读了易经的人，如不走正路，旁门左道，就贼头贼脑，拿来造反</li>
<li>虞世南：不读《易》不可为将相</li>
</ul>
<h2 id="三易">三易</h2>
<ul>
<li>《周易》是周文王在羑里[yǒu
lǐ]坐牢的时候，研究《易经》的心得记录</li>
<li>一切中国的文化，都源于《易经》</li>
<li>还有另外两种《易经》，为《连山易》和《归藏易》( <strong>guī
cáng/zang 四声，没查到，好像读音都有，暂取cang 二声</strong>)</li>
<li></li>
</ul>
<h2 id="易经的三原则">易经的三原则</h2>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>《易经杂说》-南怀瑾</tag>
      </tags>
  </entry>
</search>
