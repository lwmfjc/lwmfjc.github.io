// ==UserScript==
// @name         双元素切换控制器(自动隐藏)
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  右下角并排圆形箭头按钮，点击立即切换元素显示/隐藏
// @author       You
// @match        http://localhost:1313/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // 配置部分
    const config = {
        buttons: [
            {
                targetClass: 'book-menu',  // 第一个按钮控制的classname
                color: '#4CAF50',        // 绿色按钮
                initialHidden: false    // 初始状态(显示)
            },
            {
                targetClass: 'book-toc', // 第二个按钮控制的classname
                color: '#2196F3',         // 蓝色按钮
                initialHidden: false      // 初始状态(显示)
            }
        ],
        position: {
            bottom: '20px',      // 距离底部距离
            right: '20px',       // 距离右侧距离
            gap: '10px'          // 按钮间距
        },
        autoHide: {
            enabled: true,       // 启用自动隐藏
            hideDelay: 2000,     // 隐藏延迟(毫秒)
            showArea: 80         // 触发显示的区域大小(px)
        }
    };

    // 添加样式
    GM_addStyle(`
        .element-toggle-container {
            position: fixed;
            bottom: ${config.position.bottom};
            right: ${config.position.right};
            display: flex;
            gap: ${config.position.gap};
            z-index: 9999;
            transition: opacity 0.3s ease, transform 0.3s ease;
            opacity: 0;
            transform: translateX(100px);
            pointer-events: none;
        }
        .element-toggle-container.visible {
            opacity: 1;
            transform: translateX(0);
            pointer-events: auto;
        }
        .element-toggle-btn {
            width: 50px;
            height: 50px;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 24px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            user-select: none;
        }
        .element-toggle-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }
        .element-toggle-btn:active {
            transform: translateY(0);
        }
        .element-toggle-btn::after {
            content: "↓";
            display: block;
        }
        .element-toggle-btn[data-hidden="true"]::after {
            content: "↑";
        }
        /* 触发区域 */
        .toggle-buttons-trigger {
            position: fixed;
            bottom: 0;
            right: 0;
            width: ${config.autoHide.showArea}px;
            height: ${config.autoHide.showArea}px;
            z-index: 9998;
            pointer-events: auto;
        }
    `);

    // 创建触发区域
    const triggerArea = document.createElement('div');
    triggerArea.className = 'toggle-buttons-trigger';
    document.body.appendChild(triggerArea);

    // 创建按钮容器
    const container = document.createElement('div');
    container.className = 'element-toggle-container';
    document.body.appendChild(container);

    let hideTimeout = null;

    // 显示按钮
    function showButtons() {
        container.classList.add('visible');
        if (hideTimeout) {
            clearTimeout(hideTimeout);
            hideTimeout = null;
        }
    }

    // 隐藏按钮
    function hideButtons() {
        if (hideTimeout) {
            clearTimeout(hideTimeout);
        }
        hideTimeout = setTimeout(() => {
            container.classList.remove('visible');
        }, config.autoHide.hideDelay);
    }

    // 设置触发区域事件
    triggerArea.addEventListener('mouseenter', showButtons);
    triggerArea.addEventListener('mouseleave', hideButtons);
    container.addEventListener('mouseenter', showButtons);
    container.addEventListener('mouseleave', hideButtons);

    // 初始隐藏按钮
    if (config.autoHide.enabled) {
        hideButtons();
    } else {
        showButtons();
    }

    // 元素显示/隐藏函数
    function toggleElements(className, show) {
        const elements = document.getElementsByClassName(className);
        for (let el of elements) {
            el.style.display = show ? '' : 'none';
        }
    }

    // 创建按钮函数
    function createToggleButton(btnConfig) {
        const btn = document.createElement('button');
        btn.className = 'element-toggle-btn';
        btn.style.background = btnConfig.color;
        btn.title = `切换 ${btnConfig.targetClass} 显示`;

        // 设置初始状态
        btn.setAttribute('data-hidden', btnConfig.initialHidden);
        toggleElements(btnConfig.targetClass, !btnConfig.initialHidden);

        // 点击事件
        btn.addEventListener('click', function() {
            const isHidden = this.getAttribute('data-hidden') === 'true';
            this.setAttribute('data-hidden', !isHidden);
            toggleElements(btnConfig.targetClass, isHidden);
        });

        container.appendChild(btn);
        return btn;
    }

    // 创建所有按钮
    config.buttons.forEach(btnConfig => createToggleButton(btnConfig));

    // 监听DOM变化
    const observer = new MutationObserver(function() {
        const buttons = container.querySelectorAll('.element-toggle-btn');
        buttons.forEach(btn => {
            const isHidden = btn.getAttribute('data-hidden') === 'true';
            const targetClass = config.buttons[Array.from(buttons).indexOf(btn)].targetClass;
            toggleElements(targetClass, !isHidden);
        });
    });

    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
})();